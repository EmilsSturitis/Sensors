
altimeter_stm32f411_blackpill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bee4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000428  0800c088  0800c088  0000d088  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c4b0  0800c4b0  0000e2c8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c4b0  0800c4b0  0000d4b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c4b8  0800c4b8  0000e2c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c4b8  0800c4b8  0000d4b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c4bc  0800c4bc  0000d4bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002c8  20000000  0800c4c0  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001dd8  200002c8  0800c788  0000e2c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200020a0  0800c788  0000f0a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e2c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001183d  00000000  00000000  0000e2f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000325b  00000000  00000000  0001fb35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f28  00000000  00000000  00022d90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b69  00000000  00000000  00023cb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000196d6  00000000  00000000  00024821  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014ec7  00000000  00000000  0003def7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c303  00000000  00000000  00052dbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000df0c1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005104  00000000  00000000  000df104  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  000e4208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002c8 	.word	0x200002c8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c06c 	.word	0x0800c06c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002cc 	.word	0x200002cc
 80001dc:	0800c06c 	.word	0x0800c06c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96a 	b.w	8000ea4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	460c      	mov	r4, r1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d14e      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf4:	4694      	mov	ip, r2
 8000bf6:	458c      	cmp	ip, r1
 8000bf8:	4686      	mov	lr, r0
 8000bfa:	fab2 f282 	clz	r2, r2
 8000bfe:	d962      	bls.n	8000cc6 <__udivmoddi4+0xde>
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0320 	rsb	r3, r2, #32
 8000c06:	4091      	lsls	r1, r2
 8000c08:	fa20 f303 	lsr.w	r3, r0, r3
 8000c0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c10:	4319      	orrs	r1, r3
 8000c12:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1a:	fa1f f68c 	uxth.w	r6, ip
 8000c1e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c26:	fb07 1114 	mls	r1, r7, r4, r1
 8000c2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2e:	fb04 f106 	mul.w	r1, r4, r6
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c3e:	f080 8112 	bcs.w	8000e66 <__udivmoddi4+0x27e>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 810f 	bls.w	8000e66 <__udivmoddi4+0x27e>
 8000c48:	3c02      	subs	r4, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a59      	subs	r1, r3, r1
 8000c4e:	fa1f f38e 	uxth.w	r3, lr
 8000c52:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c56:	fb07 1110 	mls	r1, r7, r0, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb00 f606 	mul.w	r6, r0, r6
 8000c62:	429e      	cmp	r6, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x94>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c6e:	f080 80fc 	bcs.w	8000e6a <__udivmoddi4+0x282>
 8000c72:	429e      	cmp	r6, r3
 8000c74:	f240 80f9 	bls.w	8000e6a <__udivmoddi4+0x282>
 8000c78:	4463      	add	r3, ip
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	1b9b      	subs	r3, r3, r6
 8000c7e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c82:	2100      	movs	r1, #0
 8000c84:	b11d      	cbz	r5, 8000c8e <__udivmoddi4+0xa6>
 8000c86:	40d3      	lsrs	r3, r2
 8000c88:	2200      	movs	r2, #0
 8000c8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d905      	bls.n	8000ca2 <__udivmoddi4+0xba>
 8000c96:	b10d      	cbz	r5, 8000c9c <__udivmoddi4+0xb4>
 8000c98:	e9c5 0100 	strd	r0, r1, [r5]
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e7f5      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000ca2:	fab3 f183 	clz	r1, r3
 8000ca6:	2900      	cmp	r1, #0
 8000ca8:	d146      	bne.n	8000d38 <__udivmoddi4+0x150>
 8000caa:	42a3      	cmp	r3, r4
 8000cac:	d302      	bcc.n	8000cb4 <__udivmoddi4+0xcc>
 8000cae:	4290      	cmp	r0, r2
 8000cb0:	f0c0 80f0 	bcc.w	8000e94 <__udivmoddi4+0x2ac>
 8000cb4:	1a86      	subs	r6, r0, r2
 8000cb6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cba:	2001      	movs	r0, #1
 8000cbc:	2d00      	cmp	r5, #0
 8000cbe:	d0e6      	beq.n	8000c8e <__udivmoddi4+0xa6>
 8000cc0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cc4:	e7e3      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	f040 8090 	bne.w	8000dec <__udivmoddi4+0x204>
 8000ccc:	eba1 040c 	sub.w	r4, r1, ip
 8000cd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd4:	fa1f f78c 	uxth.w	r7, ip
 8000cd8:	2101      	movs	r1, #1
 8000cda:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce2:	fb08 4416 	mls	r4, r8, r6, r4
 8000ce6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cea:	fb07 f006 	mul.w	r0, r7, r6
 8000cee:	4298      	cmp	r0, r3
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x11c>
 8000cf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x11a>
 8000cfc:	4298      	cmp	r0, r3
 8000cfe:	f200 80cd 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000d02:	4626      	mov	r6, r4
 8000d04:	1a1c      	subs	r4, r3, r0
 8000d06:	fa1f f38e 	uxth.w	r3, lr
 8000d0a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d0e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d16:	fb00 f707 	mul.w	r7, r0, r7
 8000d1a:	429f      	cmp	r7, r3
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x148>
 8000d1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d22:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x146>
 8000d28:	429f      	cmp	r7, r3
 8000d2a:	f200 80b0 	bhi.w	8000e8e <__udivmoddi4+0x2a6>
 8000d2e:	4620      	mov	r0, r4
 8000d30:	1bdb      	subs	r3, r3, r7
 8000d32:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d36:	e7a5      	b.n	8000c84 <__udivmoddi4+0x9c>
 8000d38:	f1c1 0620 	rsb	r6, r1, #32
 8000d3c:	408b      	lsls	r3, r1
 8000d3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d42:	431f      	orrs	r7, r3
 8000d44:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d48:	fa04 f301 	lsl.w	r3, r4, r1
 8000d4c:	ea43 030c 	orr.w	r3, r3, ip
 8000d50:	40f4      	lsrs	r4, r6
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	0c38      	lsrs	r0, r7, #16
 8000d58:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d5c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d60:	fa1f fc87 	uxth.w	ip, r7
 8000d64:	fb00 441e 	mls	r4, r0, lr, r4
 8000d68:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d6c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d70:	45a1      	cmp	r9, r4
 8000d72:	fa02 f201 	lsl.w	r2, r2, r1
 8000d76:	d90a      	bls.n	8000d8e <__udivmoddi4+0x1a6>
 8000d78:	193c      	adds	r4, r7, r4
 8000d7a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d7e:	f080 8084 	bcs.w	8000e8a <__udivmoddi4+0x2a2>
 8000d82:	45a1      	cmp	r9, r4
 8000d84:	f240 8081 	bls.w	8000e8a <__udivmoddi4+0x2a2>
 8000d88:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d8c:	443c      	add	r4, r7
 8000d8e:	eba4 0409 	sub.w	r4, r4, r9
 8000d92:	fa1f f983 	uxth.w	r9, r3
 8000d96:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d9a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d9e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da6:	45a4      	cmp	ip, r4
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x1d2>
 8000daa:	193c      	adds	r4, r7, r4
 8000dac:	f103 30ff 	add.w	r0, r3, #4294967295
 8000db0:	d267      	bcs.n	8000e82 <__udivmoddi4+0x29a>
 8000db2:	45a4      	cmp	ip, r4
 8000db4:	d965      	bls.n	8000e82 <__udivmoddi4+0x29a>
 8000db6:	3b02      	subs	r3, #2
 8000db8:	443c      	add	r4, r7
 8000dba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dbe:	fba0 9302 	umull	r9, r3, r0, r2
 8000dc2:	eba4 040c 	sub.w	r4, r4, ip
 8000dc6:	429c      	cmp	r4, r3
 8000dc8:	46ce      	mov	lr, r9
 8000dca:	469c      	mov	ip, r3
 8000dcc:	d351      	bcc.n	8000e72 <__udivmoddi4+0x28a>
 8000dce:	d04e      	beq.n	8000e6e <__udivmoddi4+0x286>
 8000dd0:	b155      	cbz	r5, 8000de8 <__udivmoddi4+0x200>
 8000dd2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dd6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dda:	fa04 f606 	lsl.w	r6, r4, r6
 8000dde:	40cb      	lsrs	r3, r1
 8000de0:	431e      	orrs	r6, r3
 8000de2:	40cc      	lsrs	r4, r1
 8000de4:	e9c5 6400 	strd	r6, r4, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	e750      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000dec:	f1c2 0320 	rsb	r3, r2, #32
 8000df0:	fa20 f103 	lsr.w	r1, r0, r3
 8000df4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dfc:	4094      	lsls	r4, r2
 8000dfe:	430c      	orrs	r4, r1
 8000e00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e04:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e08:	fa1f f78c 	uxth.w	r7, ip
 8000e0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e10:	fb08 3110 	mls	r1, r8, r0, r3
 8000e14:	0c23      	lsrs	r3, r4, #16
 8000e16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e1a:	fb00 f107 	mul.w	r1, r0, r7
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x24c>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e2a:	d22c      	bcs.n	8000e86 <__udivmoddi4+0x29e>
 8000e2c:	4299      	cmp	r1, r3
 8000e2e:	d92a      	bls.n	8000e86 <__udivmoddi4+0x29e>
 8000e30:	3802      	subs	r0, #2
 8000e32:	4463      	add	r3, ip
 8000e34:	1a5b      	subs	r3, r3, r1
 8000e36:	b2a4      	uxth	r4, r4
 8000e38:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e3c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e44:	fb01 f307 	mul.w	r3, r1, r7
 8000e48:	42a3      	cmp	r3, r4
 8000e4a:	d908      	bls.n	8000e5e <__udivmoddi4+0x276>
 8000e4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e50:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e54:	d213      	bcs.n	8000e7e <__udivmoddi4+0x296>
 8000e56:	42a3      	cmp	r3, r4
 8000e58:	d911      	bls.n	8000e7e <__udivmoddi4+0x296>
 8000e5a:	3902      	subs	r1, #2
 8000e5c:	4464      	add	r4, ip
 8000e5e:	1ae4      	subs	r4, r4, r3
 8000e60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e64:	e739      	b.n	8000cda <__udivmoddi4+0xf2>
 8000e66:	4604      	mov	r4, r0
 8000e68:	e6f0      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e6a:	4608      	mov	r0, r1
 8000e6c:	e706      	b.n	8000c7c <__udivmoddi4+0x94>
 8000e6e:	45c8      	cmp	r8, r9
 8000e70:	d2ae      	bcs.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e72:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e76:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e7a:	3801      	subs	r0, #1
 8000e7c:	e7a8      	b.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e7e:	4631      	mov	r1, r6
 8000e80:	e7ed      	b.n	8000e5e <__udivmoddi4+0x276>
 8000e82:	4603      	mov	r3, r0
 8000e84:	e799      	b.n	8000dba <__udivmoddi4+0x1d2>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e7d4      	b.n	8000e34 <__udivmoddi4+0x24c>
 8000e8a:	46d6      	mov	lr, sl
 8000e8c:	e77f      	b.n	8000d8e <__udivmoddi4+0x1a6>
 8000e8e:	4463      	add	r3, ip
 8000e90:	3802      	subs	r0, #2
 8000e92:	e74d      	b.n	8000d30 <__udivmoddi4+0x148>
 8000e94:	4606      	mov	r6, r0
 8000e96:	4623      	mov	r3, r4
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e70f      	b.n	8000cbc <__udivmoddi4+0xd4>
 8000e9c:	3e02      	subs	r6, #2
 8000e9e:	4463      	add	r3, ip
 8000ea0:	e730      	b.n	8000d04 <__udivmoddi4+0x11c>
 8000ea2:	bf00      	nop

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <MS580301_WriteCommand>:
float MS580301_Sea_Level_Pressure = 1013;
/*
 * Private functions
 */
static void MS580301_WriteCommand(MS580301* sensor, uint8_t command)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af02      	add	r7, sp, #8
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	460b      	mov	r3, r1
 8000eb2:	70fb      	strb	r3, [r7, #3]
	HAL_I2C_Master_Transmit(sensor -> hi2c, sensor -> address, &command, 1, HAL_MAX_DELAY);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	6818      	ldr	r0, [r3, #0]
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	791b      	ldrb	r3, [r3, #4]
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	1cfa      	adds	r2, r7, #3
 8000ec0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ec4:	9300      	str	r3, [sp, #0]
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	f001 f90c 	bl	80020e4 <HAL_I2C_Master_Transmit>
}
 8000ecc:	bf00      	nop
 8000ece:	3708      	adds	r7, #8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <MS580301_ReadData>:

static uint16_t MS580301_ReadData(MS580301* sensor, uint8_t command)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b086      	sub	sp, #24
 8000ed8:	af02      	add	r7, sp, #8
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	460b      	mov	r3, r1
 8000ede:	70fb      	strb	r3, [r7, #3]
	uint8_t data[2];
	HAL_I2C_Master_Transmit(sensor->hi2c, sensor-> address, &command, 1, HAL_MAX_DELAY);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	6818      	ldr	r0, [r3, #0]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	791b      	ldrb	r3, [r3, #4]
 8000ee8:	4619      	mov	r1, r3
 8000eea:	1cfa      	adds	r2, r7, #3
 8000eec:	f04f 33ff 	mov.w	r3, #4294967295
 8000ef0:	9300      	str	r3, [sp, #0]
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	f001 f8f6 	bl	80020e4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(sensor->hi2c, sensor-> address, data, 2, HAL_MAX_DELAY);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	6818      	ldr	r0, [r3, #0]
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	791b      	ldrb	r3, [r3, #4]
 8000f00:	4619      	mov	r1, r3
 8000f02:	f107 020c 	add.w	r2, r7, #12
 8000f06:	f04f 33ff 	mov.w	r3, #4294967295
 8000f0a:	9300      	str	r3, [sp, #0]
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	f001 f9e7 	bl	80022e0 <HAL_I2C_Master_Receive>
	return (data[0] << 8) | data[1];
 8000f12:	7b3b      	ldrb	r3, [r7, #12]
 8000f14:	021b      	lsls	r3, r3, #8
 8000f16:	b21a      	sxth	r2, r3
 8000f18:	7b7b      	ldrb	r3, [r7, #13]
 8000f1a:	b21b      	sxth	r3, r3
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	b21b      	sxth	r3, r3
 8000f20:	b29b      	uxth	r3, r3
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3710      	adds	r7, #16
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <MS580301_Init>:

// Public functions

void MS580301_Init(MS580301* sensor, I2C_HandleTypeDef* hi2c)
{
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	b082      	sub	sp, #8
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	6078      	str	r0, [r7, #4]
 8000f32:	6039      	str	r1, [r7, #0]
	sensor->hi2c = hi2c;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	683a      	ldr	r2, [r7, #0]
 8000f38:	601a      	str	r2, [r3, #0]
	sensor->address = MS580301_I2C_ADDRESS;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2277      	movs	r2, #119	@ 0x77
 8000f3e:	711a      	strb	r2, [r3, #4]
	MS580301_Reset(sensor);
 8000f40:	6878      	ldr	r0, [r7, #4]
 8000f42:	f000 f804 	bl	8000f4e <MS580301_Reset>
}
 8000f46:	bf00      	nop
 8000f48:	3708      	adds	r7, #8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}

08000f4e <MS580301_Reset>:
	sensor->C6 = (float)coefficients[5];
}


void MS580301_Reset(MS580301* sensor)
{
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b082      	sub	sp, #8
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	6078      	str	r0, [r7, #4]
	MS580301_WriteCommand(sensor, 0x1E);
 8000f56:	211e      	movs	r1, #30
 8000f58:	6878      	ldr	r0, [r7, #4]
 8000f5a:	f7ff ffa5 	bl	8000ea8 <MS580301_WriteCommand>
	HAL_Delay(10);
 8000f5e:	200a      	movs	r0, #10
 8000f60:	f000 fc8e 	bl	8001880 <HAL_Delay>
}
 8000f64:	bf00      	nop
 8000f66:	3708      	adds	r7, #8
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <MS580301_ReadSensorData>:



void MS580301_ReadSensorData(MS580301* sensor, uint32_t* pressure, uint32_t* temperature)
{
 8000f6c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000f70:	b08c      	sub	sp, #48	@ 0x30
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	60f8      	str	r0, [r7, #12]
 8000f76:	60b9      	str	r1, [r7, #8]
 8000f78:	607a      	str	r2, [r7, #4]
	//read temperature
	MS580301_WriteCommand(sensor, 0x48);
 8000f7a:	2148      	movs	r1, #72	@ 0x48
 8000f7c:	68f8      	ldr	r0, [r7, #12]
 8000f7e:	f7ff ff93 	bl	8000ea8 <MS580301_WriteCommand>
	HAL_Delay(10);
 8000f82:	200a      	movs	r0, #10
 8000f84:	f000 fc7c 	bl	8001880 <HAL_Delay>
	uint32_t rawTemperature = MS580301_ReadData(sensor, 0x00);
 8000f88:	2100      	movs	r1, #0
 8000f8a:	68f8      	ldr	r0, [r7, #12]
 8000f8c:	f7ff ffa2 	bl	8000ed4 <MS580301_ReadData>
 8000f90:	4603      	mov	r3, r0
 8000f92:	61fb      	str	r3, [r7, #28]

	// read pressure
	MS580301_WriteCommand(sensor, 0x58);
 8000f94:	2158      	movs	r1, #88	@ 0x58
 8000f96:	68f8      	ldr	r0, [r7, #12]
 8000f98:	f7ff ff86 	bl	8000ea8 <MS580301_WriteCommand>
	HAL_Delay(10);
 8000f9c:	200a      	movs	r0, #10
 8000f9e:	f000 fc6f 	bl	8001880 <HAL_Delay>
	uint32_t rawPressure = MS580301_ReadData(sensor, 0x00);
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	68f8      	ldr	r0, [r7, #12]
 8000fa6:	f7ff ff95 	bl	8000ed4 <MS580301_ReadData>
 8000faa:	4603      	mov	r3, r0
 8000fac:	61bb      	str	r3, [r7, #24]




// Calculate compensated temperature and pressure
int32_t dT = (int32_t)rawTemperature - ((int32_t)sensor ->c [5] << 8);
 8000fae:	69fa      	ldr	r2, [r7, #28]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	8a1b      	ldrh	r3, [r3, #16]
 8000fb4:	021b      	lsls	r3, r3, #8
 8000fb6:	1ad3      	subs	r3, r2, r3
 8000fb8:	617b      	str	r3, [r7, #20]
int32_t offset1 = ((int32_t)sensor -> c[2] << 16) + ((int32_t) sensor -> c[4] * dT)  /128;
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	895b      	ldrh	r3, [r3, #10]
 8000fbe:	041a      	lsls	r2, r3, #16
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	89db      	ldrh	r3, [r3, #14]
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	fb01 f303 	mul.w	r3, r1, r3
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	da00      	bge.n	8000fd2 <MS580301_ReadSensorData+0x66>
 8000fd0:	337f      	adds	r3, #127	@ 0x7f
 8000fd2:	11db      	asrs	r3, r3, #7
 8000fd4:	4413      	add	r3, r2
 8000fd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
int32_t sens = ((int32_t)sensor ->c[1] << 15) + ((int32_t)sensor -> c[3] * dT) / 256;
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	891b      	ldrh	r3, [r3, #8]
 8000fdc:	03da      	lsls	r2, r3, #15
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	899b      	ldrh	r3, [r3, #12]
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	fb01 f303 	mul.w	r3, r1, r3
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	da00      	bge.n	8000ff0 <MS580301_ReadSensorData+0x84>
 8000fee:	33ff      	adds	r3, #255	@ 0xff
 8000ff0:	121b      	asrs	r3, r3, #8
 8000ff2:	4413      	add	r3, r2
 8000ff4:	62bb      	str	r3, [r7, #40]	@ 0x28
*temperature = 2000 + ((int32_t)dT * sensor ->c[6]) / 8388608;
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	8a5b      	ldrh	r3, [r3, #18]
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	fb02 f303 	mul.w	r3, r2, r3
 8001002:	2b00      	cmp	r3, #0
 8001004:	da02      	bge.n	800100c <MS580301_ReadSensorData+0xa0>
 8001006:	4a49      	ldr	r2, [pc, #292]	@ (800112c <MS580301_ReadSensorData+0x1c0>)
 8001008:	441a      	add	r2, r3
 800100a:	4613      	mov	r3, r2
 800100c:	15db      	asrs	r3, r3, #23
 800100e:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8001012:	461a      	mov	r2, r3
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	601a      	str	r2, [r3, #0]
int32_t t2 = 0;
 8001018:	2300      	movs	r3, #0
 800101a:	613b      	str	r3, [r7, #16]
int32_t offset2 = 0;
 800101c:	2300      	movs	r3, #0
 800101e:	627b      	str	r3, [r7, #36]	@ 0x24
int32_t sens2 = 0;
 8001020:	2300      	movs	r3, #0
 8001022:	623b      	str	r3, [r7, #32]
if (*temperature < 2000)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800102c:	d26e      	bcs.n	800110c <MS580301_ReadSensorData+0x1a0>
	{
		t2 = (int32_t)dT * dT / 2147483648;
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	fb03 f303 	mul.w	r3, r3, r3
 8001034:	17da      	asrs	r2, r3, #31
 8001036:	4698      	mov	r8, r3
 8001038:	4691      	mov	r9, r2
 800103a:	4642      	mov	r2, r8
 800103c:	464b      	mov	r3, r9
 800103e:	2b00      	cmp	r3, #0
 8001040:	da06      	bge.n	8001050 <MS580301_ReadSensorData+0xe4>
 8001042:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8001046:	1854      	adds	r4, r2, r1
 8001048:	f143 0500 	adc.w	r5, r3, #0
 800104c:	4622      	mov	r2, r4
 800104e:	462b      	mov	r3, r5
 8001050:	f04f 0000 	mov.w	r0, #0
 8001054:	f04f 0100 	mov.w	r1, #0
 8001058:	0fd0      	lsrs	r0, r2, #31
 800105a:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800105e:	17d9      	asrs	r1, r3, #31
 8001060:	4602      	mov	r2, r0
 8001062:	460b      	mov	r3, r1
 8001064:	4613      	mov	r3, r2
 8001066:	613b      	str	r3, [r7, #16]
		offset2 = 5* ((*temperature -2000) * (*temperature - 2000)) / 2;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	4613      	mov	r3, r2
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	4413      	add	r3, r2
 8001072:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 8001076:	3b10      	subs	r3, #16
 8001078:	687a      	ldr	r2, [r7, #4]
 800107a:	6812      	ldr	r2, [r2, #0]
 800107c:	f5a2 62fa 	sub.w	r2, r2, #2000	@ 0x7d0
 8001080:	fb02 f303 	mul.w	r3, r2, r3
 8001084:	085b      	lsrs	r3, r3, #1
 8001086:	627b      	str	r3, [r7, #36]	@ 0x24
		sens2 = 5 * ((*temperature - 2000) * (*temperature - 2000)) / 8;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	4613      	mov	r3, r2
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	4413      	add	r3, r2
 8001092:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 8001096:	3b10      	subs	r3, #16
 8001098:	687a      	ldr	r2, [r7, #4]
 800109a:	6812      	ldr	r2, [r2, #0]
 800109c:	f5a2 62fa 	sub.w	r2, r2, #2000	@ 0x7d0
 80010a0:	fb02 f303 	mul.w	r3, r2, r3
 80010a4:	08db      	lsrs	r3, r3, #3
 80010a6:	623b      	str	r3, [r7, #32]
		if (*temperature < -1500)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a20      	ldr	r2, [pc, #128]	@ (8001130 <MS580301_ReadSensorData+0x1c4>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d81e      	bhi.n	80010f0 <MS580301_ReadSensorData+0x184>
		{
			offset2 = offset2 + 7 * ((*temperature + 1500) * (*temperature + 1500));
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	4613      	mov	r3, r2
 80010b8:	00db      	lsls	r3, r3, #3
 80010ba:	1a9b      	subs	r3, r3, r2
 80010bc:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 80010c0:	3304      	adds	r3, #4
 80010c2:	687a      	ldr	r2, [r7, #4]
 80010c4:	6812      	ldr	r2, [r2, #0]
 80010c6:	f202 52dc 	addw	r2, r2, #1500	@ 0x5dc
 80010ca:	fb03 f202 	mul.w	r2, r3, r2
 80010ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010d0:	4413      	add	r3, r2
 80010d2:	627b      	str	r3, [r7, #36]	@ 0x24
			sens2 = sens2 + 4 * ((*temperature + 1500) * (*temperature + 1500));
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 80010dc:	687a      	ldr	r2, [r7, #4]
 80010de:	6812      	ldr	r2, [r2, #0]
 80010e0:	f202 52dc 	addw	r2, r2, #1500	@ 0x5dc
 80010e4:	fb02 f303 	mul.w	r3, r2, r3
 80010e8:	009a      	lsls	r2, r3, #2
 80010ea:	6a3b      	ldr	r3, [r7, #32]
 80010ec:	4413      	add	r3, r2
 80010ee:	623b      	str	r3, [r7, #32]
		}
		*temperature = *temperature - t2;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	1ad2      	subs	r2, r2, r3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	601a      	str	r2, [r3, #0]
		offset1 = offset1 - offset2;
 80010fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80010fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	62fb      	str	r3, [r7, #44]	@ 0x2c
		sens = sens - sens2;
 8001104:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001106:	6a3b      	ldr	r3, [r7, #32]
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	62bb      	str	r3, [r7, #40]	@ 0x28
	}
	*pressure = ((rawPressure * sens) / 2097152 - offset1) / 32768;
 800110c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800110e:	69ba      	ldr	r2, [r7, #24]
 8001110:	fb02 f303 	mul.w	r3, r2, r3
 8001114:	0d5a      	lsrs	r2, r3, #21
 8001116:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	0bda      	lsrs	r2, r3, #15
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	601a      	str	r2, [r3, #0]
}
 8001120:	bf00      	nop
 8001122:	3730      	adds	r7, #48	@ 0x30
 8001124:	46bd      	mov	sp, r7
 8001126:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800112a:	bf00      	nop
 800112c:	007fffff 	.word	0x007fffff
 8001130:	fffffa23 	.word	0xfffffa23

08001134 <MS580301_CalculateAltitude>:


//Calculations

float MS580301_CalculateAltitude(MS580301* sensor, uint32_t pressure)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	6039      	str	r1, [r7, #0]
	float altitude = (1 - powf((float)pressure / MS580301_Sea_Level_Pressure, 0.1903f)) * 44330.0f;
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	ee07 3a90 	vmov	s15, r3
 8001144:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001148:	4b0f      	ldr	r3, [pc, #60]	@ (8001188 <MS580301_CalculateAltitude+0x54>)
 800114a:	edd3 7a00 	vldr	s15, [r3]
 800114e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001152:	eddf 0a0e 	vldr	s1, [pc, #56]	@ 800118c <MS580301_CalculateAltitude+0x58>
 8001156:	eeb0 0a66 	vmov.f32	s0, s13
 800115a:	f00a fbbd 	bl	800b8d8 <powf>
 800115e:	eef0 7a40 	vmov.f32	s15, s0
 8001162:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001166:	ee77 7a67 	vsub.f32	s15, s14, s15
 800116a:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8001190 <MS580301_CalculateAltitude+0x5c>
 800116e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001172:	edc7 7a03 	vstr	s15, [r7, #12]
	//float altitude = (1 - powf((float)pressure / MS580301_Sea_Level_Pressure));
	return altitude;
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	ee07 3a90 	vmov	s15, r3
}
 800117c:	eeb0 0a67 	vmov.f32	s0, s15
 8001180:	3710      	adds	r7, #16
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	20000000 	.word	0x20000000
 800118c:	3e42de01 	.word	0x3e42de01
 8001190:	472d2a00 	.word	0x472d2a00

08001194 <main>:
static void MX_GPIO_Init(void);
static void MX_I2C1_Init(void);


int main(void)
{
 8001194:	b5b0      	push	{r4, r5, r7, lr}
 8001196:	b0a6      	sub	sp, #152	@ 0x98
 8001198:	af04      	add	r7, sp, #16

  HAL_Init();
 800119a:	f000 faff 	bl	800179c <HAL_Init>
  SystemClock_Config();
 800119e:	f000 f851 	bl	8001244 <SystemClock_Config>
  MX_GPIO_Init();
 80011a2:	f000 f8e7 	bl	8001374 <MX_GPIO_Init>
  MX_I2C1_Init();
 80011a6:	f000 f8b7 	bl	8001318 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 80011aa:	f007 f829 	bl	8008200 <MX_USB_DEVICE_Init>

// Sensor config
  MS580301_Init(&ms5803, &hi2c1);
 80011ae:	491f      	ldr	r1, [pc, #124]	@ (800122c <main+0x98>)
 80011b0:	481f      	ldr	r0, [pc, #124]	@ (8001230 <main+0x9c>)
 80011b2:	f7ff feba 	bl	8000f2a <MS580301_Init>
uint32_t timerLed;

  while (1)
  {

	  MS580301_ReadSensorData(&ms5803, &pressure, &temperature);
 80011b6:	4a1f      	ldr	r2, [pc, #124]	@ (8001234 <main+0xa0>)
 80011b8:	491f      	ldr	r1, [pc, #124]	@ (8001238 <main+0xa4>)
 80011ba:	481d      	ldr	r0, [pc, #116]	@ (8001230 <main+0x9c>)
 80011bc:	f7ff fed6 	bl	8000f6c <MS580301_ReadSensorData>
	  float altitude = MS580301_CalculateAltitude(&ms5803, pressure);
 80011c0:	4b1d      	ldr	r3, [pc, #116]	@ (8001238 <main+0xa4>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4619      	mov	r1, r3
 80011c6:	481a      	ldr	r0, [pc, #104]	@ (8001230 <main+0x9c>)
 80011c8:	f7ff ffb4 	bl	8001134 <MS580301_CalculateAltitude>
 80011cc:	ee07 0a90 	vmov	s15, r0
 80011d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011d4:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
	  char buffer[64];
	  snprintf(buffer, 64, "Pressure: %lu Pa, Temperature: %lu mdegc, Altitude: %.2f m\r\n", pressure, temperature, altitude);
 80011d8:	4b17      	ldr	r3, [pc, #92]	@ (8001238 <main+0xa4>)
 80011da:	681d      	ldr	r5, [r3, #0]
 80011dc:	4b15      	ldr	r3, [pc, #84]	@ (8001234 <main+0xa0>)
 80011de:	681c      	ldr	r4, [r3, #0]
 80011e0:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 80011e4:	f7ff f9b8 	bl	8000558 <__aeabi_f2d>
 80011e8:	4602      	mov	r2, r0
 80011ea:	460b      	mov	r3, r1
 80011ec:	1d38      	adds	r0, r7, #4
 80011ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80011f2:	9400      	str	r4, [sp, #0]
 80011f4:	462b      	mov	r3, r5
 80011f6:	4a11      	ldr	r2, [pc, #68]	@ (800123c <main+0xa8>)
 80011f8:	2140      	movs	r1, #64	@ 0x40
 80011fa:	f008 fa2b 	bl	8009654 <sniprintf>
	  CDC_Transmit_FS((uint8_t*)buffer, strlen(buffer));
 80011fe:	1d3b      	adds	r3, r7, #4
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff f83d 	bl	8000280 <strlen>
 8001206:	4603      	mov	r3, r0
 8001208:	b29a      	uxth	r2, r3
 800120a:	1d3b      	adds	r3, r7, #4
 800120c:	4611      	mov	r1, r2
 800120e:	4618      	mov	r0, r3
 8001210:	f007 f8b4 	bl	800837c <CDC_Transmit_FS>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001214:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001218:	4809      	ldr	r0, [pc, #36]	@ (8001240 <main+0xac>)
 800121a:	f000 fe04 	bl	8001e26 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 800121e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001222:	f000 fb2d 	bl	8001880 <HAL_Delay>
  {
 8001226:	bf00      	nop
 8001228:	e7c5      	b.n	80011b6 <main+0x22>
 800122a:	bf00      	nop
 800122c:	200002e4 	.word	0x200002e4
 8001230:	20000338 	.word	0x20000338
 8001234:	20000364 	.word	0x20000364
 8001238:	20000360 	.word	0x20000360
 800123c:	0800c088 	.word	0x0800c088
 8001240:	40020800 	.word	0x40020800

08001244 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b094      	sub	sp, #80	@ 0x50
 8001248:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800124a:	f107 0320 	add.w	r3, r7, #32
 800124e:	2230      	movs	r2, #48	@ 0x30
 8001250:	2100      	movs	r1, #0
 8001252:	4618      	mov	r0, r3
 8001254:	f008 fa75 	bl	8009742 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001258:	f107 030c 	add.w	r3, r7, #12
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	605a      	str	r2, [r3, #4]
 8001262:	609a      	str	r2, [r3, #8]
 8001264:	60da      	str	r2, [r3, #12]
 8001266:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001268:	2300      	movs	r3, #0
 800126a:	60bb      	str	r3, [r7, #8]
 800126c:	4b28      	ldr	r3, [pc, #160]	@ (8001310 <SystemClock_Config+0xcc>)
 800126e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001270:	4a27      	ldr	r2, [pc, #156]	@ (8001310 <SystemClock_Config+0xcc>)
 8001272:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001276:	6413      	str	r3, [r2, #64]	@ 0x40
 8001278:	4b25      	ldr	r3, [pc, #148]	@ (8001310 <SystemClock_Config+0xcc>)
 800127a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800127c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001280:	60bb      	str	r3, [r7, #8]
 8001282:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001284:	2300      	movs	r3, #0
 8001286:	607b      	str	r3, [r7, #4]
 8001288:	4b22      	ldr	r3, [pc, #136]	@ (8001314 <SystemClock_Config+0xd0>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a21      	ldr	r2, [pc, #132]	@ (8001314 <SystemClock_Config+0xd0>)
 800128e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001292:	6013      	str	r3, [r2, #0]
 8001294:	4b1f      	ldr	r3, [pc, #124]	@ (8001314 <SystemClock_Config+0xd0>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800129c:	607b      	str	r3, [r7, #4]
 800129e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012a0:	2301      	movs	r3, #1
 80012a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012a4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80012a8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012aa:	2302      	movs	r3, #2
 80012ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012ae:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80012b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 80012b4:	230f      	movs	r3, #15
 80012b6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 80012b8:	2390      	movs	r3, #144	@ 0x90
 80012ba:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012bc:	2302      	movs	r3, #2
 80012be:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80012c0:	2305      	movs	r3, #5
 80012c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012c4:	f107 0320 	add.w	r3, r7, #32
 80012c8:	4618      	mov	r0, r3
 80012ca:	f003 f813 	bl	80042f4 <HAL_RCC_OscConfig>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80012d4:	f000 f8ae 	bl	8001434 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012d8:	230f      	movs	r3, #15
 80012da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80012dc:	2301      	movs	r3, #1
 80012de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012e0:	2300      	movs	r3, #0
 80012e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012e4:	2300      	movs	r3, #0
 80012e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012e8:	2300      	movs	r3, #0
 80012ea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012ec:	f107 030c 	add.w	r3, r7, #12
 80012f0:	2100      	movs	r1, #0
 80012f2:	4618      	mov	r0, r3
 80012f4:	f003 fa76 	bl	80047e4 <HAL_RCC_ClockConfig>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80012fe:	f000 f899 	bl	8001434 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8001302:	f003 fb55 	bl	80049b0 <HAL_RCC_EnableCSS>
}
 8001306:	bf00      	nop
 8001308:	3750      	adds	r7, #80	@ 0x50
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	40023800 	.word	0x40023800
 8001314:	40007000 	.word	0x40007000

08001318 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800131c:	4b12      	ldr	r3, [pc, #72]	@ (8001368 <MX_I2C1_Init+0x50>)
 800131e:	4a13      	ldr	r2, [pc, #76]	@ (800136c <MX_I2C1_Init+0x54>)
 8001320:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001322:	4b11      	ldr	r3, [pc, #68]	@ (8001368 <MX_I2C1_Init+0x50>)
 8001324:	4a12      	ldr	r2, [pc, #72]	@ (8001370 <MX_I2C1_Init+0x58>)
 8001326:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001328:	4b0f      	ldr	r3, [pc, #60]	@ (8001368 <MX_I2C1_Init+0x50>)
 800132a:	2200      	movs	r2, #0
 800132c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800132e:	4b0e      	ldr	r3, [pc, #56]	@ (8001368 <MX_I2C1_Init+0x50>)
 8001330:	2200      	movs	r2, #0
 8001332:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001334:	4b0c      	ldr	r3, [pc, #48]	@ (8001368 <MX_I2C1_Init+0x50>)
 8001336:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800133a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800133c:	4b0a      	ldr	r3, [pc, #40]	@ (8001368 <MX_I2C1_Init+0x50>)
 800133e:	2200      	movs	r2, #0
 8001340:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001342:	4b09      	ldr	r3, [pc, #36]	@ (8001368 <MX_I2C1_Init+0x50>)
 8001344:	2200      	movs	r2, #0
 8001346:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001348:	4b07      	ldr	r3, [pc, #28]	@ (8001368 <MX_I2C1_Init+0x50>)
 800134a:	2200      	movs	r2, #0
 800134c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800134e:	4b06      	ldr	r3, [pc, #24]	@ (8001368 <MX_I2C1_Init+0x50>)
 8001350:	2200      	movs	r2, #0
 8001352:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001354:	4804      	ldr	r0, [pc, #16]	@ (8001368 <MX_I2C1_Init+0x50>)
 8001356:	f000 fd81 	bl	8001e5c <HAL_I2C_Init>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001360:	f000 f868 	bl	8001434 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001364:	bf00      	nop
 8001366:	bd80      	pop	{r7, pc}
 8001368:	200002e4 	.word	0x200002e4
 800136c:	40005400 	.word	0x40005400
 8001370:	000186a0 	.word	0x000186a0

08001374 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b08a      	sub	sp, #40	@ 0x28
 8001378:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800137a:	f107 0314 	add.w	r3, r7, #20
 800137e:	2200      	movs	r2, #0
 8001380:	601a      	str	r2, [r3, #0]
 8001382:	605a      	str	r2, [r3, #4]
 8001384:	609a      	str	r2, [r3, #8]
 8001386:	60da      	str	r2, [r3, #12]
 8001388:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	613b      	str	r3, [r7, #16]
 800138e:	4b27      	ldr	r3, [pc, #156]	@ (800142c <MX_GPIO_Init+0xb8>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001392:	4a26      	ldr	r2, [pc, #152]	@ (800142c <MX_GPIO_Init+0xb8>)
 8001394:	f043 0304 	orr.w	r3, r3, #4
 8001398:	6313      	str	r3, [r2, #48]	@ 0x30
 800139a:	4b24      	ldr	r3, [pc, #144]	@ (800142c <MX_GPIO_Init+0xb8>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139e:	f003 0304 	and.w	r3, r3, #4
 80013a2:	613b      	str	r3, [r7, #16]
 80013a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013a6:	2300      	movs	r3, #0
 80013a8:	60fb      	str	r3, [r7, #12]
 80013aa:	4b20      	ldr	r3, [pc, #128]	@ (800142c <MX_GPIO_Init+0xb8>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ae:	4a1f      	ldr	r2, [pc, #124]	@ (800142c <MX_GPIO_Init+0xb8>)
 80013b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013b6:	4b1d      	ldr	r3, [pc, #116]	@ (800142c <MX_GPIO_Init+0xb8>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013be:	60fb      	str	r3, [r7, #12]
 80013c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c2:	2300      	movs	r3, #0
 80013c4:	60bb      	str	r3, [r7, #8]
 80013c6:	4b19      	ldr	r3, [pc, #100]	@ (800142c <MX_GPIO_Init+0xb8>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ca:	4a18      	ldr	r2, [pc, #96]	@ (800142c <MX_GPIO_Init+0xb8>)
 80013cc:	f043 0301 	orr.w	r3, r3, #1
 80013d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013d2:	4b16      	ldr	r3, [pc, #88]	@ (800142c <MX_GPIO_Init+0xb8>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d6:	f003 0301 	and.w	r3, r3, #1
 80013da:	60bb      	str	r3, [r7, #8]
 80013dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013de:	2300      	movs	r3, #0
 80013e0:	607b      	str	r3, [r7, #4]
 80013e2:	4b12      	ldr	r3, [pc, #72]	@ (800142c <MX_GPIO_Init+0xb8>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e6:	4a11      	ldr	r2, [pc, #68]	@ (800142c <MX_GPIO_Init+0xb8>)
 80013e8:	f043 0302 	orr.w	r3, r3, #2
 80013ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ee:	4b0f      	ldr	r3, [pc, #60]	@ (800142c <MX_GPIO_Init+0xb8>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f2:	f003 0302 	and.w	r3, r3, #2
 80013f6:	607b      	str	r3, [r7, #4]
 80013f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80013fa:	2200      	movs	r2, #0
 80013fc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001400:	480b      	ldr	r0, [pc, #44]	@ (8001430 <MX_GPIO_Init+0xbc>)
 8001402:	f000 fcf7 	bl	8001df4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001406:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800140a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800140c:	2301      	movs	r3, #1
 800140e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001410:	2300      	movs	r3, #0
 8001412:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001414:	2300      	movs	r3, #0
 8001416:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001418:	f107 0314 	add.w	r3, r7, #20
 800141c:	4619      	mov	r1, r3
 800141e:	4804      	ldr	r0, [pc, #16]	@ (8001430 <MX_GPIO_Init+0xbc>)
 8001420:	f000 fb64 	bl	8001aec <HAL_GPIO_Init>

}
 8001424:	bf00      	nop
 8001426:	3728      	adds	r7, #40	@ 0x28
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	40023800 	.word	0x40023800
 8001430:	40020800 	.word	0x40020800

08001434 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001438:	b672      	cpsid	i
}
 800143a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800143c:	bf00      	nop
 800143e:	e7fd      	b.n	800143c <Error_Handler+0x8>

08001440 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	607b      	str	r3, [r7, #4]
 800144a:	4b10      	ldr	r3, [pc, #64]	@ (800148c <HAL_MspInit+0x4c>)
 800144c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800144e:	4a0f      	ldr	r2, [pc, #60]	@ (800148c <HAL_MspInit+0x4c>)
 8001450:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001454:	6453      	str	r3, [r2, #68]	@ 0x44
 8001456:	4b0d      	ldr	r3, [pc, #52]	@ (800148c <HAL_MspInit+0x4c>)
 8001458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800145a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800145e:	607b      	str	r3, [r7, #4]
 8001460:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	603b      	str	r3, [r7, #0]
 8001466:	4b09      	ldr	r3, [pc, #36]	@ (800148c <HAL_MspInit+0x4c>)
 8001468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800146a:	4a08      	ldr	r2, [pc, #32]	@ (800148c <HAL_MspInit+0x4c>)
 800146c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001470:	6413      	str	r3, [r2, #64]	@ 0x40
 8001472:	4b06      	ldr	r3, [pc, #24]	@ (800148c <HAL_MspInit+0x4c>)
 8001474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001476:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800147a:	603b      	str	r3, [r7, #0]
 800147c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800147e:	bf00      	nop
 8001480:	370c      	adds	r7, #12
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	40023800 	.word	0x40023800

08001490 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b08a      	sub	sp, #40	@ 0x28
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001498:	f107 0314 	add.w	r3, r7, #20
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	605a      	str	r2, [r3, #4]
 80014a2:	609a      	str	r2, [r3, #8]
 80014a4:	60da      	str	r2, [r3, #12]
 80014a6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a19      	ldr	r2, [pc, #100]	@ (8001514 <HAL_I2C_MspInit+0x84>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d12b      	bne.n	800150a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	613b      	str	r3, [r7, #16]
 80014b6:	4b18      	ldr	r3, [pc, #96]	@ (8001518 <HAL_I2C_MspInit+0x88>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ba:	4a17      	ldr	r2, [pc, #92]	@ (8001518 <HAL_I2C_MspInit+0x88>)
 80014bc:	f043 0302 	orr.w	r3, r3, #2
 80014c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014c2:	4b15      	ldr	r3, [pc, #84]	@ (8001518 <HAL_I2C_MspInit+0x88>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	613b      	str	r3, [r7, #16]
 80014cc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80014ce:	23c0      	movs	r3, #192	@ 0xc0
 80014d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014d2:	2312      	movs	r3, #18
 80014d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d6:	2300      	movs	r3, #0
 80014d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014da:	2303      	movs	r3, #3
 80014dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014de:	2304      	movs	r3, #4
 80014e0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014e2:	f107 0314 	add.w	r3, r7, #20
 80014e6:	4619      	mov	r1, r3
 80014e8:	480c      	ldr	r0, [pc, #48]	@ (800151c <HAL_I2C_MspInit+0x8c>)
 80014ea:	f000 faff 	bl	8001aec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	60fb      	str	r3, [r7, #12]
 80014f2:	4b09      	ldr	r3, [pc, #36]	@ (8001518 <HAL_I2C_MspInit+0x88>)
 80014f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f6:	4a08      	ldr	r2, [pc, #32]	@ (8001518 <HAL_I2C_MspInit+0x88>)
 80014f8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80014fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80014fe:	4b06      	ldr	r3, [pc, #24]	@ (8001518 <HAL_I2C_MspInit+0x88>)
 8001500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001502:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800150a:	bf00      	nop
 800150c:	3728      	adds	r7, #40	@ 0x28
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	40005400 	.word	0x40005400
 8001518:	40023800 	.word	0x40023800
 800151c:	40020400 	.word	0x40020400

08001520 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001524:	f003 fb36 	bl	8004b94 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001528:	bf00      	nop
 800152a:	e7fd      	b.n	8001528 <NMI_Handler+0x8>

0800152c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001530:	bf00      	nop
 8001532:	e7fd      	b.n	8001530 <HardFault_Handler+0x4>

08001534 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001538:	bf00      	nop
 800153a:	e7fd      	b.n	8001538 <MemManage_Handler+0x4>

0800153c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001540:	bf00      	nop
 8001542:	e7fd      	b.n	8001540 <BusFault_Handler+0x4>

08001544 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001548:	bf00      	nop
 800154a:	e7fd      	b.n	8001548 <UsageFault_Handler+0x4>

0800154c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001550:	bf00      	nop
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr

0800155a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800155a:	b480      	push	{r7}
 800155c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800155e:	bf00      	nop
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800156c:	bf00      	nop
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr

08001576 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001576:	b580      	push	{r7, lr}
 8001578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800157a:	f000 f961 	bl	8001840 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800157e:	bf00      	nop
 8001580:	bd80      	pop	{r7, pc}
	...

08001584 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001588:	4802      	ldr	r0, [pc, #8]	@ (8001594 <OTG_FS_IRQHandler+0x10>)
 800158a:	f001 fda5 	bl	80030d8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800158e:	bf00      	nop
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	20001850 	.word	0x20001850

08001598 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  return 1;
 800159c:	2301      	movs	r3, #1
}
 800159e:	4618      	mov	r0, r3
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr

080015a8 <_kill>:

int _kill(int pid, int sig)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80015b2:	f008 f919 	bl	80097e8 <__errno>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2216      	movs	r2, #22
 80015ba:	601a      	str	r2, [r3, #0]
  return -1;
 80015bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3708      	adds	r7, #8
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <_exit>:

void _exit (int status)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80015d0:	f04f 31ff 	mov.w	r1, #4294967295
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f7ff ffe7 	bl	80015a8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80015da:	bf00      	nop
 80015dc:	e7fd      	b.n	80015da <_exit+0x12>

080015de <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015de:	b580      	push	{r7, lr}
 80015e0:	b086      	sub	sp, #24
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	60f8      	str	r0, [r7, #12]
 80015e6:	60b9      	str	r1, [r7, #8]
 80015e8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ea:	2300      	movs	r3, #0
 80015ec:	617b      	str	r3, [r7, #20]
 80015ee:	e00a      	b.n	8001606 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80015f0:	f3af 8000 	nop.w
 80015f4:	4601      	mov	r1, r0
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	1c5a      	adds	r2, r3, #1
 80015fa:	60ba      	str	r2, [r7, #8]
 80015fc:	b2ca      	uxtb	r2, r1
 80015fe:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	3301      	adds	r3, #1
 8001604:	617b      	str	r3, [r7, #20]
 8001606:	697a      	ldr	r2, [r7, #20]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	429a      	cmp	r2, r3
 800160c:	dbf0      	blt.n	80015f0 <_read+0x12>
  }

  return len;
 800160e:	687b      	ldr	r3, [r7, #4]
}
 8001610:	4618      	mov	r0, r3
 8001612:	3718      	adds	r7, #24
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}

08001618 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b086      	sub	sp, #24
 800161c:	af00      	add	r7, sp, #0
 800161e:	60f8      	str	r0, [r7, #12]
 8001620:	60b9      	str	r1, [r7, #8]
 8001622:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001624:	2300      	movs	r3, #0
 8001626:	617b      	str	r3, [r7, #20]
 8001628:	e009      	b.n	800163e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	1c5a      	adds	r2, r3, #1
 800162e:	60ba      	str	r2, [r7, #8]
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	4618      	mov	r0, r3
 8001634:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	3301      	adds	r3, #1
 800163c:	617b      	str	r3, [r7, #20]
 800163e:	697a      	ldr	r2, [r7, #20]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	429a      	cmp	r2, r3
 8001644:	dbf1      	blt.n	800162a <_write+0x12>
  }
  return len;
 8001646:	687b      	ldr	r3, [r7, #4]
}
 8001648:	4618      	mov	r0, r3
 800164a:	3718      	adds	r7, #24
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}

08001650 <_close>:

int _close(int file)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001658:	f04f 33ff 	mov.w	r3, #4294967295
}
 800165c:	4618      	mov	r0, r3
 800165e:	370c      	adds	r7, #12
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001678:	605a      	str	r2, [r3, #4]
  return 0;
 800167a:	2300      	movs	r3, #0
}
 800167c:	4618      	mov	r0, r3
 800167e:	370c      	adds	r7, #12
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr

08001688 <_isatty>:

int _isatty(int file)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001690:	2301      	movs	r3, #1
}
 8001692:	4618      	mov	r0, r3
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr

0800169e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800169e:	b480      	push	{r7}
 80016a0:	b085      	sub	sp, #20
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	60f8      	str	r0, [r7, #12]
 80016a6:	60b9      	str	r1, [r7, #8]
 80016a8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80016aa:	2300      	movs	r3, #0
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3714      	adds	r7, #20
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b086      	sub	sp, #24
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016c0:	4a14      	ldr	r2, [pc, #80]	@ (8001714 <_sbrk+0x5c>)
 80016c2:	4b15      	ldr	r3, [pc, #84]	@ (8001718 <_sbrk+0x60>)
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016cc:	4b13      	ldr	r3, [pc, #76]	@ (800171c <_sbrk+0x64>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d102      	bne.n	80016da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016d4:	4b11      	ldr	r3, [pc, #68]	@ (800171c <_sbrk+0x64>)
 80016d6:	4a12      	ldr	r2, [pc, #72]	@ (8001720 <_sbrk+0x68>)
 80016d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016da:	4b10      	ldr	r3, [pc, #64]	@ (800171c <_sbrk+0x64>)
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4413      	add	r3, r2
 80016e2:	693a      	ldr	r2, [r7, #16]
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d207      	bcs.n	80016f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016e8:	f008 f87e 	bl	80097e8 <__errno>
 80016ec:	4603      	mov	r3, r0
 80016ee:	220c      	movs	r2, #12
 80016f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016f2:	f04f 33ff 	mov.w	r3, #4294967295
 80016f6:	e009      	b.n	800170c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016f8:	4b08      	ldr	r3, [pc, #32]	@ (800171c <_sbrk+0x64>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016fe:	4b07      	ldr	r3, [pc, #28]	@ (800171c <_sbrk+0x64>)
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4413      	add	r3, r2
 8001706:	4a05      	ldr	r2, [pc, #20]	@ (800171c <_sbrk+0x64>)
 8001708:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800170a:	68fb      	ldr	r3, [r7, #12]
}
 800170c:	4618      	mov	r0, r3
 800170e:	3718      	adds	r7, #24
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	20020000 	.word	0x20020000
 8001718:	00000400 	.word	0x00000400
 800171c:	20000368 	.word	0x20000368
 8001720:	200020a0 	.word	0x200020a0

08001724 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001728:	4b06      	ldr	r3, [pc, #24]	@ (8001744 <SystemInit+0x20>)
 800172a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800172e:	4a05      	ldr	r2, [pc, #20]	@ (8001744 <SystemInit+0x20>)
 8001730:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001734:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001738:	bf00      	nop
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	e000ed00 	.word	0xe000ed00

08001748 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001748:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001780 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800174c:	480d      	ldr	r0, [pc, #52]	@ (8001784 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800174e:	490e      	ldr	r1, [pc, #56]	@ (8001788 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001750:	4a0e      	ldr	r2, [pc, #56]	@ (800178c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001752:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001754:	e002      	b.n	800175c <LoopCopyDataInit>

08001756 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001756:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001758:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800175a:	3304      	adds	r3, #4

0800175c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800175c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800175e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001760:	d3f9      	bcc.n	8001756 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001762:	4a0b      	ldr	r2, [pc, #44]	@ (8001790 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001764:	4c0b      	ldr	r4, [pc, #44]	@ (8001794 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001766:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001768:	e001      	b.n	800176e <LoopFillZerobss>

0800176a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800176a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800176c:	3204      	adds	r2, #4

0800176e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800176e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001770:	d3fb      	bcc.n	800176a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001772:	f7ff ffd7 	bl	8001724 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001776:	f008 f83d 	bl	80097f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800177a:	f7ff fd0b 	bl	8001194 <main>
  bx  lr    
 800177e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001780:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001784:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001788:	200002c8 	.word	0x200002c8
  ldr r2, =_sidata
 800178c:	0800c4c0 	.word	0x0800c4c0
  ldr r2, =_sbss
 8001790:	200002c8 	.word	0x200002c8
  ldr r4, =_ebss
 8001794:	200020a0 	.word	0x200020a0

08001798 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001798:	e7fe      	b.n	8001798 <ADC_IRQHandler>
	...

0800179c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017a0:	4b0e      	ldr	r3, [pc, #56]	@ (80017dc <HAL_Init+0x40>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a0d      	ldr	r2, [pc, #52]	@ (80017dc <HAL_Init+0x40>)
 80017a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017ac:	4b0b      	ldr	r3, [pc, #44]	@ (80017dc <HAL_Init+0x40>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a0a      	ldr	r2, [pc, #40]	@ (80017dc <HAL_Init+0x40>)
 80017b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80017b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017b8:	4b08      	ldr	r3, [pc, #32]	@ (80017dc <HAL_Init+0x40>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a07      	ldr	r2, [pc, #28]	@ (80017dc <HAL_Init+0x40>)
 80017be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017c4:	2003      	movs	r0, #3
 80017c6:	f000 f94f 	bl	8001a68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017ca:	200f      	movs	r0, #15
 80017cc:	f000 f808 	bl	80017e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017d0:	f7ff fe36 	bl	8001440 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017d4:	2300      	movs	r3, #0
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40023c00 	.word	0x40023c00

080017e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017e8:	4b12      	ldr	r3, [pc, #72]	@ (8001834 <HAL_InitTick+0x54>)
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	4b12      	ldr	r3, [pc, #72]	@ (8001838 <HAL_InitTick+0x58>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	4619      	mov	r1, r3
 80017f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80017fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80017fe:	4618      	mov	r0, r3
 8001800:	f000 f967 	bl	8001ad2 <HAL_SYSTICK_Config>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e00e      	b.n	800182c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2b0f      	cmp	r3, #15
 8001812:	d80a      	bhi.n	800182a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001814:	2200      	movs	r2, #0
 8001816:	6879      	ldr	r1, [r7, #4]
 8001818:	f04f 30ff 	mov.w	r0, #4294967295
 800181c:	f000 f92f 	bl	8001a7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001820:	4a06      	ldr	r2, [pc, #24]	@ (800183c <HAL_InitTick+0x5c>)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001826:	2300      	movs	r3, #0
 8001828:	e000      	b.n	800182c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
}
 800182c:	4618      	mov	r0, r3
 800182e:	3708      	adds	r7, #8
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	20000004 	.word	0x20000004
 8001838:	2000000c 	.word	0x2000000c
 800183c:	20000008 	.word	0x20000008

08001840 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001844:	4b06      	ldr	r3, [pc, #24]	@ (8001860 <HAL_IncTick+0x20>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	461a      	mov	r2, r3
 800184a:	4b06      	ldr	r3, [pc, #24]	@ (8001864 <HAL_IncTick+0x24>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4413      	add	r3, r2
 8001850:	4a04      	ldr	r2, [pc, #16]	@ (8001864 <HAL_IncTick+0x24>)
 8001852:	6013      	str	r3, [r2, #0]
}
 8001854:	bf00      	nop
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	2000000c 	.word	0x2000000c
 8001864:	2000036c 	.word	0x2000036c

08001868 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  return uwTick;
 800186c:	4b03      	ldr	r3, [pc, #12]	@ (800187c <HAL_GetTick+0x14>)
 800186e:	681b      	ldr	r3, [r3, #0]
}
 8001870:	4618      	mov	r0, r3
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	2000036c 	.word	0x2000036c

08001880 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001888:	f7ff ffee 	bl	8001868 <HAL_GetTick>
 800188c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001898:	d005      	beq.n	80018a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800189a:	4b0a      	ldr	r3, [pc, #40]	@ (80018c4 <HAL_Delay+0x44>)
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	461a      	mov	r2, r3
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	4413      	add	r3, r2
 80018a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018a6:	bf00      	nop
 80018a8:	f7ff ffde 	bl	8001868 <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	68fa      	ldr	r2, [r7, #12]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d8f7      	bhi.n	80018a8 <HAL_Delay+0x28>
  {
  }
}
 80018b8:	bf00      	nop
 80018ba:	bf00      	nop
 80018bc:	3710      	adds	r7, #16
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	2000000c 	.word	0x2000000c

080018c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b085      	sub	sp, #20
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	f003 0307 	and.w	r3, r3, #7
 80018d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018d8:	4b0c      	ldr	r3, [pc, #48]	@ (800190c <__NVIC_SetPriorityGrouping+0x44>)
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018de:	68ba      	ldr	r2, [r7, #8]
 80018e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018e4:	4013      	ands	r3, r2
 80018e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80018f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018fa:	4a04      	ldr	r2, [pc, #16]	@ (800190c <__NVIC_SetPriorityGrouping+0x44>)
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	60d3      	str	r3, [r2, #12]
}
 8001900:	bf00      	nop
 8001902:	3714      	adds	r7, #20
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr
 800190c:	e000ed00 	.word	0xe000ed00

08001910 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001914:	4b04      	ldr	r3, [pc, #16]	@ (8001928 <__NVIC_GetPriorityGrouping+0x18>)
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	0a1b      	lsrs	r3, r3, #8
 800191a:	f003 0307 	and.w	r3, r3, #7
}
 800191e:	4618      	mov	r0, r3
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr
 8001928:	e000ed00 	.word	0xe000ed00

0800192c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	4603      	mov	r3, r0
 8001934:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193a:	2b00      	cmp	r3, #0
 800193c:	db0b      	blt.n	8001956 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800193e:	79fb      	ldrb	r3, [r7, #7]
 8001940:	f003 021f 	and.w	r2, r3, #31
 8001944:	4907      	ldr	r1, [pc, #28]	@ (8001964 <__NVIC_EnableIRQ+0x38>)
 8001946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800194a:	095b      	lsrs	r3, r3, #5
 800194c:	2001      	movs	r0, #1
 800194e:	fa00 f202 	lsl.w	r2, r0, r2
 8001952:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001956:	bf00      	nop
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	e000e100 	.word	0xe000e100

08001968 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	4603      	mov	r3, r0
 8001970:	6039      	str	r1, [r7, #0]
 8001972:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001974:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001978:	2b00      	cmp	r3, #0
 800197a:	db0a      	blt.n	8001992 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	b2da      	uxtb	r2, r3
 8001980:	490c      	ldr	r1, [pc, #48]	@ (80019b4 <__NVIC_SetPriority+0x4c>)
 8001982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001986:	0112      	lsls	r2, r2, #4
 8001988:	b2d2      	uxtb	r2, r2
 800198a:	440b      	add	r3, r1
 800198c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001990:	e00a      	b.n	80019a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	b2da      	uxtb	r2, r3
 8001996:	4908      	ldr	r1, [pc, #32]	@ (80019b8 <__NVIC_SetPriority+0x50>)
 8001998:	79fb      	ldrb	r3, [r7, #7]
 800199a:	f003 030f 	and.w	r3, r3, #15
 800199e:	3b04      	subs	r3, #4
 80019a0:	0112      	lsls	r2, r2, #4
 80019a2:	b2d2      	uxtb	r2, r2
 80019a4:	440b      	add	r3, r1
 80019a6:	761a      	strb	r2, [r3, #24]
}
 80019a8:	bf00      	nop
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr
 80019b4:	e000e100 	.word	0xe000e100
 80019b8:	e000ed00 	.word	0xe000ed00

080019bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019bc:	b480      	push	{r7}
 80019be:	b089      	sub	sp, #36	@ 0x24
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	60b9      	str	r1, [r7, #8]
 80019c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	f003 0307 	and.w	r3, r3, #7
 80019ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	f1c3 0307 	rsb	r3, r3, #7
 80019d6:	2b04      	cmp	r3, #4
 80019d8:	bf28      	it	cs
 80019da:	2304      	movcs	r3, #4
 80019dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	3304      	adds	r3, #4
 80019e2:	2b06      	cmp	r3, #6
 80019e4:	d902      	bls.n	80019ec <NVIC_EncodePriority+0x30>
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	3b03      	subs	r3, #3
 80019ea:	e000      	b.n	80019ee <NVIC_EncodePriority+0x32>
 80019ec:	2300      	movs	r3, #0
 80019ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019f0:	f04f 32ff 	mov.w	r2, #4294967295
 80019f4:	69bb      	ldr	r3, [r7, #24]
 80019f6:	fa02 f303 	lsl.w	r3, r2, r3
 80019fa:	43da      	mvns	r2, r3
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	401a      	ands	r2, r3
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a04:	f04f 31ff 	mov.w	r1, #4294967295
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a0e:	43d9      	mvns	r1, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a14:	4313      	orrs	r3, r2
         );
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3724      	adds	r7, #36	@ 0x24
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
	...

08001a24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	3b01      	subs	r3, #1
 8001a30:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a34:	d301      	bcc.n	8001a3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a36:	2301      	movs	r3, #1
 8001a38:	e00f      	b.n	8001a5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a3a:	4a0a      	ldr	r2, [pc, #40]	@ (8001a64 <SysTick_Config+0x40>)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	3b01      	subs	r3, #1
 8001a40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a42:	210f      	movs	r1, #15
 8001a44:	f04f 30ff 	mov.w	r0, #4294967295
 8001a48:	f7ff ff8e 	bl	8001968 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a4c:	4b05      	ldr	r3, [pc, #20]	@ (8001a64 <SysTick_Config+0x40>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a52:	4b04      	ldr	r3, [pc, #16]	@ (8001a64 <SysTick_Config+0x40>)
 8001a54:	2207      	movs	r2, #7
 8001a56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	e000e010 	.word	0xe000e010

08001a68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f7ff ff29 	bl	80018c8 <__NVIC_SetPriorityGrouping>
}
 8001a76:	bf00      	nop
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	b086      	sub	sp, #24
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	4603      	mov	r3, r0
 8001a86:	60b9      	str	r1, [r7, #8]
 8001a88:	607a      	str	r2, [r7, #4]
 8001a8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a90:	f7ff ff3e 	bl	8001910 <__NVIC_GetPriorityGrouping>
 8001a94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	68b9      	ldr	r1, [r7, #8]
 8001a9a:	6978      	ldr	r0, [r7, #20]
 8001a9c:	f7ff ff8e 	bl	80019bc <NVIC_EncodePriority>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aa6:	4611      	mov	r1, r2
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7ff ff5d 	bl	8001968 <__NVIC_SetPriority>
}
 8001aae:	bf00      	nop
 8001ab0:	3718      	adds	r7, #24
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b082      	sub	sp, #8
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	4603      	mov	r3, r0
 8001abe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ac0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7ff ff31 	bl	800192c <__NVIC_EnableIRQ>
}
 8001aca:	bf00      	nop
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b082      	sub	sp, #8
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f7ff ffa2 	bl	8001a24 <SysTick_Config>
 8001ae0:	4603      	mov	r3, r0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
	...

08001aec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b089      	sub	sp, #36	@ 0x24
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001af6:	2300      	movs	r3, #0
 8001af8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001afa:	2300      	movs	r3, #0
 8001afc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001afe:	2300      	movs	r3, #0
 8001b00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b02:	2300      	movs	r3, #0
 8001b04:	61fb      	str	r3, [r7, #28]
 8001b06:	e159      	b.n	8001dbc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b08:	2201      	movs	r2, #1
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	697a      	ldr	r2, [r7, #20]
 8001b18:	4013      	ands	r3, r2
 8001b1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b1c:	693a      	ldr	r2, [r7, #16]
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	f040 8148 	bne.w	8001db6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f003 0303 	and.w	r3, r3, #3
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d005      	beq.n	8001b3e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	d130      	bne.n	8001ba0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	2203      	movs	r2, #3
 8001b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4e:	43db      	mvns	r3, r3
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	4013      	ands	r3, r2
 8001b54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	68da      	ldr	r2, [r3, #12]
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	005b      	lsls	r3, r3, #1
 8001b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b62:	69ba      	ldr	r2, [r7, #24]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	69ba      	ldr	r2, [r7, #24]
 8001b6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b74:	2201      	movs	r2, #1
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	4013      	ands	r3, r2
 8001b82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	091b      	lsrs	r3, r3, #4
 8001b8a:	f003 0201 	and.w	r2, r3, #1
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f003 0303 	and.w	r3, r3, #3
 8001ba8:	2b03      	cmp	r3, #3
 8001baa:	d017      	beq.n	8001bdc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	2203      	movs	r2, #3
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	43db      	mvns	r3, r3
 8001bbe:	69ba      	ldr	r2, [r7, #24]
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	689a      	ldr	r2, [r3, #8]
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	005b      	lsls	r3, r3, #1
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f003 0303 	and.w	r3, r3, #3
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d123      	bne.n	8001c30 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	08da      	lsrs	r2, r3, #3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	3208      	adds	r2, #8
 8001bf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bf4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	f003 0307 	and.w	r3, r3, #7
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	220f      	movs	r2, #15
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	43db      	mvns	r3, r3
 8001c06:	69ba      	ldr	r2, [r7, #24]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	691a      	ldr	r2, [r3, #16]
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	f003 0307 	and.w	r3, r3, #7
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	08da      	lsrs	r2, r3, #3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	3208      	adds	r2, #8
 8001c2a:	69b9      	ldr	r1, [r7, #24]
 8001c2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	005b      	lsls	r3, r3, #1
 8001c3a:	2203      	movs	r2, #3
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	43db      	mvns	r3, r3
 8001c42:	69ba      	ldr	r2, [r7, #24]
 8001c44:	4013      	ands	r3, r2
 8001c46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f003 0203 	and.w	r2, r3, #3
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	005b      	lsls	r3, r3, #1
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	f000 80a2 	beq.w	8001db6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c72:	2300      	movs	r3, #0
 8001c74:	60fb      	str	r3, [r7, #12]
 8001c76:	4b57      	ldr	r3, [pc, #348]	@ (8001dd4 <HAL_GPIO_Init+0x2e8>)
 8001c78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c7a:	4a56      	ldr	r2, [pc, #344]	@ (8001dd4 <HAL_GPIO_Init+0x2e8>)
 8001c7c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c80:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c82:	4b54      	ldr	r3, [pc, #336]	@ (8001dd4 <HAL_GPIO_Init+0x2e8>)
 8001c84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c8a:	60fb      	str	r3, [r7, #12]
 8001c8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c8e:	4a52      	ldr	r2, [pc, #328]	@ (8001dd8 <HAL_GPIO_Init+0x2ec>)
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	089b      	lsrs	r3, r3, #2
 8001c94:	3302      	adds	r3, #2
 8001c96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	f003 0303 	and.w	r3, r3, #3
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	220f      	movs	r2, #15
 8001ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8001caa:	43db      	mvns	r3, r3
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	4013      	ands	r3, r2
 8001cb0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4a49      	ldr	r2, [pc, #292]	@ (8001ddc <HAL_GPIO_Init+0x2f0>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d019      	beq.n	8001cee <HAL_GPIO_Init+0x202>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4a48      	ldr	r2, [pc, #288]	@ (8001de0 <HAL_GPIO_Init+0x2f4>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d013      	beq.n	8001cea <HAL_GPIO_Init+0x1fe>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4a47      	ldr	r2, [pc, #284]	@ (8001de4 <HAL_GPIO_Init+0x2f8>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d00d      	beq.n	8001ce6 <HAL_GPIO_Init+0x1fa>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4a46      	ldr	r2, [pc, #280]	@ (8001de8 <HAL_GPIO_Init+0x2fc>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d007      	beq.n	8001ce2 <HAL_GPIO_Init+0x1f6>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4a45      	ldr	r2, [pc, #276]	@ (8001dec <HAL_GPIO_Init+0x300>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d101      	bne.n	8001cde <HAL_GPIO_Init+0x1f2>
 8001cda:	2304      	movs	r3, #4
 8001cdc:	e008      	b.n	8001cf0 <HAL_GPIO_Init+0x204>
 8001cde:	2307      	movs	r3, #7
 8001ce0:	e006      	b.n	8001cf0 <HAL_GPIO_Init+0x204>
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e004      	b.n	8001cf0 <HAL_GPIO_Init+0x204>
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	e002      	b.n	8001cf0 <HAL_GPIO_Init+0x204>
 8001cea:	2301      	movs	r3, #1
 8001cec:	e000      	b.n	8001cf0 <HAL_GPIO_Init+0x204>
 8001cee:	2300      	movs	r3, #0
 8001cf0:	69fa      	ldr	r2, [r7, #28]
 8001cf2:	f002 0203 	and.w	r2, r2, #3
 8001cf6:	0092      	lsls	r2, r2, #2
 8001cf8:	4093      	lsls	r3, r2
 8001cfa:	69ba      	ldr	r2, [r7, #24]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d00:	4935      	ldr	r1, [pc, #212]	@ (8001dd8 <HAL_GPIO_Init+0x2ec>)
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	089b      	lsrs	r3, r3, #2
 8001d06:	3302      	adds	r3, #2
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d0e:	4b38      	ldr	r3, [pc, #224]	@ (8001df0 <HAL_GPIO_Init+0x304>)
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	43db      	mvns	r3, r3
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d003      	beq.n	8001d32 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001d2a:	69ba      	ldr	r2, [r7, #24]
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d32:	4a2f      	ldr	r2, [pc, #188]	@ (8001df0 <HAL_GPIO_Init+0x304>)
 8001d34:	69bb      	ldr	r3, [r7, #24]
 8001d36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d38:	4b2d      	ldr	r3, [pc, #180]	@ (8001df0 <HAL_GPIO_Init+0x304>)
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	43db      	mvns	r3, r3
 8001d42:	69ba      	ldr	r2, [r7, #24]
 8001d44:	4013      	ands	r3, r2
 8001d46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d003      	beq.n	8001d5c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d5c:	4a24      	ldr	r2, [pc, #144]	@ (8001df0 <HAL_GPIO_Init+0x304>)
 8001d5e:	69bb      	ldr	r3, [r7, #24]
 8001d60:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d62:	4b23      	ldr	r3, [pc, #140]	@ (8001df0 <HAL_GPIO_Init+0x304>)
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	43db      	mvns	r3, r3
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	4013      	ands	r3, r2
 8001d70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d003      	beq.n	8001d86 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001d7e:	69ba      	ldr	r2, [r7, #24]
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d86:	4a1a      	ldr	r2, [pc, #104]	@ (8001df0 <HAL_GPIO_Init+0x304>)
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d8c:	4b18      	ldr	r3, [pc, #96]	@ (8001df0 <HAL_GPIO_Init+0x304>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	43db      	mvns	r3, r3
 8001d96:	69ba      	ldr	r2, [r7, #24]
 8001d98:	4013      	ands	r3, r2
 8001d9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d003      	beq.n	8001db0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001da8:	69ba      	ldr	r2, [r7, #24]
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001db0:	4a0f      	ldr	r2, [pc, #60]	@ (8001df0 <HAL_GPIO_Init+0x304>)
 8001db2:	69bb      	ldr	r3, [r7, #24]
 8001db4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	3301      	adds	r3, #1
 8001dba:	61fb      	str	r3, [r7, #28]
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	2b0f      	cmp	r3, #15
 8001dc0:	f67f aea2 	bls.w	8001b08 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001dc4:	bf00      	nop
 8001dc6:	bf00      	nop
 8001dc8:	3724      	adds	r7, #36	@ 0x24
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	40023800 	.word	0x40023800
 8001dd8:	40013800 	.word	0x40013800
 8001ddc:	40020000 	.word	0x40020000
 8001de0:	40020400 	.word	0x40020400
 8001de4:	40020800 	.word	0x40020800
 8001de8:	40020c00 	.word	0x40020c00
 8001dec:	40021000 	.word	0x40021000
 8001df0:	40013c00 	.word	0x40013c00

08001df4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	807b      	strh	r3, [r7, #2]
 8001e00:	4613      	mov	r3, r2
 8001e02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e04:	787b      	ldrb	r3, [r7, #1]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d003      	beq.n	8001e12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e0a:	887a      	ldrh	r2, [r7, #2]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e10:	e003      	b.n	8001e1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e12:	887b      	ldrh	r3, [r7, #2]
 8001e14:	041a      	lsls	r2, r3, #16
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	619a      	str	r2, [r3, #24]
}
 8001e1a:	bf00      	nop
 8001e1c:	370c      	adds	r7, #12
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr

08001e26 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e26:	b480      	push	{r7}
 8001e28:	b085      	sub	sp, #20
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	6078      	str	r0, [r7, #4]
 8001e2e:	460b      	mov	r3, r1
 8001e30:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	695b      	ldr	r3, [r3, #20]
 8001e36:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e38:	887a      	ldrh	r2, [r7, #2]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	041a      	lsls	r2, r3, #16
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	43d9      	mvns	r1, r3
 8001e44:	887b      	ldrh	r3, [r7, #2]
 8001e46:	400b      	ands	r3, r1
 8001e48:	431a      	orrs	r2, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	619a      	str	r2, [r3, #24]
}
 8001e4e:	bf00      	nop
 8001e50:	3714      	adds	r7, #20
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
	...

08001e5c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d101      	bne.n	8001e6e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e12b      	b.n	80020c6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d106      	bne.n	8001e88 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f7ff fb04 	bl	8001490 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2224      	movs	r2, #36	@ 0x24
 8001e8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f022 0201 	bic.w	r2, r2, #1
 8001e9e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001eae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001ebe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ec0:	f002 fe54 	bl	8004b6c <HAL_RCC_GetPCLK1Freq>
 8001ec4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	4a81      	ldr	r2, [pc, #516]	@ (80020d0 <HAL_I2C_Init+0x274>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d807      	bhi.n	8001ee0 <HAL_I2C_Init+0x84>
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	4a80      	ldr	r2, [pc, #512]	@ (80020d4 <HAL_I2C_Init+0x278>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	bf94      	ite	ls
 8001ed8:	2301      	movls	r3, #1
 8001eda:	2300      	movhi	r3, #0
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	e006      	b.n	8001eee <HAL_I2C_Init+0x92>
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	4a7d      	ldr	r2, [pc, #500]	@ (80020d8 <HAL_I2C_Init+0x27c>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	bf94      	ite	ls
 8001ee8:	2301      	movls	r3, #1
 8001eea:	2300      	movhi	r3, #0
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e0e7      	b.n	80020c6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	4a78      	ldr	r2, [pc, #480]	@ (80020dc <HAL_I2C_Init+0x280>)
 8001efa:	fba2 2303 	umull	r2, r3, r2, r3
 8001efe:	0c9b      	lsrs	r3, r3, #18
 8001f00:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	68ba      	ldr	r2, [r7, #8]
 8001f12:	430a      	orrs	r2, r1
 8001f14:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	6a1b      	ldr	r3, [r3, #32]
 8001f1c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	4a6a      	ldr	r2, [pc, #424]	@ (80020d0 <HAL_I2C_Init+0x274>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d802      	bhi.n	8001f30 <HAL_I2C_Init+0xd4>
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	e009      	b.n	8001f44 <HAL_I2C_Init+0xe8>
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001f36:	fb02 f303 	mul.w	r3, r2, r3
 8001f3a:	4a69      	ldr	r2, [pc, #420]	@ (80020e0 <HAL_I2C_Init+0x284>)
 8001f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f40:	099b      	lsrs	r3, r3, #6
 8001f42:	3301      	adds	r3, #1
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	6812      	ldr	r2, [r2, #0]
 8001f48:	430b      	orrs	r3, r1
 8001f4a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	69db      	ldr	r3, [r3, #28]
 8001f52:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001f56:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	495c      	ldr	r1, [pc, #368]	@ (80020d0 <HAL_I2C_Init+0x274>)
 8001f60:	428b      	cmp	r3, r1
 8001f62:	d819      	bhi.n	8001f98 <HAL_I2C_Init+0x13c>
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	1e59      	subs	r1, r3, #1
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	005b      	lsls	r3, r3, #1
 8001f6e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f72:	1c59      	adds	r1, r3, #1
 8001f74:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001f78:	400b      	ands	r3, r1
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d00a      	beq.n	8001f94 <HAL_I2C_Init+0x138>
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	1e59      	subs	r1, r3, #1
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	005b      	lsls	r3, r3, #1
 8001f88:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f8c:	3301      	adds	r3, #1
 8001f8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f92:	e051      	b.n	8002038 <HAL_I2C_Init+0x1dc>
 8001f94:	2304      	movs	r3, #4
 8001f96:	e04f      	b.n	8002038 <HAL_I2C_Init+0x1dc>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d111      	bne.n	8001fc4 <HAL_I2C_Init+0x168>
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	1e58      	subs	r0, r3, #1
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6859      	ldr	r1, [r3, #4]
 8001fa8:	460b      	mov	r3, r1
 8001faa:	005b      	lsls	r3, r3, #1
 8001fac:	440b      	add	r3, r1
 8001fae:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	bf0c      	ite	eq
 8001fbc:	2301      	moveq	r3, #1
 8001fbe:	2300      	movne	r3, #0
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	e012      	b.n	8001fea <HAL_I2C_Init+0x18e>
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	1e58      	subs	r0, r3, #1
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6859      	ldr	r1, [r3, #4]
 8001fcc:	460b      	mov	r3, r1
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	440b      	add	r3, r1
 8001fd2:	0099      	lsls	r1, r3, #2
 8001fd4:	440b      	add	r3, r1
 8001fd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fda:	3301      	adds	r3, #1
 8001fdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	bf0c      	ite	eq
 8001fe4:	2301      	moveq	r3, #1
 8001fe6:	2300      	movne	r3, #0
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <HAL_I2C_Init+0x196>
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e022      	b.n	8002038 <HAL_I2C_Init+0x1dc>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d10e      	bne.n	8002018 <HAL_I2C_Init+0x1bc>
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	1e58      	subs	r0, r3, #1
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6859      	ldr	r1, [r3, #4]
 8002002:	460b      	mov	r3, r1
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	440b      	add	r3, r1
 8002008:	fbb0 f3f3 	udiv	r3, r0, r3
 800200c:	3301      	adds	r3, #1
 800200e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002012:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002016:	e00f      	b.n	8002038 <HAL_I2C_Init+0x1dc>
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	1e58      	subs	r0, r3, #1
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6859      	ldr	r1, [r3, #4]
 8002020:	460b      	mov	r3, r1
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	440b      	add	r3, r1
 8002026:	0099      	lsls	r1, r3, #2
 8002028:	440b      	add	r3, r1
 800202a:	fbb0 f3f3 	udiv	r3, r0, r3
 800202e:	3301      	adds	r3, #1
 8002030:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002034:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002038:	6879      	ldr	r1, [r7, #4]
 800203a:	6809      	ldr	r1, [r1, #0]
 800203c:	4313      	orrs	r3, r2
 800203e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	69da      	ldr	r2, [r3, #28]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6a1b      	ldr	r3, [r3, #32]
 8002052:	431a      	orrs	r2, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	430a      	orrs	r2, r1
 800205a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002066:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	6911      	ldr	r1, [r2, #16]
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	68d2      	ldr	r2, [r2, #12]
 8002072:	4311      	orrs	r1, r2
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	6812      	ldr	r2, [r2, #0]
 8002078:	430b      	orrs	r3, r1
 800207a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	68db      	ldr	r3, [r3, #12]
 8002082:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	695a      	ldr	r2, [r3, #20]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	699b      	ldr	r3, [r3, #24]
 800208e:	431a      	orrs	r2, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	430a      	orrs	r2, r1
 8002096:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f042 0201 	orr.w	r2, r2, #1
 80020a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2200      	movs	r2, #0
 80020ac:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2220      	movs	r2, #32
 80020b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2200      	movs	r2, #0
 80020ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3710      	adds	r7, #16
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	000186a0 	.word	0x000186a0
 80020d4:	001e847f 	.word	0x001e847f
 80020d8:	003d08ff 	.word	0x003d08ff
 80020dc:	431bde83 	.word	0x431bde83
 80020e0:	10624dd3 	.word	0x10624dd3

080020e4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b088      	sub	sp, #32
 80020e8:	af02      	add	r7, sp, #8
 80020ea:	60f8      	str	r0, [r7, #12]
 80020ec:	607a      	str	r2, [r7, #4]
 80020ee:	461a      	mov	r2, r3
 80020f0:	460b      	mov	r3, r1
 80020f2:	817b      	strh	r3, [r7, #10]
 80020f4:	4613      	mov	r3, r2
 80020f6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80020f8:	f7ff fbb6 	bl	8001868 <HAL_GetTick>
 80020fc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002104:	b2db      	uxtb	r3, r3
 8002106:	2b20      	cmp	r3, #32
 8002108:	f040 80e0 	bne.w	80022cc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	9300      	str	r3, [sp, #0]
 8002110:	2319      	movs	r3, #25
 8002112:	2201      	movs	r2, #1
 8002114:	4970      	ldr	r1, [pc, #448]	@ (80022d8 <HAL_I2C_Master_Transmit+0x1f4>)
 8002116:	68f8      	ldr	r0, [r7, #12]
 8002118:	f000 fc64 	bl	80029e4 <I2C_WaitOnFlagUntilTimeout>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002122:	2302      	movs	r3, #2
 8002124:	e0d3      	b.n	80022ce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800212c:	2b01      	cmp	r3, #1
 800212e:	d101      	bne.n	8002134 <HAL_I2C_Master_Transmit+0x50>
 8002130:	2302      	movs	r3, #2
 8002132:	e0cc      	b.n	80022ce <HAL_I2C_Master_Transmit+0x1ea>
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2201      	movs	r2, #1
 8002138:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0301 	and.w	r3, r3, #1
 8002146:	2b01      	cmp	r3, #1
 8002148:	d007      	beq.n	800215a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f042 0201 	orr.w	r2, r2, #1
 8002158:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002168:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2221      	movs	r2, #33	@ 0x21
 800216e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2210      	movs	r2, #16
 8002176:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2200      	movs	r2, #0
 800217e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	893a      	ldrh	r2, [r7, #8]
 800218a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002190:	b29a      	uxth	r2, r3
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	4a50      	ldr	r2, [pc, #320]	@ (80022dc <HAL_I2C_Master_Transmit+0x1f8>)
 800219a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800219c:	8979      	ldrh	r1, [r7, #10]
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	6a3a      	ldr	r2, [r7, #32]
 80021a2:	68f8      	ldr	r0, [r7, #12]
 80021a4:	f000 face 	bl	8002744 <I2C_MasterRequestWrite>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d001      	beq.n	80021b2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e08d      	b.n	80022ce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021b2:	2300      	movs	r3, #0
 80021b4:	613b      	str	r3, [r7, #16]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	695b      	ldr	r3, [r3, #20]
 80021bc:	613b      	str	r3, [r7, #16]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	699b      	ldr	r3, [r3, #24]
 80021c4:	613b      	str	r3, [r7, #16]
 80021c6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80021c8:	e066      	b.n	8002298 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021ca:	697a      	ldr	r2, [r7, #20]
 80021cc:	6a39      	ldr	r1, [r7, #32]
 80021ce:	68f8      	ldr	r0, [r7, #12]
 80021d0:	f000 fd22 	bl	8002c18 <I2C_WaitOnTXEFlagUntilTimeout>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d00d      	beq.n	80021f6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021de:	2b04      	cmp	r3, #4
 80021e0:	d107      	bne.n	80021f2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021f0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e06b      	b.n	80022ce <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021fa:	781a      	ldrb	r2, [r3, #0]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002206:	1c5a      	adds	r2, r3, #1
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002210:	b29b      	uxth	r3, r3
 8002212:	3b01      	subs	r3, #1
 8002214:	b29a      	uxth	r2, r3
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800221e:	3b01      	subs	r3, #1
 8002220:	b29a      	uxth	r2, r3
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	695b      	ldr	r3, [r3, #20]
 800222c:	f003 0304 	and.w	r3, r3, #4
 8002230:	2b04      	cmp	r3, #4
 8002232:	d11b      	bne.n	800226c <HAL_I2C_Master_Transmit+0x188>
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002238:	2b00      	cmp	r3, #0
 800223a:	d017      	beq.n	800226c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002240:	781a      	ldrb	r2, [r3, #0]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800224c:	1c5a      	adds	r2, r3, #1
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002256:	b29b      	uxth	r3, r3
 8002258:	3b01      	subs	r3, #1
 800225a:	b29a      	uxth	r2, r3
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002264:	3b01      	subs	r3, #1
 8002266:	b29a      	uxth	r2, r3
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800226c:	697a      	ldr	r2, [r7, #20]
 800226e:	6a39      	ldr	r1, [r7, #32]
 8002270:	68f8      	ldr	r0, [r7, #12]
 8002272:	f000 fd19 	bl	8002ca8 <I2C_WaitOnBTFFlagUntilTimeout>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d00d      	beq.n	8002298 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002280:	2b04      	cmp	r3, #4
 8002282:	d107      	bne.n	8002294 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002292:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e01a      	b.n	80022ce <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800229c:	2b00      	cmp	r3, #0
 800229e:	d194      	bne.n	80021ca <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2220      	movs	r2, #32
 80022b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2200      	movs	r2, #0
 80022bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2200      	movs	r2, #0
 80022c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80022c8:	2300      	movs	r3, #0
 80022ca:	e000      	b.n	80022ce <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80022cc:	2302      	movs	r3, #2
  }
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3718      	adds	r7, #24
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	00100002 	.word	0x00100002
 80022dc:	ffff0000 	.word	0xffff0000

080022e0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b08c      	sub	sp, #48	@ 0x30
 80022e4:	af02      	add	r7, sp, #8
 80022e6:	60f8      	str	r0, [r7, #12]
 80022e8:	607a      	str	r2, [r7, #4]
 80022ea:	461a      	mov	r2, r3
 80022ec:	460b      	mov	r3, r1
 80022ee:	817b      	strh	r3, [r7, #10]
 80022f0:	4613      	mov	r3, r2
 80022f2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80022f4:	f7ff fab8 	bl	8001868 <HAL_GetTick>
 80022f8:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002300:	b2db      	uxtb	r3, r3
 8002302:	2b20      	cmp	r3, #32
 8002304:	f040 8217 	bne.w	8002736 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800230a:	9300      	str	r3, [sp, #0]
 800230c:	2319      	movs	r3, #25
 800230e:	2201      	movs	r2, #1
 8002310:	497c      	ldr	r1, [pc, #496]	@ (8002504 <HAL_I2C_Master_Receive+0x224>)
 8002312:	68f8      	ldr	r0, [r7, #12]
 8002314:	f000 fb66 	bl	80029e4 <I2C_WaitOnFlagUntilTimeout>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800231e:	2302      	movs	r3, #2
 8002320:	e20a      	b.n	8002738 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002328:	2b01      	cmp	r3, #1
 800232a:	d101      	bne.n	8002330 <HAL_I2C_Master_Receive+0x50>
 800232c:	2302      	movs	r3, #2
 800232e:	e203      	b.n	8002738 <HAL_I2C_Master_Receive+0x458>
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2201      	movs	r2, #1
 8002334:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	2b01      	cmp	r3, #1
 8002344:	d007      	beq.n	8002356 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f042 0201 	orr.w	r2, r2, #1
 8002354:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002364:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2222      	movs	r2, #34	@ 0x22
 800236a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2210      	movs	r2, #16
 8002372:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2200      	movs	r2, #0
 800237a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	893a      	ldrh	r2, [r7, #8]
 8002386:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800238c:	b29a      	uxth	r2, r3
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	4a5c      	ldr	r2, [pc, #368]	@ (8002508 <HAL_I2C_Master_Receive+0x228>)
 8002396:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002398:	8979      	ldrh	r1, [r7, #10]
 800239a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800239c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800239e:	68f8      	ldr	r0, [r7, #12]
 80023a0:	f000 fa52 	bl	8002848 <I2C_MasterRequestRead>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e1c4      	b.n	8002738 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d113      	bne.n	80023de <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023b6:	2300      	movs	r3, #0
 80023b8:	623b      	str	r3, [r7, #32]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	695b      	ldr	r3, [r3, #20]
 80023c0:	623b      	str	r3, [r7, #32]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	699b      	ldr	r3, [r3, #24]
 80023c8:	623b      	str	r3, [r7, #32]
 80023ca:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023da:	601a      	str	r2, [r3, #0]
 80023dc:	e198      	b.n	8002710 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d11b      	bne.n	800241e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80023f4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023f6:	2300      	movs	r3, #0
 80023f8:	61fb      	str	r3, [r7, #28]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	695b      	ldr	r3, [r3, #20]
 8002400:	61fb      	str	r3, [r7, #28]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	699b      	ldr	r3, [r3, #24]
 8002408:	61fb      	str	r3, [r7, #28]
 800240a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800241a:	601a      	str	r2, [r3, #0]
 800241c:	e178      	b.n	8002710 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002422:	2b02      	cmp	r3, #2
 8002424:	d11b      	bne.n	800245e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002434:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002444:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002446:	2300      	movs	r3, #0
 8002448:	61bb      	str	r3, [r7, #24]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	695b      	ldr	r3, [r3, #20]
 8002450:	61bb      	str	r3, [r7, #24]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	699b      	ldr	r3, [r3, #24]
 8002458:	61bb      	str	r3, [r7, #24]
 800245a:	69bb      	ldr	r3, [r7, #24]
 800245c:	e158      	b.n	8002710 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800246c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800246e:	2300      	movs	r3, #0
 8002470:	617b      	str	r3, [r7, #20]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	695b      	ldr	r3, [r3, #20]
 8002478:	617b      	str	r3, [r7, #20]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	699b      	ldr	r3, [r3, #24]
 8002480:	617b      	str	r3, [r7, #20]
 8002482:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002484:	e144      	b.n	8002710 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800248a:	2b03      	cmp	r3, #3
 800248c:	f200 80f1 	bhi.w	8002672 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002494:	2b01      	cmp	r3, #1
 8002496:	d123      	bne.n	80024e0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002498:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800249a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800249c:	68f8      	ldr	r0, [r7, #12]
 800249e:	f000 fc4b 	bl	8002d38 <I2C_WaitOnRXNEFlagUntilTimeout>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d001      	beq.n	80024ac <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e145      	b.n	8002738 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	691a      	ldr	r2, [r3, #16]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024b6:	b2d2      	uxtb	r2, r2
 80024b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024be:	1c5a      	adds	r2, r3, #1
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024c8:	3b01      	subs	r3, #1
 80024ca:	b29a      	uxth	r2, r3
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	3b01      	subs	r3, #1
 80024d8:	b29a      	uxth	r2, r3
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80024de:	e117      	b.n	8002710 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d14e      	bne.n	8002586 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80024e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ea:	9300      	str	r3, [sp, #0]
 80024ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024ee:	2200      	movs	r2, #0
 80024f0:	4906      	ldr	r1, [pc, #24]	@ (800250c <HAL_I2C_Master_Receive+0x22c>)
 80024f2:	68f8      	ldr	r0, [r7, #12]
 80024f4:	f000 fa76 	bl	80029e4 <I2C_WaitOnFlagUntilTimeout>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d008      	beq.n	8002510 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e11a      	b.n	8002738 <HAL_I2C_Master_Receive+0x458>
 8002502:	bf00      	nop
 8002504:	00100002 	.word	0x00100002
 8002508:	ffff0000 	.word	0xffff0000
 800250c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800251e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	691a      	ldr	r2, [r3, #16]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800252a:	b2d2      	uxtb	r2, r2
 800252c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002532:	1c5a      	adds	r2, r3, #1
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800253c:	3b01      	subs	r3, #1
 800253e:	b29a      	uxth	r2, r3
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002548:	b29b      	uxth	r3, r3
 800254a:	3b01      	subs	r3, #1
 800254c:	b29a      	uxth	r2, r3
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	691a      	ldr	r2, [r3, #16]
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800255c:	b2d2      	uxtb	r2, r2
 800255e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002564:	1c5a      	adds	r2, r3, #1
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800256e:	3b01      	subs	r3, #1
 8002570:	b29a      	uxth	r2, r3
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800257a:	b29b      	uxth	r3, r3
 800257c:	3b01      	subs	r3, #1
 800257e:	b29a      	uxth	r2, r3
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002584:	e0c4      	b.n	8002710 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002588:	9300      	str	r3, [sp, #0]
 800258a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800258c:	2200      	movs	r2, #0
 800258e:	496c      	ldr	r1, [pc, #432]	@ (8002740 <HAL_I2C_Master_Receive+0x460>)
 8002590:	68f8      	ldr	r0, [r7, #12]
 8002592:	f000 fa27 	bl	80029e4 <I2C_WaitOnFlagUntilTimeout>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d001      	beq.n	80025a0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e0cb      	b.n	8002738 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80025ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	691a      	ldr	r2, [r3, #16]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ba:	b2d2      	uxtb	r2, r2
 80025bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025c2:	1c5a      	adds	r2, r3, #1
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025cc:	3b01      	subs	r3, #1
 80025ce:	b29a      	uxth	r2, r3
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025d8:	b29b      	uxth	r3, r3
 80025da:	3b01      	subs	r3, #1
 80025dc:	b29a      	uxth	r2, r3
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80025e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e4:	9300      	str	r3, [sp, #0]
 80025e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025e8:	2200      	movs	r2, #0
 80025ea:	4955      	ldr	r1, [pc, #340]	@ (8002740 <HAL_I2C_Master_Receive+0x460>)
 80025ec:	68f8      	ldr	r0, [r7, #12]
 80025ee:	f000 f9f9 	bl	80029e4 <I2C_WaitOnFlagUntilTimeout>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d001      	beq.n	80025fc <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e09d      	b.n	8002738 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800260a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	691a      	ldr	r2, [r3, #16]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002616:	b2d2      	uxtb	r2, r2
 8002618:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800261e:	1c5a      	adds	r2, r3, #1
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002628:	3b01      	subs	r3, #1
 800262a:	b29a      	uxth	r2, r3
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002634:	b29b      	uxth	r3, r3
 8002636:	3b01      	subs	r3, #1
 8002638:	b29a      	uxth	r2, r3
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	691a      	ldr	r2, [r3, #16]
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002648:	b2d2      	uxtb	r2, r2
 800264a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002650:	1c5a      	adds	r2, r3, #1
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800265a:	3b01      	subs	r3, #1
 800265c:	b29a      	uxth	r2, r3
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002666:	b29b      	uxth	r3, r3
 8002668:	3b01      	subs	r3, #1
 800266a:	b29a      	uxth	r2, r3
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002670:	e04e      	b.n	8002710 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002672:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002674:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002676:	68f8      	ldr	r0, [r7, #12]
 8002678:	f000 fb5e 	bl	8002d38 <I2C_WaitOnRXNEFlagUntilTimeout>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d001      	beq.n	8002686 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e058      	b.n	8002738 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	691a      	ldr	r2, [r3, #16]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002690:	b2d2      	uxtb	r2, r2
 8002692:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002698:	1c5a      	adds	r2, r3, #1
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026a2:	3b01      	subs	r3, #1
 80026a4:	b29a      	uxth	r2, r3
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	3b01      	subs	r3, #1
 80026b2:	b29a      	uxth	r2, r3
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	695b      	ldr	r3, [r3, #20]
 80026be:	f003 0304 	and.w	r3, r3, #4
 80026c2:	2b04      	cmp	r3, #4
 80026c4:	d124      	bne.n	8002710 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026ca:	2b03      	cmp	r3, #3
 80026cc:	d107      	bne.n	80026de <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026dc:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	691a      	ldr	r2, [r3, #16]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026e8:	b2d2      	uxtb	r2, r2
 80026ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026f0:	1c5a      	adds	r2, r3, #1
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026fa:	3b01      	subs	r3, #1
 80026fc:	b29a      	uxth	r2, r3
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002706:	b29b      	uxth	r3, r3
 8002708:	3b01      	subs	r3, #1
 800270a:	b29a      	uxth	r2, r3
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002714:	2b00      	cmp	r3, #0
 8002716:	f47f aeb6 	bne.w	8002486 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2220      	movs	r2, #32
 800271e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2200      	movs	r2, #0
 8002726:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2200      	movs	r2, #0
 800272e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002732:	2300      	movs	r3, #0
 8002734:	e000      	b.n	8002738 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002736:	2302      	movs	r3, #2
  }
}
 8002738:	4618      	mov	r0, r3
 800273a:	3728      	adds	r7, #40	@ 0x28
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	00010004 	.word	0x00010004

08002744 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b088      	sub	sp, #32
 8002748:	af02      	add	r7, sp, #8
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	607a      	str	r2, [r7, #4]
 800274e:	603b      	str	r3, [r7, #0]
 8002750:	460b      	mov	r3, r1
 8002752:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002758:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	2b08      	cmp	r3, #8
 800275e:	d006      	beq.n	800276e <I2C_MasterRequestWrite+0x2a>
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	2b01      	cmp	r3, #1
 8002764:	d003      	beq.n	800276e <I2C_MasterRequestWrite+0x2a>
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800276c:	d108      	bne.n	8002780 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800277c:	601a      	str	r2, [r3, #0]
 800277e:	e00b      	b.n	8002798 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002784:	2b12      	cmp	r3, #18
 8002786:	d107      	bne.n	8002798 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002796:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	9300      	str	r3, [sp, #0]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80027a4:	68f8      	ldr	r0, [r7, #12]
 80027a6:	f000 f91d 	bl	80029e4 <I2C_WaitOnFlagUntilTimeout>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d00d      	beq.n	80027cc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80027be:	d103      	bne.n	80027c8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80027c6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80027c8:	2303      	movs	r3, #3
 80027ca:	e035      	b.n	8002838 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	691b      	ldr	r3, [r3, #16]
 80027d0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80027d4:	d108      	bne.n	80027e8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80027d6:	897b      	ldrh	r3, [r7, #10]
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	461a      	mov	r2, r3
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80027e4:	611a      	str	r2, [r3, #16]
 80027e6:	e01b      	b.n	8002820 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80027e8:	897b      	ldrh	r3, [r7, #10]
 80027ea:	11db      	asrs	r3, r3, #7
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	f003 0306 	and.w	r3, r3, #6
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	f063 030f 	orn	r3, r3, #15
 80027f8:	b2da      	uxtb	r2, r3
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	490e      	ldr	r1, [pc, #56]	@ (8002840 <I2C_MasterRequestWrite+0xfc>)
 8002806:	68f8      	ldr	r0, [r7, #12]
 8002808:	f000 f966 	bl	8002ad8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d001      	beq.n	8002816 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e010      	b.n	8002838 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002816:	897b      	ldrh	r3, [r7, #10]
 8002818:	b2da      	uxtb	r2, r3
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	4907      	ldr	r1, [pc, #28]	@ (8002844 <I2C_MasterRequestWrite+0x100>)
 8002826:	68f8      	ldr	r0, [r7, #12]
 8002828:	f000 f956 	bl	8002ad8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d001      	beq.n	8002836 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e000      	b.n	8002838 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002836:	2300      	movs	r3, #0
}
 8002838:	4618      	mov	r0, r3
 800283a:	3718      	adds	r7, #24
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}
 8002840:	00010008 	.word	0x00010008
 8002844:	00010002 	.word	0x00010002

08002848 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b088      	sub	sp, #32
 800284c:	af02      	add	r7, sp, #8
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	607a      	str	r2, [r7, #4]
 8002852:	603b      	str	r3, [r7, #0]
 8002854:	460b      	mov	r3, r1
 8002856:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800285c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800286c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	2b08      	cmp	r3, #8
 8002872:	d006      	beq.n	8002882 <I2C_MasterRequestRead+0x3a>
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	2b01      	cmp	r3, #1
 8002878:	d003      	beq.n	8002882 <I2C_MasterRequestRead+0x3a>
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002880:	d108      	bne.n	8002894 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002890:	601a      	str	r2, [r3, #0]
 8002892:	e00b      	b.n	80028ac <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002898:	2b11      	cmp	r3, #17
 800289a:	d107      	bne.n	80028ac <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80028aa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	9300      	str	r3, [sp, #0]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2200      	movs	r2, #0
 80028b4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80028b8:	68f8      	ldr	r0, [r7, #12]
 80028ba:	f000 f893 	bl	80029e4 <I2C_WaitOnFlagUntilTimeout>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d00d      	beq.n	80028e0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80028d2:	d103      	bne.n	80028dc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80028da:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80028dc:	2303      	movs	r3, #3
 80028de:	e079      	b.n	80029d4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	691b      	ldr	r3, [r3, #16]
 80028e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80028e8:	d108      	bne.n	80028fc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80028ea:	897b      	ldrh	r3, [r7, #10]
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	f043 0301 	orr.w	r3, r3, #1
 80028f2:	b2da      	uxtb	r2, r3
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	611a      	str	r2, [r3, #16]
 80028fa:	e05f      	b.n	80029bc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80028fc:	897b      	ldrh	r3, [r7, #10]
 80028fe:	11db      	asrs	r3, r3, #7
 8002900:	b2db      	uxtb	r3, r3
 8002902:	f003 0306 	and.w	r3, r3, #6
 8002906:	b2db      	uxtb	r3, r3
 8002908:	f063 030f 	orn	r3, r3, #15
 800290c:	b2da      	uxtb	r2, r3
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	4930      	ldr	r1, [pc, #192]	@ (80029dc <I2C_MasterRequestRead+0x194>)
 800291a:	68f8      	ldr	r0, [r7, #12]
 800291c:	f000 f8dc 	bl	8002ad8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d001      	beq.n	800292a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e054      	b.n	80029d4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800292a:	897b      	ldrh	r3, [r7, #10]
 800292c:	b2da      	uxtb	r2, r3
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	4929      	ldr	r1, [pc, #164]	@ (80029e0 <I2C_MasterRequestRead+0x198>)
 800293a:	68f8      	ldr	r0, [r7, #12]
 800293c:	f000 f8cc 	bl	8002ad8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d001      	beq.n	800294a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e044      	b.n	80029d4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800294a:	2300      	movs	r3, #0
 800294c:	613b      	str	r3, [r7, #16]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	695b      	ldr	r3, [r3, #20]
 8002954:	613b      	str	r3, [r7, #16]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	699b      	ldr	r3, [r3, #24]
 800295c:	613b      	str	r3, [r7, #16]
 800295e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800296e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	9300      	str	r3, [sp, #0]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800297c:	68f8      	ldr	r0, [r7, #12]
 800297e:	f000 f831 	bl	80029e4 <I2C_WaitOnFlagUntilTimeout>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d00d      	beq.n	80029a4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002992:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002996:	d103      	bne.n	80029a0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800299e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e017      	b.n	80029d4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80029a4:	897b      	ldrh	r3, [r7, #10]
 80029a6:	11db      	asrs	r3, r3, #7
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	f003 0306 	and.w	r3, r3, #6
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	f063 030e 	orn	r3, r3, #14
 80029b4:	b2da      	uxtb	r2, r3
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	4907      	ldr	r1, [pc, #28]	@ (80029e0 <I2C_MasterRequestRead+0x198>)
 80029c2:	68f8      	ldr	r0, [r7, #12]
 80029c4:	f000 f888 	bl	8002ad8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d001      	beq.n	80029d2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e000      	b.n	80029d4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80029d2:	2300      	movs	r3, #0
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3718      	adds	r7, #24
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	00010008 	.word	0x00010008
 80029e0:	00010002 	.word	0x00010002

080029e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b084      	sub	sp, #16
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	60b9      	str	r1, [r7, #8]
 80029ee:	603b      	str	r3, [r7, #0]
 80029f0:	4613      	mov	r3, r2
 80029f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029f4:	e048      	b.n	8002a88 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029fc:	d044      	beq.n	8002a88 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029fe:	f7fe ff33 	bl	8001868 <HAL_GetTick>
 8002a02:	4602      	mov	r2, r0
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	683a      	ldr	r2, [r7, #0]
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d302      	bcc.n	8002a14 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d139      	bne.n	8002a88 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	0c1b      	lsrs	r3, r3, #16
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d10d      	bne.n	8002a3a <I2C_WaitOnFlagUntilTimeout+0x56>
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	695b      	ldr	r3, [r3, #20]
 8002a24:	43da      	mvns	r2, r3
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	4013      	ands	r3, r2
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	bf0c      	ite	eq
 8002a30:	2301      	moveq	r3, #1
 8002a32:	2300      	movne	r3, #0
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	461a      	mov	r2, r3
 8002a38:	e00c      	b.n	8002a54 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	699b      	ldr	r3, [r3, #24]
 8002a40:	43da      	mvns	r2, r3
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	4013      	ands	r3, r2
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	bf0c      	ite	eq
 8002a4c:	2301      	moveq	r3, #1
 8002a4e:	2300      	movne	r3, #0
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	461a      	mov	r2, r3
 8002a54:	79fb      	ldrb	r3, [r7, #7]
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d116      	bne.n	8002a88 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2220      	movs	r2, #32
 8002a64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a74:	f043 0220 	orr.w	r2, r3, #32
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e023      	b.n	8002ad0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	0c1b      	lsrs	r3, r3, #16
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d10d      	bne.n	8002aae <I2C_WaitOnFlagUntilTimeout+0xca>
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	695b      	ldr	r3, [r3, #20]
 8002a98:	43da      	mvns	r2, r3
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	bf0c      	ite	eq
 8002aa4:	2301      	moveq	r3, #1
 8002aa6:	2300      	movne	r3, #0
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	461a      	mov	r2, r3
 8002aac:	e00c      	b.n	8002ac8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	699b      	ldr	r3, [r3, #24]
 8002ab4:	43da      	mvns	r2, r3
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	4013      	ands	r3, r2
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	bf0c      	ite	eq
 8002ac0:	2301      	moveq	r3, #1
 8002ac2:	2300      	movne	r3, #0
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	79fb      	ldrb	r3, [r7, #7]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d093      	beq.n	80029f6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ace:	2300      	movs	r3, #0
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3710      	adds	r7, #16
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	60b9      	str	r1, [r7, #8]
 8002ae2:	607a      	str	r2, [r7, #4]
 8002ae4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ae6:	e071      	b.n	8002bcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	695b      	ldr	r3, [r3, #20]
 8002aee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002af2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002af6:	d123      	bne.n	8002b40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b06:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002b10:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2200      	movs	r2, #0
 8002b16:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2220      	movs	r2, #32
 8002b1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2200      	movs	r2, #0
 8002b24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b2c:	f043 0204 	orr.w	r2, r3, #4
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2200      	movs	r2, #0
 8002b38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e067      	b.n	8002c10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b46:	d041      	beq.n	8002bcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b48:	f7fe fe8e 	bl	8001868 <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d302      	bcc.n	8002b5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d136      	bne.n	8002bcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	0c1b      	lsrs	r3, r3, #16
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d10c      	bne.n	8002b82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	695b      	ldr	r3, [r3, #20]
 8002b6e:	43da      	mvns	r2, r3
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	4013      	ands	r3, r2
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	bf14      	ite	ne
 8002b7a:	2301      	movne	r3, #1
 8002b7c:	2300      	moveq	r3, #0
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	e00b      	b.n	8002b9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	699b      	ldr	r3, [r3, #24]
 8002b88:	43da      	mvns	r2, r3
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	bf14      	ite	ne
 8002b94:	2301      	movne	r3, #1
 8002b96:	2300      	moveq	r3, #0
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d016      	beq.n	8002bcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2220      	movs	r2, #32
 8002ba8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb8:	f043 0220 	orr.w	r2, r3, #32
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e021      	b.n	8002c10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	0c1b      	lsrs	r3, r3, #16
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d10c      	bne.n	8002bf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	695b      	ldr	r3, [r3, #20]
 8002bdc:	43da      	mvns	r2, r3
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	4013      	ands	r3, r2
 8002be2:	b29b      	uxth	r3, r3
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	bf14      	ite	ne
 8002be8:	2301      	movne	r3, #1
 8002bea:	2300      	moveq	r3, #0
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	e00b      	b.n	8002c08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	699b      	ldr	r3, [r3, #24]
 8002bf6:	43da      	mvns	r2, r3
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	bf14      	ite	ne
 8002c02:	2301      	movne	r3, #1
 8002c04:	2300      	moveq	r3, #0
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	f47f af6d 	bne.w	8002ae8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002c0e:	2300      	movs	r3, #0
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3710      	adds	r7, #16
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	60b9      	str	r1, [r7, #8]
 8002c22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c24:	e034      	b.n	8002c90 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c26:	68f8      	ldr	r0, [r7, #12]
 8002c28:	f000 f8e3 	bl	8002df2 <I2C_IsAcknowledgeFailed>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d001      	beq.n	8002c36 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e034      	b.n	8002ca0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c3c:	d028      	beq.n	8002c90 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c3e:	f7fe fe13 	bl	8001868 <HAL_GetTick>
 8002c42:	4602      	mov	r2, r0
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	68ba      	ldr	r2, [r7, #8]
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d302      	bcc.n	8002c54 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d11d      	bne.n	8002c90 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	695b      	ldr	r3, [r3, #20]
 8002c5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c5e:	2b80      	cmp	r3, #128	@ 0x80
 8002c60:	d016      	beq.n	8002c90 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2200      	movs	r2, #0
 8002c66:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2220      	movs	r2, #32
 8002c6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2200      	movs	r2, #0
 8002c74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c7c:	f043 0220 	orr.w	r2, r3, #32
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2200      	movs	r2, #0
 8002c88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e007      	b.n	8002ca0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	695b      	ldr	r3, [r3, #20]
 8002c96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c9a:	2b80      	cmp	r3, #128	@ 0x80
 8002c9c:	d1c3      	bne.n	8002c26 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002c9e:	2300      	movs	r3, #0
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3710      	adds	r7, #16
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	60f8      	str	r0, [r7, #12]
 8002cb0:	60b9      	str	r1, [r7, #8]
 8002cb2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002cb4:	e034      	b.n	8002d20 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002cb6:	68f8      	ldr	r0, [r7, #12]
 8002cb8:	f000 f89b 	bl	8002df2 <I2C_IsAcknowledgeFailed>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d001      	beq.n	8002cc6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e034      	b.n	8002d30 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ccc:	d028      	beq.n	8002d20 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cce:	f7fe fdcb 	bl	8001868 <HAL_GetTick>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	68ba      	ldr	r2, [r7, #8]
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d302      	bcc.n	8002ce4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d11d      	bne.n	8002d20 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	695b      	ldr	r3, [r3, #20]
 8002cea:	f003 0304 	and.w	r3, r3, #4
 8002cee:	2b04      	cmp	r3, #4
 8002cf0:	d016      	beq.n	8002d20 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2220      	movs	r2, #32
 8002cfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d0c:	f043 0220 	orr.w	r2, r3, #32
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2200      	movs	r2, #0
 8002d18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e007      	b.n	8002d30 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	695b      	ldr	r3, [r3, #20]
 8002d26:	f003 0304 	and.w	r3, r3, #4
 8002d2a:	2b04      	cmp	r3, #4
 8002d2c:	d1c3      	bne.n	8002cb6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002d2e:	2300      	movs	r3, #0
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3710      	adds	r7, #16
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}

08002d38 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b084      	sub	sp, #16
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	60f8      	str	r0, [r7, #12]
 8002d40:	60b9      	str	r1, [r7, #8]
 8002d42:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002d44:	e049      	b.n	8002dda <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	695b      	ldr	r3, [r3, #20]
 8002d4c:	f003 0310 	and.w	r3, r3, #16
 8002d50:	2b10      	cmp	r3, #16
 8002d52:	d119      	bne.n	8002d88 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f06f 0210 	mvn.w	r2, #16
 8002d5c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2200      	movs	r2, #0
 8002d62:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2220      	movs	r2, #32
 8002d68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e030      	b.n	8002dea <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d88:	f7fe fd6e 	bl	8001868 <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	68ba      	ldr	r2, [r7, #8]
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d302      	bcc.n	8002d9e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d11d      	bne.n	8002dda <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	695b      	ldr	r3, [r3, #20]
 8002da4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002da8:	2b40      	cmp	r3, #64	@ 0x40
 8002daa:	d016      	beq.n	8002dda <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2200      	movs	r2, #0
 8002db0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2220      	movs	r2, #32
 8002db6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dc6:	f043 0220 	orr.w	r2, r3, #32
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e007      	b.n	8002dea <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	695b      	ldr	r3, [r3, #20]
 8002de0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002de4:	2b40      	cmp	r3, #64	@ 0x40
 8002de6:	d1ae      	bne.n	8002d46 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3710      	adds	r7, #16
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}

08002df2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002df2:	b480      	push	{r7}
 8002df4:	b083      	sub	sp, #12
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	695b      	ldr	r3, [r3, #20]
 8002e00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e08:	d11b      	bne.n	8002e42 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002e12:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2200      	movs	r2, #0
 8002e18:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2220      	movs	r2, #32
 8002e1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e2e:	f043 0204 	orr.w	r2, r3, #4
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e000      	b.n	8002e44 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002e42:	2300      	movs	r3, #0
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	370c      	adds	r7, #12
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr

08002e50 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b086      	sub	sp, #24
 8002e54:	af02      	add	r7, sp, #8
 8002e56:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d101      	bne.n	8002e62 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e101      	b.n	8003066 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d106      	bne.n	8002e82 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f005 fbc5 	bl	800860c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2203      	movs	r2, #3
 8002e86:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e90:	d102      	bne.n	8002e98 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f001 ffac 	bl	8004dfa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6818      	ldr	r0, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	7c1a      	ldrb	r2, [r3, #16]
 8002eaa:	f88d 2000 	strb.w	r2, [sp]
 8002eae:	3304      	adds	r3, #4
 8002eb0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002eb2:	f001 fe8a 	bl	8004bca <USB_CoreInit>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d005      	beq.n	8002ec8 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2202      	movs	r2, #2
 8002ec0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e0ce      	b.n	8003066 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2100      	movs	r1, #0
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f001 ffa4 	bl	8004e1c <USB_SetCurrentMode>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d005      	beq.n	8002ee6 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2202      	movs	r2, #2
 8002ede:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e0bf      	b.n	8003066 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	73fb      	strb	r3, [r7, #15]
 8002eea:	e04a      	b.n	8002f82 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002eec:	7bfa      	ldrb	r2, [r7, #15]
 8002eee:	6879      	ldr	r1, [r7, #4]
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	00db      	lsls	r3, r3, #3
 8002ef4:	4413      	add	r3, r2
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	440b      	add	r3, r1
 8002efa:	3315      	adds	r3, #21
 8002efc:	2201      	movs	r2, #1
 8002efe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002f00:	7bfa      	ldrb	r2, [r7, #15]
 8002f02:	6879      	ldr	r1, [r7, #4]
 8002f04:	4613      	mov	r3, r2
 8002f06:	00db      	lsls	r3, r3, #3
 8002f08:	4413      	add	r3, r2
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	440b      	add	r3, r1
 8002f0e:	3314      	adds	r3, #20
 8002f10:	7bfa      	ldrb	r2, [r7, #15]
 8002f12:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002f14:	7bfa      	ldrb	r2, [r7, #15]
 8002f16:	7bfb      	ldrb	r3, [r7, #15]
 8002f18:	b298      	uxth	r0, r3
 8002f1a:	6879      	ldr	r1, [r7, #4]
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	00db      	lsls	r3, r3, #3
 8002f20:	4413      	add	r3, r2
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	440b      	add	r3, r1
 8002f26:	332e      	adds	r3, #46	@ 0x2e
 8002f28:	4602      	mov	r2, r0
 8002f2a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002f2c:	7bfa      	ldrb	r2, [r7, #15]
 8002f2e:	6879      	ldr	r1, [r7, #4]
 8002f30:	4613      	mov	r3, r2
 8002f32:	00db      	lsls	r3, r3, #3
 8002f34:	4413      	add	r3, r2
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	440b      	add	r3, r1
 8002f3a:	3318      	adds	r3, #24
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002f40:	7bfa      	ldrb	r2, [r7, #15]
 8002f42:	6879      	ldr	r1, [r7, #4]
 8002f44:	4613      	mov	r3, r2
 8002f46:	00db      	lsls	r3, r3, #3
 8002f48:	4413      	add	r3, r2
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	440b      	add	r3, r1
 8002f4e:	331c      	adds	r3, #28
 8002f50:	2200      	movs	r2, #0
 8002f52:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002f54:	7bfa      	ldrb	r2, [r7, #15]
 8002f56:	6879      	ldr	r1, [r7, #4]
 8002f58:	4613      	mov	r3, r2
 8002f5a:	00db      	lsls	r3, r3, #3
 8002f5c:	4413      	add	r3, r2
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	440b      	add	r3, r1
 8002f62:	3320      	adds	r3, #32
 8002f64:	2200      	movs	r2, #0
 8002f66:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002f68:	7bfa      	ldrb	r2, [r7, #15]
 8002f6a:	6879      	ldr	r1, [r7, #4]
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	00db      	lsls	r3, r3, #3
 8002f70:	4413      	add	r3, r2
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	440b      	add	r3, r1
 8002f76:	3324      	adds	r3, #36	@ 0x24
 8002f78:	2200      	movs	r2, #0
 8002f7a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f7c:	7bfb      	ldrb	r3, [r7, #15]
 8002f7e:	3301      	adds	r3, #1
 8002f80:	73fb      	strb	r3, [r7, #15]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	791b      	ldrb	r3, [r3, #4]
 8002f86:	7bfa      	ldrb	r2, [r7, #15]
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d3af      	bcc.n	8002eec <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	73fb      	strb	r3, [r7, #15]
 8002f90:	e044      	b.n	800301c <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002f92:	7bfa      	ldrb	r2, [r7, #15]
 8002f94:	6879      	ldr	r1, [r7, #4]
 8002f96:	4613      	mov	r3, r2
 8002f98:	00db      	lsls	r3, r3, #3
 8002f9a:	4413      	add	r3, r2
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	440b      	add	r3, r1
 8002fa0:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002fa8:	7bfa      	ldrb	r2, [r7, #15]
 8002faa:	6879      	ldr	r1, [r7, #4]
 8002fac:	4613      	mov	r3, r2
 8002fae:	00db      	lsls	r3, r3, #3
 8002fb0:	4413      	add	r3, r2
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	440b      	add	r3, r1
 8002fb6:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002fba:	7bfa      	ldrb	r2, [r7, #15]
 8002fbc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002fbe:	7bfa      	ldrb	r2, [r7, #15]
 8002fc0:	6879      	ldr	r1, [r7, #4]
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	00db      	lsls	r3, r3, #3
 8002fc6:	4413      	add	r3, r2
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	440b      	add	r3, r1
 8002fcc:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002fd4:	7bfa      	ldrb	r2, [r7, #15]
 8002fd6:	6879      	ldr	r1, [r7, #4]
 8002fd8:	4613      	mov	r3, r2
 8002fda:	00db      	lsls	r3, r3, #3
 8002fdc:	4413      	add	r3, r2
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	440b      	add	r3, r1
 8002fe2:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002fea:	7bfa      	ldrb	r2, [r7, #15]
 8002fec:	6879      	ldr	r1, [r7, #4]
 8002fee:	4613      	mov	r3, r2
 8002ff0:	00db      	lsls	r3, r3, #3
 8002ff2:	4413      	add	r3, r2
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	440b      	add	r3, r1
 8002ff8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003000:	7bfa      	ldrb	r2, [r7, #15]
 8003002:	6879      	ldr	r1, [r7, #4]
 8003004:	4613      	mov	r3, r2
 8003006:	00db      	lsls	r3, r3, #3
 8003008:	4413      	add	r3, r2
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	440b      	add	r3, r1
 800300e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003012:	2200      	movs	r2, #0
 8003014:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003016:	7bfb      	ldrb	r3, [r7, #15]
 8003018:	3301      	adds	r3, #1
 800301a:	73fb      	strb	r3, [r7, #15]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	791b      	ldrb	r3, [r3, #4]
 8003020:	7bfa      	ldrb	r2, [r7, #15]
 8003022:	429a      	cmp	r2, r3
 8003024:	d3b5      	bcc.n	8002f92 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6818      	ldr	r0, [r3, #0]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	7c1a      	ldrb	r2, [r3, #16]
 800302e:	f88d 2000 	strb.w	r2, [sp]
 8003032:	3304      	adds	r3, #4
 8003034:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003036:	f001 ff3d 	bl	8004eb4 <USB_DevInit>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d005      	beq.n	800304c <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2202      	movs	r2, #2
 8003044:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e00c      	b.n	8003066 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2200      	movs	r2, #0
 8003050:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2201      	movs	r2, #1
 8003056:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4618      	mov	r0, r3
 8003060:	f002 ff87 	bl	8005f72 <USB_DevDisconnect>

  return HAL_OK;
 8003064:	2300      	movs	r3, #0
}
 8003066:	4618      	mov	r0, r3
 8003068:	3710      	adds	r7, #16
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}

0800306e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800306e:	b580      	push	{r7, lr}
 8003070:	b084      	sub	sp, #16
 8003072:	af00      	add	r7, sp, #0
 8003074:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003082:	2b01      	cmp	r3, #1
 8003084:	d101      	bne.n	800308a <HAL_PCD_Start+0x1c>
 8003086:	2302      	movs	r3, #2
 8003088:	e022      	b.n	80030d0 <HAL_PCD_Start+0x62>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2201      	movs	r2, #1
 800308e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	68db      	ldr	r3, [r3, #12]
 8003096:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800309a:	2b00      	cmp	r3, #0
 800309c:	d009      	beq.n	80030b2 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d105      	bne.n	80030b2 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030aa:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4618      	mov	r0, r3
 80030b8:	f001 fe8e 	bl	8004dd8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4618      	mov	r0, r3
 80030c2:	f002 ff35 	bl	8005f30 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80030ce:	2300      	movs	r3, #0
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3710      	adds	r7, #16
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80030d8:	b590      	push	{r4, r7, lr}
 80030da:	b08d      	sub	sp, #52	@ 0x34
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030e6:	6a3b      	ldr	r3, [r7, #32]
 80030e8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4618      	mov	r0, r3
 80030f0:	f002 fff3 	bl	80060da <USB_GetMode>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	f040 848c 	bne.w	8003a14 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4618      	mov	r0, r3
 8003102:	f002 ff57 	bl	8005fb4 <USB_ReadInterrupts>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	f000 8482 	beq.w	8003a12 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	0a1b      	lsrs	r3, r3, #8
 8003118:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4618      	mov	r0, r3
 8003128:	f002 ff44 	bl	8005fb4 <USB_ReadInterrupts>
 800312c:	4603      	mov	r3, r0
 800312e:	f003 0302 	and.w	r3, r3, #2
 8003132:	2b02      	cmp	r3, #2
 8003134:	d107      	bne.n	8003146 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	695a      	ldr	r2, [r3, #20]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f002 0202 	and.w	r2, r2, #2
 8003144:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4618      	mov	r0, r3
 800314c:	f002 ff32 	bl	8005fb4 <USB_ReadInterrupts>
 8003150:	4603      	mov	r3, r0
 8003152:	f003 0310 	and.w	r3, r3, #16
 8003156:	2b10      	cmp	r3, #16
 8003158:	d161      	bne.n	800321e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	699a      	ldr	r2, [r3, #24]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f022 0210 	bic.w	r2, r2, #16
 8003168:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800316a:	6a3b      	ldr	r3, [r7, #32]
 800316c:	6a1b      	ldr	r3, [r3, #32]
 800316e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003170:	69bb      	ldr	r3, [r7, #24]
 8003172:	f003 020f 	and.w	r2, r3, #15
 8003176:	4613      	mov	r3, r2
 8003178:	00db      	lsls	r3, r3, #3
 800317a:	4413      	add	r3, r2
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	4413      	add	r3, r2
 8003186:	3304      	adds	r3, #4
 8003188:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800318a:	69bb      	ldr	r3, [r7, #24]
 800318c:	0c5b      	lsrs	r3, r3, #17
 800318e:	f003 030f 	and.w	r3, r3, #15
 8003192:	2b02      	cmp	r3, #2
 8003194:	d124      	bne.n	80031e0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003196:	69ba      	ldr	r2, [r7, #24]
 8003198:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800319c:	4013      	ands	r3, r2
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d035      	beq.n	800320e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80031a6:	69bb      	ldr	r3, [r7, #24]
 80031a8:	091b      	lsrs	r3, r3, #4
 80031aa:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80031ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	461a      	mov	r2, r3
 80031b4:	6a38      	ldr	r0, [r7, #32]
 80031b6:	f002 fd69 	bl	8005c8c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	68da      	ldr	r2, [r3, #12]
 80031be:	69bb      	ldr	r3, [r7, #24]
 80031c0:	091b      	lsrs	r3, r3, #4
 80031c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80031c6:	441a      	add	r2, r3
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	695a      	ldr	r2, [r3, #20]
 80031d0:	69bb      	ldr	r3, [r7, #24]
 80031d2:	091b      	lsrs	r3, r3, #4
 80031d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80031d8:	441a      	add	r2, r3
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	615a      	str	r2, [r3, #20]
 80031de:	e016      	b.n	800320e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80031e0:	69bb      	ldr	r3, [r7, #24]
 80031e2:	0c5b      	lsrs	r3, r3, #17
 80031e4:	f003 030f 	and.w	r3, r3, #15
 80031e8:	2b06      	cmp	r3, #6
 80031ea:	d110      	bne.n	800320e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80031f2:	2208      	movs	r2, #8
 80031f4:	4619      	mov	r1, r3
 80031f6:	6a38      	ldr	r0, [r7, #32]
 80031f8:	f002 fd48 	bl	8005c8c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	695a      	ldr	r2, [r3, #20]
 8003200:	69bb      	ldr	r3, [r7, #24]
 8003202:	091b      	lsrs	r3, r3, #4
 8003204:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003208:	441a      	add	r2, r3
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	699a      	ldr	r2, [r3, #24]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f042 0210 	orr.w	r2, r2, #16
 800321c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4618      	mov	r0, r3
 8003224:	f002 fec6 	bl	8005fb4 <USB_ReadInterrupts>
 8003228:	4603      	mov	r3, r0
 800322a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800322e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003232:	f040 80a7 	bne.w	8003384 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003236:	2300      	movs	r3, #0
 8003238:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4618      	mov	r0, r3
 8003240:	f002 fecb 	bl	8005fda <USB_ReadDevAllOutEpInterrupt>
 8003244:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003246:	e099      	b.n	800337c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800324a:	f003 0301 	and.w	r3, r3, #1
 800324e:	2b00      	cmp	r3, #0
 8003250:	f000 808e 	beq.w	8003370 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800325a:	b2d2      	uxtb	r2, r2
 800325c:	4611      	mov	r1, r2
 800325e:	4618      	mov	r0, r3
 8003260:	f002 feef 	bl	8006042 <USB_ReadDevOutEPInterrupt>
 8003264:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	f003 0301 	and.w	r3, r3, #1
 800326c:	2b00      	cmp	r3, #0
 800326e:	d00c      	beq.n	800328a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003272:	015a      	lsls	r2, r3, #5
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	4413      	add	r3, r2
 8003278:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800327c:	461a      	mov	r2, r3
 800327e:	2301      	movs	r3, #1
 8003280:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003282:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	f000 fea3 	bl	8003fd0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	f003 0308 	and.w	r3, r3, #8
 8003290:	2b00      	cmp	r3, #0
 8003292:	d00c      	beq.n	80032ae <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003296:	015a      	lsls	r2, r3, #5
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	4413      	add	r3, r2
 800329c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032a0:	461a      	mov	r2, r3
 80032a2:	2308      	movs	r3, #8
 80032a4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80032a6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	f000 ff79 	bl	80041a0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	f003 0310 	and.w	r3, r3, #16
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d008      	beq.n	80032ca <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80032b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ba:	015a      	lsls	r2, r3, #5
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	4413      	add	r3, r2
 80032c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032c4:	461a      	mov	r2, r3
 80032c6:	2310      	movs	r3, #16
 80032c8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	f003 0302 	and.w	r3, r3, #2
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d030      	beq.n	8003336 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80032d4:	6a3b      	ldr	r3, [r7, #32]
 80032d6:	695b      	ldr	r3, [r3, #20]
 80032d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032dc:	2b80      	cmp	r3, #128	@ 0x80
 80032de:	d109      	bne.n	80032f4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	69fa      	ldr	r2, [r7, #28]
 80032ea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80032ee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80032f2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80032f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032f6:	4613      	mov	r3, r2
 80032f8:	00db      	lsls	r3, r3, #3
 80032fa:	4413      	add	r3, r2
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	4413      	add	r3, r2
 8003306:	3304      	adds	r3, #4
 8003308:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	78db      	ldrb	r3, [r3, #3]
 800330e:	2b01      	cmp	r3, #1
 8003310:	d108      	bne.n	8003324 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	2200      	movs	r2, #0
 8003316:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800331a:	b2db      	uxtb	r3, r3
 800331c:	4619      	mov	r1, r3
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f005 fa70 	bl	8008804 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003326:	015a      	lsls	r2, r3, #5
 8003328:	69fb      	ldr	r3, [r7, #28]
 800332a:	4413      	add	r3, r2
 800332c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003330:	461a      	mov	r2, r3
 8003332:	2302      	movs	r3, #2
 8003334:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	f003 0320 	and.w	r3, r3, #32
 800333c:	2b00      	cmp	r3, #0
 800333e:	d008      	beq.n	8003352 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003342:	015a      	lsls	r2, r3, #5
 8003344:	69fb      	ldr	r3, [r7, #28]
 8003346:	4413      	add	r3, r2
 8003348:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800334c:	461a      	mov	r2, r3
 800334e:	2320      	movs	r3, #32
 8003350:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003358:	2b00      	cmp	r3, #0
 800335a:	d009      	beq.n	8003370 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800335c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800335e:	015a      	lsls	r2, r3, #5
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	4413      	add	r3, r2
 8003364:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003368:	461a      	mov	r2, r3
 800336a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800336e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003372:	3301      	adds	r3, #1
 8003374:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003378:	085b      	lsrs	r3, r3, #1
 800337a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800337c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800337e:	2b00      	cmp	r3, #0
 8003380:	f47f af62 	bne.w	8003248 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4618      	mov	r0, r3
 800338a:	f002 fe13 	bl	8005fb4 <USB_ReadInterrupts>
 800338e:	4603      	mov	r3, r0
 8003390:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003394:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003398:	f040 80db 	bne.w	8003552 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4618      	mov	r0, r3
 80033a2:	f002 fe34 	bl	800600e <USB_ReadDevAllInEpInterrupt>
 80033a6:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80033a8:	2300      	movs	r3, #0
 80033aa:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80033ac:	e0cd      	b.n	800354a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80033ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033b0:	f003 0301 	and.w	r3, r3, #1
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	f000 80c2 	beq.w	800353e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033c0:	b2d2      	uxtb	r2, r2
 80033c2:	4611      	mov	r1, r2
 80033c4:	4618      	mov	r0, r3
 80033c6:	f002 fe5a 	bl	800607e <USB_ReadDevInEPInterrupt>
 80033ca:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	f003 0301 	and.w	r3, r3, #1
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d057      	beq.n	8003486 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80033d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033d8:	f003 030f 	and.w	r3, r3, #15
 80033dc:	2201      	movs	r2, #1
 80033de:	fa02 f303 	lsl.w	r3, r2, r3
 80033e2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80033e4:	69fb      	ldr	r3, [r7, #28]
 80033e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80033ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	43db      	mvns	r3, r3
 80033f0:	69f9      	ldr	r1, [r7, #28]
 80033f2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80033f6:	4013      	ands	r3, r2
 80033f8:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80033fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033fc:	015a      	lsls	r2, r3, #5
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	4413      	add	r3, r2
 8003402:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003406:	461a      	mov	r2, r3
 8003408:	2301      	movs	r3, #1
 800340a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	799b      	ldrb	r3, [r3, #6]
 8003410:	2b01      	cmp	r3, #1
 8003412:	d132      	bne.n	800347a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003414:	6879      	ldr	r1, [r7, #4]
 8003416:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003418:	4613      	mov	r3, r2
 800341a:	00db      	lsls	r3, r3, #3
 800341c:	4413      	add	r3, r2
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	440b      	add	r3, r1
 8003422:	3320      	adds	r3, #32
 8003424:	6819      	ldr	r1, [r3, #0]
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800342a:	4613      	mov	r3, r2
 800342c:	00db      	lsls	r3, r3, #3
 800342e:	4413      	add	r3, r2
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	4403      	add	r3, r0
 8003434:	331c      	adds	r3, #28
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4419      	add	r1, r3
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800343e:	4613      	mov	r3, r2
 8003440:	00db      	lsls	r3, r3, #3
 8003442:	4413      	add	r3, r2
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	4403      	add	r3, r0
 8003448:	3320      	adds	r3, #32
 800344a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800344c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800344e:	2b00      	cmp	r3, #0
 8003450:	d113      	bne.n	800347a <HAL_PCD_IRQHandler+0x3a2>
 8003452:	6879      	ldr	r1, [r7, #4]
 8003454:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003456:	4613      	mov	r3, r2
 8003458:	00db      	lsls	r3, r3, #3
 800345a:	4413      	add	r3, r2
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	440b      	add	r3, r1
 8003460:	3324      	adds	r3, #36	@ 0x24
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d108      	bne.n	800347a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6818      	ldr	r0, [r3, #0]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003472:	461a      	mov	r2, r3
 8003474:	2101      	movs	r1, #1
 8003476:	f002 fe61 	bl	800613c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800347a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800347c:	b2db      	uxtb	r3, r3
 800347e:	4619      	mov	r1, r3
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f005 f944 	bl	800870e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	f003 0308 	and.w	r3, r3, #8
 800348c:	2b00      	cmp	r3, #0
 800348e:	d008      	beq.n	80034a2 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003492:	015a      	lsls	r2, r3, #5
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	4413      	add	r3, r2
 8003498:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800349c:	461a      	mov	r2, r3
 800349e:	2308      	movs	r3, #8
 80034a0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	f003 0310 	and.w	r3, r3, #16
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d008      	beq.n	80034be <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80034ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ae:	015a      	lsls	r2, r3, #5
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	4413      	add	r3, r2
 80034b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80034b8:	461a      	mov	r2, r3
 80034ba:	2310      	movs	r3, #16
 80034bc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d008      	beq.n	80034da <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80034c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ca:	015a      	lsls	r2, r3, #5
 80034cc:	69fb      	ldr	r3, [r7, #28]
 80034ce:	4413      	add	r3, r2
 80034d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80034d4:	461a      	mov	r2, r3
 80034d6:	2340      	movs	r3, #64	@ 0x40
 80034d8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	f003 0302 	and.w	r3, r3, #2
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d023      	beq.n	800352c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80034e4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80034e6:	6a38      	ldr	r0, [r7, #32]
 80034e8:	f001 fe48 	bl	800517c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80034ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034ee:	4613      	mov	r3, r2
 80034f0:	00db      	lsls	r3, r3, #3
 80034f2:	4413      	add	r3, r2
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	3310      	adds	r3, #16
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	4413      	add	r3, r2
 80034fc:	3304      	adds	r3, #4
 80034fe:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	78db      	ldrb	r3, [r3, #3]
 8003504:	2b01      	cmp	r3, #1
 8003506:	d108      	bne.n	800351a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	2200      	movs	r2, #0
 800350c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800350e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003510:	b2db      	uxtb	r3, r3
 8003512:	4619      	mov	r1, r3
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f005 f987 	bl	8008828 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800351a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800351c:	015a      	lsls	r2, r3, #5
 800351e:	69fb      	ldr	r3, [r7, #28]
 8003520:	4413      	add	r3, r2
 8003522:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003526:	461a      	mov	r2, r3
 8003528:	2302      	movs	r3, #2
 800352a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003532:	2b00      	cmp	r3, #0
 8003534:	d003      	beq.n	800353e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003536:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f000 fcbd 	bl	8003eb8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800353e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003540:	3301      	adds	r3, #1
 8003542:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003546:	085b      	lsrs	r3, r3, #1
 8003548:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800354a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800354c:	2b00      	cmp	r3, #0
 800354e:	f47f af2e 	bne.w	80033ae <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4618      	mov	r0, r3
 8003558:	f002 fd2c 	bl	8005fb4 <USB_ReadInterrupts>
 800355c:	4603      	mov	r3, r0
 800355e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003562:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003566:	d122      	bne.n	80035ae <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	69fa      	ldr	r2, [r7, #28]
 8003572:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003576:	f023 0301 	bic.w	r3, r3, #1
 800357a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003582:	2b01      	cmp	r3, #1
 8003584:	d108      	bne.n	8003598 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800358e:	2100      	movs	r1, #0
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f000 fea3 	bl	80042dc <HAL_PCDEx_LPM_Callback>
 8003596:	e002      	b.n	800359e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f005 f925 	bl	80087e8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	695a      	ldr	r2, [r3, #20]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80035ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4618      	mov	r0, r3
 80035b4:	f002 fcfe 	bl	8005fb4 <USB_ReadInterrupts>
 80035b8:	4603      	mov	r3, r0
 80035ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80035be:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80035c2:	d112      	bne.n	80035ea <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	f003 0301 	and.w	r3, r3, #1
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d102      	bne.n	80035da <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f005 f8e1 	bl	800879c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	695a      	ldr	r2, [r3, #20]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80035e8:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4618      	mov	r0, r3
 80035f0:	f002 fce0 	bl	8005fb4 <USB_ReadInterrupts>
 80035f4:	4603      	mov	r3, r0
 80035f6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80035fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035fe:	f040 80b7 	bne.w	8003770 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	69fa      	ldr	r2, [r7, #28]
 800360c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003610:	f023 0301 	bic.w	r3, r3, #1
 8003614:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	2110      	movs	r1, #16
 800361c:	4618      	mov	r0, r3
 800361e:	f001 fdad 	bl	800517c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003622:	2300      	movs	r3, #0
 8003624:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003626:	e046      	b.n	80036b6 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003628:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800362a:	015a      	lsls	r2, r3, #5
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	4413      	add	r3, r2
 8003630:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003634:	461a      	mov	r2, r3
 8003636:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800363a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800363c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800363e:	015a      	lsls	r2, r3, #5
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	4413      	add	r3, r2
 8003644:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800364c:	0151      	lsls	r1, r2, #5
 800364e:	69fa      	ldr	r2, [r7, #28]
 8003650:	440a      	add	r2, r1
 8003652:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003656:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800365a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800365c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800365e:	015a      	lsls	r2, r3, #5
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	4413      	add	r3, r2
 8003664:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003668:	461a      	mov	r2, r3
 800366a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800366e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003670:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003672:	015a      	lsls	r2, r3, #5
 8003674:	69fb      	ldr	r3, [r7, #28]
 8003676:	4413      	add	r3, r2
 8003678:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003680:	0151      	lsls	r1, r2, #5
 8003682:	69fa      	ldr	r2, [r7, #28]
 8003684:	440a      	add	r2, r1
 8003686:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800368a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800368e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003690:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003692:	015a      	lsls	r2, r3, #5
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	4413      	add	r3, r2
 8003698:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80036a0:	0151      	lsls	r1, r2, #5
 80036a2:	69fa      	ldr	r2, [r7, #28]
 80036a4:	440a      	add	r2, r1
 80036a6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80036aa:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80036ae:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036b2:	3301      	adds	r3, #1
 80036b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	791b      	ldrb	r3, [r3, #4]
 80036ba:	461a      	mov	r2, r3
 80036bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036be:	4293      	cmp	r3, r2
 80036c0:	d3b2      	bcc.n	8003628 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80036c2:	69fb      	ldr	r3, [r7, #28]
 80036c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80036c8:	69db      	ldr	r3, [r3, #28]
 80036ca:	69fa      	ldr	r2, [r7, #28]
 80036cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80036d0:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80036d4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	7bdb      	ldrb	r3, [r3, #15]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d016      	beq.n	800370c <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80036e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80036e8:	69fa      	ldr	r2, [r7, #28]
 80036ea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80036ee:	f043 030b 	orr.w	r3, r3, #11
 80036f2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80036fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036fe:	69fa      	ldr	r2, [r7, #28]
 8003700:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003704:	f043 030b 	orr.w	r3, r3, #11
 8003708:	6453      	str	r3, [r2, #68]	@ 0x44
 800370a:	e015      	b.n	8003738 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003712:	695b      	ldr	r3, [r3, #20]
 8003714:	69fa      	ldr	r2, [r7, #28]
 8003716:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800371a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800371e:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8003722:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800372a:	691b      	ldr	r3, [r3, #16]
 800372c:	69fa      	ldr	r2, [r7, #28]
 800372e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003732:	f043 030b 	orr.w	r3, r3, #11
 8003736:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	69fa      	ldr	r2, [r7, #28]
 8003742:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003746:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800374a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6818      	ldr	r0, [r3, #0]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800375a:	461a      	mov	r2, r3
 800375c:	f002 fcee 	bl	800613c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	695a      	ldr	r2, [r3, #20]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800376e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4618      	mov	r0, r3
 8003776:	f002 fc1d 	bl	8005fb4 <USB_ReadInterrupts>
 800377a:	4603      	mov	r3, r0
 800377c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003780:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003784:	d123      	bne.n	80037ce <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4618      	mov	r0, r3
 800378c:	f002 fcb3 	bl	80060f6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4618      	mov	r0, r3
 8003796:	f001 fd6a 	bl	800526e <USB_GetDevSpeed>
 800379a:	4603      	mov	r3, r0
 800379c:	461a      	mov	r2, r3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681c      	ldr	r4, [r3, #0]
 80037a6:	f001 f9d5 	bl	8004b54 <HAL_RCC_GetHCLKFreq>
 80037aa:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80037b0:	461a      	mov	r2, r3
 80037b2:	4620      	mov	r0, r4
 80037b4:	f001 fa6e 	bl	8004c94 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f004 ffd0 	bl	800875e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	695a      	ldr	r2, [r3, #20]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80037cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4618      	mov	r0, r3
 80037d4:	f002 fbee 	bl	8005fb4 <USB_ReadInterrupts>
 80037d8:	4603      	mov	r3, r0
 80037da:	f003 0308 	and.w	r3, r3, #8
 80037de:	2b08      	cmp	r3, #8
 80037e0:	d10a      	bne.n	80037f8 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f004 ffad 	bl	8008742 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	695a      	ldr	r2, [r3, #20]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f002 0208 	and.w	r2, r2, #8
 80037f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4618      	mov	r0, r3
 80037fe:	f002 fbd9 	bl	8005fb4 <USB_ReadInterrupts>
 8003802:	4603      	mov	r3, r0
 8003804:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003808:	2b80      	cmp	r3, #128	@ 0x80
 800380a:	d123      	bne.n	8003854 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800380c:	6a3b      	ldr	r3, [r7, #32]
 800380e:	699b      	ldr	r3, [r3, #24]
 8003810:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003814:	6a3b      	ldr	r3, [r7, #32]
 8003816:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003818:	2301      	movs	r3, #1
 800381a:	627b      	str	r3, [r7, #36]	@ 0x24
 800381c:	e014      	b.n	8003848 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800381e:	6879      	ldr	r1, [r7, #4]
 8003820:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003822:	4613      	mov	r3, r2
 8003824:	00db      	lsls	r3, r3, #3
 8003826:	4413      	add	r3, r2
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	440b      	add	r3, r1
 800382c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003830:	781b      	ldrb	r3, [r3, #0]
 8003832:	2b01      	cmp	r3, #1
 8003834:	d105      	bne.n	8003842 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003838:	b2db      	uxtb	r3, r3
 800383a:	4619      	mov	r1, r3
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f000 fb0a 	bl	8003e56 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003844:	3301      	adds	r3, #1
 8003846:	627b      	str	r3, [r7, #36]	@ 0x24
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	791b      	ldrb	r3, [r3, #4]
 800384c:	461a      	mov	r2, r3
 800384e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003850:	4293      	cmp	r3, r2
 8003852:	d3e4      	bcc.n	800381e <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4618      	mov	r0, r3
 800385a:	f002 fbab 	bl	8005fb4 <USB_ReadInterrupts>
 800385e:	4603      	mov	r3, r0
 8003860:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003864:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003868:	d13c      	bne.n	80038e4 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800386a:	2301      	movs	r3, #1
 800386c:	627b      	str	r3, [r7, #36]	@ 0x24
 800386e:	e02b      	b.n	80038c8 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003872:	015a      	lsls	r2, r3, #5
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	4413      	add	r3, r2
 8003878:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003880:	6879      	ldr	r1, [r7, #4]
 8003882:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003884:	4613      	mov	r3, r2
 8003886:	00db      	lsls	r3, r3, #3
 8003888:	4413      	add	r3, r2
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	440b      	add	r3, r1
 800388e:	3318      	adds	r3, #24
 8003890:	781b      	ldrb	r3, [r3, #0]
 8003892:	2b01      	cmp	r3, #1
 8003894:	d115      	bne.n	80038c2 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003896:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003898:	2b00      	cmp	r3, #0
 800389a:	da12      	bge.n	80038c2 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800389c:	6879      	ldr	r1, [r7, #4]
 800389e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038a0:	4613      	mov	r3, r2
 80038a2:	00db      	lsls	r3, r3, #3
 80038a4:	4413      	add	r3, r2
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	440b      	add	r3, r1
 80038aa:	3317      	adds	r3, #23
 80038ac:	2201      	movs	r2, #1
 80038ae:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80038b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	4619      	mov	r1, r3
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f000 faca 	bl	8003e56 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80038c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038c4:	3301      	adds	r3, #1
 80038c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	791b      	ldrb	r3, [r3, #4]
 80038cc:	461a      	mov	r2, r3
 80038ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d3cd      	bcc.n	8003870 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	695a      	ldr	r2, [r3, #20]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80038e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4618      	mov	r0, r3
 80038ea:	f002 fb63 	bl	8005fb4 <USB_ReadInterrupts>
 80038ee:	4603      	mov	r3, r0
 80038f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80038f4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80038f8:	d156      	bne.n	80039a8 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80038fa:	2301      	movs	r3, #1
 80038fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80038fe:	e045      	b.n	800398c <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003902:	015a      	lsls	r2, r3, #5
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	4413      	add	r3, r2
 8003908:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003910:	6879      	ldr	r1, [r7, #4]
 8003912:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003914:	4613      	mov	r3, r2
 8003916:	00db      	lsls	r3, r3, #3
 8003918:	4413      	add	r3, r2
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	440b      	add	r3, r1
 800391e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003922:	781b      	ldrb	r3, [r3, #0]
 8003924:	2b01      	cmp	r3, #1
 8003926:	d12e      	bne.n	8003986 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003928:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800392a:	2b00      	cmp	r3, #0
 800392c:	da2b      	bge.n	8003986 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800393a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800393e:	429a      	cmp	r2, r3
 8003940:	d121      	bne.n	8003986 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003942:	6879      	ldr	r1, [r7, #4]
 8003944:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003946:	4613      	mov	r3, r2
 8003948:	00db      	lsls	r3, r3, #3
 800394a:	4413      	add	r3, r2
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	440b      	add	r3, r1
 8003950:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003954:	2201      	movs	r2, #1
 8003956:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003958:	6a3b      	ldr	r3, [r7, #32]
 800395a:	699b      	ldr	r3, [r3, #24]
 800395c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003960:	6a3b      	ldr	r3, [r7, #32]
 8003962:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003964:	6a3b      	ldr	r3, [r7, #32]
 8003966:	695b      	ldr	r3, [r3, #20]
 8003968:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800396c:	2b00      	cmp	r3, #0
 800396e:	d10a      	bne.n	8003986 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	69fa      	ldr	r2, [r7, #28]
 800397a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800397e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003982:	6053      	str	r3, [r2, #4]
            break;
 8003984:	e008      	b.n	8003998 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003988:	3301      	adds	r3, #1
 800398a:	627b      	str	r3, [r7, #36]	@ 0x24
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	791b      	ldrb	r3, [r3, #4]
 8003990:	461a      	mov	r2, r3
 8003992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003994:	4293      	cmp	r3, r2
 8003996:	d3b3      	bcc.n	8003900 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	695a      	ldr	r2, [r3, #20]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80039a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4618      	mov	r0, r3
 80039ae:	f002 fb01 	bl	8005fb4 <USB_ReadInterrupts>
 80039b2:	4603      	mov	r3, r0
 80039b4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80039b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039bc:	d10a      	bne.n	80039d4 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f004 ff44 	bl	800884c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	695a      	ldr	r2, [r3, #20]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80039d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4618      	mov	r0, r3
 80039da:	f002 faeb 	bl	8005fb4 <USB_ReadInterrupts>
 80039de:	4603      	mov	r3, r0
 80039e0:	f003 0304 	and.w	r3, r3, #4
 80039e4:	2b04      	cmp	r3, #4
 80039e6:	d115      	bne.n	8003a14 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80039f0:	69bb      	ldr	r3, [r7, #24]
 80039f2:	f003 0304 	and.w	r3, r3, #4
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d002      	beq.n	8003a00 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f004 ff34 	bl	8008868 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	6859      	ldr	r1, [r3, #4]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	69ba      	ldr	r2, [r7, #24]
 8003a0c:	430a      	orrs	r2, r1
 8003a0e:	605a      	str	r2, [r3, #4]
 8003a10:	e000      	b.n	8003a14 <HAL_PCD_IRQHandler+0x93c>
      return;
 8003a12:	bf00      	nop
    }
  }
}
 8003a14:	3734      	adds	r7, #52	@ 0x34
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd90      	pop	{r4, r7, pc}

08003a1a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003a1a:	b580      	push	{r7, lr}
 8003a1c:	b082      	sub	sp, #8
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	6078      	str	r0, [r7, #4]
 8003a22:	460b      	mov	r3, r1
 8003a24:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d101      	bne.n	8003a34 <HAL_PCD_SetAddress+0x1a>
 8003a30:	2302      	movs	r3, #2
 8003a32:	e012      	b.n	8003a5a <HAL_PCD_SetAddress+0x40>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	78fa      	ldrb	r2, [r7, #3]
 8003a40:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	78fa      	ldrb	r2, [r7, #3]
 8003a48:	4611      	mov	r1, r2
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f002 fa4a 	bl	8005ee4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003a58:	2300      	movs	r3, #0
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3708      	adds	r7, #8
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}

08003a62 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003a62:	b580      	push	{r7, lr}
 8003a64:	b084      	sub	sp, #16
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	6078      	str	r0, [r7, #4]
 8003a6a:	4608      	mov	r0, r1
 8003a6c:	4611      	mov	r1, r2
 8003a6e:	461a      	mov	r2, r3
 8003a70:	4603      	mov	r3, r0
 8003a72:	70fb      	strb	r3, [r7, #3]
 8003a74:	460b      	mov	r3, r1
 8003a76:	803b      	strh	r3, [r7, #0]
 8003a78:	4613      	mov	r3, r2
 8003a7a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003a80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	da0f      	bge.n	8003aa8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a88:	78fb      	ldrb	r3, [r7, #3]
 8003a8a:	f003 020f 	and.w	r2, r3, #15
 8003a8e:	4613      	mov	r3, r2
 8003a90:	00db      	lsls	r3, r3, #3
 8003a92:	4413      	add	r3, r2
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	3310      	adds	r3, #16
 8003a98:	687a      	ldr	r2, [r7, #4]
 8003a9a:	4413      	add	r3, r2
 8003a9c:	3304      	adds	r3, #4
 8003a9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	705a      	strb	r2, [r3, #1]
 8003aa6:	e00f      	b.n	8003ac8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003aa8:	78fb      	ldrb	r3, [r7, #3]
 8003aaa:	f003 020f 	and.w	r2, r3, #15
 8003aae:	4613      	mov	r3, r2
 8003ab0:	00db      	lsls	r3, r3, #3
 8003ab2:	4413      	add	r3, r2
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	4413      	add	r3, r2
 8003abe:	3304      	adds	r3, #4
 8003ac0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003ac8:	78fb      	ldrb	r3, [r7, #3]
 8003aca:	f003 030f 	and.w	r3, r3, #15
 8003ace:	b2da      	uxtb	r2, r3
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003ad4:	883b      	ldrh	r3, [r7, #0]
 8003ad6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	78ba      	ldrb	r2, [r7, #2]
 8003ae2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	785b      	ldrb	r3, [r3, #1]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d004      	beq.n	8003af6 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	461a      	mov	r2, r3
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003af6:	78bb      	ldrb	r3, [r7, #2]
 8003af8:	2b02      	cmp	r3, #2
 8003afa:	d102      	bne.n	8003b02 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2200      	movs	r2, #0
 8003b00:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d101      	bne.n	8003b10 <HAL_PCD_EP_Open+0xae>
 8003b0c:	2302      	movs	r3, #2
 8003b0e:	e00e      	b.n	8003b2e <HAL_PCD_EP_Open+0xcc>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	68f9      	ldr	r1, [r7, #12]
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f001 fbca 	bl	80052b8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003b2c:	7afb      	ldrb	r3, [r7, #11]
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3710      	adds	r7, #16
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}

08003b36 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b36:	b580      	push	{r7, lr}
 8003b38:	b084      	sub	sp, #16
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	6078      	str	r0, [r7, #4]
 8003b3e:	460b      	mov	r3, r1
 8003b40:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003b42:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	da0f      	bge.n	8003b6a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b4a:	78fb      	ldrb	r3, [r7, #3]
 8003b4c:	f003 020f 	and.w	r2, r3, #15
 8003b50:	4613      	mov	r3, r2
 8003b52:	00db      	lsls	r3, r3, #3
 8003b54:	4413      	add	r3, r2
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	3310      	adds	r3, #16
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	4413      	add	r3, r2
 8003b5e:	3304      	adds	r3, #4
 8003b60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2201      	movs	r2, #1
 8003b66:	705a      	strb	r2, [r3, #1]
 8003b68:	e00f      	b.n	8003b8a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b6a:	78fb      	ldrb	r3, [r7, #3]
 8003b6c:	f003 020f 	and.w	r2, r3, #15
 8003b70:	4613      	mov	r3, r2
 8003b72:	00db      	lsls	r3, r3, #3
 8003b74:	4413      	add	r3, r2
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003b7c:	687a      	ldr	r2, [r7, #4]
 8003b7e:	4413      	add	r3, r2
 8003b80:	3304      	adds	r3, #4
 8003b82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2200      	movs	r2, #0
 8003b88:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b8a:	78fb      	ldrb	r3, [r7, #3]
 8003b8c:	f003 030f 	and.w	r3, r3, #15
 8003b90:	b2da      	uxtb	r2, r3
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d101      	bne.n	8003ba4 <HAL_PCD_EP_Close+0x6e>
 8003ba0:	2302      	movs	r3, #2
 8003ba2:	e00e      	b.n	8003bc2 <HAL_PCD_EP_Close+0x8c>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	68f9      	ldr	r1, [r7, #12]
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f001 fc08 	bl	80053c8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003bc0:	2300      	movs	r3, #0
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3710      	adds	r7, #16
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}

08003bca <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003bca:	b580      	push	{r7, lr}
 8003bcc:	b086      	sub	sp, #24
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	60f8      	str	r0, [r7, #12]
 8003bd2:	607a      	str	r2, [r7, #4]
 8003bd4:	603b      	str	r3, [r7, #0]
 8003bd6:	460b      	mov	r3, r1
 8003bd8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003bda:	7afb      	ldrb	r3, [r7, #11]
 8003bdc:	f003 020f 	and.w	r2, r3, #15
 8003be0:	4613      	mov	r3, r2
 8003be2:	00db      	lsls	r3, r3, #3
 8003be4:	4413      	add	r3, r2
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003bec:	68fa      	ldr	r2, [r7, #12]
 8003bee:	4413      	add	r3, r2
 8003bf0:	3304      	adds	r3, #4
 8003bf2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	683a      	ldr	r2, [r7, #0]
 8003bfe:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	2200      	movs	r2, #0
 8003c04:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c0c:	7afb      	ldrb	r3, [r7, #11]
 8003c0e:	f003 030f 	and.w	r3, r3, #15
 8003c12:	b2da      	uxtb	r2, r3
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	799b      	ldrb	r3, [r3, #6]
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d102      	bne.n	8003c26 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	6818      	ldr	r0, [r3, #0]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	799b      	ldrb	r3, [r3, #6]
 8003c2e:	461a      	mov	r2, r3
 8003c30:	6979      	ldr	r1, [r7, #20]
 8003c32:	f001 fca5 	bl	8005580 <USB_EPStartXfer>

  return HAL_OK;
 8003c36:	2300      	movs	r3, #0
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3718      	adds	r7, #24
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}

08003c40 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	460b      	mov	r3, r1
 8003c4a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003c4c:	78fb      	ldrb	r3, [r7, #3]
 8003c4e:	f003 020f 	and.w	r2, r3, #15
 8003c52:	6879      	ldr	r1, [r7, #4]
 8003c54:	4613      	mov	r3, r2
 8003c56:	00db      	lsls	r3, r3, #3
 8003c58:	4413      	add	r3, r2
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	440b      	add	r3, r1
 8003c5e:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003c62:	681b      	ldr	r3, [r3, #0]
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	370c      	adds	r7, #12
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr

08003c70 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b086      	sub	sp, #24
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	60f8      	str	r0, [r7, #12]
 8003c78:	607a      	str	r2, [r7, #4]
 8003c7a:	603b      	str	r3, [r7, #0]
 8003c7c:	460b      	mov	r3, r1
 8003c7e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c80:	7afb      	ldrb	r3, [r7, #11]
 8003c82:	f003 020f 	and.w	r2, r3, #15
 8003c86:	4613      	mov	r3, r2
 8003c88:	00db      	lsls	r3, r3, #3
 8003c8a:	4413      	add	r3, r2
 8003c8c:	009b      	lsls	r3, r3, #2
 8003c8e:	3310      	adds	r3, #16
 8003c90:	68fa      	ldr	r2, [r7, #12]
 8003c92:	4413      	add	r3, r2
 8003c94:	3304      	adds	r3, #4
 8003c96:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	683a      	ldr	r2, [r7, #0]
 8003ca2:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	2201      	movs	r2, #1
 8003cae:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003cb0:	7afb      	ldrb	r3, [r7, #11]
 8003cb2:	f003 030f 	and.w	r3, r3, #15
 8003cb6:	b2da      	uxtb	r2, r3
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	799b      	ldrb	r3, [r3, #6]
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d102      	bne.n	8003cca <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6818      	ldr	r0, [r3, #0]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	799b      	ldrb	r3, [r3, #6]
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	6979      	ldr	r1, [r7, #20]
 8003cd6:	f001 fc53 	bl	8005580 <USB_EPStartXfer>

  return HAL_OK;
 8003cda:	2300      	movs	r3, #0
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3718      	adds	r7, #24
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}

08003ce4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b084      	sub	sp, #16
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	460b      	mov	r3, r1
 8003cee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003cf0:	78fb      	ldrb	r3, [r7, #3]
 8003cf2:	f003 030f 	and.w	r3, r3, #15
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	7912      	ldrb	r2, [r2, #4]
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d901      	bls.n	8003d02 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e04f      	b.n	8003da2 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003d02:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	da0f      	bge.n	8003d2a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d0a:	78fb      	ldrb	r3, [r7, #3]
 8003d0c:	f003 020f 	and.w	r2, r3, #15
 8003d10:	4613      	mov	r3, r2
 8003d12:	00db      	lsls	r3, r3, #3
 8003d14:	4413      	add	r3, r2
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	3310      	adds	r3, #16
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	4413      	add	r3, r2
 8003d1e:	3304      	adds	r3, #4
 8003d20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2201      	movs	r2, #1
 8003d26:	705a      	strb	r2, [r3, #1]
 8003d28:	e00d      	b.n	8003d46 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003d2a:	78fa      	ldrb	r2, [r7, #3]
 8003d2c:	4613      	mov	r3, r2
 8003d2e:	00db      	lsls	r3, r3, #3
 8003d30:	4413      	add	r3, r2
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003d38:	687a      	ldr	r2, [r7, #4]
 8003d3a:	4413      	add	r3, r2
 8003d3c:	3304      	adds	r3, #4
 8003d3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2200      	movs	r2, #0
 8003d44:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2201      	movs	r2, #1
 8003d4a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d4c:	78fb      	ldrb	r3, [r7, #3]
 8003d4e:	f003 030f 	and.w	r3, r3, #15
 8003d52:	b2da      	uxtb	r2, r3
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d101      	bne.n	8003d66 <HAL_PCD_EP_SetStall+0x82>
 8003d62:	2302      	movs	r3, #2
 8003d64:	e01d      	b.n	8003da2 <HAL_PCD_EP_SetStall+0xbe>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2201      	movs	r2, #1
 8003d6a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	68f9      	ldr	r1, [r7, #12]
 8003d74:	4618      	mov	r0, r3
 8003d76:	f001 ffe1 	bl	8005d3c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003d7a:	78fb      	ldrb	r3, [r7, #3]
 8003d7c:	f003 030f 	and.w	r3, r3, #15
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d109      	bne.n	8003d98 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6818      	ldr	r0, [r3, #0]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	7999      	ldrb	r1, [r3, #6]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003d92:	461a      	mov	r2, r3
 8003d94:	f002 f9d2 	bl	800613c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003da0:	2300      	movs	r3, #0
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3710      	adds	r7, #16
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}

08003daa <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003daa:	b580      	push	{r7, lr}
 8003dac:	b084      	sub	sp, #16
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
 8003db2:	460b      	mov	r3, r1
 8003db4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003db6:	78fb      	ldrb	r3, [r7, #3]
 8003db8:	f003 030f 	and.w	r3, r3, #15
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	7912      	ldrb	r2, [r2, #4]
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d901      	bls.n	8003dc8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e042      	b.n	8003e4e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003dc8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	da0f      	bge.n	8003df0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003dd0:	78fb      	ldrb	r3, [r7, #3]
 8003dd2:	f003 020f 	and.w	r2, r3, #15
 8003dd6:	4613      	mov	r3, r2
 8003dd8:	00db      	lsls	r3, r3, #3
 8003dda:	4413      	add	r3, r2
 8003ddc:	009b      	lsls	r3, r3, #2
 8003dde:	3310      	adds	r3, #16
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	4413      	add	r3, r2
 8003de4:	3304      	adds	r3, #4
 8003de6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2201      	movs	r2, #1
 8003dec:	705a      	strb	r2, [r3, #1]
 8003dee:	e00f      	b.n	8003e10 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003df0:	78fb      	ldrb	r3, [r7, #3]
 8003df2:	f003 020f 	and.w	r2, r3, #15
 8003df6:	4613      	mov	r3, r2
 8003df8:	00db      	lsls	r3, r3, #3
 8003dfa:	4413      	add	r3, r2
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	4413      	add	r3, r2
 8003e06:	3304      	adds	r3, #4
 8003e08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2200      	movs	r2, #0
 8003e14:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e16:	78fb      	ldrb	r3, [r7, #3]
 8003e18:	f003 030f 	and.w	r3, r3, #15
 8003e1c:	b2da      	uxtb	r2, r3
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d101      	bne.n	8003e30 <HAL_PCD_EP_ClrStall+0x86>
 8003e2c:	2302      	movs	r3, #2
 8003e2e:	e00e      	b.n	8003e4e <HAL_PCD_EP_ClrStall+0xa4>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68f9      	ldr	r1, [r7, #12]
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f001 ffea 	bl	8005e18 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003e4c:	2300      	movs	r3, #0
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3710      	adds	r7, #16
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}

08003e56 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e56:	b580      	push	{r7, lr}
 8003e58:	b084      	sub	sp, #16
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	6078      	str	r0, [r7, #4]
 8003e5e:	460b      	mov	r3, r1
 8003e60:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003e62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	da0c      	bge.n	8003e84 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e6a:	78fb      	ldrb	r3, [r7, #3]
 8003e6c:	f003 020f 	and.w	r2, r3, #15
 8003e70:	4613      	mov	r3, r2
 8003e72:	00db      	lsls	r3, r3, #3
 8003e74:	4413      	add	r3, r2
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	3310      	adds	r3, #16
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	4413      	add	r3, r2
 8003e7e:	3304      	adds	r3, #4
 8003e80:	60fb      	str	r3, [r7, #12]
 8003e82:	e00c      	b.n	8003e9e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e84:	78fb      	ldrb	r3, [r7, #3]
 8003e86:	f003 020f 	and.w	r2, r3, #15
 8003e8a:	4613      	mov	r3, r2
 8003e8c:	00db      	lsls	r3, r3, #3
 8003e8e:	4413      	add	r3, r2
 8003e90:	009b      	lsls	r3, r3, #2
 8003e92:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	4413      	add	r3, r2
 8003e9a:	3304      	adds	r3, #4
 8003e9c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	68f9      	ldr	r1, [r7, #12]
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f001 fe09 	bl	8005abc <USB_EPStopXfer>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003eae:	7afb      	ldrb	r3, [r7, #11]
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3710      	adds	r7, #16
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}

08003eb8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b08a      	sub	sp, #40	@ 0x28
 8003ebc:	af02      	add	r7, sp, #8
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003ecc:	683a      	ldr	r2, [r7, #0]
 8003ece:	4613      	mov	r3, r2
 8003ed0:	00db      	lsls	r3, r3, #3
 8003ed2:	4413      	add	r3, r2
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	3310      	adds	r3, #16
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	4413      	add	r3, r2
 8003edc:	3304      	adds	r3, #4
 8003ede:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	695a      	ldr	r2, [r3, #20]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	691b      	ldr	r3, [r3, #16]
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d901      	bls.n	8003ef0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	e06b      	b.n	8003fc8 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	691a      	ldr	r2, [r3, #16]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	695b      	ldr	r3, [r3, #20]
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	69fa      	ldr	r2, [r7, #28]
 8003f02:	429a      	cmp	r2, r3
 8003f04:	d902      	bls.n	8003f0c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	3303      	adds	r3, #3
 8003f10:	089b      	lsrs	r3, r3, #2
 8003f12:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003f14:	e02a      	b.n	8003f6c <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	691a      	ldr	r2, [r3, #16]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	695b      	ldr	r3, [r3, #20]
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	69fa      	ldr	r2, [r7, #28]
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d902      	bls.n	8003f32 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003f32:	69fb      	ldr	r3, [r7, #28]
 8003f34:	3303      	adds	r3, #3
 8003f36:	089b      	lsrs	r3, r3, #2
 8003f38:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	68d9      	ldr	r1, [r3, #12]
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	b2da      	uxtb	r2, r3
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003f4a:	9300      	str	r3, [sp, #0]
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	6978      	ldr	r0, [r7, #20]
 8003f50:	f001 fe5e 	bl	8005c10 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	68da      	ldr	r2, [r3, #12]
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	441a      	add	r2, r3
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	695a      	ldr	r2, [r3, #20]
 8003f64:	69fb      	ldr	r3, [r7, #28]
 8003f66:	441a      	add	r2, r3
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	015a      	lsls	r2, r3, #5
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	4413      	add	r3, r2
 8003f74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f78:	699b      	ldr	r3, [r3, #24]
 8003f7a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003f7c:	69ba      	ldr	r2, [r7, #24]
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d809      	bhi.n	8003f96 <PCD_WriteEmptyTxFifo+0xde>
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	695a      	ldr	r2, [r3, #20]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d203      	bcs.n	8003f96 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	691b      	ldr	r3, [r3, #16]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d1bf      	bne.n	8003f16 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	691a      	ldr	r2, [r3, #16]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	695b      	ldr	r3, [r3, #20]
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d811      	bhi.n	8003fc6 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	f003 030f 	and.w	r3, r3, #15
 8003fa8:	2201      	movs	r2, #1
 8003faa:	fa02 f303 	lsl.w	r3, r2, r3
 8003fae:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fb6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	43db      	mvns	r3, r3
 8003fbc:	6939      	ldr	r1, [r7, #16]
 8003fbe:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003fc6:	2300      	movs	r3, #0
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3720      	adds	r7, #32
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}

08003fd0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b088      	sub	sp, #32
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fe0:	69fb      	ldr	r3, [r7, #28]
 8003fe2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003fe4:	69fb      	ldr	r3, [r7, #28]
 8003fe6:	333c      	adds	r3, #60	@ 0x3c
 8003fe8:	3304      	adds	r3, #4
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	015a      	lsls	r2, r3, #5
 8003ff2:	69bb      	ldr	r3, [r7, #24]
 8003ff4:	4413      	add	r3, r2
 8003ff6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	799b      	ldrb	r3, [r3, #6]
 8004002:	2b01      	cmp	r3, #1
 8004004:	d17b      	bne.n	80040fe <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	f003 0308 	and.w	r3, r3, #8
 800400c:	2b00      	cmp	r3, #0
 800400e:	d015      	beq.n	800403c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	4a61      	ldr	r2, [pc, #388]	@ (8004198 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004014:	4293      	cmp	r3, r2
 8004016:	f240 80b9 	bls.w	800418c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004020:	2b00      	cmp	r3, #0
 8004022:	f000 80b3 	beq.w	800418c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	015a      	lsls	r2, r3, #5
 800402a:	69bb      	ldr	r3, [r7, #24]
 800402c:	4413      	add	r3, r2
 800402e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004032:	461a      	mov	r2, r3
 8004034:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004038:	6093      	str	r3, [r2, #8]
 800403a:	e0a7      	b.n	800418c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	f003 0320 	and.w	r3, r3, #32
 8004042:	2b00      	cmp	r3, #0
 8004044:	d009      	beq.n	800405a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	015a      	lsls	r2, r3, #5
 800404a:	69bb      	ldr	r3, [r7, #24]
 800404c:	4413      	add	r3, r2
 800404e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004052:	461a      	mov	r2, r3
 8004054:	2320      	movs	r3, #32
 8004056:	6093      	str	r3, [r2, #8]
 8004058:	e098      	b.n	800418c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004060:	2b00      	cmp	r3, #0
 8004062:	f040 8093 	bne.w	800418c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	4a4b      	ldr	r2, [pc, #300]	@ (8004198 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d90f      	bls.n	800408e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004074:	2b00      	cmp	r3, #0
 8004076:	d00a      	beq.n	800408e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	015a      	lsls	r2, r3, #5
 800407c:	69bb      	ldr	r3, [r7, #24]
 800407e:	4413      	add	r3, r2
 8004080:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004084:	461a      	mov	r2, r3
 8004086:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800408a:	6093      	str	r3, [r2, #8]
 800408c:	e07e      	b.n	800418c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800408e:	683a      	ldr	r2, [r7, #0]
 8004090:	4613      	mov	r3, r2
 8004092:	00db      	lsls	r3, r3, #3
 8004094:	4413      	add	r3, r2
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	4413      	add	r3, r2
 80040a0:	3304      	adds	r3, #4
 80040a2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6a1a      	ldr	r2, [r3, #32]
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	0159      	lsls	r1, r3, #5
 80040ac:	69bb      	ldr	r3, [r7, #24]
 80040ae:	440b      	add	r3, r1
 80040b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040ba:	1ad2      	subs	r2, r2, r3
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d114      	bne.n	80040f0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	691b      	ldr	r3, [r3, #16]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d109      	bne.n	80040e2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6818      	ldr	r0, [r3, #0]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80040d8:	461a      	mov	r2, r3
 80040da:	2101      	movs	r1, #1
 80040dc:	f002 f82e 	bl	800613c <USB_EP0_OutStart>
 80040e0:	e006      	b.n	80040f0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	68da      	ldr	r2, [r3, #12]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	695b      	ldr	r3, [r3, #20]
 80040ea:	441a      	add	r2, r3
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	4619      	mov	r1, r3
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f004 faee 	bl	80086d8 <HAL_PCD_DataOutStageCallback>
 80040fc:	e046      	b.n	800418c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	4a26      	ldr	r2, [pc, #152]	@ (800419c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d124      	bne.n	8004150 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800410c:	2b00      	cmp	r3, #0
 800410e:	d00a      	beq.n	8004126 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	015a      	lsls	r2, r3, #5
 8004114:	69bb      	ldr	r3, [r7, #24]
 8004116:	4413      	add	r3, r2
 8004118:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800411c:	461a      	mov	r2, r3
 800411e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004122:	6093      	str	r3, [r2, #8]
 8004124:	e032      	b.n	800418c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	f003 0320 	and.w	r3, r3, #32
 800412c:	2b00      	cmp	r3, #0
 800412e:	d008      	beq.n	8004142 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	015a      	lsls	r2, r3, #5
 8004134:	69bb      	ldr	r3, [r7, #24]
 8004136:	4413      	add	r3, r2
 8004138:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800413c:	461a      	mov	r2, r3
 800413e:	2320      	movs	r3, #32
 8004140:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	b2db      	uxtb	r3, r3
 8004146:	4619      	mov	r1, r3
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f004 fac5 	bl	80086d8 <HAL_PCD_DataOutStageCallback>
 800414e:	e01d      	b.n	800418c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d114      	bne.n	8004180 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004156:	6879      	ldr	r1, [r7, #4]
 8004158:	683a      	ldr	r2, [r7, #0]
 800415a:	4613      	mov	r3, r2
 800415c:	00db      	lsls	r3, r3, #3
 800415e:	4413      	add	r3, r2
 8004160:	009b      	lsls	r3, r3, #2
 8004162:	440b      	add	r3, r1
 8004164:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d108      	bne.n	8004180 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6818      	ldr	r0, [r3, #0]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004178:	461a      	mov	r2, r3
 800417a:	2100      	movs	r1, #0
 800417c:	f001 ffde 	bl	800613c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	b2db      	uxtb	r3, r3
 8004184:	4619      	mov	r1, r3
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f004 faa6 	bl	80086d8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800418c:	2300      	movs	r3, #0
}
 800418e:	4618      	mov	r0, r3
 8004190:	3720      	adds	r7, #32
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	4f54300a 	.word	0x4f54300a
 800419c:	4f54310a 	.word	0x4f54310a

080041a0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b086      	sub	sp, #24
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	333c      	adds	r3, #60	@ 0x3c
 80041b8:	3304      	adds	r3, #4
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	015a      	lsls	r2, r3, #5
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	4413      	add	r3, r2
 80041c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	4a15      	ldr	r2, [pc, #84]	@ (8004228 <PCD_EP_OutSetupPacket_int+0x88>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d90e      	bls.n	80041f4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d009      	beq.n	80041f4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	015a      	lsls	r2, r3, #5
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	4413      	add	r3, r2
 80041e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041ec:	461a      	mov	r2, r3
 80041ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80041f2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f004 fa5d 	bl	80086b4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	4a0a      	ldr	r2, [pc, #40]	@ (8004228 <PCD_EP_OutSetupPacket_int+0x88>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d90c      	bls.n	800421c <PCD_EP_OutSetupPacket_int+0x7c>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	799b      	ldrb	r3, [r3, #6]
 8004206:	2b01      	cmp	r3, #1
 8004208:	d108      	bne.n	800421c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6818      	ldr	r0, [r3, #0]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004214:	461a      	mov	r2, r3
 8004216:	2101      	movs	r1, #1
 8004218:	f001 ff90 	bl	800613c <USB_EP0_OutStart>
  }

  return HAL_OK;
 800421c:	2300      	movs	r3, #0
}
 800421e:	4618      	mov	r0, r3
 8004220:	3718      	adds	r7, #24
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop
 8004228:	4f54300a 	.word	0x4f54300a

0800422c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800422c:	b480      	push	{r7}
 800422e:	b085      	sub	sp, #20
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	460b      	mov	r3, r1
 8004236:	70fb      	strb	r3, [r7, #3]
 8004238:	4613      	mov	r3, r2
 800423a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004242:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004244:	78fb      	ldrb	r3, [r7, #3]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d107      	bne.n	800425a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800424a:	883b      	ldrh	r3, [r7, #0]
 800424c:	0419      	lsls	r1, r3, #16
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	68ba      	ldr	r2, [r7, #8]
 8004254:	430a      	orrs	r2, r1
 8004256:	629a      	str	r2, [r3, #40]	@ 0x28
 8004258:	e028      	b.n	80042ac <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004260:	0c1b      	lsrs	r3, r3, #16
 8004262:	68ba      	ldr	r2, [r7, #8]
 8004264:	4413      	add	r3, r2
 8004266:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004268:	2300      	movs	r3, #0
 800426a:	73fb      	strb	r3, [r7, #15]
 800426c:	e00d      	b.n	800428a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	7bfb      	ldrb	r3, [r7, #15]
 8004274:	3340      	adds	r3, #64	@ 0x40
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	4413      	add	r3, r2
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	0c1b      	lsrs	r3, r3, #16
 800427e:	68ba      	ldr	r2, [r7, #8]
 8004280:	4413      	add	r3, r2
 8004282:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004284:	7bfb      	ldrb	r3, [r7, #15]
 8004286:	3301      	adds	r3, #1
 8004288:	73fb      	strb	r3, [r7, #15]
 800428a:	7bfa      	ldrb	r2, [r7, #15]
 800428c:	78fb      	ldrb	r3, [r7, #3]
 800428e:	3b01      	subs	r3, #1
 8004290:	429a      	cmp	r2, r3
 8004292:	d3ec      	bcc.n	800426e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004294:	883b      	ldrh	r3, [r7, #0]
 8004296:	0418      	lsls	r0, r3, #16
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6819      	ldr	r1, [r3, #0]
 800429c:	78fb      	ldrb	r3, [r7, #3]
 800429e:	3b01      	subs	r3, #1
 80042a0:	68ba      	ldr	r2, [r7, #8]
 80042a2:	4302      	orrs	r2, r0
 80042a4:	3340      	adds	r3, #64	@ 0x40
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	440b      	add	r3, r1
 80042aa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80042ac:	2300      	movs	r3, #0
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3714      	adds	r7, #20
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr

080042ba <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80042ba:	b480      	push	{r7}
 80042bc:	b083      	sub	sp, #12
 80042be:	af00      	add	r7, sp, #0
 80042c0:	6078      	str	r0, [r7, #4]
 80042c2:	460b      	mov	r3, r1
 80042c4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	887a      	ldrh	r2, [r7, #2]
 80042cc:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80042ce:	2300      	movs	r3, #0
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	370c      	adds	r7, #12
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr

080042dc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	460b      	mov	r3, r1
 80042e6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80042e8:	bf00      	nop
 80042ea:	370c      	adds	r7, #12
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr

080042f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b086      	sub	sp, #24
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d101      	bne.n	8004306 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e267      	b.n	80047d6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 0301 	and.w	r3, r3, #1
 800430e:	2b00      	cmp	r3, #0
 8004310:	d075      	beq.n	80043fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004312:	4b88      	ldr	r3, [pc, #544]	@ (8004534 <HAL_RCC_OscConfig+0x240>)
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	f003 030c 	and.w	r3, r3, #12
 800431a:	2b04      	cmp	r3, #4
 800431c:	d00c      	beq.n	8004338 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800431e:	4b85      	ldr	r3, [pc, #532]	@ (8004534 <HAL_RCC_OscConfig+0x240>)
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004326:	2b08      	cmp	r3, #8
 8004328:	d112      	bne.n	8004350 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800432a:	4b82      	ldr	r3, [pc, #520]	@ (8004534 <HAL_RCC_OscConfig+0x240>)
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004332:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004336:	d10b      	bne.n	8004350 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004338:	4b7e      	ldr	r3, [pc, #504]	@ (8004534 <HAL_RCC_OscConfig+0x240>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004340:	2b00      	cmp	r3, #0
 8004342:	d05b      	beq.n	80043fc <HAL_RCC_OscConfig+0x108>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d157      	bne.n	80043fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	e242      	b.n	80047d6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004358:	d106      	bne.n	8004368 <HAL_RCC_OscConfig+0x74>
 800435a:	4b76      	ldr	r3, [pc, #472]	@ (8004534 <HAL_RCC_OscConfig+0x240>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a75      	ldr	r2, [pc, #468]	@ (8004534 <HAL_RCC_OscConfig+0x240>)
 8004360:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004364:	6013      	str	r3, [r2, #0]
 8004366:	e01d      	b.n	80043a4 <HAL_RCC_OscConfig+0xb0>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004370:	d10c      	bne.n	800438c <HAL_RCC_OscConfig+0x98>
 8004372:	4b70      	ldr	r3, [pc, #448]	@ (8004534 <HAL_RCC_OscConfig+0x240>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a6f      	ldr	r2, [pc, #444]	@ (8004534 <HAL_RCC_OscConfig+0x240>)
 8004378:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800437c:	6013      	str	r3, [r2, #0]
 800437e:	4b6d      	ldr	r3, [pc, #436]	@ (8004534 <HAL_RCC_OscConfig+0x240>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a6c      	ldr	r2, [pc, #432]	@ (8004534 <HAL_RCC_OscConfig+0x240>)
 8004384:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004388:	6013      	str	r3, [r2, #0]
 800438a:	e00b      	b.n	80043a4 <HAL_RCC_OscConfig+0xb0>
 800438c:	4b69      	ldr	r3, [pc, #420]	@ (8004534 <HAL_RCC_OscConfig+0x240>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a68      	ldr	r2, [pc, #416]	@ (8004534 <HAL_RCC_OscConfig+0x240>)
 8004392:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004396:	6013      	str	r3, [r2, #0]
 8004398:	4b66      	ldr	r3, [pc, #408]	@ (8004534 <HAL_RCC_OscConfig+0x240>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a65      	ldr	r2, [pc, #404]	@ (8004534 <HAL_RCC_OscConfig+0x240>)
 800439e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80043a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d013      	beq.n	80043d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043ac:	f7fd fa5c 	bl	8001868 <HAL_GetTick>
 80043b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043b2:	e008      	b.n	80043c6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043b4:	f7fd fa58 	bl	8001868 <HAL_GetTick>
 80043b8:	4602      	mov	r2, r0
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	2b64      	cmp	r3, #100	@ 0x64
 80043c0:	d901      	bls.n	80043c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80043c2:	2303      	movs	r3, #3
 80043c4:	e207      	b.n	80047d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043c6:	4b5b      	ldr	r3, [pc, #364]	@ (8004534 <HAL_RCC_OscConfig+0x240>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d0f0      	beq.n	80043b4 <HAL_RCC_OscConfig+0xc0>
 80043d2:	e014      	b.n	80043fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043d4:	f7fd fa48 	bl	8001868 <HAL_GetTick>
 80043d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043da:	e008      	b.n	80043ee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043dc:	f7fd fa44 	bl	8001868 <HAL_GetTick>
 80043e0:	4602      	mov	r2, r0
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	2b64      	cmp	r3, #100	@ 0x64
 80043e8:	d901      	bls.n	80043ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80043ea:	2303      	movs	r3, #3
 80043ec:	e1f3      	b.n	80047d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043ee:	4b51      	ldr	r3, [pc, #324]	@ (8004534 <HAL_RCC_OscConfig+0x240>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d1f0      	bne.n	80043dc <HAL_RCC_OscConfig+0xe8>
 80043fa:	e000      	b.n	80043fe <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 0302 	and.w	r3, r3, #2
 8004406:	2b00      	cmp	r3, #0
 8004408:	d063      	beq.n	80044d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800440a:	4b4a      	ldr	r3, [pc, #296]	@ (8004534 <HAL_RCC_OscConfig+0x240>)
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	f003 030c 	and.w	r3, r3, #12
 8004412:	2b00      	cmp	r3, #0
 8004414:	d00b      	beq.n	800442e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004416:	4b47      	ldr	r3, [pc, #284]	@ (8004534 <HAL_RCC_OscConfig+0x240>)
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800441e:	2b08      	cmp	r3, #8
 8004420:	d11c      	bne.n	800445c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004422:	4b44      	ldr	r3, [pc, #272]	@ (8004534 <HAL_RCC_OscConfig+0x240>)
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d116      	bne.n	800445c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800442e:	4b41      	ldr	r3, [pc, #260]	@ (8004534 <HAL_RCC_OscConfig+0x240>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 0302 	and.w	r3, r3, #2
 8004436:	2b00      	cmp	r3, #0
 8004438:	d005      	beq.n	8004446 <HAL_RCC_OscConfig+0x152>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	68db      	ldr	r3, [r3, #12]
 800443e:	2b01      	cmp	r3, #1
 8004440:	d001      	beq.n	8004446 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e1c7      	b.n	80047d6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004446:	4b3b      	ldr	r3, [pc, #236]	@ (8004534 <HAL_RCC_OscConfig+0x240>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	691b      	ldr	r3, [r3, #16]
 8004452:	00db      	lsls	r3, r3, #3
 8004454:	4937      	ldr	r1, [pc, #220]	@ (8004534 <HAL_RCC_OscConfig+0x240>)
 8004456:	4313      	orrs	r3, r2
 8004458:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800445a:	e03a      	b.n	80044d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d020      	beq.n	80044a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004464:	4b34      	ldr	r3, [pc, #208]	@ (8004538 <HAL_RCC_OscConfig+0x244>)
 8004466:	2201      	movs	r2, #1
 8004468:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800446a:	f7fd f9fd 	bl	8001868 <HAL_GetTick>
 800446e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004470:	e008      	b.n	8004484 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004472:	f7fd f9f9 	bl	8001868 <HAL_GetTick>
 8004476:	4602      	mov	r2, r0
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	1ad3      	subs	r3, r2, r3
 800447c:	2b02      	cmp	r3, #2
 800447e:	d901      	bls.n	8004484 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004480:	2303      	movs	r3, #3
 8004482:	e1a8      	b.n	80047d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004484:	4b2b      	ldr	r3, [pc, #172]	@ (8004534 <HAL_RCC_OscConfig+0x240>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 0302 	and.w	r3, r3, #2
 800448c:	2b00      	cmp	r3, #0
 800448e:	d0f0      	beq.n	8004472 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004490:	4b28      	ldr	r3, [pc, #160]	@ (8004534 <HAL_RCC_OscConfig+0x240>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	691b      	ldr	r3, [r3, #16]
 800449c:	00db      	lsls	r3, r3, #3
 800449e:	4925      	ldr	r1, [pc, #148]	@ (8004534 <HAL_RCC_OscConfig+0x240>)
 80044a0:	4313      	orrs	r3, r2
 80044a2:	600b      	str	r3, [r1, #0]
 80044a4:	e015      	b.n	80044d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044a6:	4b24      	ldr	r3, [pc, #144]	@ (8004538 <HAL_RCC_OscConfig+0x244>)
 80044a8:	2200      	movs	r2, #0
 80044aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ac:	f7fd f9dc 	bl	8001868 <HAL_GetTick>
 80044b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044b2:	e008      	b.n	80044c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044b4:	f7fd f9d8 	bl	8001868 <HAL_GetTick>
 80044b8:	4602      	mov	r2, r0
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	2b02      	cmp	r3, #2
 80044c0:	d901      	bls.n	80044c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80044c2:	2303      	movs	r3, #3
 80044c4:	e187      	b.n	80047d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044c6:	4b1b      	ldr	r3, [pc, #108]	@ (8004534 <HAL_RCC_OscConfig+0x240>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 0302 	and.w	r3, r3, #2
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d1f0      	bne.n	80044b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 0308 	and.w	r3, r3, #8
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d036      	beq.n	800454c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	695b      	ldr	r3, [r3, #20]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d016      	beq.n	8004514 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044e6:	4b15      	ldr	r3, [pc, #84]	@ (800453c <HAL_RCC_OscConfig+0x248>)
 80044e8:	2201      	movs	r2, #1
 80044ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044ec:	f7fd f9bc 	bl	8001868 <HAL_GetTick>
 80044f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044f2:	e008      	b.n	8004506 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044f4:	f7fd f9b8 	bl	8001868 <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	2b02      	cmp	r3, #2
 8004500:	d901      	bls.n	8004506 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e167      	b.n	80047d6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004506:	4b0b      	ldr	r3, [pc, #44]	@ (8004534 <HAL_RCC_OscConfig+0x240>)
 8004508:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800450a:	f003 0302 	and.w	r3, r3, #2
 800450e:	2b00      	cmp	r3, #0
 8004510:	d0f0      	beq.n	80044f4 <HAL_RCC_OscConfig+0x200>
 8004512:	e01b      	b.n	800454c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004514:	4b09      	ldr	r3, [pc, #36]	@ (800453c <HAL_RCC_OscConfig+0x248>)
 8004516:	2200      	movs	r2, #0
 8004518:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800451a:	f7fd f9a5 	bl	8001868 <HAL_GetTick>
 800451e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004520:	e00e      	b.n	8004540 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004522:	f7fd f9a1 	bl	8001868 <HAL_GetTick>
 8004526:	4602      	mov	r2, r0
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	1ad3      	subs	r3, r2, r3
 800452c:	2b02      	cmp	r3, #2
 800452e:	d907      	bls.n	8004540 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004530:	2303      	movs	r3, #3
 8004532:	e150      	b.n	80047d6 <HAL_RCC_OscConfig+0x4e2>
 8004534:	40023800 	.word	0x40023800
 8004538:	42470000 	.word	0x42470000
 800453c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004540:	4b88      	ldr	r3, [pc, #544]	@ (8004764 <HAL_RCC_OscConfig+0x470>)
 8004542:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004544:	f003 0302 	and.w	r3, r3, #2
 8004548:	2b00      	cmp	r3, #0
 800454a:	d1ea      	bne.n	8004522 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 0304 	and.w	r3, r3, #4
 8004554:	2b00      	cmp	r3, #0
 8004556:	f000 8097 	beq.w	8004688 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800455a:	2300      	movs	r3, #0
 800455c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800455e:	4b81      	ldr	r3, [pc, #516]	@ (8004764 <HAL_RCC_OscConfig+0x470>)
 8004560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004562:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d10f      	bne.n	800458a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800456a:	2300      	movs	r3, #0
 800456c:	60bb      	str	r3, [r7, #8]
 800456e:	4b7d      	ldr	r3, [pc, #500]	@ (8004764 <HAL_RCC_OscConfig+0x470>)
 8004570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004572:	4a7c      	ldr	r2, [pc, #496]	@ (8004764 <HAL_RCC_OscConfig+0x470>)
 8004574:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004578:	6413      	str	r3, [r2, #64]	@ 0x40
 800457a:	4b7a      	ldr	r3, [pc, #488]	@ (8004764 <HAL_RCC_OscConfig+0x470>)
 800457c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800457e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004582:	60bb      	str	r3, [r7, #8]
 8004584:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004586:	2301      	movs	r3, #1
 8004588:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800458a:	4b77      	ldr	r3, [pc, #476]	@ (8004768 <HAL_RCC_OscConfig+0x474>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004592:	2b00      	cmp	r3, #0
 8004594:	d118      	bne.n	80045c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004596:	4b74      	ldr	r3, [pc, #464]	@ (8004768 <HAL_RCC_OscConfig+0x474>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a73      	ldr	r2, [pc, #460]	@ (8004768 <HAL_RCC_OscConfig+0x474>)
 800459c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045a2:	f7fd f961 	bl	8001868 <HAL_GetTick>
 80045a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045a8:	e008      	b.n	80045bc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045aa:	f7fd f95d 	bl	8001868 <HAL_GetTick>
 80045ae:	4602      	mov	r2, r0
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	2b02      	cmp	r3, #2
 80045b6:	d901      	bls.n	80045bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80045b8:	2303      	movs	r3, #3
 80045ba:	e10c      	b.n	80047d6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045bc:	4b6a      	ldr	r3, [pc, #424]	@ (8004768 <HAL_RCC_OscConfig+0x474>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d0f0      	beq.n	80045aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d106      	bne.n	80045de <HAL_RCC_OscConfig+0x2ea>
 80045d0:	4b64      	ldr	r3, [pc, #400]	@ (8004764 <HAL_RCC_OscConfig+0x470>)
 80045d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045d4:	4a63      	ldr	r2, [pc, #396]	@ (8004764 <HAL_RCC_OscConfig+0x470>)
 80045d6:	f043 0301 	orr.w	r3, r3, #1
 80045da:	6713      	str	r3, [r2, #112]	@ 0x70
 80045dc:	e01c      	b.n	8004618 <HAL_RCC_OscConfig+0x324>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	2b05      	cmp	r3, #5
 80045e4:	d10c      	bne.n	8004600 <HAL_RCC_OscConfig+0x30c>
 80045e6:	4b5f      	ldr	r3, [pc, #380]	@ (8004764 <HAL_RCC_OscConfig+0x470>)
 80045e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045ea:	4a5e      	ldr	r2, [pc, #376]	@ (8004764 <HAL_RCC_OscConfig+0x470>)
 80045ec:	f043 0304 	orr.w	r3, r3, #4
 80045f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80045f2:	4b5c      	ldr	r3, [pc, #368]	@ (8004764 <HAL_RCC_OscConfig+0x470>)
 80045f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045f6:	4a5b      	ldr	r2, [pc, #364]	@ (8004764 <HAL_RCC_OscConfig+0x470>)
 80045f8:	f043 0301 	orr.w	r3, r3, #1
 80045fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80045fe:	e00b      	b.n	8004618 <HAL_RCC_OscConfig+0x324>
 8004600:	4b58      	ldr	r3, [pc, #352]	@ (8004764 <HAL_RCC_OscConfig+0x470>)
 8004602:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004604:	4a57      	ldr	r2, [pc, #348]	@ (8004764 <HAL_RCC_OscConfig+0x470>)
 8004606:	f023 0301 	bic.w	r3, r3, #1
 800460a:	6713      	str	r3, [r2, #112]	@ 0x70
 800460c:	4b55      	ldr	r3, [pc, #340]	@ (8004764 <HAL_RCC_OscConfig+0x470>)
 800460e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004610:	4a54      	ldr	r2, [pc, #336]	@ (8004764 <HAL_RCC_OscConfig+0x470>)
 8004612:	f023 0304 	bic.w	r3, r3, #4
 8004616:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d015      	beq.n	800464c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004620:	f7fd f922 	bl	8001868 <HAL_GetTick>
 8004624:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004626:	e00a      	b.n	800463e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004628:	f7fd f91e 	bl	8001868 <HAL_GetTick>
 800462c:	4602      	mov	r2, r0
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004636:	4293      	cmp	r3, r2
 8004638:	d901      	bls.n	800463e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800463a:	2303      	movs	r3, #3
 800463c:	e0cb      	b.n	80047d6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800463e:	4b49      	ldr	r3, [pc, #292]	@ (8004764 <HAL_RCC_OscConfig+0x470>)
 8004640:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004642:	f003 0302 	and.w	r3, r3, #2
 8004646:	2b00      	cmp	r3, #0
 8004648:	d0ee      	beq.n	8004628 <HAL_RCC_OscConfig+0x334>
 800464a:	e014      	b.n	8004676 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800464c:	f7fd f90c 	bl	8001868 <HAL_GetTick>
 8004650:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004652:	e00a      	b.n	800466a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004654:	f7fd f908 	bl	8001868 <HAL_GetTick>
 8004658:	4602      	mov	r2, r0
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004662:	4293      	cmp	r3, r2
 8004664:	d901      	bls.n	800466a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004666:	2303      	movs	r3, #3
 8004668:	e0b5      	b.n	80047d6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800466a:	4b3e      	ldr	r3, [pc, #248]	@ (8004764 <HAL_RCC_OscConfig+0x470>)
 800466c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800466e:	f003 0302 	and.w	r3, r3, #2
 8004672:	2b00      	cmp	r3, #0
 8004674:	d1ee      	bne.n	8004654 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004676:	7dfb      	ldrb	r3, [r7, #23]
 8004678:	2b01      	cmp	r3, #1
 800467a:	d105      	bne.n	8004688 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800467c:	4b39      	ldr	r3, [pc, #228]	@ (8004764 <HAL_RCC_OscConfig+0x470>)
 800467e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004680:	4a38      	ldr	r2, [pc, #224]	@ (8004764 <HAL_RCC_OscConfig+0x470>)
 8004682:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004686:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	699b      	ldr	r3, [r3, #24]
 800468c:	2b00      	cmp	r3, #0
 800468e:	f000 80a1 	beq.w	80047d4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004692:	4b34      	ldr	r3, [pc, #208]	@ (8004764 <HAL_RCC_OscConfig+0x470>)
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	f003 030c 	and.w	r3, r3, #12
 800469a:	2b08      	cmp	r3, #8
 800469c:	d05c      	beq.n	8004758 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	699b      	ldr	r3, [r3, #24]
 80046a2:	2b02      	cmp	r3, #2
 80046a4:	d141      	bne.n	800472a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046a6:	4b31      	ldr	r3, [pc, #196]	@ (800476c <HAL_RCC_OscConfig+0x478>)
 80046a8:	2200      	movs	r2, #0
 80046aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ac:	f7fd f8dc 	bl	8001868 <HAL_GetTick>
 80046b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046b2:	e008      	b.n	80046c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046b4:	f7fd f8d8 	bl	8001868 <HAL_GetTick>
 80046b8:	4602      	mov	r2, r0
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	2b02      	cmp	r3, #2
 80046c0:	d901      	bls.n	80046c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80046c2:	2303      	movs	r3, #3
 80046c4:	e087      	b.n	80047d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046c6:	4b27      	ldr	r3, [pc, #156]	@ (8004764 <HAL_RCC_OscConfig+0x470>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d1f0      	bne.n	80046b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	69da      	ldr	r2, [r3, #28]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a1b      	ldr	r3, [r3, #32]
 80046da:	431a      	orrs	r2, r3
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046e0:	019b      	lsls	r3, r3, #6
 80046e2:	431a      	orrs	r2, r3
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046e8:	085b      	lsrs	r3, r3, #1
 80046ea:	3b01      	subs	r3, #1
 80046ec:	041b      	lsls	r3, r3, #16
 80046ee:	431a      	orrs	r2, r3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046f4:	061b      	lsls	r3, r3, #24
 80046f6:	491b      	ldr	r1, [pc, #108]	@ (8004764 <HAL_RCC_OscConfig+0x470>)
 80046f8:	4313      	orrs	r3, r2
 80046fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046fc:	4b1b      	ldr	r3, [pc, #108]	@ (800476c <HAL_RCC_OscConfig+0x478>)
 80046fe:	2201      	movs	r2, #1
 8004700:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004702:	f7fd f8b1 	bl	8001868 <HAL_GetTick>
 8004706:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004708:	e008      	b.n	800471c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800470a:	f7fd f8ad 	bl	8001868 <HAL_GetTick>
 800470e:	4602      	mov	r2, r0
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	1ad3      	subs	r3, r2, r3
 8004714:	2b02      	cmp	r3, #2
 8004716:	d901      	bls.n	800471c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004718:	2303      	movs	r3, #3
 800471a:	e05c      	b.n	80047d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800471c:	4b11      	ldr	r3, [pc, #68]	@ (8004764 <HAL_RCC_OscConfig+0x470>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004724:	2b00      	cmp	r3, #0
 8004726:	d0f0      	beq.n	800470a <HAL_RCC_OscConfig+0x416>
 8004728:	e054      	b.n	80047d4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800472a:	4b10      	ldr	r3, [pc, #64]	@ (800476c <HAL_RCC_OscConfig+0x478>)
 800472c:	2200      	movs	r2, #0
 800472e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004730:	f7fd f89a 	bl	8001868 <HAL_GetTick>
 8004734:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004736:	e008      	b.n	800474a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004738:	f7fd f896 	bl	8001868 <HAL_GetTick>
 800473c:	4602      	mov	r2, r0
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	1ad3      	subs	r3, r2, r3
 8004742:	2b02      	cmp	r3, #2
 8004744:	d901      	bls.n	800474a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004746:	2303      	movs	r3, #3
 8004748:	e045      	b.n	80047d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800474a:	4b06      	ldr	r3, [pc, #24]	@ (8004764 <HAL_RCC_OscConfig+0x470>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004752:	2b00      	cmp	r3, #0
 8004754:	d1f0      	bne.n	8004738 <HAL_RCC_OscConfig+0x444>
 8004756:	e03d      	b.n	80047d4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	699b      	ldr	r3, [r3, #24]
 800475c:	2b01      	cmp	r3, #1
 800475e:	d107      	bne.n	8004770 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	e038      	b.n	80047d6 <HAL_RCC_OscConfig+0x4e2>
 8004764:	40023800 	.word	0x40023800
 8004768:	40007000 	.word	0x40007000
 800476c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004770:	4b1b      	ldr	r3, [pc, #108]	@ (80047e0 <HAL_RCC_OscConfig+0x4ec>)
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	699b      	ldr	r3, [r3, #24]
 800477a:	2b01      	cmp	r3, #1
 800477c:	d028      	beq.n	80047d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004788:	429a      	cmp	r2, r3
 800478a:	d121      	bne.n	80047d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004796:	429a      	cmp	r2, r3
 8004798:	d11a      	bne.n	80047d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800479a:	68fa      	ldr	r2, [r7, #12]
 800479c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80047a0:	4013      	ands	r3, r2
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80047a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d111      	bne.n	80047d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047b6:	085b      	lsrs	r3, r3, #1
 80047b8:	3b01      	subs	r3, #1
 80047ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047bc:	429a      	cmp	r2, r3
 80047be:	d107      	bne.n	80047d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d001      	beq.n	80047d4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	e000      	b.n	80047d6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80047d4:	2300      	movs	r3, #0
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3718      	adds	r7, #24
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}
 80047de:	bf00      	nop
 80047e0:	40023800 	.word	0x40023800

080047e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b084      	sub	sp, #16
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d101      	bne.n	80047f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	e0cc      	b.n	8004992 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80047f8:	4b68      	ldr	r3, [pc, #416]	@ (800499c <HAL_RCC_ClockConfig+0x1b8>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0307 	and.w	r3, r3, #7
 8004800:	683a      	ldr	r2, [r7, #0]
 8004802:	429a      	cmp	r2, r3
 8004804:	d90c      	bls.n	8004820 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004806:	4b65      	ldr	r3, [pc, #404]	@ (800499c <HAL_RCC_ClockConfig+0x1b8>)
 8004808:	683a      	ldr	r2, [r7, #0]
 800480a:	b2d2      	uxtb	r2, r2
 800480c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800480e:	4b63      	ldr	r3, [pc, #396]	@ (800499c <HAL_RCC_ClockConfig+0x1b8>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 0307 	and.w	r3, r3, #7
 8004816:	683a      	ldr	r2, [r7, #0]
 8004818:	429a      	cmp	r2, r3
 800481a:	d001      	beq.n	8004820 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	e0b8      	b.n	8004992 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 0302 	and.w	r3, r3, #2
 8004828:	2b00      	cmp	r3, #0
 800482a:	d020      	beq.n	800486e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 0304 	and.w	r3, r3, #4
 8004834:	2b00      	cmp	r3, #0
 8004836:	d005      	beq.n	8004844 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004838:	4b59      	ldr	r3, [pc, #356]	@ (80049a0 <HAL_RCC_ClockConfig+0x1bc>)
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	4a58      	ldr	r2, [pc, #352]	@ (80049a0 <HAL_RCC_ClockConfig+0x1bc>)
 800483e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004842:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 0308 	and.w	r3, r3, #8
 800484c:	2b00      	cmp	r3, #0
 800484e:	d005      	beq.n	800485c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004850:	4b53      	ldr	r3, [pc, #332]	@ (80049a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	4a52      	ldr	r2, [pc, #328]	@ (80049a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004856:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800485a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800485c:	4b50      	ldr	r3, [pc, #320]	@ (80049a0 <HAL_RCC_ClockConfig+0x1bc>)
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	494d      	ldr	r1, [pc, #308]	@ (80049a0 <HAL_RCC_ClockConfig+0x1bc>)
 800486a:	4313      	orrs	r3, r2
 800486c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 0301 	and.w	r3, r3, #1
 8004876:	2b00      	cmp	r3, #0
 8004878:	d044      	beq.n	8004904 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	2b01      	cmp	r3, #1
 8004880:	d107      	bne.n	8004892 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004882:	4b47      	ldr	r3, [pc, #284]	@ (80049a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800488a:	2b00      	cmp	r3, #0
 800488c:	d119      	bne.n	80048c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	e07f      	b.n	8004992 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	2b02      	cmp	r3, #2
 8004898:	d003      	beq.n	80048a2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800489e:	2b03      	cmp	r3, #3
 80048a0:	d107      	bne.n	80048b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048a2:	4b3f      	ldr	r3, [pc, #252]	@ (80049a0 <HAL_RCC_ClockConfig+0x1bc>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d109      	bne.n	80048c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e06f      	b.n	8004992 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048b2:	4b3b      	ldr	r3, [pc, #236]	@ (80049a0 <HAL_RCC_ClockConfig+0x1bc>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 0302 	and.w	r3, r3, #2
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d101      	bne.n	80048c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e067      	b.n	8004992 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048c2:	4b37      	ldr	r3, [pc, #220]	@ (80049a0 <HAL_RCC_ClockConfig+0x1bc>)
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	f023 0203 	bic.w	r2, r3, #3
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	4934      	ldr	r1, [pc, #208]	@ (80049a0 <HAL_RCC_ClockConfig+0x1bc>)
 80048d0:	4313      	orrs	r3, r2
 80048d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80048d4:	f7fc ffc8 	bl	8001868 <HAL_GetTick>
 80048d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048da:	e00a      	b.n	80048f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048dc:	f7fc ffc4 	bl	8001868 <HAL_GetTick>
 80048e0:	4602      	mov	r2, r0
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d901      	bls.n	80048f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80048ee:	2303      	movs	r3, #3
 80048f0:	e04f      	b.n	8004992 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048f2:	4b2b      	ldr	r3, [pc, #172]	@ (80049a0 <HAL_RCC_ClockConfig+0x1bc>)
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	f003 020c 	and.w	r2, r3, #12
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	429a      	cmp	r2, r3
 8004902:	d1eb      	bne.n	80048dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004904:	4b25      	ldr	r3, [pc, #148]	@ (800499c <HAL_RCC_ClockConfig+0x1b8>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 0307 	and.w	r3, r3, #7
 800490c:	683a      	ldr	r2, [r7, #0]
 800490e:	429a      	cmp	r2, r3
 8004910:	d20c      	bcs.n	800492c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004912:	4b22      	ldr	r3, [pc, #136]	@ (800499c <HAL_RCC_ClockConfig+0x1b8>)
 8004914:	683a      	ldr	r2, [r7, #0]
 8004916:	b2d2      	uxtb	r2, r2
 8004918:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800491a:	4b20      	ldr	r3, [pc, #128]	@ (800499c <HAL_RCC_ClockConfig+0x1b8>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 0307 	and.w	r3, r3, #7
 8004922:	683a      	ldr	r2, [r7, #0]
 8004924:	429a      	cmp	r2, r3
 8004926:	d001      	beq.n	800492c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	e032      	b.n	8004992 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 0304 	and.w	r3, r3, #4
 8004934:	2b00      	cmp	r3, #0
 8004936:	d008      	beq.n	800494a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004938:	4b19      	ldr	r3, [pc, #100]	@ (80049a0 <HAL_RCC_ClockConfig+0x1bc>)
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	4916      	ldr	r1, [pc, #88]	@ (80049a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004946:	4313      	orrs	r3, r2
 8004948:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 0308 	and.w	r3, r3, #8
 8004952:	2b00      	cmp	r3, #0
 8004954:	d009      	beq.n	800496a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004956:	4b12      	ldr	r3, [pc, #72]	@ (80049a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	691b      	ldr	r3, [r3, #16]
 8004962:	00db      	lsls	r3, r3, #3
 8004964:	490e      	ldr	r1, [pc, #56]	@ (80049a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004966:	4313      	orrs	r3, r2
 8004968:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800496a:	f000 f82d 	bl	80049c8 <HAL_RCC_GetSysClockFreq>
 800496e:	4602      	mov	r2, r0
 8004970:	4b0b      	ldr	r3, [pc, #44]	@ (80049a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	091b      	lsrs	r3, r3, #4
 8004976:	f003 030f 	and.w	r3, r3, #15
 800497a:	490a      	ldr	r1, [pc, #40]	@ (80049a4 <HAL_RCC_ClockConfig+0x1c0>)
 800497c:	5ccb      	ldrb	r3, [r1, r3]
 800497e:	fa22 f303 	lsr.w	r3, r2, r3
 8004982:	4a09      	ldr	r2, [pc, #36]	@ (80049a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004984:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004986:	4b09      	ldr	r3, [pc, #36]	@ (80049ac <HAL_RCC_ClockConfig+0x1c8>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4618      	mov	r0, r3
 800498c:	f7fc ff28 	bl	80017e0 <HAL_InitTick>

  return HAL_OK;
 8004990:	2300      	movs	r3, #0
}
 8004992:	4618      	mov	r0, r3
 8004994:	3710      	adds	r7, #16
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}
 800499a:	bf00      	nop
 800499c:	40023c00 	.word	0x40023c00
 80049a0:	40023800 	.word	0x40023800
 80049a4:	0800c110 	.word	0x0800c110
 80049a8:	20000004 	.word	0x20000004
 80049ac:	20000008 	.word	0x20000008

080049b0 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80049b0:	b480      	push	{r7}
 80049b2:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 80049b4:	4b03      	ldr	r3, [pc, #12]	@ (80049c4 <HAL_RCC_EnableCSS+0x14>)
 80049b6:	2201      	movs	r2, #1
 80049b8:	601a      	str	r2, [r3, #0]
}
 80049ba:	bf00      	nop
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr
 80049c4:	4247004c 	.word	0x4247004c

080049c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049cc:	b090      	sub	sp, #64	@ 0x40
 80049ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80049d0:	2300      	movs	r3, #0
 80049d2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80049d4:	2300      	movs	r3, #0
 80049d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80049d8:	2300      	movs	r3, #0
 80049da:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80049dc:	2300      	movs	r3, #0
 80049de:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80049e0:	4b59      	ldr	r3, [pc, #356]	@ (8004b48 <HAL_RCC_GetSysClockFreq+0x180>)
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	f003 030c 	and.w	r3, r3, #12
 80049e8:	2b08      	cmp	r3, #8
 80049ea:	d00d      	beq.n	8004a08 <HAL_RCC_GetSysClockFreq+0x40>
 80049ec:	2b08      	cmp	r3, #8
 80049ee:	f200 80a1 	bhi.w	8004b34 <HAL_RCC_GetSysClockFreq+0x16c>
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d002      	beq.n	80049fc <HAL_RCC_GetSysClockFreq+0x34>
 80049f6:	2b04      	cmp	r3, #4
 80049f8:	d003      	beq.n	8004a02 <HAL_RCC_GetSysClockFreq+0x3a>
 80049fa:	e09b      	b.n	8004b34 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80049fc:	4b53      	ldr	r3, [pc, #332]	@ (8004b4c <HAL_RCC_GetSysClockFreq+0x184>)
 80049fe:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004a00:	e09b      	b.n	8004b3a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a02:	4b53      	ldr	r3, [pc, #332]	@ (8004b50 <HAL_RCC_GetSysClockFreq+0x188>)
 8004a04:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004a06:	e098      	b.n	8004b3a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a08:	4b4f      	ldr	r3, [pc, #316]	@ (8004b48 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a10:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a12:	4b4d      	ldr	r3, [pc, #308]	@ (8004b48 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d028      	beq.n	8004a70 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a1e:	4b4a      	ldr	r3, [pc, #296]	@ (8004b48 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	099b      	lsrs	r3, r3, #6
 8004a24:	2200      	movs	r2, #0
 8004a26:	623b      	str	r3, [r7, #32]
 8004a28:	627a      	str	r2, [r7, #36]	@ 0x24
 8004a2a:	6a3b      	ldr	r3, [r7, #32]
 8004a2c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004a30:	2100      	movs	r1, #0
 8004a32:	4b47      	ldr	r3, [pc, #284]	@ (8004b50 <HAL_RCC_GetSysClockFreq+0x188>)
 8004a34:	fb03 f201 	mul.w	r2, r3, r1
 8004a38:	2300      	movs	r3, #0
 8004a3a:	fb00 f303 	mul.w	r3, r0, r3
 8004a3e:	4413      	add	r3, r2
 8004a40:	4a43      	ldr	r2, [pc, #268]	@ (8004b50 <HAL_RCC_GetSysClockFreq+0x188>)
 8004a42:	fba0 1202 	umull	r1, r2, r0, r2
 8004a46:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004a48:	460a      	mov	r2, r1
 8004a4a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004a4c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a4e:	4413      	add	r3, r2
 8004a50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a54:	2200      	movs	r2, #0
 8004a56:	61bb      	str	r3, [r7, #24]
 8004a58:	61fa      	str	r2, [r7, #28]
 8004a5a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a5e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004a62:	f7fc f8a9 	bl	8000bb8 <__aeabi_uldivmod>
 8004a66:	4602      	mov	r2, r0
 8004a68:	460b      	mov	r3, r1
 8004a6a:	4613      	mov	r3, r2
 8004a6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004a6e:	e053      	b.n	8004b18 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a70:	4b35      	ldr	r3, [pc, #212]	@ (8004b48 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	099b      	lsrs	r3, r3, #6
 8004a76:	2200      	movs	r2, #0
 8004a78:	613b      	str	r3, [r7, #16]
 8004a7a:	617a      	str	r2, [r7, #20]
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004a82:	f04f 0b00 	mov.w	fp, #0
 8004a86:	4652      	mov	r2, sl
 8004a88:	465b      	mov	r3, fp
 8004a8a:	f04f 0000 	mov.w	r0, #0
 8004a8e:	f04f 0100 	mov.w	r1, #0
 8004a92:	0159      	lsls	r1, r3, #5
 8004a94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a98:	0150      	lsls	r0, r2, #5
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	460b      	mov	r3, r1
 8004a9e:	ebb2 080a 	subs.w	r8, r2, sl
 8004aa2:	eb63 090b 	sbc.w	r9, r3, fp
 8004aa6:	f04f 0200 	mov.w	r2, #0
 8004aaa:	f04f 0300 	mov.w	r3, #0
 8004aae:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004ab2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004ab6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004aba:	ebb2 0408 	subs.w	r4, r2, r8
 8004abe:	eb63 0509 	sbc.w	r5, r3, r9
 8004ac2:	f04f 0200 	mov.w	r2, #0
 8004ac6:	f04f 0300 	mov.w	r3, #0
 8004aca:	00eb      	lsls	r3, r5, #3
 8004acc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ad0:	00e2      	lsls	r2, r4, #3
 8004ad2:	4614      	mov	r4, r2
 8004ad4:	461d      	mov	r5, r3
 8004ad6:	eb14 030a 	adds.w	r3, r4, sl
 8004ada:	603b      	str	r3, [r7, #0]
 8004adc:	eb45 030b 	adc.w	r3, r5, fp
 8004ae0:	607b      	str	r3, [r7, #4]
 8004ae2:	f04f 0200 	mov.w	r2, #0
 8004ae6:	f04f 0300 	mov.w	r3, #0
 8004aea:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004aee:	4629      	mov	r1, r5
 8004af0:	028b      	lsls	r3, r1, #10
 8004af2:	4621      	mov	r1, r4
 8004af4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004af8:	4621      	mov	r1, r4
 8004afa:	028a      	lsls	r2, r1, #10
 8004afc:	4610      	mov	r0, r2
 8004afe:	4619      	mov	r1, r3
 8004b00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b02:	2200      	movs	r2, #0
 8004b04:	60bb      	str	r3, [r7, #8]
 8004b06:	60fa      	str	r2, [r7, #12]
 8004b08:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b0c:	f7fc f854 	bl	8000bb8 <__aeabi_uldivmod>
 8004b10:	4602      	mov	r2, r0
 8004b12:	460b      	mov	r3, r1
 8004b14:	4613      	mov	r3, r2
 8004b16:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004b18:	4b0b      	ldr	r3, [pc, #44]	@ (8004b48 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	0c1b      	lsrs	r3, r3, #16
 8004b1e:	f003 0303 	and.w	r3, r3, #3
 8004b22:	3301      	adds	r3, #1
 8004b24:	005b      	lsls	r3, r3, #1
 8004b26:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004b28:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b30:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004b32:	e002      	b.n	8004b3a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b34:	4b05      	ldr	r3, [pc, #20]	@ (8004b4c <HAL_RCC_GetSysClockFreq+0x184>)
 8004b36:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004b38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3740      	adds	r7, #64	@ 0x40
 8004b40:	46bd      	mov	sp, r7
 8004b42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b46:	bf00      	nop
 8004b48:	40023800 	.word	0x40023800
 8004b4c:	00f42400 	.word	0x00f42400
 8004b50:	017d7840 	.word	0x017d7840

08004b54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b54:	b480      	push	{r7}
 8004b56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b58:	4b03      	ldr	r3, [pc, #12]	@ (8004b68 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr
 8004b66:	bf00      	nop
 8004b68:	20000004 	.word	0x20000004

08004b6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004b70:	f7ff fff0 	bl	8004b54 <HAL_RCC_GetHCLKFreq>
 8004b74:	4602      	mov	r2, r0
 8004b76:	4b05      	ldr	r3, [pc, #20]	@ (8004b8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	0a9b      	lsrs	r3, r3, #10
 8004b7c:	f003 0307 	and.w	r3, r3, #7
 8004b80:	4903      	ldr	r1, [pc, #12]	@ (8004b90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b82:	5ccb      	ldrb	r3, [r1, r3]
 8004b84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	bd80      	pop	{r7, pc}
 8004b8c:	40023800 	.word	0x40023800
 8004b90:	0800c120 	.word	0x0800c120

08004b94 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8004b98:	4b06      	ldr	r3, [pc, #24]	@ (8004bb4 <HAL_RCC_NMI_IRQHandler+0x20>)
 8004b9a:	68db      	ldr	r3, [r3, #12]
 8004b9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ba0:	2b80      	cmp	r3, #128	@ 0x80
 8004ba2:	d104      	bne.n	8004bae <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8004ba4:	f000 f80a 	bl	8004bbc <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8004ba8:	4b03      	ldr	r3, [pc, #12]	@ (8004bb8 <HAL_RCC_NMI_IRQHandler+0x24>)
 8004baa:	2280      	movs	r2, #128	@ 0x80
 8004bac:	701a      	strb	r2, [r3, #0]
  }
}
 8004bae:	bf00      	nop
 8004bb0:	bd80      	pop	{r7, pc}
 8004bb2:	bf00      	nop
 8004bb4:	40023800 	.word	0x40023800
 8004bb8:	4002380e 	.word	0x4002380e

08004bbc <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8004bc0:	bf00      	nop
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc8:	4770      	bx	lr

08004bca <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004bca:	b084      	sub	sp, #16
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b084      	sub	sp, #16
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	f107 001c 	add.w	r0, r7, #28
 8004bd8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004bdc:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d123      	bne.n	8004c2c <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004be8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004bf8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004bfc:	687a      	ldr	r2, [r7, #4]
 8004bfe:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004c0c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d105      	bne.n	8004c20 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	68db      	ldr	r3, [r3, #12]
 8004c18:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f001 fae9 	bl	80061f8 <USB_CoreReset>
 8004c26:	4603      	mov	r3, r0
 8004c28:	73fb      	strb	r3, [r7, #15]
 8004c2a:	e01b      	b.n	8004c64 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f001 fadd 	bl	80061f8 <USB_CoreReset>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004c42:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d106      	bne.n	8004c58 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c4e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	639a      	str	r2, [r3, #56]	@ 0x38
 8004c56:	e005      	b.n	8004c64 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c5c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004c64:	7fbb      	ldrb	r3, [r7, #30]
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d10b      	bne.n	8004c82 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	f043 0206 	orr.w	r2, r3, #6
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	f043 0220 	orr.w	r2, r3, #32
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004c82:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	3710      	adds	r7, #16
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c8e:	b004      	add	sp, #16
 8004c90:	4770      	bx	lr
	...

08004c94 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b087      	sub	sp, #28
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	60f8      	str	r0, [r7, #12]
 8004c9c:	60b9      	str	r1, [r7, #8]
 8004c9e:	4613      	mov	r3, r2
 8004ca0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004ca2:	79fb      	ldrb	r3, [r7, #7]
 8004ca4:	2b02      	cmp	r3, #2
 8004ca6:	d165      	bne.n	8004d74 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	4a41      	ldr	r2, [pc, #260]	@ (8004db0 <USB_SetTurnaroundTime+0x11c>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d906      	bls.n	8004cbe <USB_SetTurnaroundTime+0x2a>
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	4a40      	ldr	r2, [pc, #256]	@ (8004db4 <USB_SetTurnaroundTime+0x120>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d202      	bcs.n	8004cbe <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004cb8:	230f      	movs	r3, #15
 8004cba:	617b      	str	r3, [r7, #20]
 8004cbc:	e062      	b.n	8004d84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	4a3c      	ldr	r2, [pc, #240]	@ (8004db4 <USB_SetTurnaroundTime+0x120>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d306      	bcc.n	8004cd4 <USB_SetTurnaroundTime+0x40>
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	4a3b      	ldr	r2, [pc, #236]	@ (8004db8 <USB_SetTurnaroundTime+0x124>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d202      	bcs.n	8004cd4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004cce:	230e      	movs	r3, #14
 8004cd0:	617b      	str	r3, [r7, #20]
 8004cd2:	e057      	b.n	8004d84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	4a38      	ldr	r2, [pc, #224]	@ (8004db8 <USB_SetTurnaroundTime+0x124>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d306      	bcc.n	8004cea <USB_SetTurnaroundTime+0x56>
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	4a37      	ldr	r2, [pc, #220]	@ (8004dbc <USB_SetTurnaroundTime+0x128>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d202      	bcs.n	8004cea <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004ce4:	230d      	movs	r3, #13
 8004ce6:	617b      	str	r3, [r7, #20]
 8004ce8:	e04c      	b.n	8004d84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	4a33      	ldr	r2, [pc, #204]	@ (8004dbc <USB_SetTurnaroundTime+0x128>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d306      	bcc.n	8004d00 <USB_SetTurnaroundTime+0x6c>
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	4a32      	ldr	r2, [pc, #200]	@ (8004dc0 <USB_SetTurnaroundTime+0x12c>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d802      	bhi.n	8004d00 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004cfa:	230c      	movs	r3, #12
 8004cfc:	617b      	str	r3, [r7, #20]
 8004cfe:	e041      	b.n	8004d84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	4a2f      	ldr	r2, [pc, #188]	@ (8004dc0 <USB_SetTurnaroundTime+0x12c>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d906      	bls.n	8004d16 <USB_SetTurnaroundTime+0x82>
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	4a2e      	ldr	r2, [pc, #184]	@ (8004dc4 <USB_SetTurnaroundTime+0x130>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d802      	bhi.n	8004d16 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004d10:	230b      	movs	r3, #11
 8004d12:	617b      	str	r3, [r7, #20]
 8004d14:	e036      	b.n	8004d84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	4a2a      	ldr	r2, [pc, #168]	@ (8004dc4 <USB_SetTurnaroundTime+0x130>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d906      	bls.n	8004d2c <USB_SetTurnaroundTime+0x98>
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	4a29      	ldr	r2, [pc, #164]	@ (8004dc8 <USB_SetTurnaroundTime+0x134>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d802      	bhi.n	8004d2c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004d26:	230a      	movs	r3, #10
 8004d28:	617b      	str	r3, [r7, #20]
 8004d2a:	e02b      	b.n	8004d84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	4a26      	ldr	r2, [pc, #152]	@ (8004dc8 <USB_SetTurnaroundTime+0x134>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d906      	bls.n	8004d42 <USB_SetTurnaroundTime+0xae>
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	4a25      	ldr	r2, [pc, #148]	@ (8004dcc <USB_SetTurnaroundTime+0x138>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d202      	bcs.n	8004d42 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004d3c:	2309      	movs	r3, #9
 8004d3e:	617b      	str	r3, [r7, #20]
 8004d40:	e020      	b.n	8004d84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	4a21      	ldr	r2, [pc, #132]	@ (8004dcc <USB_SetTurnaroundTime+0x138>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d306      	bcc.n	8004d58 <USB_SetTurnaroundTime+0xc4>
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	4a20      	ldr	r2, [pc, #128]	@ (8004dd0 <USB_SetTurnaroundTime+0x13c>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d802      	bhi.n	8004d58 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004d52:	2308      	movs	r3, #8
 8004d54:	617b      	str	r3, [r7, #20]
 8004d56:	e015      	b.n	8004d84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	4a1d      	ldr	r2, [pc, #116]	@ (8004dd0 <USB_SetTurnaroundTime+0x13c>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d906      	bls.n	8004d6e <USB_SetTurnaroundTime+0xda>
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	4a1c      	ldr	r2, [pc, #112]	@ (8004dd4 <USB_SetTurnaroundTime+0x140>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d202      	bcs.n	8004d6e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004d68:	2307      	movs	r3, #7
 8004d6a:	617b      	str	r3, [r7, #20]
 8004d6c:	e00a      	b.n	8004d84 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004d6e:	2306      	movs	r3, #6
 8004d70:	617b      	str	r3, [r7, #20]
 8004d72:	e007      	b.n	8004d84 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004d74:	79fb      	ldrb	r3, [r7, #7]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d102      	bne.n	8004d80 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004d7a:	2309      	movs	r3, #9
 8004d7c:	617b      	str	r3, [r7, #20]
 8004d7e:	e001      	b.n	8004d84 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004d80:	2309      	movs	r3, #9
 8004d82:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	68da      	ldr	r2, [r3, #12]
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	029b      	lsls	r3, r3, #10
 8004d98:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8004d9c:	431a      	orrs	r2, r3
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004da2:	2300      	movs	r3, #0
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	371c      	adds	r7, #28
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr
 8004db0:	00d8acbf 	.word	0x00d8acbf
 8004db4:	00e4e1c0 	.word	0x00e4e1c0
 8004db8:	00f42400 	.word	0x00f42400
 8004dbc:	01067380 	.word	0x01067380
 8004dc0:	011a499f 	.word	0x011a499f
 8004dc4:	01312cff 	.word	0x01312cff
 8004dc8:	014ca43f 	.word	0x014ca43f
 8004dcc:	016e3600 	.word	0x016e3600
 8004dd0:	01a6ab1f 	.word	0x01a6ab1f
 8004dd4:	01e84800 	.word	0x01e84800

08004dd8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b083      	sub	sp, #12
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	f043 0201 	orr.w	r2, r3, #1
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004dec:	2300      	movs	r3, #0
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	370c      	adds	r7, #12
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr

08004dfa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004dfa:	b480      	push	{r7}
 8004dfc:	b083      	sub	sp, #12
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	f023 0201 	bic.w	r2, r3, #1
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004e0e:	2300      	movs	r3, #0
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	370c      	adds	r7, #12
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr

08004e1c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b084      	sub	sp, #16
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
 8004e24:	460b      	mov	r3, r1
 8004e26:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	68db      	ldr	r3, [r3, #12]
 8004e30:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004e38:	78fb      	ldrb	r3, [r7, #3]
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d115      	bne.n	8004e6a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	68db      	ldr	r3, [r3, #12]
 8004e42:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004e4a:	200a      	movs	r0, #10
 8004e4c:	f7fc fd18 	bl	8001880 <HAL_Delay>
      ms += 10U;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	330a      	adds	r3, #10
 8004e54:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f001 f93f 	bl	80060da <USB_GetMode>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	d01e      	beq.n	8004ea0 <USB_SetCurrentMode+0x84>
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2bc7      	cmp	r3, #199	@ 0xc7
 8004e66:	d9f0      	bls.n	8004e4a <USB_SetCurrentMode+0x2e>
 8004e68:	e01a      	b.n	8004ea0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004e6a:	78fb      	ldrb	r3, [r7, #3]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d115      	bne.n	8004e9c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004e7c:	200a      	movs	r0, #10
 8004e7e:	f7fc fcff 	bl	8001880 <HAL_Delay>
      ms += 10U;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	330a      	adds	r3, #10
 8004e86:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	f001 f926 	bl	80060da <USB_GetMode>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d005      	beq.n	8004ea0 <USB_SetCurrentMode+0x84>
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2bc7      	cmp	r3, #199	@ 0xc7
 8004e98:	d9f0      	bls.n	8004e7c <USB_SetCurrentMode+0x60>
 8004e9a:	e001      	b.n	8004ea0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	e005      	b.n	8004eac <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2bc8      	cmp	r3, #200	@ 0xc8
 8004ea4:	d101      	bne.n	8004eaa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e000      	b.n	8004eac <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004eaa:	2300      	movs	r3, #0
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	3710      	adds	r7, #16
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}

08004eb4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004eb4:	b084      	sub	sp, #16
 8004eb6:	b580      	push	{r7, lr}
 8004eb8:	b086      	sub	sp, #24
 8004eba:	af00      	add	r7, sp, #0
 8004ebc:	6078      	str	r0, [r7, #4]
 8004ebe:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004ec2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004ece:	2300      	movs	r3, #0
 8004ed0:	613b      	str	r3, [r7, #16]
 8004ed2:	e009      	b.n	8004ee8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004ed4:	687a      	ldr	r2, [r7, #4]
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	3340      	adds	r3, #64	@ 0x40
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	4413      	add	r3, r2
 8004ede:	2200      	movs	r2, #0
 8004ee0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	3301      	adds	r3, #1
 8004ee6:	613b      	str	r3, [r7, #16]
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	2b0e      	cmp	r3, #14
 8004eec:	d9f2      	bls.n	8004ed4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004eee:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d11c      	bne.n	8004f30 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	68fa      	ldr	r2, [r7, #12]
 8004f00:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004f04:	f043 0302 	orr.w	r3, r3, #2
 8004f08:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f0e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f1a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f26:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	639a      	str	r2, [r3, #56]	@ 0x38
 8004f2e:	e00b      	b.n	8004f48 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f34:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f40:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004f4e:	461a      	mov	r2, r3
 8004f50:	2300      	movs	r3, #0
 8004f52:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004f54:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d10d      	bne.n	8004f78 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004f5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d104      	bne.n	8004f6e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004f64:	2100      	movs	r1, #0
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f000 f968 	bl	800523c <USB_SetDevSpeed>
 8004f6c:	e008      	b.n	8004f80 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004f6e:	2101      	movs	r1, #1
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	f000 f963 	bl	800523c <USB_SetDevSpeed>
 8004f76:	e003      	b.n	8004f80 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004f78:	2103      	movs	r1, #3
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f000 f95e 	bl	800523c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004f80:	2110      	movs	r1, #16
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f000 f8fa 	bl	800517c <USB_FlushTxFifo>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d001      	beq.n	8004f92 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f000 f924 	bl	80051e0 <USB_FlushRxFifo>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d001      	beq.n	8004fa2 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fa8:	461a      	mov	r2, r3
 8004faa:	2300      	movs	r3, #0
 8004fac:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fc0:	461a      	mov	r2, r3
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	613b      	str	r3, [r7, #16]
 8004fca:	e043      	b.n	8005054 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	015a      	lsls	r2, r3, #5
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	4413      	add	r3, r2
 8004fd4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004fde:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004fe2:	d118      	bne.n	8005016 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d10a      	bne.n	8005000 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	015a      	lsls	r2, r3, #5
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	4413      	add	r3, r2
 8004ff2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004ffc:	6013      	str	r3, [r2, #0]
 8004ffe:	e013      	b.n	8005028 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	015a      	lsls	r2, r3, #5
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	4413      	add	r3, r2
 8005008:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800500c:	461a      	mov	r2, r3
 800500e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005012:	6013      	str	r3, [r2, #0]
 8005014:	e008      	b.n	8005028 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	015a      	lsls	r2, r3, #5
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	4413      	add	r3, r2
 800501e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005022:	461a      	mov	r2, r3
 8005024:	2300      	movs	r3, #0
 8005026:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	015a      	lsls	r2, r3, #5
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	4413      	add	r3, r2
 8005030:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005034:	461a      	mov	r2, r3
 8005036:	2300      	movs	r3, #0
 8005038:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	015a      	lsls	r2, r3, #5
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	4413      	add	r3, r2
 8005042:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005046:	461a      	mov	r2, r3
 8005048:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800504c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	3301      	adds	r3, #1
 8005052:	613b      	str	r3, [r7, #16]
 8005054:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005058:	461a      	mov	r2, r3
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	4293      	cmp	r3, r2
 800505e:	d3b5      	bcc.n	8004fcc <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005060:	2300      	movs	r3, #0
 8005062:	613b      	str	r3, [r7, #16]
 8005064:	e043      	b.n	80050ee <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	015a      	lsls	r2, r3, #5
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	4413      	add	r3, r2
 800506e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005078:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800507c:	d118      	bne.n	80050b0 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d10a      	bne.n	800509a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	015a      	lsls	r2, r3, #5
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	4413      	add	r3, r2
 800508c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005090:	461a      	mov	r2, r3
 8005092:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005096:	6013      	str	r3, [r2, #0]
 8005098:	e013      	b.n	80050c2 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	015a      	lsls	r2, r3, #5
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	4413      	add	r3, r2
 80050a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050a6:	461a      	mov	r2, r3
 80050a8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80050ac:	6013      	str	r3, [r2, #0]
 80050ae:	e008      	b.n	80050c2 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	015a      	lsls	r2, r3, #5
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	4413      	add	r3, r2
 80050b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050bc:	461a      	mov	r2, r3
 80050be:	2300      	movs	r3, #0
 80050c0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	015a      	lsls	r2, r3, #5
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	4413      	add	r3, r2
 80050ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050ce:	461a      	mov	r2, r3
 80050d0:	2300      	movs	r3, #0
 80050d2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	015a      	lsls	r2, r3, #5
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	4413      	add	r3, r2
 80050dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050e0:	461a      	mov	r2, r3
 80050e2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80050e6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	3301      	adds	r3, #1
 80050ec:	613b      	str	r3, [r7, #16]
 80050ee:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80050f2:	461a      	mov	r2, r3
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d3b5      	bcc.n	8005066 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005100:	691b      	ldr	r3, [r3, #16]
 8005102:	68fa      	ldr	r2, [r7, #12]
 8005104:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005108:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800510c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800511a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800511c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005120:	2b00      	cmp	r3, #0
 8005122:	d105      	bne.n	8005130 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	699b      	ldr	r3, [r3, #24]
 8005128:	f043 0210 	orr.w	r2, r3, #16
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	699a      	ldr	r2, [r3, #24]
 8005134:	4b10      	ldr	r3, [pc, #64]	@ (8005178 <USB_DevInit+0x2c4>)
 8005136:	4313      	orrs	r3, r2
 8005138:	687a      	ldr	r2, [r7, #4]
 800513a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800513c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005140:	2b00      	cmp	r3, #0
 8005142:	d005      	beq.n	8005150 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	699b      	ldr	r3, [r3, #24]
 8005148:	f043 0208 	orr.w	r2, r3, #8
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005150:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005154:	2b01      	cmp	r3, #1
 8005156:	d107      	bne.n	8005168 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	699b      	ldr	r3, [r3, #24]
 800515c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005160:	f043 0304 	orr.w	r3, r3, #4
 8005164:	687a      	ldr	r2, [r7, #4]
 8005166:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005168:	7dfb      	ldrb	r3, [r7, #23]
}
 800516a:	4618      	mov	r0, r3
 800516c:	3718      	adds	r7, #24
 800516e:	46bd      	mov	sp, r7
 8005170:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005174:	b004      	add	sp, #16
 8005176:	4770      	bx	lr
 8005178:	803c3800 	.word	0x803c3800

0800517c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800517c:	b480      	push	{r7}
 800517e:	b085      	sub	sp, #20
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005186:	2300      	movs	r3, #0
 8005188:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	3301      	adds	r3, #1
 800518e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005196:	d901      	bls.n	800519c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005198:	2303      	movs	r3, #3
 800519a:	e01b      	b.n	80051d4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	691b      	ldr	r3, [r3, #16]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	daf2      	bge.n	800518a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80051a4:	2300      	movs	r3, #0
 80051a6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	019b      	lsls	r3, r3, #6
 80051ac:	f043 0220 	orr.w	r2, r3, #32
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	3301      	adds	r3, #1
 80051b8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80051c0:	d901      	bls.n	80051c6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80051c2:	2303      	movs	r3, #3
 80051c4:	e006      	b.n	80051d4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	691b      	ldr	r3, [r3, #16]
 80051ca:	f003 0320 	and.w	r3, r3, #32
 80051ce:	2b20      	cmp	r3, #32
 80051d0:	d0f0      	beq.n	80051b4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80051d2:	2300      	movs	r3, #0
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3714      	adds	r7, #20
 80051d8:	46bd      	mov	sp, r7
 80051da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051de:	4770      	bx	lr

080051e0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b085      	sub	sp, #20
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80051e8:	2300      	movs	r3, #0
 80051ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	3301      	adds	r3, #1
 80051f0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80051f8:	d901      	bls.n	80051fe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80051fa:	2303      	movs	r3, #3
 80051fc:	e018      	b.n	8005230 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	691b      	ldr	r3, [r3, #16]
 8005202:	2b00      	cmp	r3, #0
 8005204:	daf2      	bge.n	80051ec <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005206:	2300      	movs	r3, #0
 8005208:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2210      	movs	r2, #16
 800520e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	3301      	adds	r3, #1
 8005214:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800521c:	d901      	bls.n	8005222 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800521e:	2303      	movs	r3, #3
 8005220:	e006      	b.n	8005230 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	691b      	ldr	r3, [r3, #16]
 8005226:	f003 0310 	and.w	r3, r3, #16
 800522a:	2b10      	cmp	r3, #16
 800522c:	d0f0      	beq.n	8005210 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800522e:	2300      	movs	r3, #0
}
 8005230:	4618      	mov	r0, r3
 8005232:	3714      	adds	r7, #20
 8005234:	46bd      	mov	sp, r7
 8005236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523a:	4770      	bx	lr

0800523c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800523c:	b480      	push	{r7}
 800523e:	b085      	sub	sp, #20
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
 8005244:	460b      	mov	r3, r1
 8005246:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	78fb      	ldrb	r3, [r7, #3]
 8005256:	68f9      	ldr	r1, [r7, #12]
 8005258:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800525c:	4313      	orrs	r3, r2
 800525e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005260:	2300      	movs	r3, #0
}
 8005262:	4618      	mov	r0, r3
 8005264:	3714      	adds	r7, #20
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr

0800526e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800526e:	b480      	push	{r7}
 8005270:	b087      	sub	sp, #28
 8005272:	af00      	add	r7, sp, #0
 8005274:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	f003 0306 	and.w	r3, r3, #6
 8005286:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d102      	bne.n	8005294 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800528e:	2300      	movs	r3, #0
 8005290:	75fb      	strb	r3, [r7, #23]
 8005292:	e00a      	b.n	80052aa <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2b02      	cmp	r3, #2
 8005298:	d002      	beq.n	80052a0 <USB_GetDevSpeed+0x32>
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2b06      	cmp	r3, #6
 800529e:	d102      	bne.n	80052a6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80052a0:	2302      	movs	r3, #2
 80052a2:	75fb      	strb	r3, [r7, #23]
 80052a4:	e001      	b.n	80052aa <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80052a6:	230f      	movs	r3, #15
 80052a8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80052aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	371c      	adds	r7, #28
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr

080052b8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b085      	sub	sp, #20
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	781b      	ldrb	r3, [r3, #0]
 80052ca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	785b      	ldrb	r3, [r3, #1]
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d13a      	bne.n	800534a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052da:	69da      	ldr	r2, [r3, #28]
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	781b      	ldrb	r3, [r3, #0]
 80052e0:	f003 030f 	and.w	r3, r3, #15
 80052e4:	2101      	movs	r1, #1
 80052e6:	fa01 f303 	lsl.w	r3, r1, r3
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	68f9      	ldr	r1, [r7, #12]
 80052ee:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80052f2:	4313      	orrs	r3, r2
 80052f4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	015a      	lsls	r2, r3, #5
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	4413      	add	r3, r2
 80052fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005308:	2b00      	cmp	r3, #0
 800530a:	d155      	bne.n	80053b8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	015a      	lsls	r2, r3, #5
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	4413      	add	r3, r2
 8005314:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	791b      	ldrb	r3, [r3, #4]
 8005326:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005328:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	059b      	lsls	r3, r3, #22
 800532e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005330:	4313      	orrs	r3, r2
 8005332:	68ba      	ldr	r2, [r7, #8]
 8005334:	0151      	lsls	r1, r2, #5
 8005336:	68fa      	ldr	r2, [r7, #12]
 8005338:	440a      	add	r2, r1
 800533a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800533e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005342:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005346:	6013      	str	r3, [r2, #0]
 8005348:	e036      	b.n	80053b8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005350:	69da      	ldr	r2, [r3, #28]
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	781b      	ldrb	r3, [r3, #0]
 8005356:	f003 030f 	and.w	r3, r3, #15
 800535a:	2101      	movs	r1, #1
 800535c:	fa01 f303 	lsl.w	r3, r1, r3
 8005360:	041b      	lsls	r3, r3, #16
 8005362:	68f9      	ldr	r1, [r7, #12]
 8005364:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005368:	4313      	orrs	r3, r2
 800536a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	015a      	lsls	r2, r3, #5
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	4413      	add	r3, r2
 8005374:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800537e:	2b00      	cmp	r3, #0
 8005380:	d11a      	bne.n	80053b8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	015a      	lsls	r2, r3, #5
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	4413      	add	r3, r2
 800538a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	791b      	ldrb	r3, [r3, #4]
 800539c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800539e:	430b      	orrs	r3, r1
 80053a0:	4313      	orrs	r3, r2
 80053a2:	68ba      	ldr	r2, [r7, #8]
 80053a4:	0151      	lsls	r1, r2, #5
 80053a6:	68fa      	ldr	r2, [r7, #12]
 80053a8:	440a      	add	r2, r1
 80053aa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80053ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80053b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80053b6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80053b8:	2300      	movs	r3, #0
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3714      	adds	r7, #20
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr
	...

080053c8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b085      	sub	sp, #20
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	781b      	ldrb	r3, [r3, #0]
 80053da:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	785b      	ldrb	r3, [r3, #1]
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d161      	bne.n	80054a8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	015a      	lsls	r2, r3, #5
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	4413      	add	r3, r2
 80053ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80053f6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80053fa:	d11f      	bne.n	800543c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	015a      	lsls	r2, r3, #5
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	4413      	add	r3, r2
 8005404:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	68ba      	ldr	r2, [r7, #8]
 800540c:	0151      	lsls	r1, r2, #5
 800540e:	68fa      	ldr	r2, [r7, #12]
 8005410:	440a      	add	r2, r1
 8005412:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005416:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800541a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	015a      	lsls	r2, r3, #5
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	4413      	add	r3, r2
 8005424:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	68ba      	ldr	r2, [r7, #8]
 800542c:	0151      	lsls	r1, r2, #5
 800542e:	68fa      	ldr	r2, [r7, #12]
 8005430:	440a      	add	r2, r1
 8005432:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005436:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800543a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005442:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	781b      	ldrb	r3, [r3, #0]
 8005448:	f003 030f 	and.w	r3, r3, #15
 800544c:	2101      	movs	r1, #1
 800544e:	fa01 f303 	lsl.w	r3, r1, r3
 8005452:	b29b      	uxth	r3, r3
 8005454:	43db      	mvns	r3, r3
 8005456:	68f9      	ldr	r1, [r7, #12]
 8005458:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800545c:	4013      	ands	r3, r2
 800545e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005466:	69da      	ldr	r2, [r3, #28]
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	781b      	ldrb	r3, [r3, #0]
 800546c:	f003 030f 	and.w	r3, r3, #15
 8005470:	2101      	movs	r1, #1
 8005472:	fa01 f303 	lsl.w	r3, r1, r3
 8005476:	b29b      	uxth	r3, r3
 8005478:	43db      	mvns	r3, r3
 800547a:	68f9      	ldr	r1, [r7, #12]
 800547c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005480:	4013      	ands	r3, r2
 8005482:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	015a      	lsls	r2, r3, #5
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	4413      	add	r3, r2
 800548c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	0159      	lsls	r1, r3, #5
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	440b      	add	r3, r1
 800549a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800549e:	4619      	mov	r1, r3
 80054a0:	4b35      	ldr	r3, [pc, #212]	@ (8005578 <USB_DeactivateEndpoint+0x1b0>)
 80054a2:	4013      	ands	r3, r2
 80054a4:	600b      	str	r3, [r1, #0]
 80054a6:	e060      	b.n	800556a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	015a      	lsls	r2, r3, #5
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	4413      	add	r3, r2
 80054b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80054ba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80054be:	d11f      	bne.n	8005500 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	015a      	lsls	r2, r3, #5
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	4413      	add	r3, r2
 80054c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	68ba      	ldr	r2, [r7, #8]
 80054d0:	0151      	lsls	r1, r2, #5
 80054d2:	68fa      	ldr	r2, [r7, #12]
 80054d4:	440a      	add	r2, r1
 80054d6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80054da:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80054de:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	015a      	lsls	r2, r3, #5
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	4413      	add	r3, r2
 80054e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	68ba      	ldr	r2, [r7, #8]
 80054f0:	0151      	lsls	r1, r2, #5
 80054f2:	68fa      	ldr	r2, [r7, #12]
 80054f4:	440a      	add	r2, r1
 80054f6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80054fa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80054fe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005506:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	781b      	ldrb	r3, [r3, #0]
 800550c:	f003 030f 	and.w	r3, r3, #15
 8005510:	2101      	movs	r1, #1
 8005512:	fa01 f303 	lsl.w	r3, r1, r3
 8005516:	041b      	lsls	r3, r3, #16
 8005518:	43db      	mvns	r3, r3
 800551a:	68f9      	ldr	r1, [r7, #12]
 800551c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005520:	4013      	ands	r3, r2
 8005522:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800552a:	69da      	ldr	r2, [r3, #28]
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	781b      	ldrb	r3, [r3, #0]
 8005530:	f003 030f 	and.w	r3, r3, #15
 8005534:	2101      	movs	r1, #1
 8005536:	fa01 f303 	lsl.w	r3, r1, r3
 800553a:	041b      	lsls	r3, r3, #16
 800553c:	43db      	mvns	r3, r3
 800553e:	68f9      	ldr	r1, [r7, #12]
 8005540:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005544:	4013      	ands	r3, r2
 8005546:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	015a      	lsls	r2, r3, #5
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	4413      	add	r3, r2
 8005550:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	0159      	lsls	r1, r3, #5
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	440b      	add	r3, r1
 800555e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005562:	4619      	mov	r1, r3
 8005564:	4b05      	ldr	r3, [pc, #20]	@ (800557c <USB_DeactivateEndpoint+0x1b4>)
 8005566:	4013      	ands	r3, r2
 8005568:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800556a:	2300      	movs	r3, #0
}
 800556c:	4618      	mov	r0, r3
 800556e:	3714      	adds	r7, #20
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr
 8005578:	ec337800 	.word	0xec337800
 800557c:	eff37800 	.word	0xeff37800

08005580 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b08a      	sub	sp, #40	@ 0x28
 8005584:	af02      	add	r7, sp, #8
 8005586:	60f8      	str	r0, [r7, #12]
 8005588:	60b9      	str	r1, [r7, #8]
 800558a:	4613      	mov	r3, r2
 800558c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	781b      	ldrb	r3, [r3, #0]
 8005596:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	785b      	ldrb	r3, [r3, #1]
 800559c:	2b01      	cmp	r3, #1
 800559e:	f040 817f 	bne.w	80058a0 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	691b      	ldr	r3, [r3, #16]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d132      	bne.n	8005610 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80055aa:	69bb      	ldr	r3, [r7, #24]
 80055ac:	015a      	lsls	r2, r3, #5
 80055ae:	69fb      	ldr	r3, [r7, #28]
 80055b0:	4413      	add	r3, r2
 80055b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055b6:	691b      	ldr	r3, [r3, #16]
 80055b8:	69ba      	ldr	r2, [r7, #24]
 80055ba:	0151      	lsls	r1, r2, #5
 80055bc:	69fa      	ldr	r2, [r7, #28]
 80055be:	440a      	add	r2, r1
 80055c0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80055c4:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80055c8:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80055cc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80055ce:	69bb      	ldr	r3, [r7, #24]
 80055d0:	015a      	lsls	r2, r3, #5
 80055d2:	69fb      	ldr	r3, [r7, #28]
 80055d4:	4413      	add	r3, r2
 80055d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055da:	691b      	ldr	r3, [r3, #16]
 80055dc:	69ba      	ldr	r2, [r7, #24]
 80055de:	0151      	lsls	r1, r2, #5
 80055e0:	69fa      	ldr	r2, [r7, #28]
 80055e2:	440a      	add	r2, r1
 80055e4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80055e8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80055ec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80055ee:	69bb      	ldr	r3, [r7, #24]
 80055f0:	015a      	lsls	r2, r3, #5
 80055f2:	69fb      	ldr	r3, [r7, #28]
 80055f4:	4413      	add	r3, r2
 80055f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055fa:	691b      	ldr	r3, [r3, #16]
 80055fc:	69ba      	ldr	r2, [r7, #24]
 80055fe:	0151      	lsls	r1, r2, #5
 8005600:	69fa      	ldr	r2, [r7, #28]
 8005602:	440a      	add	r2, r1
 8005604:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005608:	0cdb      	lsrs	r3, r3, #19
 800560a:	04db      	lsls	r3, r3, #19
 800560c:	6113      	str	r3, [r2, #16]
 800560e:	e097      	b.n	8005740 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005610:	69bb      	ldr	r3, [r7, #24]
 8005612:	015a      	lsls	r2, r3, #5
 8005614:	69fb      	ldr	r3, [r7, #28]
 8005616:	4413      	add	r3, r2
 8005618:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800561c:	691b      	ldr	r3, [r3, #16]
 800561e:	69ba      	ldr	r2, [r7, #24]
 8005620:	0151      	lsls	r1, r2, #5
 8005622:	69fa      	ldr	r2, [r7, #28]
 8005624:	440a      	add	r2, r1
 8005626:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800562a:	0cdb      	lsrs	r3, r3, #19
 800562c:	04db      	lsls	r3, r3, #19
 800562e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005630:	69bb      	ldr	r3, [r7, #24]
 8005632:	015a      	lsls	r2, r3, #5
 8005634:	69fb      	ldr	r3, [r7, #28]
 8005636:	4413      	add	r3, r2
 8005638:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800563c:	691b      	ldr	r3, [r3, #16]
 800563e:	69ba      	ldr	r2, [r7, #24]
 8005640:	0151      	lsls	r1, r2, #5
 8005642:	69fa      	ldr	r2, [r7, #28]
 8005644:	440a      	add	r2, r1
 8005646:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800564a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800564e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005652:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005654:	69bb      	ldr	r3, [r7, #24]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d11a      	bne.n	8005690 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	691a      	ldr	r2, [r3, #16]
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	429a      	cmp	r2, r3
 8005664:	d903      	bls.n	800566e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	689a      	ldr	r2, [r3, #8]
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800566e:	69bb      	ldr	r3, [r7, #24]
 8005670:	015a      	lsls	r2, r3, #5
 8005672:	69fb      	ldr	r3, [r7, #28]
 8005674:	4413      	add	r3, r2
 8005676:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800567a:	691b      	ldr	r3, [r3, #16]
 800567c:	69ba      	ldr	r2, [r7, #24]
 800567e:	0151      	lsls	r1, r2, #5
 8005680:	69fa      	ldr	r2, [r7, #28]
 8005682:	440a      	add	r2, r1
 8005684:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005688:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800568c:	6113      	str	r3, [r2, #16]
 800568e:	e044      	b.n	800571a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	691a      	ldr	r2, [r3, #16]
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	4413      	add	r3, r2
 800569a:	1e5a      	subs	r2, r3, #1
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80056a4:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 80056a6:	69bb      	ldr	r3, [r7, #24]
 80056a8:	015a      	lsls	r2, r3, #5
 80056aa:	69fb      	ldr	r3, [r7, #28]
 80056ac:	4413      	add	r3, r2
 80056ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056b2:	691a      	ldr	r2, [r3, #16]
 80056b4:	8afb      	ldrh	r3, [r7, #22]
 80056b6:	04d9      	lsls	r1, r3, #19
 80056b8:	4ba4      	ldr	r3, [pc, #656]	@ (800594c <USB_EPStartXfer+0x3cc>)
 80056ba:	400b      	ands	r3, r1
 80056bc:	69b9      	ldr	r1, [r7, #24]
 80056be:	0148      	lsls	r0, r1, #5
 80056c0:	69f9      	ldr	r1, [r7, #28]
 80056c2:	4401      	add	r1, r0
 80056c4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80056c8:	4313      	orrs	r3, r2
 80056ca:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	791b      	ldrb	r3, [r3, #4]
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d122      	bne.n	800571a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80056d4:	69bb      	ldr	r3, [r7, #24]
 80056d6:	015a      	lsls	r2, r3, #5
 80056d8:	69fb      	ldr	r3, [r7, #28]
 80056da:	4413      	add	r3, r2
 80056dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056e0:	691b      	ldr	r3, [r3, #16]
 80056e2:	69ba      	ldr	r2, [r7, #24]
 80056e4:	0151      	lsls	r1, r2, #5
 80056e6:	69fa      	ldr	r2, [r7, #28]
 80056e8:	440a      	add	r2, r1
 80056ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80056ee:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80056f2:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 80056f4:	69bb      	ldr	r3, [r7, #24]
 80056f6:	015a      	lsls	r2, r3, #5
 80056f8:	69fb      	ldr	r3, [r7, #28]
 80056fa:	4413      	add	r3, r2
 80056fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005700:	691a      	ldr	r2, [r3, #16]
 8005702:	8afb      	ldrh	r3, [r7, #22]
 8005704:	075b      	lsls	r3, r3, #29
 8005706:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800570a:	69b9      	ldr	r1, [r7, #24]
 800570c:	0148      	lsls	r0, r1, #5
 800570e:	69f9      	ldr	r1, [r7, #28]
 8005710:	4401      	add	r1, r0
 8005712:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005716:	4313      	orrs	r3, r2
 8005718:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800571a:	69bb      	ldr	r3, [r7, #24]
 800571c:	015a      	lsls	r2, r3, #5
 800571e:	69fb      	ldr	r3, [r7, #28]
 8005720:	4413      	add	r3, r2
 8005722:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005726:	691a      	ldr	r2, [r3, #16]
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	691b      	ldr	r3, [r3, #16]
 800572c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005730:	69b9      	ldr	r1, [r7, #24]
 8005732:	0148      	lsls	r0, r1, #5
 8005734:	69f9      	ldr	r1, [r7, #28]
 8005736:	4401      	add	r1, r0
 8005738:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800573c:	4313      	orrs	r3, r2
 800573e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005740:	79fb      	ldrb	r3, [r7, #7]
 8005742:	2b01      	cmp	r3, #1
 8005744:	d14b      	bne.n	80057de <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	69db      	ldr	r3, [r3, #28]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d009      	beq.n	8005762 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800574e:	69bb      	ldr	r3, [r7, #24]
 8005750:	015a      	lsls	r2, r3, #5
 8005752:	69fb      	ldr	r3, [r7, #28]
 8005754:	4413      	add	r3, r2
 8005756:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800575a:	461a      	mov	r2, r3
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	69db      	ldr	r3, [r3, #28]
 8005760:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	791b      	ldrb	r3, [r3, #4]
 8005766:	2b01      	cmp	r3, #1
 8005768:	d128      	bne.n	80057bc <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800576a:	69fb      	ldr	r3, [r7, #28]
 800576c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005776:	2b00      	cmp	r3, #0
 8005778:	d110      	bne.n	800579c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800577a:	69bb      	ldr	r3, [r7, #24]
 800577c:	015a      	lsls	r2, r3, #5
 800577e:	69fb      	ldr	r3, [r7, #28]
 8005780:	4413      	add	r3, r2
 8005782:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	69ba      	ldr	r2, [r7, #24]
 800578a:	0151      	lsls	r1, r2, #5
 800578c:	69fa      	ldr	r2, [r7, #28]
 800578e:	440a      	add	r2, r1
 8005790:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005794:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005798:	6013      	str	r3, [r2, #0]
 800579a:	e00f      	b.n	80057bc <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800579c:	69bb      	ldr	r3, [r7, #24]
 800579e:	015a      	lsls	r2, r3, #5
 80057a0:	69fb      	ldr	r3, [r7, #28]
 80057a2:	4413      	add	r3, r2
 80057a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	69ba      	ldr	r2, [r7, #24]
 80057ac:	0151      	lsls	r1, r2, #5
 80057ae:	69fa      	ldr	r2, [r7, #28]
 80057b0:	440a      	add	r2, r1
 80057b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80057b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80057ba:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80057bc:	69bb      	ldr	r3, [r7, #24]
 80057be:	015a      	lsls	r2, r3, #5
 80057c0:	69fb      	ldr	r3, [r7, #28]
 80057c2:	4413      	add	r3, r2
 80057c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	69ba      	ldr	r2, [r7, #24]
 80057cc:	0151      	lsls	r1, r2, #5
 80057ce:	69fa      	ldr	r2, [r7, #28]
 80057d0:	440a      	add	r2, r1
 80057d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80057d6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80057da:	6013      	str	r3, [r2, #0]
 80057dc:	e166      	b.n	8005aac <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80057de:	69bb      	ldr	r3, [r7, #24]
 80057e0:	015a      	lsls	r2, r3, #5
 80057e2:	69fb      	ldr	r3, [r7, #28]
 80057e4:	4413      	add	r3, r2
 80057e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	69ba      	ldr	r2, [r7, #24]
 80057ee:	0151      	lsls	r1, r2, #5
 80057f0:	69fa      	ldr	r2, [r7, #28]
 80057f2:	440a      	add	r2, r1
 80057f4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80057f8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80057fc:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	791b      	ldrb	r3, [r3, #4]
 8005802:	2b01      	cmp	r3, #1
 8005804:	d015      	beq.n	8005832 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	691b      	ldr	r3, [r3, #16]
 800580a:	2b00      	cmp	r3, #0
 800580c:	f000 814e 	beq.w	8005aac <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005810:	69fb      	ldr	r3, [r7, #28]
 8005812:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005816:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	781b      	ldrb	r3, [r3, #0]
 800581c:	f003 030f 	and.w	r3, r3, #15
 8005820:	2101      	movs	r1, #1
 8005822:	fa01 f303 	lsl.w	r3, r1, r3
 8005826:	69f9      	ldr	r1, [r7, #28]
 8005828:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800582c:	4313      	orrs	r3, r2
 800582e:	634b      	str	r3, [r1, #52]	@ 0x34
 8005830:	e13c      	b.n	8005aac <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005832:	69fb      	ldr	r3, [r7, #28]
 8005834:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005838:	689b      	ldr	r3, [r3, #8]
 800583a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800583e:	2b00      	cmp	r3, #0
 8005840:	d110      	bne.n	8005864 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005842:	69bb      	ldr	r3, [r7, #24]
 8005844:	015a      	lsls	r2, r3, #5
 8005846:	69fb      	ldr	r3, [r7, #28]
 8005848:	4413      	add	r3, r2
 800584a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	69ba      	ldr	r2, [r7, #24]
 8005852:	0151      	lsls	r1, r2, #5
 8005854:	69fa      	ldr	r2, [r7, #28]
 8005856:	440a      	add	r2, r1
 8005858:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800585c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005860:	6013      	str	r3, [r2, #0]
 8005862:	e00f      	b.n	8005884 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005864:	69bb      	ldr	r3, [r7, #24]
 8005866:	015a      	lsls	r2, r3, #5
 8005868:	69fb      	ldr	r3, [r7, #28]
 800586a:	4413      	add	r3, r2
 800586c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	69ba      	ldr	r2, [r7, #24]
 8005874:	0151      	lsls	r1, r2, #5
 8005876:	69fa      	ldr	r2, [r7, #28]
 8005878:	440a      	add	r2, r1
 800587a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800587e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005882:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	68d9      	ldr	r1, [r3, #12]
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	781a      	ldrb	r2, [r3, #0]
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	691b      	ldr	r3, [r3, #16]
 8005890:	b298      	uxth	r0, r3
 8005892:	79fb      	ldrb	r3, [r7, #7]
 8005894:	9300      	str	r3, [sp, #0]
 8005896:	4603      	mov	r3, r0
 8005898:	68f8      	ldr	r0, [r7, #12]
 800589a:	f000 f9b9 	bl	8005c10 <USB_WritePacket>
 800589e:	e105      	b.n	8005aac <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80058a0:	69bb      	ldr	r3, [r7, #24]
 80058a2:	015a      	lsls	r2, r3, #5
 80058a4:	69fb      	ldr	r3, [r7, #28]
 80058a6:	4413      	add	r3, r2
 80058a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058ac:	691b      	ldr	r3, [r3, #16]
 80058ae:	69ba      	ldr	r2, [r7, #24]
 80058b0:	0151      	lsls	r1, r2, #5
 80058b2:	69fa      	ldr	r2, [r7, #28]
 80058b4:	440a      	add	r2, r1
 80058b6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80058ba:	0cdb      	lsrs	r3, r3, #19
 80058bc:	04db      	lsls	r3, r3, #19
 80058be:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80058c0:	69bb      	ldr	r3, [r7, #24]
 80058c2:	015a      	lsls	r2, r3, #5
 80058c4:	69fb      	ldr	r3, [r7, #28]
 80058c6:	4413      	add	r3, r2
 80058c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058cc:	691b      	ldr	r3, [r3, #16]
 80058ce:	69ba      	ldr	r2, [r7, #24]
 80058d0:	0151      	lsls	r1, r2, #5
 80058d2:	69fa      	ldr	r2, [r7, #28]
 80058d4:	440a      	add	r2, r1
 80058d6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80058da:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80058de:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80058e2:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80058e4:	69bb      	ldr	r3, [r7, #24]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d132      	bne.n	8005950 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	691b      	ldr	r3, [r3, #16]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d003      	beq.n	80058fa <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	689a      	ldr	r2, [r3, #8]
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	689a      	ldr	r2, [r3, #8]
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005902:	69bb      	ldr	r3, [r7, #24]
 8005904:	015a      	lsls	r2, r3, #5
 8005906:	69fb      	ldr	r3, [r7, #28]
 8005908:	4413      	add	r3, r2
 800590a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800590e:	691a      	ldr	r2, [r3, #16]
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	6a1b      	ldr	r3, [r3, #32]
 8005914:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005918:	69b9      	ldr	r1, [r7, #24]
 800591a:	0148      	lsls	r0, r1, #5
 800591c:	69f9      	ldr	r1, [r7, #28]
 800591e:	4401      	add	r1, r0
 8005920:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005924:	4313      	orrs	r3, r2
 8005926:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005928:	69bb      	ldr	r3, [r7, #24]
 800592a:	015a      	lsls	r2, r3, #5
 800592c:	69fb      	ldr	r3, [r7, #28]
 800592e:	4413      	add	r3, r2
 8005930:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005934:	691b      	ldr	r3, [r3, #16]
 8005936:	69ba      	ldr	r2, [r7, #24]
 8005938:	0151      	lsls	r1, r2, #5
 800593a:	69fa      	ldr	r2, [r7, #28]
 800593c:	440a      	add	r2, r1
 800593e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005942:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005946:	6113      	str	r3, [r2, #16]
 8005948:	e062      	b.n	8005a10 <USB_EPStartXfer+0x490>
 800594a:	bf00      	nop
 800594c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	691b      	ldr	r3, [r3, #16]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d123      	bne.n	80059a0 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005958:	69bb      	ldr	r3, [r7, #24]
 800595a:	015a      	lsls	r2, r3, #5
 800595c:	69fb      	ldr	r3, [r7, #28]
 800595e:	4413      	add	r3, r2
 8005960:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005964:	691a      	ldr	r2, [r3, #16]
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	689b      	ldr	r3, [r3, #8]
 800596a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800596e:	69b9      	ldr	r1, [r7, #24]
 8005970:	0148      	lsls	r0, r1, #5
 8005972:	69f9      	ldr	r1, [r7, #28]
 8005974:	4401      	add	r1, r0
 8005976:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800597a:	4313      	orrs	r3, r2
 800597c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800597e:	69bb      	ldr	r3, [r7, #24]
 8005980:	015a      	lsls	r2, r3, #5
 8005982:	69fb      	ldr	r3, [r7, #28]
 8005984:	4413      	add	r3, r2
 8005986:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800598a:	691b      	ldr	r3, [r3, #16]
 800598c:	69ba      	ldr	r2, [r7, #24]
 800598e:	0151      	lsls	r1, r2, #5
 8005990:	69fa      	ldr	r2, [r7, #28]
 8005992:	440a      	add	r2, r1
 8005994:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005998:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800599c:	6113      	str	r3, [r2, #16]
 800599e:	e037      	b.n	8005a10 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	691a      	ldr	r2, [r3, #16]
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	4413      	add	r3, r2
 80059aa:	1e5a      	subs	r2, r3, #1
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80059b4:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	689b      	ldr	r3, [r3, #8]
 80059ba:	8afa      	ldrh	r2, [r7, #22]
 80059bc:	fb03 f202 	mul.w	r2, r3, r2
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80059c4:	69bb      	ldr	r3, [r7, #24]
 80059c6:	015a      	lsls	r2, r3, #5
 80059c8:	69fb      	ldr	r3, [r7, #28]
 80059ca:	4413      	add	r3, r2
 80059cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059d0:	691a      	ldr	r2, [r3, #16]
 80059d2:	8afb      	ldrh	r3, [r7, #22]
 80059d4:	04d9      	lsls	r1, r3, #19
 80059d6:	4b38      	ldr	r3, [pc, #224]	@ (8005ab8 <USB_EPStartXfer+0x538>)
 80059d8:	400b      	ands	r3, r1
 80059da:	69b9      	ldr	r1, [r7, #24]
 80059dc:	0148      	lsls	r0, r1, #5
 80059de:	69f9      	ldr	r1, [r7, #28]
 80059e0:	4401      	add	r1, r0
 80059e2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80059e6:	4313      	orrs	r3, r2
 80059e8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80059ea:	69bb      	ldr	r3, [r7, #24]
 80059ec:	015a      	lsls	r2, r3, #5
 80059ee:	69fb      	ldr	r3, [r7, #28]
 80059f0:	4413      	add	r3, r2
 80059f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059f6:	691a      	ldr	r2, [r3, #16]
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	6a1b      	ldr	r3, [r3, #32]
 80059fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a00:	69b9      	ldr	r1, [r7, #24]
 8005a02:	0148      	lsls	r0, r1, #5
 8005a04:	69f9      	ldr	r1, [r7, #28]
 8005a06:	4401      	add	r1, r0
 8005a08:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8005a10:	79fb      	ldrb	r3, [r7, #7]
 8005a12:	2b01      	cmp	r3, #1
 8005a14:	d10d      	bne.n	8005a32 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	68db      	ldr	r3, [r3, #12]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d009      	beq.n	8005a32 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	68d9      	ldr	r1, [r3, #12]
 8005a22:	69bb      	ldr	r3, [r7, #24]
 8005a24:	015a      	lsls	r2, r3, #5
 8005a26:	69fb      	ldr	r3, [r7, #28]
 8005a28:	4413      	add	r3, r2
 8005a2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a2e:	460a      	mov	r2, r1
 8005a30:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	791b      	ldrb	r3, [r3, #4]
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	d128      	bne.n	8005a8c <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005a3a:	69fb      	ldr	r3, [r7, #28]
 8005a3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a40:	689b      	ldr	r3, [r3, #8]
 8005a42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d110      	bne.n	8005a6c <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005a4a:	69bb      	ldr	r3, [r7, #24]
 8005a4c:	015a      	lsls	r2, r3, #5
 8005a4e:	69fb      	ldr	r3, [r7, #28]
 8005a50:	4413      	add	r3, r2
 8005a52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	69ba      	ldr	r2, [r7, #24]
 8005a5a:	0151      	lsls	r1, r2, #5
 8005a5c:	69fa      	ldr	r2, [r7, #28]
 8005a5e:	440a      	add	r2, r1
 8005a60:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a64:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005a68:	6013      	str	r3, [r2, #0]
 8005a6a:	e00f      	b.n	8005a8c <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005a6c:	69bb      	ldr	r3, [r7, #24]
 8005a6e:	015a      	lsls	r2, r3, #5
 8005a70:	69fb      	ldr	r3, [r7, #28]
 8005a72:	4413      	add	r3, r2
 8005a74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	69ba      	ldr	r2, [r7, #24]
 8005a7c:	0151      	lsls	r1, r2, #5
 8005a7e:	69fa      	ldr	r2, [r7, #28]
 8005a80:	440a      	add	r2, r1
 8005a82:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a8a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005a8c:	69bb      	ldr	r3, [r7, #24]
 8005a8e:	015a      	lsls	r2, r3, #5
 8005a90:	69fb      	ldr	r3, [r7, #28]
 8005a92:	4413      	add	r3, r2
 8005a94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	69ba      	ldr	r2, [r7, #24]
 8005a9c:	0151      	lsls	r1, r2, #5
 8005a9e:	69fa      	ldr	r2, [r7, #28]
 8005aa0:	440a      	add	r2, r1
 8005aa2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005aa6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005aaa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005aac:	2300      	movs	r3, #0
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3720      	adds	r7, #32
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}
 8005ab6:	bf00      	nop
 8005ab8:	1ff80000 	.word	0x1ff80000

08005abc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b087      	sub	sp, #28
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005aca:	2300      	movs	r3, #0
 8005acc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	785b      	ldrb	r3, [r3, #1]
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	d14a      	bne.n	8005b70 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	781b      	ldrb	r3, [r3, #0]
 8005ade:	015a      	lsls	r2, r3, #5
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	4413      	add	r3, r2
 8005ae4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005aee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005af2:	f040 8086 	bne.w	8005c02 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	781b      	ldrb	r3, [r3, #0]
 8005afa:	015a      	lsls	r2, r3, #5
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	4413      	add	r3, r2
 8005b00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	683a      	ldr	r2, [r7, #0]
 8005b08:	7812      	ldrb	r2, [r2, #0]
 8005b0a:	0151      	lsls	r1, r2, #5
 8005b0c:	693a      	ldr	r2, [r7, #16]
 8005b0e:	440a      	add	r2, r1
 8005b10:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b14:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005b18:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	781b      	ldrb	r3, [r3, #0]
 8005b1e:	015a      	lsls	r2, r3, #5
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	4413      	add	r3, r2
 8005b24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	683a      	ldr	r2, [r7, #0]
 8005b2c:	7812      	ldrb	r2, [r2, #0]
 8005b2e:	0151      	lsls	r1, r2, #5
 8005b30:	693a      	ldr	r2, [r7, #16]
 8005b32:	440a      	add	r2, r1
 8005b34:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b38:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005b3c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	3301      	adds	r3, #1
 8005b42:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d902      	bls.n	8005b54 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	75fb      	strb	r3, [r7, #23]
          break;
 8005b52:	e056      	b.n	8005c02 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	781b      	ldrb	r3, [r3, #0]
 8005b58:	015a      	lsls	r2, r3, #5
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	4413      	add	r3, r2
 8005b5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005b68:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005b6c:	d0e7      	beq.n	8005b3e <USB_EPStopXfer+0x82>
 8005b6e:	e048      	b.n	8005c02 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	781b      	ldrb	r3, [r3, #0]
 8005b74:	015a      	lsls	r2, r3, #5
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	4413      	add	r3, r2
 8005b7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005b84:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005b88:	d13b      	bne.n	8005c02 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	781b      	ldrb	r3, [r3, #0]
 8005b8e:	015a      	lsls	r2, r3, #5
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	4413      	add	r3, r2
 8005b94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	683a      	ldr	r2, [r7, #0]
 8005b9c:	7812      	ldrb	r2, [r2, #0]
 8005b9e:	0151      	lsls	r1, r2, #5
 8005ba0:	693a      	ldr	r2, [r7, #16]
 8005ba2:	440a      	add	r2, r1
 8005ba4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ba8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005bac:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	781b      	ldrb	r3, [r3, #0]
 8005bb2:	015a      	lsls	r2, r3, #5
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	4413      	add	r3, r2
 8005bb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	683a      	ldr	r2, [r7, #0]
 8005bc0:	7812      	ldrb	r2, [r2, #0]
 8005bc2:	0151      	lsls	r1, r2, #5
 8005bc4:	693a      	ldr	r2, [r7, #16]
 8005bc6:	440a      	add	r2, r1
 8005bc8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005bcc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005bd0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	3301      	adds	r3, #1
 8005bd6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d902      	bls.n	8005be8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	75fb      	strb	r3, [r7, #23]
          break;
 8005be6:	e00c      	b.n	8005c02 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	781b      	ldrb	r3, [r3, #0]
 8005bec:	015a      	lsls	r2, r3, #5
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	4413      	add	r3, r2
 8005bf2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005bfc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005c00:	d0e7      	beq.n	8005bd2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005c02:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	371c      	adds	r7, #28
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr

08005c10 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b089      	sub	sp, #36	@ 0x24
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	60f8      	str	r0, [r7, #12]
 8005c18:	60b9      	str	r1, [r7, #8]
 8005c1a:	4611      	mov	r1, r2
 8005c1c:	461a      	mov	r2, r3
 8005c1e:	460b      	mov	r3, r1
 8005c20:	71fb      	strb	r3, [r7, #7]
 8005c22:	4613      	mov	r3, r2
 8005c24:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005c2e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d123      	bne.n	8005c7e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005c36:	88bb      	ldrh	r3, [r7, #4]
 8005c38:	3303      	adds	r3, #3
 8005c3a:	089b      	lsrs	r3, r3, #2
 8005c3c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005c3e:	2300      	movs	r3, #0
 8005c40:	61bb      	str	r3, [r7, #24]
 8005c42:	e018      	b.n	8005c76 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005c44:	79fb      	ldrb	r3, [r7, #7]
 8005c46:	031a      	lsls	r2, r3, #12
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	4413      	add	r3, r2
 8005c4c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c50:	461a      	mov	r2, r3
 8005c52:	69fb      	ldr	r3, [r7, #28]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005c58:	69fb      	ldr	r3, [r7, #28]
 8005c5a:	3301      	adds	r3, #1
 8005c5c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005c5e:	69fb      	ldr	r3, [r7, #28]
 8005c60:	3301      	adds	r3, #1
 8005c62:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005c64:	69fb      	ldr	r3, [r7, #28]
 8005c66:	3301      	adds	r3, #1
 8005c68:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005c6a:	69fb      	ldr	r3, [r7, #28]
 8005c6c:	3301      	adds	r3, #1
 8005c6e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005c70:	69bb      	ldr	r3, [r7, #24]
 8005c72:	3301      	adds	r3, #1
 8005c74:	61bb      	str	r3, [r7, #24]
 8005c76:	69ba      	ldr	r2, [r7, #24]
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	429a      	cmp	r2, r3
 8005c7c:	d3e2      	bcc.n	8005c44 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005c7e:	2300      	movs	r3, #0
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3724      	adds	r7, #36	@ 0x24
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr

08005c8c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b08b      	sub	sp, #44	@ 0x2c
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	60f8      	str	r0, [r7, #12]
 8005c94:	60b9      	str	r1, [r7, #8]
 8005c96:	4613      	mov	r3, r2
 8005c98:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005ca2:	88fb      	ldrh	r3, [r7, #6]
 8005ca4:	089b      	lsrs	r3, r3, #2
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005caa:	88fb      	ldrh	r3, [r7, #6]
 8005cac:	f003 0303 	and.w	r3, r3, #3
 8005cb0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	623b      	str	r3, [r7, #32]
 8005cb6:	e014      	b.n	8005ce2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005cb8:	69bb      	ldr	r3, [r7, #24]
 8005cba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005cbe:	681a      	ldr	r2, [r3, #0]
 8005cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cc2:	601a      	str	r2, [r3, #0]
    pDest++;
 8005cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cc6:	3301      	adds	r3, #1
 8005cc8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ccc:	3301      	adds	r3, #1
 8005cce:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cd2:	3301      	adds	r3, #1
 8005cd4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cd8:	3301      	adds	r3, #1
 8005cda:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005cdc:	6a3b      	ldr	r3, [r7, #32]
 8005cde:	3301      	adds	r3, #1
 8005ce0:	623b      	str	r3, [r7, #32]
 8005ce2:	6a3a      	ldr	r2, [r7, #32]
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	429a      	cmp	r2, r3
 8005ce8:	d3e6      	bcc.n	8005cb8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005cea:	8bfb      	ldrh	r3, [r7, #30]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d01e      	beq.n	8005d2e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005cf4:	69bb      	ldr	r3, [r7, #24]
 8005cf6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	f107 0310 	add.w	r3, r7, #16
 8005d00:	6812      	ldr	r2, [r2, #0]
 8005d02:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005d04:	693a      	ldr	r2, [r7, #16]
 8005d06:	6a3b      	ldr	r3, [r7, #32]
 8005d08:	b2db      	uxtb	r3, r3
 8005d0a:	00db      	lsls	r3, r3, #3
 8005d0c:	fa22 f303 	lsr.w	r3, r2, r3
 8005d10:	b2da      	uxtb	r2, r3
 8005d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d14:	701a      	strb	r2, [r3, #0]
      i++;
 8005d16:	6a3b      	ldr	r3, [r7, #32]
 8005d18:	3301      	adds	r3, #1
 8005d1a:	623b      	str	r3, [r7, #32]
      pDest++;
 8005d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d1e:	3301      	adds	r3, #1
 8005d20:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005d22:	8bfb      	ldrh	r3, [r7, #30]
 8005d24:	3b01      	subs	r3, #1
 8005d26:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005d28:	8bfb      	ldrh	r3, [r7, #30]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d1ea      	bne.n	8005d04 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	372c      	adds	r7, #44	@ 0x2c
 8005d34:	46bd      	mov	sp, r7
 8005d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3a:	4770      	bx	lr

08005d3c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b085      	sub	sp, #20
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
 8005d44:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	781b      	ldrb	r3, [r3, #0]
 8005d4e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	785b      	ldrb	r3, [r3, #1]
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	d12c      	bne.n	8005db2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	015a      	lsls	r2, r3, #5
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	4413      	add	r3, r2
 8005d60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	db12      	blt.n	8005d90 <USB_EPSetStall+0x54>
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d00f      	beq.n	8005d90 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	015a      	lsls	r2, r3, #5
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	4413      	add	r3, r2
 8005d78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	68ba      	ldr	r2, [r7, #8]
 8005d80:	0151      	lsls	r1, r2, #5
 8005d82:	68fa      	ldr	r2, [r7, #12]
 8005d84:	440a      	add	r2, r1
 8005d86:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d8a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005d8e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	015a      	lsls	r2, r3, #5
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	4413      	add	r3, r2
 8005d98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	68ba      	ldr	r2, [r7, #8]
 8005da0:	0151      	lsls	r1, r2, #5
 8005da2:	68fa      	ldr	r2, [r7, #12]
 8005da4:	440a      	add	r2, r1
 8005da6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005daa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005dae:	6013      	str	r3, [r2, #0]
 8005db0:	e02b      	b.n	8005e0a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	015a      	lsls	r2, r3, #5
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	4413      	add	r3, r2
 8005dba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	db12      	blt.n	8005dea <USB_EPSetStall+0xae>
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d00f      	beq.n	8005dea <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	015a      	lsls	r2, r3, #5
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	4413      	add	r3, r2
 8005dd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	68ba      	ldr	r2, [r7, #8]
 8005dda:	0151      	lsls	r1, r2, #5
 8005ddc:	68fa      	ldr	r2, [r7, #12]
 8005dde:	440a      	add	r2, r1
 8005de0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005de4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005de8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	015a      	lsls	r2, r3, #5
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	4413      	add	r3, r2
 8005df2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	68ba      	ldr	r2, [r7, #8]
 8005dfa:	0151      	lsls	r1, r2, #5
 8005dfc:	68fa      	ldr	r2, [r7, #12]
 8005dfe:	440a      	add	r2, r1
 8005e00:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005e04:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005e08:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005e0a:	2300      	movs	r3, #0
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	3714      	adds	r7, #20
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr

08005e18 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b085      	sub	sp, #20
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
 8005e20:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	781b      	ldrb	r3, [r3, #0]
 8005e2a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	785b      	ldrb	r3, [r3, #1]
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d128      	bne.n	8005e86 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	015a      	lsls	r2, r3, #5
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	4413      	add	r3, r2
 8005e3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	68ba      	ldr	r2, [r7, #8]
 8005e44:	0151      	lsls	r1, r2, #5
 8005e46:	68fa      	ldr	r2, [r7, #12]
 8005e48:	440a      	add	r2, r1
 8005e4a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e4e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005e52:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	791b      	ldrb	r3, [r3, #4]
 8005e58:	2b03      	cmp	r3, #3
 8005e5a:	d003      	beq.n	8005e64 <USB_EPClearStall+0x4c>
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	791b      	ldrb	r3, [r3, #4]
 8005e60:	2b02      	cmp	r3, #2
 8005e62:	d138      	bne.n	8005ed6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	015a      	lsls	r2, r3, #5
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	4413      	add	r3, r2
 8005e6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	68ba      	ldr	r2, [r7, #8]
 8005e74:	0151      	lsls	r1, r2, #5
 8005e76:	68fa      	ldr	r2, [r7, #12]
 8005e78:	440a      	add	r2, r1
 8005e7a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e82:	6013      	str	r3, [r2, #0]
 8005e84:	e027      	b.n	8005ed6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	015a      	lsls	r2, r3, #5
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	4413      	add	r3, r2
 8005e8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	68ba      	ldr	r2, [r7, #8]
 8005e96:	0151      	lsls	r1, r2, #5
 8005e98:	68fa      	ldr	r2, [r7, #12]
 8005e9a:	440a      	add	r2, r1
 8005e9c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ea0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005ea4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	791b      	ldrb	r3, [r3, #4]
 8005eaa:	2b03      	cmp	r3, #3
 8005eac:	d003      	beq.n	8005eb6 <USB_EPClearStall+0x9e>
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	791b      	ldrb	r3, [r3, #4]
 8005eb2:	2b02      	cmp	r3, #2
 8005eb4:	d10f      	bne.n	8005ed6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	015a      	lsls	r2, r3, #5
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	4413      	add	r3, r2
 8005ebe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	68ba      	ldr	r2, [r7, #8]
 8005ec6:	0151      	lsls	r1, r2, #5
 8005ec8:	68fa      	ldr	r2, [r7, #12]
 8005eca:	440a      	add	r2, r1
 8005ecc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ed0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ed4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005ed6:	2300      	movs	r3, #0
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	3714      	adds	r7, #20
 8005edc:	46bd      	mov	sp, r7
 8005ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee2:	4770      	bx	lr

08005ee4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b085      	sub	sp, #20
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	460b      	mov	r3, r1
 8005eee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	68fa      	ldr	r2, [r7, #12]
 8005efe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005f02:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005f06:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f0e:	681a      	ldr	r2, [r3, #0]
 8005f10:	78fb      	ldrb	r3, [r7, #3]
 8005f12:	011b      	lsls	r3, r3, #4
 8005f14:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8005f18:	68f9      	ldr	r1, [r7, #12]
 8005f1a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005f22:	2300      	movs	r3, #0
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	3714      	adds	r7, #20
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr

08005f30 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b085      	sub	sp, #20
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	68fa      	ldr	r2, [r7, #12]
 8005f46:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005f4a:	f023 0303 	bic.w	r3, r3, #3
 8005f4e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	68fa      	ldr	r2, [r7, #12]
 8005f5a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005f5e:	f023 0302 	bic.w	r3, r3, #2
 8005f62:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005f64:	2300      	movs	r3, #0
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3714      	adds	r7, #20
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f70:	4770      	bx	lr

08005f72 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005f72:	b480      	push	{r7}
 8005f74:	b085      	sub	sp, #20
 8005f76:	af00      	add	r7, sp, #0
 8005f78:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	68fa      	ldr	r2, [r7, #12]
 8005f88:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005f8c:	f023 0303 	bic.w	r3, r3, #3
 8005f90:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	68fa      	ldr	r2, [r7, #12]
 8005f9c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005fa0:	f043 0302 	orr.w	r3, r3, #2
 8005fa4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005fa6:	2300      	movs	r3, #0
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	3714      	adds	r7, #20
 8005fac:	46bd      	mov	sp, r7
 8005fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb2:	4770      	bx	lr

08005fb4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b085      	sub	sp, #20
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	695b      	ldr	r3, [r3, #20]
 8005fc0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	699b      	ldr	r3, [r3, #24]
 8005fc6:	68fa      	ldr	r2, [r7, #12]
 8005fc8:	4013      	ands	r3, r2
 8005fca:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3714      	adds	r7, #20
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd8:	4770      	bx	lr

08005fda <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005fda:	b480      	push	{r7}
 8005fdc:	b085      	sub	sp, #20
 8005fde:	af00      	add	r7, sp, #0
 8005fe0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fec:	699b      	ldr	r3, [r3, #24]
 8005fee:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ff6:	69db      	ldr	r3, [r3, #28]
 8005ff8:	68ba      	ldr	r2, [r7, #8]
 8005ffa:	4013      	ands	r3, r2
 8005ffc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	0c1b      	lsrs	r3, r3, #16
}
 8006002:	4618      	mov	r0, r3
 8006004:	3714      	adds	r7, #20
 8006006:	46bd      	mov	sp, r7
 8006008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600c:	4770      	bx	lr

0800600e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800600e:	b480      	push	{r7}
 8006010:	b085      	sub	sp, #20
 8006012:	af00      	add	r7, sp, #0
 8006014:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006020:	699b      	ldr	r3, [r3, #24]
 8006022:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800602a:	69db      	ldr	r3, [r3, #28]
 800602c:	68ba      	ldr	r2, [r7, #8]
 800602e:	4013      	ands	r3, r2
 8006030:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	b29b      	uxth	r3, r3
}
 8006036:	4618      	mov	r0, r3
 8006038:	3714      	adds	r7, #20
 800603a:	46bd      	mov	sp, r7
 800603c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006040:	4770      	bx	lr

08006042 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006042:	b480      	push	{r7}
 8006044:	b085      	sub	sp, #20
 8006046:	af00      	add	r7, sp, #0
 8006048:	6078      	str	r0, [r7, #4]
 800604a:	460b      	mov	r3, r1
 800604c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006052:	78fb      	ldrb	r3, [r7, #3]
 8006054:	015a      	lsls	r2, r3, #5
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	4413      	add	r3, r2
 800605a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006068:	695b      	ldr	r3, [r3, #20]
 800606a:	68ba      	ldr	r2, [r7, #8]
 800606c:	4013      	ands	r3, r2
 800606e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006070:	68bb      	ldr	r3, [r7, #8]
}
 8006072:	4618      	mov	r0, r3
 8006074:	3714      	adds	r7, #20
 8006076:	46bd      	mov	sp, r7
 8006078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607c:	4770      	bx	lr

0800607e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800607e:	b480      	push	{r7}
 8006080:	b087      	sub	sp, #28
 8006082:	af00      	add	r7, sp, #0
 8006084:	6078      	str	r0, [r7, #4]
 8006086:	460b      	mov	r3, r1
 8006088:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006094:	691b      	ldr	r3, [r3, #16]
 8006096:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800609e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060a0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80060a2:	78fb      	ldrb	r3, [r7, #3]
 80060a4:	f003 030f 	and.w	r3, r3, #15
 80060a8:	68fa      	ldr	r2, [r7, #12]
 80060aa:	fa22 f303 	lsr.w	r3, r2, r3
 80060ae:	01db      	lsls	r3, r3, #7
 80060b0:	b2db      	uxtb	r3, r3
 80060b2:	693a      	ldr	r2, [r7, #16]
 80060b4:	4313      	orrs	r3, r2
 80060b6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80060b8:	78fb      	ldrb	r3, [r7, #3]
 80060ba:	015a      	lsls	r2, r3, #5
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	4413      	add	r3, r2
 80060c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060c4:	689b      	ldr	r3, [r3, #8]
 80060c6:	693a      	ldr	r2, [r7, #16]
 80060c8:	4013      	ands	r3, r2
 80060ca:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80060cc:	68bb      	ldr	r3, [r7, #8]
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	371c      	adds	r7, #28
 80060d2:	46bd      	mov	sp, r7
 80060d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d8:	4770      	bx	lr

080060da <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80060da:	b480      	push	{r7}
 80060dc:	b083      	sub	sp, #12
 80060de:	af00      	add	r7, sp, #0
 80060e0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	695b      	ldr	r3, [r3, #20]
 80060e6:	f003 0301 	and.w	r3, r3, #1
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	370c      	adds	r7, #12
 80060ee:	46bd      	mov	sp, r7
 80060f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f4:	4770      	bx	lr

080060f6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80060f6:	b480      	push	{r7}
 80060f8:	b085      	sub	sp, #20
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	68fa      	ldr	r2, [r7, #12]
 800610c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006110:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006114:	f023 0307 	bic.w	r3, r3, #7
 8006118:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	68fa      	ldr	r2, [r7, #12]
 8006124:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006128:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800612c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800612e:	2300      	movs	r3, #0
}
 8006130:	4618      	mov	r0, r3
 8006132:	3714      	adds	r7, #20
 8006134:	46bd      	mov	sp, r7
 8006136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613a:	4770      	bx	lr

0800613c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800613c:	b480      	push	{r7}
 800613e:	b087      	sub	sp, #28
 8006140:	af00      	add	r7, sp, #0
 8006142:	60f8      	str	r0, [r7, #12]
 8006144:	460b      	mov	r3, r1
 8006146:	607a      	str	r2, [r7, #4]
 8006148:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	333c      	adds	r3, #60	@ 0x3c
 8006152:	3304      	adds	r3, #4
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	4a26      	ldr	r2, [pc, #152]	@ (80061f4 <USB_EP0_OutStart+0xb8>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d90a      	bls.n	8006176 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800616c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006170:	d101      	bne.n	8006176 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006172:	2300      	movs	r3, #0
 8006174:	e037      	b.n	80061e6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800617c:	461a      	mov	r2, r3
 800617e:	2300      	movs	r3, #0
 8006180:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006188:	691b      	ldr	r3, [r3, #16]
 800618a:	697a      	ldr	r2, [r7, #20]
 800618c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006190:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006194:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800619c:	691b      	ldr	r3, [r3, #16]
 800619e:	697a      	ldr	r2, [r7, #20]
 80061a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80061a4:	f043 0318 	orr.w	r3, r3, #24
 80061a8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061b0:	691b      	ldr	r3, [r3, #16]
 80061b2:	697a      	ldr	r2, [r7, #20]
 80061b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80061b8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80061bc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80061be:	7afb      	ldrb	r3, [r7, #11]
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	d10f      	bne.n	80061e4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061ca:	461a      	mov	r2, r3
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	697a      	ldr	r2, [r7, #20]
 80061da:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80061de:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80061e2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80061e4:	2300      	movs	r3, #0
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	371c      	adds	r7, #28
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr
 80061f2:	bf00      	nop
 80061f4:	4f54300a 	.word	0x4f54300a

080061f8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b085      	sub	sp, #20
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006200:	2300      	movs	r3, #0
 8006202:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	3301      	adds	r3, #1
 8006208:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006210:	d901      	bls.n	8006216 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006212:	2303      	movs	r3, #3
 8006214:	e01b      	b.n	800624e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	691b      	ldr	r3, [r3, #16]
 800621a:	2b00      	cmp	r3, #0
 800621c:	daf2      	bge.n	8006204 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800621e:	2300      	movs	r3, #0
 8006220:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	691b      	ldr	r3, [r3, #16]
 8006226:	f043 0201 	orr.w	r2, r3, #1
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	3301      	adds	r3, #1
 8006232:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800623a:	d901      	bls.n	8006240 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800623c:	2303      	movs	r3, #3
 800623e:	e006      	b.n	800624e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	691b      	ldr	r3, [r3, #16]
 8006244:	f003 0301 	and.w	r3, r3, #1
 8006248:	2b01      	cmp	r3, #1
 800624a:	d0f0      	beq.n	800622e <USB_CoreReset+0x36>

  return HAL_OK;
 800624c:	2300      	movs	r3, #0
}
 800624e:	4618      	mov	r0, r3
 8006250:	3714      	adds	r7, #20
 8006252:	46bd      	mov	sp, r7
 8006254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006258:	4770      	bx	lr
	...

0800625c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b084      	sub	sp, #16
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
 8006264:	460b      	mov	r3, r1
 8006266:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006268:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800626c:	f002 fc94 	bl	8008b98 <USBD_static_malloc>
 8006270:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d109      	bne.n	800628c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	32b0      	adds	r2, #176	@ 0xb0
 8006282:	2100      	movs	r1, #0
 8006284:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006288:	2302      	movs	r3, #2
 800628a:	e0d4      	b.n	8006436 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800628c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8006290:	2100      	movs	r1, #0
 8006292:	68f8      	ldr	r0, [r7, #12]
 8006294:	f003 fa55 	bl	8009742 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	32b0      	adds	r2, #176	@ 0xb0
 80062a2:	68f9      	ldr	r1, [r7, #12]
 80062a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	32b0      	adds	r2, #176	@ 0xb0
 80062b2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	7c1b      	ldrb	r3, [r3, #16]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d138      	bne.n	8006336 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80062c4:	4b5e      	ldr	r3, [pc, #376]	@ (8006440 <USBD_CDC_Init+0x1e4>)
 80062c6:	7819      	ldrb	r1, [r3, #0]
 80062c8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80062cc:	2202      	movs	r2, #2
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f002 fb3f 	bl	8008952 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80062d4:	4b5a      	ldr	r3, [pc, #360]	@ (8006440 <USBD_CDC_Init+0x1e4>)
 80062d6:	781b      	ldrb	r3, [r3, #0]
 80062d8:	f003 020f 	and.w	r2, r3, #15
 80062dc:	6879      	ldr	r1, [r7, #4]
 80062de:	4613      	mov	r3, r2
 80062e0:	009b      	lsls	r3, r3, #2
 80062e2:	4413      	add	r3, r2
 80062e4:	009b      	lsls	r3, r3, #2
 80062e6:	440b      	add	r3, r1
 80062e8:	3324      	adds	r3, #36	@ 0x24
 80062ea:	2201      	movs	r2, #1
 80062ec:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80062ee:	4b55      	ldr	r3, [pc, #340]	@ (8006444 <USBD_CDC_Init+0x1e8>)
 80062f0:	7819      	ldrb	r1, [r3, #0]
 80062f2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80062f6:	2202      	movs	r2, #2
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f002 fb2a 	bl	8008952 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80062fe:	4b51      	ldr	r3, [pc, #324]	@ (8006444 <USBD_CDC_Init+0x1e8>)
 8006300:	781b      	ldrb	r3, [r3, #0]
 8006302:	f003 020f 	and.w	r2, r3, #15
 8006306:	6879      	ldr	r1, [r7, #4]
 8006308:	4613      	mov	r3, r2
 800630a:	009b      	lsls	r3, r3, #2
 800630c:	4413      	add	r3, r2
 800630e:	009b      	lsls	r3, r3, #2
 8006310:	440b      	add	r3, r1
 8006312:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006316:	2201      	movs	r2, #1
 8006318:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800631a:	4b4b      	ldr	r3, [pc, #300]	@ (8006448 <USBD_CDC_Init+0x1ec>)
 800631c:	781b      	ldrb	r3, [r3, #0]
 800631e:	f003 020f 	and.w	r2, r3, #15
 8006322:	6879      	ldr	r1, [r7, #4]
 8006324:	4613      	mov	r3, r2
 8006326:	009b      	lsls	r3, r3, #2
 8006328:	4413      	add	r3, r2
 800632a:	009b      	lsls	r3, r3, #2
 800632c:	440b      	add	r3, r1
 800632e:	3326      	adds	r3, #38	@ 0x26
 8006330:	2210      	movs	r2, #16
 8006332:	801a      	strh	r2, [r3, #0]
 8006334:	e035      	b.n	80063a2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006336:	4b42      	ldr	r3, [pc, #264]	@ (8006440 <USBD_CDC_Init+0x1e4>)
 8006338:	7819      	ldrb	r1, [r3, #0]
 800633a:	2340      	movs	r3, #64	@ 0x40
 800633c:	2202      	movs	r2, #2
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f002 fb07 	bl	8008952 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006344:	4b3e      	ldr	r3, [pc, #248]	@ (8006440 <USBD_CDC_Init+0x1e4>)
 8006346:	781b      	ldrb	r3, [r3, #0]
 8006348:	f003 020f 	and.w	r2, r3, #15
 800634c:	6879      	ldr	r1, [r7, #4]
 800634e:	4613      	mov	r3, r2
 8006350:	009b      	lsls	r3, r3, #2
 8006352:	4413      	add	r3, r2
 8006354:	009b      	lsls	r3, r3, #2
 8006356:	440b      	add	r3, r1
 8006358:	3324      	adds	r3, #36	@ 0x24
 800635a:	2201      	movs	r2, #1
 800635c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800635e:	4b39      	ldr	r3, [pc, #228]	@ (8006444 <USBD_CDC_Init+0x1e8>)
 8006360:	7819      	ldrb	r1, [r3, #0]
 8006362:	2340      	movs	r3, #64	@ 0x40
 8006364:	2202      	movs	r2, #2
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f002 faf3 	bl	8008952 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800636c:	4b35      	ldr	r3, [pc, #212]	@ (8006444 <USBD_CDC_Init+0x1e8>)
 800636e:	781b      	ldrb	r3, [r3, #0]
 8006370:	f003 020f 	and.w	r2, r3, #15
 8006374:	6879      	ldr	r1, [r7, #4]
 8006376:	4613      	mov	r3, r2
 8006378:	009b      	lsls	r3, r3, #2
 800637a:	4413      	add	r3, r2
 800637c:	009b      	lsls	r3, r3, #2
 800637e:	440b      	add	r3, r1
 8006380:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006384:	2201      	movs	r2, #1
 8006386:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006388:	4b2f      	ldr	r3, [pc, #188]	@ (8006448 <USBD_CDC_Init+0x1ec>)
 800638a:	781b      	ldrb	r3, [r3, #0]
 800638c:	f003 020f 	and.w	r2, r3, #15
 8006390:	6879      	ldr	r1, [r7, #4]
 8006392:	4613      	mov	r3, r2
 8006394:	009b      	lsls	r3, r3, #2
 8006396:	4413      	add	r3, r2
 8006398:	009b      	lsls	r3, r3, #2
 800639a:	440b      	add	r3, r1
 800639c:	3326      	adds	r3, #38	@ 0x26
 800639e:	2210      	movs	r2, #16
 80063a0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80063a2:	4b29      	ldr	r3, [pc, #164]	@ (8006448 <USBD_CDC_Init+0x1ec>)
 80063a4:	7819      	ldrb	r1, [r3, #0]
 80063a6:	2308      	movs	r3, #8
 80063a8:	2203      	movs	r2, #3
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f002 fad1 	bl	8008952 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80063b0:	4b25      	ldr	r3, [pc, #148]	@ (8006448 <USBD_CDC_Init+0x1ec>)
 80063b2:	781b      	ldrb	r3, [r3, #0]
 80063b4:	f003 020f 	and.w	r2, r3, #15
 80063b8:	6879      	ldr	r1, [r7, #4]
 80063ba:	4613      	mov	r3, r2
 80063bc:	009b      	lsls	r3, r3, #2
 80063be:	4413      	add	r3, r2
 80063c0:	009b      	lsls	r3, r3, #2
 80063c2:	440b      	add	r3, r1
 80063c4:	3324      	adds	r3, #36	@ 0x24
 80063c6:	2201      	movs	r2, #1
 80063c8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2200      	movs	r2, #0
 80063ce:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80063d8:	687a      	ldr	r2, [r7, #4]
 80063da:	33b0      	adds	r3, #176	@ 0xb0
 80063dc:	009b      	lsls	r3, r3, #2
 80063de:	4413      	add	r3, r2
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2200      	movs	r2, #0
 80063ea:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2200      	movs	r2, #0
 80063f2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d101      	bne.n	8006404 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006400:	2302      	movs	r3, #2
 8006402:	e018      	b.n	8006436 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	7c1b      	ldrb	r3, [r3, #16]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d10a      	bne.n	8006422 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800640c:	4b0d      	ldr	r3, [pc, #52]	@ (8006444 <USBD_CDC_Init+0x1e8>)
 800640e:	7819      	ldrb	r1, [r3, #0]
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006416:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f002 fb88 	bl	8008b30 <USBD_LL_PrepareReceive>
 8006420:	e008      	b.n	8006434 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006422:	4b08      	ldr	r3, [pc, #32]	@ (8006444 <USBD_CDC_Init+0x1e8>)
 8006424:	7819      	ldrb	r1, [r3, #0]
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800642c:	2340      	movs	r3, #64	@ 0x40
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f002 fb7e 	bl	8008b30 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006434:	2300      	movs	r3, #0
}
 8006436:	4618      	mov	r0, r3
 8006438:	3710      	adds	r7, #16
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}
 800643e:	bf00      	nop
 8006440:	20000097 	.word	0x20000097
 8006444:	20000098 	.word	0x20000098
 8006448:	20000099 	.word	0x20000099

0800644c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b082      	sub	sp, #8
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
 8006454:	460b      	mov	r3, r1
 8006456:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006458:	4b3a      	ldr	r3, [pc, #232]	@ (8006544 <USBD_CDC_DeInit+0xf8>)
 800645a:	781b      	ldrb	r3, [r3, #0]
 800645c:	4619      	mov	r1, r3
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f002 fa9d 	bl	800899e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006464:	4b37      	ldr	r3, [pc, #220]	@ (8006544 <USBD_CDC_DeInit+0xf8>)
 8006466:	781b      	ldrb	r3, [r3, #0]
 8006468:	f003 020f 	and.w	r2, r3, #15
 800646c:	6879      	ldr	r1, [r7, #4]
 800646e:	4613      	mov	r3, r2
 8006470:	009b      	lsls	r3, r3, #2
 8006472:	4413      	add	r3, r2
 8006474:	009b      	lsls	r3, r3, #2
 8006476:	440b      	add	r3, r1
 8006478:	3324      	adds	r3, #36	@ 0x24
 800647a:	2200      	movs	r2, #0
 800647c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800647e:	4b32      	ldr	r3, [pc, #200]	@ (8006548 <USBD_CDC_DeInit+0xfc>)
 8006480:	781b      	ldrb	r3, [r3, #0]
 8006482:	4619      	mov	r1, r3
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f002 fa8a 	bl	800899e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800648a:	4b2f      	ldr	r3, [pc, #188]	@ (8006548 <USBD_CDC_DeInit+0xfc>)
 800648c:	781b      	ldrb	r3, [r3, #0]
 800648e:	f003 020f 	and.w	r2, r3, #15
 8006492:	6879      	ldr	r1, [r7, #4]
 8006494:	4613      	mov	r3, r2
 8006496:	009b      	lsls	r3, r3, #2
 8006498:	4413      	add	r3, r2
 800649a:	009b      	lsls	r3, r3, #2
 800649c:	440b      	add	r3, r1
 800649e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80064a2:	2200      	movs	r2, #0
 80064a4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80064a6:	4b29      	ldr	r3, [pc, #164]	@ (800654c <USBD_CDC_DeInit+0x100>)
 80064a8:	781b      	ldrb	r3, [r3, #0]
 80064aa:	4619      	mov	r1, r3
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f002 fa76 	bl	800899e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80064b2:	4b26      	ldr	r3, [pc, #152]	@ (800654c <USBD_CDC_DeInit+0x100>)
 80064b4:	781b      	ldrb	r3, [r3, #0]
 80064b6:	f003 020f 	and.w	r2, r3, #15
 80064ba:	6879      	ldr	r1, [r7, #4]
 80064bc:	4613      	mov	r3, r2
 80064be:	009b      	lsls	r3, r3, #2
 80064c0:	4413      	add	r3, r2
 80064c2:	009b      	lsls	r3, r3, #2
 80064c4:	440b      	add	r3, r1
 80064c6:	3324      	adds	r3, #36	@ 0x24
 80064c8:	2200      	movs	r2, #0
 80064ca:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80064cc:	4b1f      	ldr	r3, [pc, #124]	@ (800654c <USBD_CDC_DeInit+0x100>)
 80064ce:	781b      	ldrb	r3, [r3, #0]
 80064d0:	f003 020f 	and.w	r2, r3, #15
 80064d4:	6879      	ldr	r1, [r7, #4]
 80064d6:	4613      	mov	r3, r2
 80064d8:	009b      	lsls	r3, r3, #2
 80064da:	4413      	add	r3, r2
 80064dc:	009b      	lsls	r3, r3, #2
 80064de:	440b      	add	r3, r1
 80064e0:	3326      	adds	r3, #38	@ 0x26
 80064e2:	2200      	movs	r2, #0
 80064e4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	32b0      	adds	r2, #176	@ 0xb0
 80064f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d01f      	beq.n	8006538 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80064fe:	687a      	ldr	r2, [r7, #4]
 8006500:	33b0      	adds	r3, #176	@ 0xb0
 8006502:	009b      	lsls	r3, r3, #2
 8006504:	4413      	add	r3, r2
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	32b0      	adds	r2, #176	@ 0xb0
 8006516:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800651a:	4618      	mov	r0, r3
 800651c:	f002 fb4a 	bl	8008bb4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	32b0      	adds	r2, #176	@ 0xb0
 800652a:	2100      	movs	r1, #0
 800652c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2200      	movs	r2, #0
 8006534:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006538:	2300      	movs	r3, #0
}
 800653a:	4618      	mov	r0, r3
 800653c:	3708      	adds	r7, #8
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}
 8006542:	bf00      	nop
 8006544:	20000097 	.word	0x20000097
 8006548:	20000098 	.word	0x20000098
 800654c:	20000099 	.word	0x20000099

08006550 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b086      	sub	sp, #24
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
 8006558:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	32b0      	adds	r2, #176	@ 0xb0
 8006564:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006568:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800656a:	2300      	movs	r3, #0
 800656c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800656e:	2300      	movs	r3, #0
 8006570:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006572:	2300      	movs	r3, #0
 8006574:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d101      	bne.n	8006580 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800657c:	2303      	movs	r3, #3
 800657e:	e0bf      	b.n	8006700 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	781b      	ldrb	r3, [r3, #0]
 8006584:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006588:	2b00      	cmp	r3, #0
 800658a:	d050      	beq.n	800662e <USBD_CDC_Setup+0xde>
 800658c:	2b20      	cmp	r3, #32
 800658e:	f040 80af 	bne.w	80066f0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	88db      	ldrh	r3, [r3, #6]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d03a      	beq.n	8006610 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	781b      	ldrb	r3, [r3, #0]
 800659e:	b25b      	sxtb	r3, r3
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	da1b      	bge.n	80065dc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80065aa:	687a      	ldr	r2, [r7, #4]
 80065ac:	33b0      	adds	r3, #176	@ 0xb0
 80065ae:	009b      	lsls	r3, r3, #2
 80065b0:	4413      	add	r3, r2
 80065b2:	685b      	ldr	r3, [r3, #4]
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	683a      	ldr	r2, [r7, #0]
 80065b8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80065ba:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80065bc:	683a      	ldr	r2, [r7, #0]
 80065be:	88d2      	ldrh	r2, [r2, #6]
 80065c0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	88db      	ldrh	r3, [r3, #6]
 80065c6:	2b07      	cmp	r3, #7
 80065c8:	bf28      	it	cs
 80065ca:	2307      	movcs	r3, #7
 80065cc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	89fa      	ldrh	r2, [r7, #14]
 80065d2:	4619      	mov	r1, r3
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	f001 fd93 	bl	8008100 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80065da:	e090      	b.n	80066fe <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	785a      	ldrb	r2, [r3, #1]
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	88db      	ldrh	r3, [r3, #6]
 80065ea:	2b3f      	cmp	r3, #63	@ 0x3f
 80065ec:	d803      	bhi.n	80065f6 <USBD_CDC_Setup+0xa6>
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	88db      	ldrh	r3, [r3, #6]
 80065f2:	b2da      	uxtb	r2, r3
 80065f4:	e000      	b.n	80065f8 <USBD_CDC_Setup+0xa8>
 80065f6:	2240      	movs	r2, #64	@ 0x40
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80065fe:	6939      	ldr	r1, [r7, #16]
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8006606:	461a      	mov	r2, r3
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	f001 fda5 	bl	8008158 <USBD_CtlPrepareRx>
      break;
 800660e:	e076      	b.n	80066fe <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006616:	687a      	ldr	r2, [r7, #4]
 8006618:	33b0      	adds	r3, #176	@ 0xb0
 800661a:	009b      	lsls	r3, r3, #2
 800661c:	4413      	add	r3, r2
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	689b      	ldr	r3, [r3, #8]
 8006622:	683a      	ldr	r2, [r7, #0]
 8006624:	7850      	ldrb	r0, [r2, #1]
 8006626:	2200      	movs	r2, #0
 8006628:	6839      	ldr	r1, [r7, #0]
 800662a:	4798      	blx	r3
      break;
 800662c:	e067      	b.n	80066fe <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	785b      	ldrb	r3, [r3, #1]
 8006632:	2b0b      	cmp	r3, #11
 8006634:	d851      	bhi.n	80066da <USBD_CDC_Setup+0x18a>
 8006636:	a201      	add	r2, pc, #4	@ (adr r2, 800663c <USBD_CDC_Setup+0xec>)
 8006638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800663c:	0800666d 	.word	0x0800666d
 8006640:	080066e9 	.word	0x080066e9
 8006644:	080066db 	.word	0x080066db
 8006648:	080066db 	.word	0x080066db
 800664c:	080066db 	.word	0x080066db
 8006650:	080066db 	.word	0x080066db
 8006654:	080066db 	.word	0x080066db
 8006658:	080066db 	.word	0x080066db
 800665c:	080066db 	.word	0x080066db
 8006660:	080066db 	.word	0x080066db
 8006664:	08006697 	.word	0x08006697
 8006668:	080066c1 	.word	0x080066c1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006672:	b2db      	uxtb	r3, r3
 8006674:	2b03      	cmp	r3, #3
 8006676:	d107      	bne.n	8006688 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006678:	f107 030a 	add.w	r3, r7, #10
 800667c:	2202      	movs	r2, #2
 800667e:	4619      	mov	r1, r3
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f001 fd3d 	bl	8008100 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006686:	e032      	b.n	80066ee <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006688:	6839      	ldr	r1, [r7, #0]
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f001 fcbb 	bl	8008006 <USBD_CtlError>
            ret = USBD_FAIL;
 8006690:	2303      	movs	r3, #3
 8006692:	75fb      	strb	r3, [r7, #23]
          break;
 8006694:	e02b      	b.n	80066ee <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800669c:	b2db      	uxtb	r3, r3
 800669e:	2b03      	cmp	r3, #3
 80066a0:	d107      	bne.n	80066b2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80066a2:	f107 030d 	add.w	r3, r7, #13
 80066a6:	2201      	movs	r2, #1
 80066a8:	4619      	mov	r1, r3
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f001 fd28 	bl	8008100 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80066b0:	e01d      	b.n	80066ee <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80066b2:	6839      	ldr	r1, [r7, #0]
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f001 fca6 	bl	8008006 <USBD_CtlError>
            ret = USBD_FAIL;
 80066ba:	2303      	movs	r3, #3
 80066bc:	75fb      	strb	r3, [r7, #23]
          break;
 80066be:	e016      	b.n	80066ee <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80066c6:	b2db      	uxtb	r3, r3
 80066c8:	2b03      	cmp	r3, #3
 80066ca:	d00f      	beq.n	80066ec <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80066cc:	6839      	ldr	r1, [r7, #0]
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f001 fc99 	bl	8008006 <USBD_CtlError>
            ret = USBD_FAIL;
 80066d4:	2303      	movs	r3, #3
 80066d6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80066d8:	e008      	b.n	80066ec <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80066da:	6839      	ldr	r1, [r7, #0]
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	f001 fc92 	bl	8008006 <USBD_CtlError>
          ret = USBD_FAIL;
 80066e2:	2303      	movs	r3, #3
 80066e4:	75fb      	strb	r3, [r7, #23]
          break;
 80066e6:	e002      	b.n	80066ee <USBD_CDC_Setup+0x19e>
          break;
 80066e8:	bf00      	nop
 80066ea:	e008      	b.n	80066fe <USBD_CDC_Setup+0x1ae>
          break;
 80066ec:	bf00      	nop
      }
      break;
 80066ee:	e006      	b.n	80066fe <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80066f0:	6839      	ldr	r1, [r7, #0]
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f001 fc87 	bl	8008006 <USBD_CtlError>
      ret = USBD_FAIL;
 80066f8:	2303      	movs	r3, #3
 80066fa:	75fb      	strb	r3, [r7, #23]
      break;
 80066fc:	bf00      	nop
  }

  return (uint8_t)ret;
 80066fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8006700:	4618      	mov	r0, r3
 8006702:	3718      	adds	r7, #24
 8006704:	46bd      	mov	sp, r7
 8006706:	bd80      	pop	{r7, pc}

08006708 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b084      	sub	sp, #16
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
 8006710:	460b      	mov	r3, r1
 8006712:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800671a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	32b0      	adds	r2, #176	@ 0xb0
 8006726:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d101      	bne.n	8006732 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800672e:	2303      	movs	r3, #3
 8006730:	e065      	b.n	80067fe <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	32b0      	adds	r2, #176	@ 0xb0
 800673c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006740:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006742:	78fb      	ldrb	r3, [r7, #3]
 8006744:	f003 020f 	and.w	r2, r3, #15
 8006748:	6879      	ldr	r1, [r7, #4]
 800674a:	4613      	mov	r3, r2
 800674c:	009b      	lsls	r3, r3, #2
 800674e:	4413      	add	r3, r2
 8006750:	009b      	lsls	r3, r3, #2
 8006752:	440b      	add	r3, r1
 8006754:	3318      	adds	r3, #24
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d02f      	beq.n	80067bc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800675c:	78fb      	ldrb	r3, [r7, #3]
 800675e:	f003 020f 	and.w	r2, r3, #15
 8006762:	6879      	ldr	r1, [r7, #4]
 8006764:	4613      	mov	r3, r2
 8006766:	009b      	lsls	r3, r3, #2
 8006768:	4413      	add	r3, r2
 800676a:	009b      	lsls	r3, r3, #2
 800676c:	440b      	add	r3, r1
 800676e:	3318      	adds	r3, #24
 8006770:	681a      	ldr	r2, [r3, #0]
 8006772:	78fb      	ldrb	r3, [r7, #3]
 8006774:	f003 010f 	and.w	r1, r3, #15
 8006778:	68f8      	ldr	r0, [r7, #12]
 800677a:	460b      	mov	r3, r1
 800677c:	00db      	lsls	r3, r3, #3
 800677e:	440b      	add	r3, r1
 8006780:	009b      	lsls	r3, r3, #2
 8006782:	4403      	add	r3, r0
 8006784:	331c      	adds	r3, #28
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	fbb2 f1f3 	udiv	r1, r2, r3
 800678c:	fb01 f303 	mul.w	r3, r1, r3
 8006790:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006792:	2b00      	cmp	r3, #0
 8006794:	d112      	bne.n	80067bc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006796:	78fb      	ldrb	r3, [r7, #3]
 8006798:	f003 020f 	and.w	r2, r3, #15
 800679c:	6879      	ldr	r1, [r7, #4]
 800679e:	4613      	mov	r3, r2
 80067a0:	009b      	lsls	r3, r3, #2
 80067a2:	4413      	add	r3, r2
 80067a4:	009b      	lsls	r3, r3, #2
 80067a6:	440b      	add	r3, r1
 80067a8:	3318      	adds	r3, #24
 80067aa:	2200      	movs	r2, #0
 80067ac:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80067ae:	78f9      	ldrb	r1, [r7, #3]
 80067b0:	2300      	movs	r3, #0
 80067b2:	2200      	movs	r2, #0
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f002 f99a 	bl	8008aee <USBD_LL_Transmit>
 80067ba:	e01f      	b.n	80067fc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	2200      	movs	r2, #0
 80067c0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80067ca:	687a      	ldr	r2, [r7, #4]
 80067cc:	33b0      	adds	r3, #176	@ 0xb0
 80067ce:	009b      	lsls	r3, r3, #2
 80067d0:	4413      	add	r3, r2
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	691b      	ldr	r3, [r3, #16]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d010      	beq.n	80067fc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80067e0:	687a      	ldr	r2, [r7, #4]
 80067e2:	33b0      	adds	r3, #176	@ 0xb0
 80067e4:	009b      	lsls	r3, r3, #2
 80067e6:	4413      	add	r3, r2
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	691b      	ldr	r3, [r3, #16]
 80067ec:	68ba      	ldr	r2, [r7, #8]
 80067ee:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80067f2:	68ba      	ldr	r2, [r7, #8]
 80067f4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80067f8:	78fa      	ldrb	r2, [r7, #3]
 80067fa:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80067fc:	2300      	movs	r3, #0
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3710      	adds	r7, #16
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}

08006806 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006806:	b580      	push	{r7, lr}
 8006808:	b084      	sub	sp, #16
 800680a:	af00      	add	r7, sp, #0
 800680c:	6078      	str	r0, [r7, #4]
 800680e:	460b      	mov	r3, r1
 8006810:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	32b0      	adds	r2, #176	@ 0xb0
 800681c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006820:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	32b0      	adds	r2, #176	@ 0xb0
 800682c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d101      	bne.n	8006838 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006834:	2303      	movs	r3, #3
 8006836:	e01a      	b.n	800686e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006838:	78fb      	ldrb	r3, [r7, #3]
 800683a:	4619      	mov	r1, r3
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f002 f998 	bl	8008b72 <USBD_LL_GetRxDataSize>
 8006842:	4602      	mov	r2, r0
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006850:	687a      	ldr	r2, [r7, #4]
 8006852:	33b0      	adds	r3, #176	@ 0xb0
 8006854:	009b      	lsls	r3, r3, #2
 8006856:	4413      	add	r3, r2
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	68db      	ldr	r3, [r3, #12]
 800685c:	68fa      	ldr	r2, [r7, #12]
 800685e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8006862:	68fa      	ldr	r2, [r7, #12]
 8006864:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8006868:	4611      	mov	r1, r2
 800686a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800686c:	2300      	movs	r3, #0
}
 800686e:	4618      	mov	r0, r3
 8006870:	3710      	adds	r7, #16
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}

08006876 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006876:	b580      	push	{r7, lr}
 8006878:	b084      	sub	sp, #16
 800687a:	af00      	add	r7, sp, #0
 800687c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	32b0      	adds	r2, #176	@ 0xb0
 8006888:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800688c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d101      	bne.n	8006898 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006894:	2303      	movs	r3, #3
 8006896:	e024      	b.n	80068e2 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800689e:	687a      	ldr	r2, [r7, #4]
 80068a0:	33b0      	adds	r3, #176	@ 0xb0
 80068a2:	009b      	lsls	r3, r3, #2
 80068a4:	4413      	add	r3, r2
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d019      	beq.n	80068e0 <USBD_CDC_EP0_RxReady+0x6a>
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80068b2:	2bff      	cmp	r3, #255	@ 0xff
 80068b4:	d014      	beq.n	80068e0 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80068bc:	687a      	ldr	r2, [r7, #4]
 80068be:	33b0      	adds	r3, #176	@ 0xb0
 80068c0:	009b      	lsls	r3, r3, #2
 80068c2:	4413      	add	r3, r2
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	689b      	ldr	r3, [r3, #8]
 80068c8:	68fa      	ldr	r2, [r7, #12]
 80068ca:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80068ce:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80068d0:	68fa      	ldr	r2, [r7, #12]
 80068d2:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80068d6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	22ff      	movs	r2, #255	@ 0xff
 80068dc:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80068e0:	2300      	movs	r3, #0
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3710      	adds	r7, #16
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}
	...

080068ec <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b086      	sub	sp, #24
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80068f4:	2182      	movs	r1, #130	@ 0x82
 80068f6:	4818      	ldr	r0, [pc, #96]	@ (8006958 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80068f8:	f000 fd4f 	bl	800739a <USBD_GetEpDesc>
 80068fc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80068fe:	2101      	movs	r1, #1
 8006900:	4815      	ldr	r0, [pc, #84]	@ (8006958 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006902:	f000 fd4a 	bl	800739a <USBD_GetEpDesc>
 8006906:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006908:	2181      	movs	r1, #129	@ 0x81
 800690a:	4813      	ldr	r0, [pc, #76]	@ (8006958 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800690c:	f000 fd45 	bl	800739a <USBD_GetEpDesc>
 8006910:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d002      	beq.n	800691e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	2210      	movs	r2, #16
 800691c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d006      	beq.n	8006932 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	2200      	movs	r2, #0
 8006928:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800692c:	711a      	strb	r2, [r3, #4]
 800692e:	2200      	movs	r2, #0
 8006930:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d006      	beq.n	8006946 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	2200      	movs	r2, #0
 800693c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006940:	711a      	strb	r2, [r3, #4]
 8006942:	2200      	movs	r2, #0
 8006944:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2243      	movs	r2, #67	@ 0x43
 800694a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800694c:	4b02      	ldr	r3, [pc, #8]	@ (8006958 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800694e:	4618      	mov	r0, r3
 8006950:	3718      	adds	r7, #24
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}
 8006956:	bf00      	nop
 8006958:	20000054 	.word	0x20000054

0800695c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b086      	sub	sp, #24
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006964:	2182      	movs	r1, #130	@ 0x82
 8006966:	4818      	ldr	r0, [pc, #96]	@ (80069c8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006968:	f000 fd17 	bl	800739a <USBD_GetEpDesc>
 800696c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800696e:	2101      	movs	r1, #1
 8006970:	4815      	ldr	r0, [pc, #84]	@ (80069c8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006972:	f000 fd12 	bl	800739a <USBD_GetEpDesc>
 8006976:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006978:	2181      	movs	r1, #129	@ 0x81
 800697a:	4813      	ldr	r0, [pc, #76]	@ (80069c8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800697c:	f000 fd0d 	bl	800739a <USBD_GetEpDesc>
 8006980:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d002      	beq.n	800698e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	2210      	movs	r2, #16
 800698c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d006      	beq.n	80069a2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	2200      	movs	r2, #0
 8006998:	711a      	strb	r2, [r3, #4]
 800699a:	2200      	movs	r2, #0
 800699c:	f042 0202 	orr.w	r2, r2, #2
 80069a0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d006      	beq.n	80069b6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	2200      	movs	r2, #0
 80069ac:	711a      	strb	r2, [r3, #4]
 80069ae:	2200      	movs	r2, #0
 80069b0:	f042 0202 	orr.w	r2, r2, #2
 80069b4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2243      	movs	r2, #67	@ 0x43
 80069ba:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80069bc:	4b02      	ldr	r3, [pc, #8]	@ (80069c8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80069be:	4618      	mov	r0, r3
 80069c0:	3718      	adds	r7, #24
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}
 80069c6:	bf00      	nop
 80069c8:	20000054 	.word	0x20000054

080069cc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b086      	sub	sp, #24
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80069d4:	2182      	movs	r1, #130	@ 0x82
 80069d6:	4818      	ldr	r0, [pc, #96]	@ (8006a38 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80069d8:	f000 fcdf 	bl	800739a <USBD_GetEpDesc>
 80069dc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80069de:	2101      	movs	r1, #1
 80069e0:	4815      	ldr	r0, [pc, #84]	@ (8006a38 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80069e2:	f000 fcda 	bl	800739a <USBD_GetEpDesc>
 80069e6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80069e8:	2181      	movs	r1, #129	@ 0x81
 80069ea:	4813      	ldr	r0, [pc, #76]	@ (8006a38 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80069ec:	f000 fcd5 	bl	800739a <USBD_GetEpDesc>
 80069f0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d002      	beq.n	80069fe <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80069f8:	697b      	ldr	r3, [r7, #20]
 80069fa:	2210      	movs	r2, #16
 80069fc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d006      	beq.n	8006a12 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	2200      	movs	r2, #0
 8006a08:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006a0c:	711a      	strb	r2, [r3, #4]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d006      	beq.n	8006a26 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006a20:	711a      	strb	r2, [r3, #4]
 8006a22:	2200      	movs	r2, #0
 8006a24:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2243      	movs	r2, #67	@ 0x43
 8006a2a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006a2c:	4b02      	ldr	r3, [pc, #8]	@ (8006a38 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3718      	adds	r7, #24
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}
 8006a36:	bf00      	nop
 8006a38:	20000054 	.word	0x20000054

08006a3c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b083      	sub	sp, #12
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	220a      	movs	r2, #10
 8006a48:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006a4a:	4b03      	ldr	r3, [pc, #12]	@ (8006a58 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	370c      	adds	r7, #12
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr
 8006a58:	20000010 	.word	0x20000010

08006a5c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b083      	sub	sp, #12
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
 8006a64:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d101      	bne.n	8006a70 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006a6c:	2303      	movs	r3, #3
 8006a6e:	e009      	b.n	8006a84 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006a76:	687a      	ldr	r2, [r7, #4]
 8006a78:	33b0      	adds	r3, #176	@ 0xb0
 8006a7a:	009b      	lsls	r3, r3, #2
 8006a7c:	4413      	add	r3, r2
 8006a7e:	683a      	ldr	r2, [r7, #0]
 8006a80:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006a82:	2300      	movs	r3, #0
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	370c      	adds	r7, #12
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8e:	4770      	bx	lr

08006a90 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006a90:	b480      	push	{r7}
 8006a92:	b087      	sub	sp, #28
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	60f8      	str	r0, [r7, #12]
 8006a98:	60b9      	str	r1, [r7, #8]
 8006a9a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	32b0      	adds	r2, #176	@ 0xb0
 8006aa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006aaa:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d101      	bne.n	8006ab6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006ab2:	2303      	movs	r3, #3
 8006ab4:	e008      	b.n	8006ac8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	68ba      	ldr	r2, [r7, #8]
 8006aba:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	687a      	ldr	r2, [r7, #4]
 8006ac2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8006ac6:	2300      	movs	r3, #0
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	371c      	adds	r7, #28
 8006acc:	46bd      	mov	sp, r7
 8006ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad2:	4770      	bx	lr

08006ad4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b085      	sub	sp, #20
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
 8006adc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	32b0      	adds	r2, #176	@ 0xb0
 8006ae8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006aec:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d101      	bne.n	8006af8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006af4:	2303      	movs	r3, #3
 8006af6:	e004      	b.n	8006b02 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	683a      	ldr	r2, [r7, #0]
 8006afc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8006b00:	2300      	movs	r3, #0
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	3714      	adds	r7, #20
 8006b06:	46bd      	mov	sp, r7
 8006b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0c:	4770      	bx	lr
	...

08006b10 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b084      	sub	sp, #16
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	32b0      	adds	r2, #176	@ 0xb0
 8006b22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b26:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8006b28:	2301      	movs	r3, #1
 8006b2a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d101      	bne.n	8006b36 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006b32:	2303      	movs	r3, #3
 8006b34:	e025      	b.n	8006b82 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d11f      	bne.n	8006b80 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	2201      	movs	r2, #1
 8006b44:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006b48:	4b10      	ldr	r3, [pc, #64]	@ (8006b8c <USBD_CDC_TransmitPacket+0x7c>)
 8006b4a:	781b      	ldrb	r3, [r3, #0]
 8006b4c:	f003 020f 	and.w	r2, r3, #15
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	4613      	mov	r3, r2
 8006b5a:	009b      	lsls	r3, r3, #2
 8006b5c:	4413      	add	r3, r2
 8006b5e:	009b      	lsls	r3, r3, #2
 8006b60:	4403      	add	r3, r0
 8006b62:	3318      	adds	r3, #24
 8006b64:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006b66:	4b09      	ldr	r3, [pc, #36]	@ (8006b8c <USBD_CDC_TransmitPacket+0x7c>)
 8006b68:	7819      	ldrb	r1, [r3, #0]
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f001 ffb9 	bl	8008aee <USBD_LL_Transmit>

    ret = USBD_OK;
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	3710      	adds	r7, #16
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}
 8006b8a:	bf00      	nop
 8006b8c:	20000097 	.word	0x20000097

08006b90 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b084      	sub	sp, #16
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	32b0      	adds	r2, #176	@ 0xb0
 8006ba2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ba6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	32b0      	adds	r2, #176	@ 0xb0
 8006bb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d101      	bne.n	8006bbe <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006bba:	2303      	movs	r3, #3
 8006bbc:	e018      	b.n	8006bf0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	7c1b      	ldrb	r3, [r3, #16]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d10a      	bne.n	8006bdc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006bc6:	4b0c      	ldr	r3, [pc, #48]	@ (8006bf8 <USBD_CDC_ReceivePacket+0x68>)
 8006bc8:	7819      	ldrb	r1, [r3, #0]
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006bd0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f001 ffab 	bl	8008b30 <USBD_LL_PrepareReceive>
 8006bda:	e008      	b.n	8006bee <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006bdc:	4b06      	ldr	r3, [pc, #24]	@ (8006bf8 <USBD_CDC_ReceivePacket+0x68>)
 8006bde:	7819      	ldrb	r1, [r3, #0]
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006be6:	2340      	movs	r3, #64	@ 0x40
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f001 ffa1 	bl	8008b30 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006bee:	2300      	movs	r3, #0
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	3710      	adds	r7, #16
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bd80      	pop	{r7, pc}
 8006bf8:	20000098 	.word	0x20000098

08006bfc <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b086      	sub	sp, #24
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	60f8      	str	r0, [r7, #12]
 8006c04:	60b9      	str	r1, [r7, #8]
 8006c06:	4613      	mov	r3, r2
 8006c08:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d101      	bne.n	8006c14 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006c10:	2303      	movs	r3, #3
 8006c12:	e01f      	b.n	8006c54 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2200      	movs	r2, #0
 8006c18:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	2200      	movs	r2, #0
 8006c28:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d003      	beq.n	8006c3a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	68ba      	ldr	r2, [r7, #8]
 8006c36:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2201      	movs	r2, #1
 8006c3e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	79fa      	ldrb	r2, [r7, #7]
 8006c46:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006c48:	68f8      	ldr	r0, [r7, #12]
 8006c4a:	f001 fe1b 	bl	8008884 <USBD_LL_Init>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006c52:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	3718      	adds	r7, #24
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}

08006c5c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b084      	sub	sp, #16
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
 8006c64:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006c66:	2300      	movs	r3, #0
 8006c68:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d101      	bne.n	8006c74 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006c70:	2303      	movs	r3, #3
 8006c72:	e025      	b.n	8006cc0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	683a      	ldr	r2, [r7, #0]
 8006c78:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	32ae      	adds	r2, #174	@ 0xae
 8006c86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d00f      	beq.n	8006cb0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	32ae      	adds	r2, #174	@ 0xae
 8006c9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ca0:	f107 020e 	add.w	r2, r7, #14
 8006ca4:	4610      	mov	r0, r2
 8006ca6:	4798      	blx	r3
 8006ca8:	4602      	mov	r2, r0
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8006cb6:	1c5a      	adds	r2, r3, #1
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8006cbe:	2300      	movs	r3, #0
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	3710      	adds	r7, #16
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}

08006cc8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b082      	sub	sp, #8
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f001 fe23 	bl	800891c <USBD_LL_Start>
 8006cd6:	4603      	mov	r3, r0
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	3708      	adds	r7, #8
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd80      	pop	{r7, pc}

08006ce0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b083      	sub	sp, #12
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006ce8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	370c      	adds	r7, #12
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf4:	4770      	bx	lr

08006cf6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006cf6:	b580      	push	{r7, lr}
 8006cf8:	b084      	sub	sp, #16
 8006cfa:	af00      	add	r7, sp, #0
 8006cfc:	6078      	str	r0, [r7, #4]
 8006cfe:	460b      	mov	r3, r1
 8006d00:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d02:	2300      	movs	r3, #0
 8006d04:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d009      	beq.n	8006d24 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	78fa      	ldrb	r2, [r7, #3]
 8006d1a:	4611      	mov	r1, r2
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	4798      	blx	r3
 8006d20:	4603      	mov	r3, r0
 8006d22:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006d24:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3710      	adds	r7, #16
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}

08006d2e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d2e:	b580      	push	{r7, lr}
 8006d30:	b084      	sub	sp, #16
 8006d32:	af00      	add	r7, sp, #0
 8006d34:	6078      	str	r0, [r7, #4]
 8006d36:	460b      	mov	r3, r1
 8006d38:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	78fa      	ldrb	r2, [r7, #3]
 8006d48:	4611      	mov	r1, r2
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	4798      	blx	r3
 8006d4e:	4603      	mov	r3, r0
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d001      	beq.n	8006d58 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006d54:	2303      	movs	r3, #3
 8006d56:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006d58:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3710      	adds	r7, #16
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}

08006d62 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006d62:	b580      	push	{r7, lr}
 8006d64:	b084      	sub	sp, #16
 8006d66:	af00      	add	r7, sp, #0
 8006d68:	6078      	str	r0, [r7, #4]
 8006d6a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006d72:	6839      	ldr	r1, [r7, #0]
 8006d74:	4618      	mov	r0, r3
 8006d76:	f001 f90c 	bl	8007f92 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2201      	movs	r2, #1
 8006d7e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8006d88:	461a      	mov	r2, r3
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006d96:	f003 031f 	and.w	r3, r3, #31
 8006d9a:	2b02      	cmp	r3, #2
 8006d9c:	d01a      	beq.n	8006dd4 <USBD_LL_SetupStage+0x72>
 8006d9e:	2b02      	cmp	r3, #2
 8006da0:	d822      	bhi.n	8006de8 <USBD_LL_SetupStage+0x86>
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d002      	beq.n	8006dac <USBD_LL_SetupStage+0x4a>
 8006da6:	2b01      	cmp	r3, #1
 8006da8:	d00a      	beq.n	8006dc0 <USBD_LL_SetupStage+0x5e>
 8006daa:	e01d      	b.n	8006de8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006db2:	4619      	mov	r1, r3
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f000 fb63 	bl	8007480 <USBD_StdDevReq>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	73fb      	strb	r3, [r7, #15]
      break;
 8006dbe:	e020      	b.n	8006e02 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006dc6:	4619      	mov	r1, r3
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f000 fbcb 	bl	8007564 <USBD_StdItfReq>
 8006dce:	4603      	mov	r3, r0
 8006dd0:	73fb      	strb	r3, [r7, #15]
      break;
 8006dd2:	e016      	b.n	8006e02 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006dda:	4619      	mov	r1, r3
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f000 fc2d 	bl	800763c <USBD_StdEPReq>
 8006de2:	4603      	mov	r3, r0
 8006de4:	73fb      	strb	r3, [r7, #15]
      break;
 8006de6:	e00c      	b.n	8006e02 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006dee:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006df2:	b2db      	uxtb	r3, r3
 8006df4:	4619      	mov	r1, r3
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f001 fdf0 	bl	80089dc <USBD_LL_StallEP>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	73fb      	strb	r3, [r7, #15]
      break;
 8006e00:	bf00      	nop
  }

  return ret;
 8006e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	3710      	adds	r7, #16
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bd80      	pop	{r7, pc}

08006e0c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b086      	sub	sp, #24
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	60f8      	str	r0, [r7, #12]
 8006e14:	460b      	mov	r3, r1
 8006e16:	607a      	str	r2, [r7, #4]
 8006e18:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006e1e:	7afb      	ldrb	r3, [r7, #11]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d16e      	bne.n	8006f02 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006e2a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006e32:	2b03      	cmp	r3, #3
 8006e34:	f040 8098 	bne.w	8006f68 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006e38:	693b      	ldr	r3, [r7, #16]
 8006e3a:	689a      	ldr	r2, [r3, #8]
 8006e3c:	693b      	ldr	r3, [r7, #16]
 8006e3e:	68db      	ldr	r3, [r3, #12]
 8006e40:	429a      	cmp	r2, r3
 8006e42:	d913      	bls.n	8006e6c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	689a      	ldr	r2, [r3, #8]
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	68db      	ldr	r3, [r3, #12]
 8006e4c:	1ad2      	subs	r2, r2, r3
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	68da      	ldr	r2, [r3, #12]
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	689b      	ldr	r3, [r3, #8]
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	bf28      	it	cs
 8006e5e:	4613      	movcs	r3, r2
 8006e60:	461a      	mov	r2, r3
 8006e62:	6879      	ldr	r1, [r7, #4]
 8006e64:	68f8      	ldr	r0, [r7, #12]
 8006e66:	f001 f994 	bl	8008192 <USBD_CtlContinueRx>
 8006e6a:	e07d      	b.n	8006f68 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006e72:	f003 031f 	and.w	r3, r3, #31
 8006e76:	2b02      	cmp	r3, #2
 8006e78:	d014      	beq.n	8006ea4 <USBD_LL_DataOutStage+0x98>
 8006e7a:	2b02      	cmp	r3, #2
 8006e7c:	d81d      	bhi.n	8006eba <USBD_LL_DataOutStage+0xae>
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d002      	beq.n	8006e88 <USBD_LL_DataOutStage+0x7c>
 8006e82:	2b01      	cmp	r3, #1
 8006e84:	d003      	beq.n	8006e8e <USBD_LL_DataOutStage+0x82>
 8006e86:	e018      	b.n	8006eba <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	75bb      	strb	r3, [r7, #22]
            break;
 8006e8c:	e018      	b.n	8006ec0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006e94:	b2db      	uxtb	r3, r3
 8006e96:	4619      	mov	r1, r3
 8006e98:	68f8      	ldr	r0, [r7, #12]
 8006e9a:	f000 fa64 	bl	8007366 <USBD_CoreFindIF>
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	75bb      	strb	r3, [r7, #22]
            break;
 8006ea2:	e00d      	b.n	8006ec0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006eaa:	b2db      	uxtb	r3, r3
 8006eac:	4619      	mov	r1, r3
 8006eae:	68f8      	ldr	r0, [r7, #12]
 8006eb0:	f000 fa66 	bl	8007380 <USBD_CoreFindEP>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	75bb      	strb	r3, [r7, #22]
            break;
 8006eb8:	e002      	b.n	8006ec0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	75bb      	strb	r3, [r7, #22]
            break;
 8006ebe:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006ec0:	7dbb      	ldrb	r3, [r7, #22]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d119      	bne.n	8006efa <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ecc:	b2db      	uxtb	r3, r3
 8006ece:	2b03      	cmp	r3, #3
 8006ed0:	d113      	bne.n	8006efa <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006ed2:	7dba      	ldrb	r2, [r7, #22]
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	32ae      	adds	r2, #174	@ 0xae
 8006ed8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006edc:	691b      	ldr	r3, [r3, #16]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d00b      	beq.n	8006efa <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006ee2:	7dba      	ldrb	r2, [r7, #22]
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006eea:	7dba      	ldrb	r2, [r7, #22]
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	32ae      	adds	r2, #174	@ 0xae
 8006ef0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ef4:	691b      	ldr	r3, [r3, #16]
 8006ef6:	68f8      	ldr	r0, [r7, #12]
 8006ef8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006efa:	68f8      	ldr	r0, [r7, #12]
 8006efc:	f001 f95a 	bl	80081b4 <USBD_CtlSendStatus>
 8006f00:	e032      	b.n	8006f68 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006f02:	7afb      	ldrb	r3, [r7, #11]
 8006f04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006f08:	b2db      	uxtb	r3, r3
 8006f0a:	4619      	mov	r1, r3
 8006f0c:	68f8      	ldr	r0, [r7, #12]
 8006f0e:	f000 fa37 	bl	8007380 <USBD_CoreFindEP>
 8006f12:	4603      	mov	r3, r0
 8006f14:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006f16:	7dbb      	ldrb	r3, [r7, #22]
 8006f18:	2bff      	cmp	r3, #255	@ 0xff
 8006f1a:	d025      	beq.n	8006f68 <USBD_LL_DataOutStage+0x15c>
 8006f1c:	7dbb      	ldrb	r3, [r7, #22]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d122      	bne.n	8006f68 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f28:	b2db      	uxtb	r3, r3
 8006f2a:	2b03      	cmp	r3, #3
 8006f2c:	d117      	bne.n	8006f5e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006f2e:	7dba      	ldrb	r2, [r7, #22]
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	32ae      	adds	r2, #174	@ 0xae
 8006f34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f38:	699b      	ldr	r3, [r3, #24]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d00f      	beq.n	8006f5e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006f3e:	7dba      	ldrb	r2, [r7, #22]
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006f46:	7dba      	ldrb	r2, [r7, #22]
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	32ae      	adds	r2, #174	@ 0xae
 8006f4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f50:	699b      	ldr	r3, [r3, #24]
 8006f52:	7afa      	ldrb	r2, [r7, #11]
 8006f54:	4611      	mov	r1, r2
 8006f56:	68f8      	ldr	r0, [r7, #12]
 8006f58:	4798      	blx	r3
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006f5e:	7dfb      	ldrb	r3, [r7, #23]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d001      	beq.n	8006f68 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006f64:	7dfb      	ldrb	r3, [r7, #23]
 8006f66:	e000      	b.n	8006f6a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006f68:	2300      	movs	r3, #0
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3718      	adds	r7, #24
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}

08006f72 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006f72:	b580      	push	{r7, lr}
 8006f74:	b086      	sub	sp, #24
 8006f76:	af00      	add	r7, sp, #0
 8006f78:	60f8      	str	r0, [r7, #12]
 8006f7a:	460b      	mov	r3, r1
 8006f7c:	607a      	str	r2, [r7, #4]
 8006f7e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006f80:	7afb      	ldrb	r3, [r7, #11]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d16f      	bne.n	8007066 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	3314      	adds	r3, #20
 8006f8a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006f92:	2b02      	cmp	r3, #2
 8006f94:	d15a      	bne.n	800704c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	689a      	ldr	r2, [r3, #8]
 8006f9a:	693b      	ldr	r3, [r7, #16]
 8006f9c:	68db      	ldr	r3, [r3, #12]
 8006f9e:	429a      	cmp	r2, r3
 8006fa0:	d914      	bls.n	8006fcc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	689a      	ldr	r2, [r3, #8]
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	68db      	ldr	r3, [r3, #12]
 8006faa:	1ad2      	subs	r2, r2, r3
 8006fac:	693b      	ldr	r3, [r7, #16]
 8006fae:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	689b      	ldr	r3, [r3, #8]
 8006fb4:	461a      	mov	r2, r3
 8006fb6:	6879      	ldr	r1, [r7, #4]
 8006fb8:	68f8      	ldr	r0, [r7, #12]
 8006fba:	f001 f8bc 	bl	8008136 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	2100      	movs	r1, #0
 8006fc4:	68f8      	ldr	r0, [r7, #12]
 8006fc6:	f001 fdb3 	bl	8008b30 <USBD_LL_PrepareReceive>
 8006fca:	e03f      	b.n	800704c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006fcc:	693b      	ldr	r3, [r7, #16]
 8006fce:	68da      	ldr	r2, [r3, #12]
 8006fd0:	693b      	ldr	r3, [r7, #16]
 8006fd2:	689b      	ldr	r3, [r3, #8]
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	d11c      	bne.n	8007012 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006fd8:	693b      	ldr	r3, [r7, #16]
 8006fda:	685a      	ldr	r2, [r3, #4]
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	d316      	bcc.n	8007012 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	685a      	ldr	r2, [r3, #4]
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006fee:	429a      	cmp	r2, r3
 8006ff0:	d20f      	bcs.n	8007012 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	2100      	movs	r1, #0
 8006ff6:	68f8      	ldr	r0, [r7, #12]
 8006ff8:	f001 f89d 	bl	8008136 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	2200      	movs	r2, #0
 8007000:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007004:	2300      	movs	r3, #0
 8007006:	2200      	movs	r2, #0
 8007008:	2100      	movs	r1, #0
 800700a:	68f8      	ldr	r0, [r7, #12]
 800700c:	f001 fd90 	bl	8008b30 <USBD_LL_PrepareReceive>
 8007010:	e01c      	b.n	800704c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007018:	b2db      	uxtb	r3, r3
 800701a:	2b03      	cmp	r3, #3
 800701c:	d10f      	bne.n	800703e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007024:	68db      	ldr	r3, [r3, #12]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d009      	beq.n	800703e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	2200      	movs	r2, #0
 800702e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007038:	68db      	ldr	r3, [r3, #12]
 800703a:	68f8      	ldr	r0, [r7, #12]
 800703c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800703e:	2180      	movs	r1, #128	@ 0x80
 8007040:	68f8      	ldr	r0, [r7, #12]
 8007042:	f001 fccb 	bl	80089dc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007046:	68f8      	ldr	r0, [r7, #12]
 8007048:	f001 f8c7 	bl	80081da <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007052:	2b00      	cmp	r3, #0
 8007054:	d03a      	beq.n	80070cc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007056:	68f8      	ldr	r0, [r7, #12]
 8007058:	f7ff fe42 	bl	8006ce0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	2200      	movs	r2, #0
 8007060:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007064:	e032      	b.n	80070cc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007066:	7afb      	ldrb	r3, [r7, #11]
 8007068:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800706c:	b2db      	uxtb	r3, r3
 800706e:	4619      	mov	r1, r3
 8007070:	68f8      	ldr	r0, [r7, #12]
 8007072:	f000 f985 	bl	8007380 <USBD_CoreFindEP>
 8007076:	4603      	mov	r3, r0
 8007078:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800707a:	7dfb      	ldrb	r3, [r7, #23]
 800707c:	2bff      	cmp	r3, #255	@ 0xff
 800707e:	d025      	beq.n	80070cc <USBD_LL_DataInStage+0x15a>
 8007080:	7dfb      	ldrb	r3, [r7, #23]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d122      	bne.n	80070cc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800708c:	b2db      	uxtb	r3, r3
 800708e:	2b03      	cmp	r3, #3
 8007090:	d11c      	bne.n	80070cc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007092:	7dfa      	ldrb	r2, [r7, #23]
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	32ae      	adds	r2, #174	@ 0xae
 8007098:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800709c:	695b      	ldr	r3, [r3, #20]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d014      	beq.n	80070cc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80070a2:	7dfa      	ldrb	r2, [r7, #23]
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80070aa:	7dfa      	ldrb	r2, [r7, #23]
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	32ae      	adds	r2, #174	@ 0xae
 80070b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070b4:	695b      	ldr	r3, [r3, #20]
 80070b6:	7afa      	ldrb	r2, [r7, #11]
 80070b8:	4611      	mov	r1, r2
 80070ba:	68f8      	ldr	r0, [r7, #12]
 80070bc:	4798      	blx	r3
 80070be:	4603      	mov	r3, r0
 80070c0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80070c2:	7dbb      	ldrb	r3, [r7, #22]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d001      	beq.n	80070cc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80070c8:	7dbb      	ldrb	r3, [r7, #22]
 80070ca:	e000      	b.n	80070ce <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80070cc:	2300      	movs	r3, #0
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	3718      	adds	r7, #24
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}

080070d6 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80070d6:	b580      	push	{r7, lr}
 80070d8:	b084      	sub	sp, #16
 80070da:	af00      	add	r7, sp, #0
 80070dc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80070de:	2300      	movs	r3, #0
 80070e0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2201      	movs	r2, #1
 80070e6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2200      	movs	r2, #0
 80070ee:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2200      	movs	r2, #0
 80070f6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2200      	movs	r2, #0
 80070fc:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2200      	movs	r2, #0
 8007104:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800710e:	2b00      	cmp	r3, #0
 8007110:	d014      	beq.n	800713c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007118:	685b      	ldr	r3, [r3, #4]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d00e      	beq.n	800713c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007124:	685b      	ldr	r3, [r3, #4]
 8007126:	687a      	ldr	r2, [r7, #4]
 8007128:	6852      	ldr	r2, [r2, #4]
 800712a:	b2d2      	uxtb	r2, r2
 800712c:	4611      	mov	r1, r2
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	4798      	blx	r3
 8007132:	4603      	mov	r3, r0
 8007134:	2b00      	cmp	r3, #0
 8007136:	d001      	beq.n	800713c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007138:	2303      	movs	r3, #3
 800713a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800713c:	2340      	movs	r3, #64	@ 0x40
 800713e:	2200      	movs	r2, #0
 8007140:	2100      	movs	r1, #0
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f001 fc05 	bl	8008952 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2201      	movs	r2, #1
 800714c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2240      	movs	r2, #64	@ 0x40
 8007154:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007158:	2340      	movs	r3, #64	@ 0x40
 800715a:	2200      	movs	r2, #0
 800715c:	2180      	movs	r1, #128	@ 0x80
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f001 fbf7 	bl	8008952 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2201      	movs	r2, #1
 8007168:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2240      	movs	r2, #64	@ 0x40
 800716e:	621a      	str	r2, [r3, #32]

  return ret;
 8007170:	7bfb      	ldrb	r3, [r7, #15]
}
 8007172:	4618      	mov	r0, r3
 8007174:	3710      	adds	r7, #16
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}

0800717a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800717a:	b480      	push	{r7}
 800717c:	b083      	sub	sp, #12
 800717e:	af00      	add	r7, sp, #0
 8007180:	6078      	str	r0, [r7, #4]
 8007182:	460b      	mov	r3, r1
 8007184:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	78fa      	ldrb	r2, [r7, #3]
 800718a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800718c:	2300      	movs	r3, #0
}
 800718e:	4618      	mov	r0, r3
 8007190:	370c      	adds	r7, #12
 8007192:	46bd      	mov	sp, r7
 8007194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007198:	4770      	bx	lr

0800719a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800719a:	b480      	push	{r7}
 800719c:	b083      	sub	sp, #12
 800719e:	af00      	add	r7, sp, #0
 80071a0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80071a8:	b2db      	uxtb	r3, r3
 80071aa:	2b04      	cmp	r3, #4
 80071ac:	d006      	beq.n	80071bc <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80071b4:	b2da      	uxtb	r2, r3
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2204      	movs	r2, #4
 80071c0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80071c4:	2300      	movs	r3, #0
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	370c      	adds	r7, #12
 80071ca:	46bd      	mov	sp, r7
 80071cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d0:	4770      	bx	lr

080071d2 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80071d2:	b480      	push	{r7}
 80071d4:	b083      	sub	sp, #12
 80071d6:	af00      	add	r7, sp, #0
 80071d8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80071e0:	b2db      	uxtb	r3, r3
 80071e2:	2b04      	cmp	r3, #4
 80071e4:	d106      	bne.n	80071f4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80071ec:	b2da      	uxtb	r2, r3
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80071f4:	2300      	movs	r3, #0
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	370c      	adds	r7, #12
 80071fa:	46bd      	mov	sp, r7
 80071fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007200:	4770      	bx	lr

08007202 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007202:	b580      	push	{r7, lr}
 8007204:	b082      	sub	sp, #8
 8007206:	af00      	add	r7, sp, #0
 8007208:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007210:	b2db      	uxtb	r3, r3
 8007212:	2b03      	cmp	r3, #3
 8007214:	d110      	bne.n	8007238 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800721c:	2b00      	cmp	r3, #0
 800721e:	d00b      	beq.n	8007238 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007226:	69db      	ldr	r3, [r3, #28]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d005      	beq.n	8007238 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007232:	69db      	ldr	r3, [r3, #28]
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007238:	2300      	movs	r3, #0
}
 800723a:	4618      	mov	r0, r3
 800723c:	3708      	adds	r7, #8
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}

08007242 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007242:	b580      	push	{r7, lr}
 8007244:	b082      	sub	sp, #8
 8007246:	af00      	add	r7, sp, #0
 8007248:	6078      	str	r0, [r7, #4]
 800724a:	460b      	mov	r3, r1
 800724c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	32ae      	adds	r2, #174	@ 0xae
 8007258:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d101      	bne.n	8007264 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007260:	2303      	movs	r3, #3
 8007262:	e01c      	b.n	800729e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800726a:	b2db      	uxtb	r3, r3
 800726c:	2b03      	cmp	r3, #3
 800726e:	d115      	bne.n	800729c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	32ae      	adds	r2, #174	@ 0xae
 800727a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800727e:	6a1b      	ldr	r3, [r3, #32]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d00b      	beq.n	800729c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	32ae      	adds	r2, #174	@ 0xae
 800728e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007292:	6a1b      	ldr	r3, [r3, #32]
 8007294:	78fa      	ldrb	r2, [r7, #3]
 8007296:	4611      	mov	r1, r2
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800729c:	2300      	movs	r3, #0
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3708      	adds	r7, #8
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}

080072a6 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80072a6:	b580      	push	{r7, lr}
 80072a8:	b082      	sub	sp, #8
 80072aa:	af00      	add	r7, sp, #0
 80072ac:	6078      	str	r0, [r7, #4]
 80072ae:	460b      	mov	r3, r1
 80072b0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	32ae      	adds	r2, #174	@ 0xae
 80072bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d101      	bne.n	80072c8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80072c4:	2303      	movs	r3, #3
 80072c6:	e01c      	b.n	8007302 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80072ce:	b2db      	uxtb	r3, r3
 80072d0:	2b03      	cmp	r3, #3
 80072d2:	d115      	bne.n	8007300 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	32ae      	adds	r2, #174	@ 0xae
 80072de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d00b      	beq.n	8007300 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	32ae      	adds	r2, #174	@ 0xae
 80072f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072f8:	78fa      	ldrb	r2, [r7, #3]
 80072fa:	4611      	mov	r1, r2
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007300:	2300      	movs	r3, #0
}
 8007302:	4618      	mov	r0, r3
 8007304:	3708      	adds	r7, #8
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}

0800730a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800730a:	b480      	push	{r7}
 800730c:	b083      	sub	sp, #12
 800730e:	af00      	add	r7, sp, #0
 8007310:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007312:	2300      	movs	r3, #0
}
 8007314:	4618      	mov	r0, r3
 8007316:	370c      	adds	r7, #12
 8007318:	46bd      	mov	sp, r7
 800731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731e:	4770      	bx	lr

08007320 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b084      	sub	sp, #16
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007328:	2300      	movs	r3, #0
 800732a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2201      	movs	r2, #1
 8007330:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800733a:	2b00      	cmp	r3, #0
 800733c:	d00e      	beq.n	800735c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	687a      	ldr	r2, [r7, #4]
 8007348:	6852      	ldr	r2, [r2, #4]
 800734a:	b2d2      	uxtb	r2, r2
 800734c:	4611      	mov	r1, r2
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	4798      	blx	r3
 8007352:	4603      	mov	r3, r0
 8007354:	2b00      	cmp	r3, #0
 8007356:	d001      	beq.n	800735c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007358:	2303      	movs	r3, #3
 800735a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800735c:	7bfb      	ldrb	r3, [r7, #15]
}
 800735e:	4618      	mov	r0, r3
 8007360:	3710      	adds	r7, #16
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}

08007366 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007366:	b480      	push	{r7}
 8007368:	b083      	sub	sp, #12
 800736a:	af00      	add	r7, sp, #0
 800736c:	6078      	str	r0, [r7, #4]
 800736e:	460b      	mov	r3, r1
 8007370:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007372:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007374:	4618      	mov	r0, r3
 8007376:	370c      	adds	r7, #12
 8007378:	46bd      	mov	sp, r7
 800737a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737e:	4770      	bx	lr

08007380 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007380:	b480      	push	{r7}
 8007382:	b083      	sub	sp, #12
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
 8007388:	460b      	mov	r3, r1
 800738a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800738c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800738e:	4618      	mov	r0, r3
 8007390:	370c      	adds	r7, #12
 8007392:	46bd      	mov	sp, r7
 8007394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007398:	4770      	bx	lr

0800739a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800739a:	b580      	push	{r7, lr}
 800739c:	b086      	sub	sp, #24
 800739e:	af00      	add	r7, sp, #0
 80073a0:	6078      	str	r0, [r7, #4]
 80073a2:	460b      	mov	r3, r1
 80073a4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80073ae:	2300      	movs	r3, #0
 80073b0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	885b      	ldrh	r3, [r3, #2]
 80073b6:	b29b      	uxth	r3, r3
 80073b8:	68fa      	ldr	r2, [r7, #12]
 80073ba:	7812      	ldrb	r2, [r2, #0]
 80073bc:	4293      	cmp	r3, r2
 80073be:	d91f      	bls.n	8007400 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	781b      	ldrb	r3, [r3, #0]
 80073c4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80073c6:	e013      	b.n	80073f0 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80073c8:	f107 030a 	add.w	r3, r7, #10
 80073cc:	4619      	mov	r1, r3
 80073ce:	6978      	ldr	r0, [r7, #20]
 80073d0:	f000 f81b 	bl	800740a <USBD_GetNextDesc>
 80073d4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	785b      	ldrb	r3, [r3, #1]
 80073da:	2b05      	cmp	r3, #5
 80073dc:	d108      	bne.n	80073f0 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80073e2:	693b      	ldr	r3, [r7, #16]
 80073e4:	789b      	ldrb	r3, [r3, #2]
 80073e6:	78fa      	ldrb	r2, [r7, #3]
 80073e8:	429a      	cmp	r2, r3
 80073ea:	d008      	beq.n	80073fe <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80073ec:	2300      	movs	r3, #0
 80073ee:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	885b      	ldrh	r3, [r3, #2]
 80073f4:	b29a      	uxth	r2, r3
 80073f6:	897b      	ldrh	r3, [r7, #10]
 80073f8:	429a      	cmp	r2, r3
 80073fa:	d8e5      	bhi.n	80073c8 <USBD_GetEpDesc+0x2e>
 80073fc:	e000      	b.n	8007400 <USBD_GetEpDesc+0x66>
          break;
 80073fe:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007400:	693b      	ldr	r3, [r7, #16]
}
 8007402:	4618      	mov	r0, r3
 8007404:	3718      	adds	r7, #24
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}

0800740a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800740a:	b480      	push	{r7}
 800740c:	b085      	sub	sp, #20
 800740e:	af00      	add	r7, sp, #0
 8007410:	6078      	str	r0, [r7, #4]
 8007412:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	881b      	ldrh	r3, [r3, #0]
 800741c:	68fa      	ldr	r2, [r7, #12]
 800741e:	7812      	ldrb	r2, [r2, #0]
 8007420:	4413      	add	r3, r2
 8007422:	b29a      	uxth	r2, r3
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	781b      	ldrb	r3, [r3, #0]
 800742c:	461a      	mov	r2, r3
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	4413      	add	r3, r2
 8007432:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007434:	68fb      	ldr	r3, [r7, #12]
}
 8007436:	4618      	mov	r0, r3
 8007438:	3714      	adds	r7, #20
 800743a:	46bd      	mov	sp, r7
 800743c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007440:	4770      	bx	lr

08007442 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007442:	b480      	push	{r7}
 8007444:	b087      	sub	sp, #28
 8007446:	af00      	add	r7, sp, #0
 8007448:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	781b      	ldrb	r3, [r3, #0]
 8007452:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007454:	697b      	ldr	r3, [r7, #20]
 8007456:	3301      	adds	r3, #1
 8007458:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800745a:	697b      	ldr	r3, [r7, #20]
 800745c:	781b      	ldrb	r3, [r3, #0]
 800745e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007460:	8a3b      	ldrh	r3, [r7, #16]
 8007462:	021b      	lsls	r3, r3, #8
 8007464:	b21a      	sxth	r2, r3
 8007466:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800746a:	4313      	orrs	r3, r2
 800746c:	b21b      	sxth	r3, r3
 800746e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007470:	89fb      	ldrh	r3, [r7, #14]
}
 8007472:	4618      	mov	r0, r3
 8007474:	371c      	adds	r7, #28
 8007476:	46bd      	mov	sp, r7
 8007478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747c:	4770      	bx	lr
	...

08007480 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b084      	sub	sp, #16
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
 8007488:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800748a:	2300      	movs	r3, #0
 800748c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	781b      	ldrb	r3, [r3, #0]
 8007492:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007496:	2b40      	cmp	r3, #64	@ 0x40
 8007498:	d005      	beq.n	80074a6 <USBD_StdDevReq+0x26>
 800749a:	2b40      	cmp	r3, #64	@ 0x40
 800749c:	d857      	bhi.n	800754e <USBD_StdDevReq+0xce>
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d00f      	beq.n	80074c2 <USBD_StdDevReq+0x42>
 80074a2:	2b20      	cmp	r3, #32
 80074a4:	d153      	bne.n	800754e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	32ae      	adds	r2, #174	@ 0xae
 80074b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074b4:	689b      	ldr	r3, [r3, #8]
 80074b6:	6839      	ldr	r1, [r7, #0]
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	4798      	blx	r3
 80074bc:	4603      	mov	r3, r0
 80074be:	73fb      	strb	r3, [r7, #15]
      break;
 80074c0:	e04a      	b.n	8007558 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	785b      	ldrb	r3, [r3, #1]
 80074c6:	2b09      	cmp	r3, #9
 80074c8:	d83b      	bhi.n	8007542 <USBD_StdDevReq+0xc2>
 80074ca:	a201      	add	r2, pc, #4	@ (adr r2, 80074d0 <USBD_StdDevReq+0x50>)
 80074cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074d0:	08007525 	.word	0x08007525
 80074d4:	08007539 	.word	0x08007539
 80074d8:	08007543 	.word	0x08007543
 80074dc:	0800752f 	.word	0x0800752f
 80074e0:	08007543 	.word	0x08007543
 80074e4:	08007503 	.word	0x08007503
 80074e8:	080074f9 	.word	0x080074f9
 80074ec:	08007543 	.word	0x08007543
 80074f0:	0800751b 	.word	0x0800751b
 80074f4:	0800750d 	.word	0x0800750d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80074f8:	6839      	ldr	r1, [r7, #0]
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f000 fa3c 	bl	8007978 <USBD_GetDescriptor>
          break;
 8007500:	e024      	b.n	800754c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007502:	6839      	ldr	r1, [r7, #0]
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f000 fba1 	bl	8007c4c <USBD_SetAddress>
          break;
 800750a:	e01f      	b.n	800754c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800750c:	6839      	ldr	r1, [r7, #0]
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f000 fbe0 	bl	8007cd4 <USBD_SetConfig>
 8007514:	4603      	mov	r3, r0
 8007516:	73fb      	strb	r3, [r7, #15]
          break;
 8007518:	e018      	b.n	800754c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800751a:	6839      	ldr	r1, [r7, #0]
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f000 fc83 	bl	8007e28 <USBD_GetConfig>
          break;
 8007522:	e013      	b.n	800754c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007524:	6839      	ldr	r1, [r7, #0]
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f000 fcb4 	bl	8007e94 <USBD_GetStatus>
          break;
 800752c:	e00e      	b.n	800754c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800752e:	6839      	ldr	r1, [r7, #0]
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f000 fce3 	bl	8007efc <USBD_SetFeature>
          break;
 8007536:	e009      	b.n	800754c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007538:	6839      	ldr	r1, [r7, #0]
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f000 fd07 	bl	8007f4e <USBD_ClrFeature>
          break;
 8007540:	e004      	b.n	800754c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007542:	6839      	ldr	r1, [r7, #0]
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f000 fd5e 	bl	8008006 <USBD_CtlError>
          break;
 800754a:	bf00      	nop
      }
      break;
 800754c:	e004      	b.n	8007558 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800754e:	6839      	ldr	r1, [r7, #0]
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f000 fd58 	bl	8008006 <USBD_CtlError>
      break;
 8007556:	bf00      	nop
  }

  return ret;
 8007558:	7bfb      	ldrb	r3, [r7, #15]
}
 800755a:	4618      	mov	r0, r3
 800755c:	3710      	adds	r7, #16
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}
 8007562:	bf00      	nop

08007564 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b084      	sub	sp, #16
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
 800756c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800756e:	2300      	movs	r3, #0
 8007570:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	781b      	ldrb	r3, [r3, #0]
 8007576:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800757a:	2b40      	cmp	r3, #64	@ 0x40
 800757c:	d005      	beq.n	800758a <USBD_StdItfReq+0x26>
 800757e:	2b40      	cmp	r3, #64	@ 0x40
 8007580:	d852      	bhi.n	8007628 <USBD_StdItfReq+0xc4>
 8007582:	2b00      	cmp	r3, #0
 8007584:	d001      	beq.n	800758a <USBD_StdItfReq+0x26>
 8007586:	2b20      	cmp	r3, #32
 8007588:	d14e      	bne.n	8007628 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007590:	b2db      	uxtb	r3, r3
 8007592:	3b01      	subs	r3, #1
 8007594:	2b02      	cmp	r3, #2
 8007596:	d840      	bhi.n	800761a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	889b      	ldrh	r3, [r3, #4]
 800759c:	b2db      	uxtb	r3, r3
 800759e:	2b01      	cmp	r3, #1
 80075a0:	d836      	bhi.n	8007610 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	889b      	ldrh	r3, [r3, #4]
 80075a6:	b2db      	uxtb	r3, r3
 80075a8:	4619      	mov	r1, r3
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f7ff fedb 	bl	8007366 <USBD_CoreFindIF>
 80075b0:	4603      	mov	r3, r0
 80075b2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80075b4:	7bbb      	ldrb	r3, [r7, #14]
 80075b6:	2bff      	cmp	r3, #255	@ 0xff
 80075b8:	d01d      	beq.n	80075f6 <USBD_StdItfReq+0x92>
 80075ba:	7bbb      	ldrb	r3, [r7, #14]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d11a      	bne.n	80075f6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80075c0:	7bba      	ldrb	r2, [r7, #14]
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	32ae      	adds	r2, #174	@ 0xae
 80075c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075ca:	689b      	ldr	r3, [r3, #8]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d00f      	beq.n	80075f0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80075d0:	7bba      	ldrb	r2, [r7, #14]
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80075d8:	7bba      	ldrb	r2, [r7, #14]
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	32ae      	adds	r2, #174	@ 0xae
 80075de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075e2:	689b      	ldr	r3, [r3, #8]
 80075e4:	6839      	ldr	r1, [r7, #0]
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	4798      	blx	r3
 80075ea:	4603      	mov	r3, r0
 80075ec:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80075ee:	e004      	b.n	80075fa <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80075f0:	2303      	movs	r3, #3
 80075f2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80075f4:	e001      	b.n	80075fa <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80075f6:	2303      	movs	r3, #3
 80075f8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	88db      	ldrh	r3, [r3, #6]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d110      	bne.n	8007624 <USBD_StdItfReq+0xc0>
 8007602:	7bfb      	ldrb	r3, [r7, #15]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d10d      	bne.n	8007624 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f000 fdd3 	bl	80081b4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800760e:	e009      	b.n	8007624 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007610:	6839      	ldr	r1, [r7, #0]
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f000 fcf7 	bl	8008006 <USBD_CtlError>
          break;
 8007618:	e004      	b.n	8007624 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800761a:	6839      	ldr	r1, [r7, #0]
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f000 fcf2 	bl	8008006 <USBD_CtlError>
          break;
 8007622:	e000      	b.n	8007626 <USBD_StdItfReq+0xc2>
          break;
 8007624:	bf00      	nop
      }
      break;
 8007626:	e004      	b.n	8007632 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007628:	6839      	ldr	r1, [r7, #0]
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f000 fceb 	bl	8008006 <USBD_CtlError>
      break;
 8007630:	bf00      	nop
  }

  return ret;
 8007632:	7bfb      	ldrb	r3, [r7, #15]
}
 8007634:	4618      	mov	r0, r3
 8007636:	3710      	adds	r7, #16
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}

0800763c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b084      	sub	sp, #16
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
 8007644:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007646:	2300      	movs	r3, #0
 8007648:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	889b      	ldrh	r3, [r3, #4]
 800764e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	781b      	ldrb	r3, [r3, #0]
 8007654:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007658:	2b40      	cmp	r3, #64	@ 0x40
 800765a:	d007      	beq.n	800766c <USBD_StdEPReq+0x30>
 800765c:	2b40      	cmp	r3, #64	@ 0x40
 800765e:	f200 817f 	bhi.w	8007960 <USBD_StdEPReq+0x324>
 8007662:	2b00      	cmp	r3, #0
 8007664:	d02a      	beq.n	80076bc <USBD_StdEPReq+0x80>
 8007666:	2b20      	cmp	r3, #32
 8007668:	f040 817a 	bne.w	8007960 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800766c:	7bbb      	ldrb	r3, [r7, #14]
 800766e:	4619      	mov	r1, r3
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f7ff fe85 	bl	8007380 <USBD_CoreFindEP>
 8007676:	4603      	mov	r3, r0
 8007678:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800767a:	7b7b      	ldrb	r3, [r7, #13]
 800767c:	2bff      	cmp	r3, #255	@ 0xff
 800767e:	f000 8174 	beq.w	800796a <USBD_StdEPReq+0x32e>
 8007682:	7b7b      	ldrb	r3, [r7, #13]
 8007684:	2b00      	cmp	r3, #0
 8007686:	f040 8170 	bne.w	800796a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800768a:	7b7a      	ldrb	r2, [r7, #13]
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007692:	7b7a      	ldrb	r2, [r7, #13]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	32ae      	adds	r2, #174	@ 0xae
 8007698:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800769c:	689b      	ldr	r3, [r3, #8]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	f000 8163 	beq.w	800796a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80076a4:	7b7a      	ldrb	r2, [r7, #13]
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	32ae      	adds	r2, #174	@ 0xae
 80076aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076ae:	689b      	ldr	r3, [r3, #8]
 80076b0:	6839      	ldr	r1, [r7, #0]
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	4798      	blx	r3
 80076b6:	4603      	mov	r3, r0
 80076b8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80076ba:	e156      	b.n	800796a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	785b      	ldrb	r3, [r3, #1]
 80076c0:	2b03      	cmp	r3, #3
 80076c2:	d008      	beq.n	80076d6 <USBD_StdEPReq+0x9a>
 80076c4:	2b03      	cmp	r3, #3
 80076c6:	f300 8145 	bgt.w	8007954 <USBD_StdEPReq+0x318>
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	f000 809b 	beq.w	8007806 <USBD_StdEPReq+0x1ca>
 80076d0:	2b01      	cmp	r3, #1
 80076d2:	d03c      	beq.n	800774e <USBD_StdEPReq+0x112>
 80076d4:	e13e      	b.n	8007954 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80076dc:	b2db      	uxtb	r3, r3
 80076de:	2b02      	cmp	r3, #2
 80076e0:	d002      	beq.n	80076e8 <USBD_StdEPReq+0xac>
 80076e2:	2b03      	cmp	r3, #3
 80076e4:	d016      	beq.n	8007714 <USBD_StdEPReq+0xd8>
 80076e6:	e02c      	b.n	8007742 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80076e8:	7bbb      	ldrb	r3, [r7, #14]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d00d      	beq.n	800770a <USBD_StdEPReq+0xce>
 80076ee:	7bbb      	ldrb	r3, [r7, #14]
 80076f0:	2b80      	cmp	r3, #128	@ 0x80
 80076f2:	d00a      	beq.n	800770a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80076f4:	7bbb      	ldrb	r3, [r7, #14]
 80076f6:	4619      	mov	r1, r3
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f001 f96f 	bl	80089dc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80076fe:	2180      	movs	r1, #128	@ 0x80
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f001 f96b 	bl	80089dc <USBD_LL_StallEP>
 8007706:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007708:	e020      	b.n	800774c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800770a:	6839      	ldr	r1, [r7, #0]
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	f000 fc7a 	bl	8008006 <USBD_CtlError>
              break;
 8007712:	e01b      	b.n	800774c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	885b      	ldrh	r3, [r3, #2]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d10e      	bne.n	800773a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800771c:	7bbb      	ldrb	r3, [r7, #14]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d00b      	beq.n	800773a <USBD_StdEPReq+0xfe>
 8007722:	7bbb      	ldrb	r3, [r7, #14]
 8007724:	2b80      	cmp	r3, #128	@ 0x80
 8007726:	d008      	beq.n	800773a <USBD_StdEPReq+0xfe>
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	88db      	ldrh	r3, [r3, #6]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d104      	bne.n	800773a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007730:	7bbb      	ldrb	r3, [r7, #14]
 8007732:	4619      	mov	r1, r3
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	f001 f951 	bl	80089dc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f000 fd3a 	bl	80081b4 <USBD_CtlSendStatus>

              break;
 8007740:	e004      	b.n	800774c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007742:	6839      	ldr	r1, [r7, #0]
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f000 fc5e 	bl	8008006 <USBD_CtlError>
              break;
 800774a:	bf00      	nop
          }
          break;
 800774c:	e107      	b.n	800795e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007754:	b2db      	uxtb	r3, r3
 8007756:	2b02      	cmp	r3, #2
 8007758:	d002      	beq.n	8007760 <USBD_StdEPReq+0x124>
 800775a:	2b03      	cmp	r3, #3
 800775c:	d016      	beq.n	800778c <USBD_StdEPReq+0x150>
 800775e:	e04b      	b.n	80077f8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007760:	7bbb      	ldrb	r3, [r7, #14]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d00d      	beq.n	8007782 <USBD_StdEPReq+0x146>
 8007766:	7bbb      	ldrb	r3, [r7, #14]
 8007768:	2b80      	cmp	r3, #128	@ 0x80
 800776a:	d00a      	beq.n	8007782 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800776c:	7bbb      	ldrb	r3, [r7, #14]
 800776e:	4619      	mov	r1, r3
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f001 f933 	bl	80089dc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007776:	2180      	movs	r1, #128	@ 0x80
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	f001 f92f 	bl	80089dc <USBD_LL_StallEP>
 800777e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007780:	e040      	b.n	8007804 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007782:	6839      	ldr	r1, [r7, #0]
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	f000 fc3e 	bl	8008006 <USBD_CtlError>
              break;
 800778a:	e03b      	b.n	8007804 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	885b      	ldrh	r3, [r3, #2]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d136      	bne.n	8007802 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007794:	7bbb      	ldrb	r3, [r7, #14]
 8007796:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800779a:	2b00      	cmp	r3, #0
 800779c:	d004      	beq.n	80077a8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800779e:	7bbb      	ldrb	r3, [r7, #14]
 80077a0:	4619      	mov	r1, r3
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f001 f939 	bl	8008a1a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	f000 fd03 	bl	80081b4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80077ae:	7bbb      	ldrb	r3, [r7, #14]
 80077b0:	4619      	mov	r1, r3
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f7ff fde4 	bl	8007380 <USBD_CoreFindEP>
 80077b8:	4603      	mov	r3, r0
 80077ba:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80077bc:	7b7b      	ldrb	r3, [r7, #13]
 80077be:	2bff      	cmp	r3, #255	@ 0xff
 80077c0:	d01f      	beq.n	8007802 <USBD_StdEPReq+0x1c6>
 80077c2:	7b7b      	ldrb	r3, [r7, #13]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d11c      	bne.n	8007802 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80077c8:	7b7a      	ldrb	r2, [r7, #13]
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80077d0:	7b7a      	ldrb	r2, [r7, #13]
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	32ae      	adds	r2, #174	@ 0xae
 80077d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077da:	689b      	ldr	r3, [r3, #8]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d010      	beq.n	8007802 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80077e0:	7b7a      	ldrb	r2, [r7, #13]
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	32ae      	adds	r2, #174	@ 0xae
 80077e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077ea:	689b      	ldr	r3, [r3, #8]
 80077ec:	6839      	ldr	r1, [r7, #0]
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	4798      	blx	r3
 80077f2:	4603      	mov	r3, r0
 80077f4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80077f6:	e004      	b.n	8007802 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80077f8:	6839      	ldr	r1, [r7, #0]
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f000 fc03 	bl	8008006 <USBD_CtlError>
              break;
 8007800:	e000      	b.n	8007804 <USBD_StdEPReq+0x1c8>
              break;
 8007802:	bf00      	nop
          }
          break;
 8007804:	e0ab      	b.n	800795e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800780c:	b2db      	uxtb	r3, r3
 800780e:	2b02      	cmp	r3, #2
 8007810:	d002      	beq.n	8007818 <USBD_StdEPReq+0x1dc>
 8007812:	2b03      	cmp	r3, #3
 8007814:	d032      	beq.n	800787c <USBD_StdEPReq+0x240>
 8007816:	e097      	b.n	8007948 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007818:	7bbb      	ldrb	r3, [r7, #14]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d007      	beq.n	800782e <USBD_StdEPReq+0x1f2>
 800781e:	7bbb      	ldrb	r3, [r7, #14]
 8007820:	2b80      	cmp	r3, #128	@ 0x80
 8007822:	d004      	beq.n	800782e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007824:	6839      	ldr	r1, [r7, #0]
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f000 fbed 	bl	8008006 <USBD_CtlError>
                break;
 800782c:	e091      	b.n	8007952 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800782e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007832:	2b00      	cmp	r3, #0
 8007834:	da0b      	bge.n	800784e <USBD_StdEPReq+0x212>
 8007836:	7bbb      	ldrb	r3, [r7, #14]
 8007838:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800783c:	4613      	mov	r3, r2
 800783e:	009b      	lsls	r3, r3, #2
 8007840:	4413      	add	r3, r2
 8007842:	009b      	lsls	r3, r3, #2
 8007844:	3310      	adds	r3, #16
 8007846:	687a      	ldr	r2, [r7, #4]
 8007848:	4413      	add	r3, r2
 800784a:	3304      	adds	r3, #4
 800784c:	e00b      	b.n	8007866 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800784e:	7bbb      	ldrb	r3, [r7, #14]
 8007850:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007854:	4613      	mov	r3, r2
 8007856:	009b      	lsls	r3, r3, #2
 8007858:	4413      	add	r3, r2
 800785a:	009b      	lsls	r3, r3, #2
 800785c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007860:	687a      	ldr	r2, [r7, #4]
 8007862:	4413      	add	r3, r2
 8007864:	3304      	adds	r3, #4
 8007866:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	2200      	movs	r2, #0
 800786c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	2202      	movs	r2, #2
 8007872:	4619      	mov	r1, r3
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f000 fc43 	bl	8008100 <USBD_CtlSendData>
              break;
 800787a:	e06a      	b.n	8007952 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800787c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007880:	2b00      	cmp	r3, #0
 8007882:	da11      	bge.n	80078a8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007884:	7bbb      	ldrb	r3, [r7, #14]
 8007886:	f003 020f 	and.w	r2, r3, #15
 800788a:	6879      	ldr	r1, [r7, #4]
 800788c:	4613      	mov	r3, r2
 800788e:	009b      	lsls	r3, r3, #2
 8007890:	4413      	add	r3, r2
 8007892:	009b      	lsls	r3, r3, #2
 8007894:	440b      	add	r3, r1
 8007896:	3324      	adds	r3, #36	@ 0x24
 8007898:	881b      	ldrh	r3, [r3, #0]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d117      	bne.n	80078ce <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800789e:	6839      	ldr	r1, [r7, #0]
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f000 fbb0 	bl	8008006 <USBD_CtlError>
                  break;
 80078a6:	e054      	b.n	8007952 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80078a8:	7bbb      	ldrb	r3, [r7, #14]
 80078aa:	f003 020f 	and.w	r2, r3, #15
 80078ae:	6879      	ldr	r1, [r7, #4]
 80078b0:	4613      	mov	r3, r2
 80078b2:	009b      	lsls	r3, r3, #2
 80078b4:	4413      	add	r3, r2
 80078b6:	009b      	lsls	r3, r3, #2
 80078b8:	440b      	add	r3, r1
 80078ba:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80078be:	881b      	ldrh	r3, [r3, #0]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d104      	bne.n	80078ce <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80078c4:	6839      	ldr	r1, [r7, #0]
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f000 fb9d 	bl	8008006 <USBD_CtlError>
                  break;
 80078cc:	e041      	b.n	8007952 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80078ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	da0b      	bge.n	80078ee <USBD_StdEPReq+0x2b2>
 80078d6:	7bbb      	ldrb	r3, [r7, #14]
 80078d8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80078dc:	4613      	mov	r3, r2
 80078de:	009b      	lsls	r3, r3, #2
 80078e0:	4413      	add	r3, r2
 80078e2:	009b      	lsls	r3, r3, #2
 80078e4:	3310      	adds	r3, #16
 80078e6:	687a      	ldr	r2, [r7, #4]
 80078e8:	4413      	add	r3, r2
 80078ea:	3304      	adds	r3, #4
 80078ec:	e00b      	b.n	8007906 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80078ee:	7bbb      	ldrb	r3, [r7, #14]
 80078f0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80078f4:	4613      	mov	r3, r2
 80078f6:	009b      	lsls	r3, r3, #2
 80078f8:	4413      	add	r3, r2
 80078fa:	009b      	lsls	r3, r3, #2
 80078fc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007900:	687a      	ldr	r2, [r7, #4]
 8007902:	4413      	add	r3, r2
 8007904:	3304      	adds	r3, #4
 8007906:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007908:	7bbb      	ldrb	r3, [r7, #14]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d002      	beq.n	8007914 <USBD_StdEPReq+0x2d8>
 800790e:	7bbb      	ldrb	r3, [r7, #14]
 8007910:	2b80      	cmp	r3, #128	@ 0x80
 8007912:	d103      	bne.n	800791c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	2200      	movs	r2, #0
 8007918:	601a      	str	r2, [r3, #0]
 800791a:	e00e      	b.n	800793a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800791c:	7bbb      	ldrb	r3, [r7, #14]
 800791e:	4619      	mov	r1, r3
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f001 f899 	bl	8008a58 <USBD_LL_IsStallEP>
 8007926:	4603      	mov	r3, r0
 8007928:	2b00      	cmp	r3, #0
 800792a:	d003      	beq.n	8007934 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	2201      	movs	r2, #1
 8007930:	601a      	str	r2, [r3, #0]
 8007932:	e002      	b.n	800793a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	2200      	movs	r2, #0
 8007938:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	2202      	movs	r2, #2
 800793e:	4619      	mov	r1, r3
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f000 fbdd 	bl	8008100 <USBD_CtlSendData>
              break;
 8007946:	e004      	b.n	8007952 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007948:	6839      	ldr	r1, [r7, #0]
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f000 fb5b 	bl	8008006 <USBD_CtlError>
              break;
 8007950:	bf00      	nop
          }
          break;
 8007952:	e004      	b.n	800795e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007954:	6839      	ldr	r1, [r7, #0]
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f000 fb55 	bl	8008006 <USBD_CtlError>
          break;
 800795c:	bf00      	nop
      }
      break;
 800795e:	e005      	b.n	800796c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007960:	6839      	ldr	r1, [r7, #0]
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f000 fb4f 	bl	8008006 <USBD_CtlError>
      break;
 8007968:	e000      	b.n	800796c <USBD_StdEPReq+0x330>
      break;
 800796a:	bf00      	nop
  }

  return ret;
 800796c:	7bfb      	ldrb	r3, [r7, #15]
}
 800796e:	4618      	mov	r0, r3
 8007970:	3710      	adds	r7, #16
 8007972:	46bd      	mov	sp, r7
 8007974:	bd80      	pop	{r7, pc}
	...

08007978 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b084      	sub	sp, #16
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
 8007980:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007982:	2300      	movs	r3, #0
 8007984:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007986:	2300      	movs	r3, #0
 8007988:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800798a:	2300      	movs	r3, #0
 800798c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	885b      	ldrh	r3, [r3, #2]
 8007992:	0a1b      	lsrs	r3, r3, #8
 8007994:	b29b      	uxth	r3, r3
 8007996:	3b01      	subs	r3, #1
 8007998:	2b06      	cmp	r3, #6
 800799a:	f200 8128 	bhi.w	8007bee <USBD_GetDescriptor+0x276>
 800799e:	a201      	add	r2, pc, #4	@ (adr r2, 80079a4 <USBD_GetDescriptor+0x2c>)
 80079a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079a4:	080079c1 	.word	0x080079c1
 80079a8:	080079d9 	.word	0x080079d9
 80079ac:	08007a19 	.word	0x08007a19
 80079b0:	08007bef 	.word	0x08007bef
 80079b4:	08007bef 	.word	0x08007bef
 80079b8:	08007b8f 	.word	0x08007b8f
 80079bc:	08007bbb 	.word	0x08007bbb
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	687a      	ldr	r2, [r7, #4]
 80079ca:	7c12      	ldrb	r2, [r2, #16]
 80079cc:	f107 0108 	add.w	r1, r7, #8
 80079d0:	4610      	mov	r0, r2
 80079d2:	4798      	blx	r3
 80079d4:	60f8      	str	r0, [r7, #12]
      break;
 80079d6:	e112      	b.n	8007bfe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	7c1b      	ldrb	r3, [r3, #16]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d10d      	bne.n	80079fc <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80079e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079e8:	f107 0208 	add.w	r2, r7, #8
 80079ec:	4610      	mov	r0, r2
 80079ee:	4798      	blx	r3
 80079f0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	3301      	adds	r3, #1
 80079f6:	2202      	movs	r2, #2
 80079f8:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80079fa:	e100      	b.n	8007bfe <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a04:	f107 0208 	add.w	r2, r7, #8
 8007a08:	4610      	mov	r0, r2
 8007a0a:	4798      	blx	r3
 8007a0c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	3301      	adds	r3, #1
 8007a12:	2202      	movs	r2, #2
 8007a14:	701a      	strb	r2, [r3, #0]
      break;
 8007a16:	e0f2      	b.n	8007bfe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	885b      	ldrh	r3, [r3, #2]
 8007a1c:	b2db      	uxtb	r3, r3
 8007a1e:	2b05      	cmp	r3, #5
 8007a20:	f200 80ac 	bhi.w	8007b7c <USBD_GetDescriptor+0x204>
 8007a24:	a201      	add	r2, pc, #4	@ (adr r2, 8007a2c <USBD_GetDescriptor+0xb4>)
 8007a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a2a:	bf00      	nop
 8007a2c:	08007a45 	.word	0x08007a45
 8007a30:	08007a79 	.word	0x08007a79
 8007a34:	08007aad 	.word	0x08007aad
 8007a38:	08007ae1 	.word	0x08007ae1
 8007a3c:	08007b15 	.word	0x08007b15
 8007a40:	08007b49 	.word	0x08007b49
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a4a:	685b      	ldr	r3, [r3, #4]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d00b      	beq.n	8007a68 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a56:	685b      	ldr	r3, [r3, #4]
 8007a58:	687a      	ldr	r2, [r7, #4]
 8007a5a:	7c12      	ldrb	r2, [r2, #16]
 8007a5c:	f107 0108 	add.w	r1, r7, #8
 8007a60:	4610      	mov	r0, r2
 8007a62:	4798      	blx	r3
 8007a64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a66:	e091      	b.n	8007b8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a68:	6839      	ldr	r1, [r7, #0]
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f000 facb 	bl	8008006 <USBD_CtlError>
            err++;
 8007a70:	7afb      	ldrb	r3, [r7, #11]
 8007a72:	3301      	adds	r3, #1
 8007a74:	72fb      	strb	r3, [r7, #11]
          break;
 8007a76:	e089      	b.n	8007b8c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a7e:	689b      	ldr	r3, [r3, #8]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d00b      	beq.n	8007a9c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a8a:	689b      	ldr	r3, [r3, #8]
 8007a8c:	687a      	ldr	r2, [r7, #4]
 8007a8e:	7c12      	ldrb	r2, [r2, #16]
 8007a90:	f107 0108 	add.w	r1, r7, #8
 8007a94:	4610      	mov	r0, r2
 8007a96:	4798      	blx	r3
 8007a98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a9a:	e077      	b.n	8007b8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a9c:	6839      	ldr	r1, [r7, #0]
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f000 fab1 	bl	8008006 <USBD_CtlError>
            err++;
 8007aa4:	7afb      	ldrb	r3, [r7, #11]
 8007aa6:	3301      	adds	r3, #1
 8007aa8:	72fb      	strb	r3, [r7, #11]
          break;
 8007aaa:	e06f      	b.n	8007b8c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ab2:	68db      	ldr	r3, [r3, #12]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d00b      	beq.n	8007ad0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007abe:	68db      	ldr	r3, [r3, #12]
 8007ac0:	687a      	ldr	r2, [r7, #4]
 8007ac2:	7c12      	ldrb	r2, [r2, #16]
 8007ac4:	f107 0108 	add.w	r1, r7, #8
 8007ac8:	4610      	mov	r0, r2
 8007aca:	4798      	blx	r3
 8007acc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ace:	e05d      	b.n	8007b8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ad0:	6839      	ldr	r1, [r7, #0]
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f000 fa97 	bl	8008006 <USBD_CtlError>
            err++;
 8007ad8:	7afb      	ldrb	r3, [r7, #11]
 8007ada:	3301      	adds	r3, #1
 8007adc:	72fb      	strb	r3, [r7, #11]
          break;
 8007ade:	e055      	b.n	8007b8c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ae6:	691b      	ldr	r3, [r3, #16]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d00b      	beq.n	8007b04 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007af2:	691b      	ldr	r3, [r3, #16]
 8007af4:	687a      	ldr	r2, [r7, #4]
 8007af6:	7c12      	ldrb	r2, [r2, #16]
 8007af8:	f107 0108 	add.w	r1, r7, #8
 8007afc:	4610      	mov	r0, r2
 8007afe:	4798      	blx	r3
 8007b00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b02:	e043      	b.n	8007b8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b04:	6839      	ldr	r1, [r7, #0]
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f000 fa7d 	bl	8008006 <USBD_CtlError>
            err++;
 8007b0c:	7afb      	ldrb	r3, [r7, #11]
 8007b0e:	3301      	adds	r3, #1
 8007b10:	72fb      	strb	r3, [r7, #11]
          break;
 8007b12:	e03b      	b.n	8007b8c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b1a:	695b      	ldr	r3, [r3, #20]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d00b      	beq.n	8007b38 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b26:	695b      	ldr	r3, [r3, #20]
 8007b28:	687a      	ldr	r2, [r7, #4]
 8007b2a:	7c12      	ldrb	r2, [r2, #16]
 8007b2c:	f107 0108 	add.w	r1, r7, #8
 8007b30:	4610      	mov	r0, r2
 8007b32:	4798      	blx	r3
 8007b34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b36:	e029      	b.n	8007b8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b38:	6839      	ldr	r1, [r7, #0]
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f000 fa63 	bl	8008006 <USBD_CtlError>
            err++;
 8007b40:	7afb      	ldrb	r3, [r7, #11]
 8007b42:	3301      	adds	r3, #1
 8007b44:	72fb      	strb	r3, [r7, #11]
          break;
 8007b46:	e021      	b.n	8007b8c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b4e:	699b      	ldr	r3, [r3, #24]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d00b      	beq.n	8007b6c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b5a:	699b      	ldr	r3, [r3, #24]
 8007b5c:	687a      	ldr	r2, [r7, #4]
 8007b5e:	7c12      	ldrb	r2, [r2, #16]
 8007b60:	f107 0108 	add.w	r1, r7, #8
 8007b64:	4610      	mov	r0, r2
 8007b66:	4798      	blx	r3
 8007b68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b6a:	e00f      	b.n	8007b8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b6c:	6839      	ldr	r1, [r7, #0]
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f000 fa49 	bl	8008006 <USBD_CtlError>
            err++;
 8007b74:	7afb      	ldrb	r3, [r7, #11]
 8007b76:	3301      	adds	r3, #1
 8007b78:	72fb      	strb	r3, [r7, #11]
          break;
 8007b7a:	e007      	b.n	8007b8c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007b7c:	6839      	ldr	r1, [r7, #0]
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f000 fa41 	bl	8008006 <USBD_CtlError>
          err++;
 8007b84:	7afb      	ldrb	r3, [r7, #11]
 8007b86:	3301      	adds	r3, #1
 8007b88:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007b8a:	bf00      	nop
      }
      break;
 8007b8c:	e037      	b.n	8007bfe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	7c1b      	ldrb	r3, [r3, #16]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d109      	bne.n	8007baa <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b9e:	f107 0208 	add.w	r2, r7, #8
 8007ba2:	4610      	mov	r0, r2
 8007ba4:	4798      	blx	r3
 8007ba6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007ba8:	e029      	b.n	8007bfe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007baa:	6839      	ldr	r1, [r7, #0]
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f000 fa2a 	bl	8008006 <USBD_CtlError>
        err++;
 8007bb2:	7afb      	ldrb	r3, [r7, #11]
 8007bb4:	3301      	adds	r3, #1
 8007bb6:	72fb      	strb	r3, [r7, #11]
      break;
 8007bb8:	e021      	b.n	8007bfe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	7c1b      	ldrb	r3, [r3, #16]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d10d      	bne.n	8007bde <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bca:	f107 0208 	add.w	r2, r7, #8
 8007bce:	4610      	mov	r0, r2
 8007bd0:	4798      	blx	r3
 8007bd2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	3301      	adds	r3, #1
 8007bd8:	2207      	movs	r2, #7
 8007bda:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007bdc:	e00f      	b.n	8007bfe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007bde:	6839      	ldr	r1, [r7, #0]
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f000 fa10 	bl	8008006 <USBD_CtlError>
        err++;
 8007be6:	7afb      	ldrb	r3, [r7, #11]
 8007be8:	3301      	adds	r3, #1
 8007bea:	72fb      	strb	r3, [r7, #11]
      break;
 8007bec:	e007      	b.n	8007bfe <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007bee:	6839      	ldr	r1, [r7, #0]
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f000 fa08 	bl	8008006 <USBD_CtlError>
      err++;
 8007bf6:	7afb      	ldrb	r3, [r7, #11]
 8007bf8:	3301      	adds	r3, #1
 8007bfa:	72fb      	strb	r3, [r7, #11]
      break;
 8007bfc:	bf00      	nop
  }

  if (err != 0U)
 8007bfe:	7afb      	ldrb	r3, [r7, #11]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d11e      	bne.n	8007c42 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	88db      	ldrh	r3, [r3, #6]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d016      	beq.n	8007c3a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007c0c:	893b      	ldrh	r3, [r7, #8]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d00e      	beq.n	8007c30 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	88da      	ldrh	r2, [r3, #6]
 8007c16:	893b      	ldrh	r3, [r7, #8]
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	bf28      	it	cs
 8007c1c:	4613      	movcs	r3, r2
 8007c1e:	b29b      	uxth	r3, r3
 8007c20:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007c22:	893b      	ldrh	r3, [r7, #8]
 8007c24:	461a      	mov	r2, r3
 8007c26:	68f9      	ldr	r1, [r7, #12]
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f000 fa69 	bl	8008100 <USBD_CtlSendData>
 8007c2e:	e009      	b.n	8007c44 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007c30:	6839      	ldr	r1, [r7, #0]
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f000 f9e7 	bl	8008006 <USBD_CtlError>
 8007c38:	e004      	b.n	8007c44 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f000 faba 	bl	80081b4 <USBD_CtlSendStatus>
 8007c40:	e000      	b.n	8007c44 <USBD_GetDescriptor+0x2cc>
    return;
 8007c42:	bf00      	nop
  }
}
 8007c44:	3710      	adds	r7, #16
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bd80      	pop	{r7, pc}
 8007c4a:	bf00      	nop

08007c4c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b084      	sub	sp, #16
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
 8007c54:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	889b      	ldrh	r3, [r3, #4]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d131      	bne.n	8007cc2 <USBD_SetAddress+0x76>
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	88db      	ldrh	r3, [r3, #6]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d12d      	bne.n	8007cc2 <USBD_SetAddress+0x76>
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	885b      	ldrh	r3, [r3, #2]
 8007c6a:	2b7f      	cmp	r3, #127	@ 0x7f
 8007c6c:	d829      	bhi.n	8007cc2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	885b      	ldrh	r3, [r3, #2]
 8007c72:	b2db      	uxtb	r3, r3
 8007c74:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007c78:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c80:	b2db      	uxtb	r3, r3
 8007c82:	2b03      	cmp	r3, #3
 8007c84:	d104      	bne.n	8007c90 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007c86:	6839      	ldr	r1, [r7, #0]
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f000 f9bc 	bl	8008006 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c8e:	e01d      	b.n	8007ccc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	7bfa      	ldrb	r2, [r7, #15]
 8007c94:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007c98:	7bfb      	ldrb	r3, [r7, #15]
 8007c9a:	4619      	mov	r1, r3
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	f000 ff07 	bl	8008ab0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f000 fa86 	bl	80081b4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007ca8:	7bfb      	ldrb	r3, [r7, #15]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d004      	beq.n	8007cb8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2202      	movs	r2, #2
 8007cb2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cb6:	e009      	b.n	8007ccc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2201      	movs	r2, #1
 8007cbc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cc0:	e004      	b.n	8007ccc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007cc2:	6839      	ldr	r1, [r7, #0]
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f000 f99e 	bl	8008006 <USBD_CtlError>
  }
}
 8007cca:	bf00      	nop
 8007ccc:	bf00      	nop
 8007cce:	3710      	adds	r7, #16
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bd80      	pop	{r7, pc}

08007cd4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b084      	sub	sp, #16
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
 8007cdc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007cde:	2300      	movs	r3, #0
 8007ce0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	885b      	ldrh	r3, [r3, #2]
 8007ce6:	b2da      	uxtb	r2, r3
 8007ce8:	4b4e      	ldr	r3, [pc, #312]	@ (8007e24 <USBD_SetConfig+0x150>)
 8007cea:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007cec:	4b4d      	ldr	r3, [pc, #308]	@ (8007e24 <USBD_SetConfig+0x150>)
 8007cee:	781b      	ldrb	r3, [r3, #0]
 8007cf0:	2b01      	cmp	r3, #1
 8007cf2:	d905      	bls.n	8007d00 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007cf4:	6839      	ldr	r1, [r7, #0]
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f000 f985 	bl	8008006 <USBD_CtlError>
    return USBD_FAIL;
 8007cfc:	2303      	movs	r3, #3
 8007cfe:	e08c      	b.n	8007e1a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d06:	b2db      	uxtb	r3, r3
 8007d08:	2b02      	cmp	r3, #2
 8007d0a:	d002      	beq.n	8007d12 <USBD_SetConfig+0x3e>
 8007d0c:	2b03      	cmp	r3, #3
 8007d0e:	d029      	beq.n	8007d64 <USBD_SetConfig+0x90>
 8007d10:	e075      	b.n	8007dfe <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007d12:	4b44      	ldr	r3, [pc, #272]	@ (8007e24 <USBD_SetConfig+0x150>)
 8007d14:	781b      	ldrb	r3, [r3, #0]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d020      	beq.n	8007d5c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007d1a:	4b42      	ldr	r3, [pc, #264]	@ (8007e24 <USBD_SetConfig+0x150>)
 8007d1c:	781b      	ldrb	r3, [r3, #0]
 8007d1e:	461a      	mov	r2, r3
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007d24:	4b3f      	ldr	r3, [pc, #252]	@ (8007e24 <USBD_SetConfig+0x150>)
 8007d26:	781b      	ldrb	r3, [r3, #0]
 8007d28:	4619      	mov	r1, r3
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f7fe ffe3 	bl	8006cf6 <USBD_SetClassConfig>
 8007d30:	4603      	mov	r3, r0
 8007d32:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007d34:	7bfb      	ldrb	r3, [r7, #15]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d008      	beq.n	8007d4c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007d3a:	6839      	ldr	r1, [r7, #0]
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	f000 f962 	bl	8008006 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2202      	movs	r2, #2
 8007d46:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007d4a:	e065      	b.n	8007e18 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f000 fa31 	bl	80081b4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2203      	movs	r2, #3
 8007d56:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007d5a:	e05d      	b.n	8007e18 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f000 fa29 	bl	80081b4 <USBD_CtlSendStatus>
      break;
 8007d62:	e059      	b.n	8007e18 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007d64:	4b2f      	ldr	r3, [pc, #188]	@ (8007e24 <USBD_SetConfig+0x150>)
 8007d66:	781b      	ldrb	r3, [r3, #0]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d112      	bne.n	8007d92 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2202      	movs	r2, #2
 8007d70:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8007d74:	4b2b      	ldr	r3, [pc, #172]	@ (8007e24 <USBD_SetConfig+0x150>)
 8007d76:	781b      	ldrb	r3, [r3, #0]
 8007d78:	461a      	mov	r2, r3
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007d7e:	4b29      	ldr	r3, [pc, #164]	@ (8007e24 <USBD_SetConfig+0x150>)
 8007d80:	781b      	ldrb	r3, [r3, #0]
 8007d82:	4619      	mov	r1, r3
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f7fe ffd2 	bl	8006d2e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f000 fa12 	bl	80081b4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007d90:	e042      	b.n	8007e18 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007d92:	4b24      	ldr	r3, [pc, #144]	@ (8007e24 <USBD_SetConfig+0x150>)
 8007d94:	781b      	ldrb	r3, [r3, #0]
 8007d96:	461a      	mov	r2, r3
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	685b      	ldr	r3, [r3, #4]
 8007d9c:	429a      	cmp	r2, r3
 8007d9e:	d02a      	beq.n	8007df6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	685b      	ldr	r3, [r3, #4]
 8007da4:	b2db      	uxtb	r3, r3
 8007da6:	4619      	mov	r1, r3
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	f7fe ffc0 	bl	8006d2e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007dae:	4b1d      	ldr	r3, [pc, #116]	@ (8007e24 <USBD_SetConfig+0x150>)
 8007db0:	781b      	ldrb	r3, [r3, #0]
 8007db2:	461a      	mov	r2, r3
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007db8:	4b1a      	ldr	r3, [pc, #104]	@ (8007e24 <USBD_SetConfig+0x150>)
 8007dba:	781b      	ldrb	r3, [r3, #0]
 8007dbc:	4619      	mov	r1, r3
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f7fe ff99 	bl	8006cf6 <USBD_SetClassConfig>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007dc8:	7bfb      	ldrb	r3, [r7, #15]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d00f      	beq.n	8007dee <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007dce:	6839      	ldr	r1, [r7, #0]
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f000 f918 	bl	8008006 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	685b      	ldr	r3, [r3, #4]
 8007dda:	b2db      	uxtb	r3, r3
 8007ddc:	4619      	mov	r1, r3
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f7fe ffa5 	bl	8006d2e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2202      	movs	r2, #2
 8007de8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007dec:	e014      	b.n	8007e18 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f000 f9e0 	bl	80081b4 <USBD_CtlSendStatus>
      break;
 8007df4:	e010      	b.n	8007e18 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f000 f9dc 	bl	80081b4 <USBD_CtlSendStatus>
      break;
 8007dfc:	e00c      	b.n	8007e18 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007dfe:	6839      	ldr	r1, [r7, #0]
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	f000 f900 	bl	8008006 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007e06:	4b07      	ldr	r3, [pc, #28]	@ (8007e24 <USBD_SetConfig+0x150>)
 8007e08:	781b      	ldrb	r3, [r3, #0]
 8007e0a:	4619      	mov	r1, r3
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f7fe ff8e 	bl	8006d2e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007e12:	2303      	movs	r3, #3
 8007e14:	73fb      	strb	r3, [r7, #15]
      break;
 8007e16:	bf00      	nop
  }

  return ret;
 8007e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3710      	adds	r7, #16
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}
 8007e22:	bf00      	nop
 8007e24:	20000370 	.word	0x20000370

08007e28 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b082      	sub	sp, #8
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
 8007e30:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	88db      	ldrh	r3, [r3, #6]
 8007e36:	2b01      	cmp	r3, #1
 8007e38:	d004      	beq.n	8007e44 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007e3a:	6839      	ldr	r1, [r7, #0]
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f000 f8e2 	bl	8008006 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007e42:	e023      	b.n	8007e8c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e4a:	b2db      	uxtb	r3, r3
 8007e4c:	2b02      	cmp	r3, #2
 8007e4e:	dc02      	bgt.n	8007e56 <USBD_GetConfig+0x2e>
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	dc03      	bgt.n	8007e5c <USBD_GetConfig+0x34>
 8007e54:	e015      	b.n	8007e82 <USBD_GetConfig+0x5a>
 8007e56:	2b03      	cmp	r3, #3
 8007e58:	d00b      	beq.n	8007e72 <USBD_GetConfig+0x4a>
 8007e5a:	e012      	b.n	8007e82 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	3308      	adds	r3, #8
 8007e66:	2201      	movs	r2, #1
 8007e68:	4619      	mov	r1, r3
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	f000 f948 	bl	8008100 <USBD_CtlSendData>
        break;
 8007e70:	e00c      	b.n	8007e8c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	3304      	adds	r3, #4
 8007e76:	2201      	movs	r2, #1
 8007e78:	4619      	mov	r1, r3
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f000 f940 	bl	8008100 <USBD_CtlSendData>
        break;
 8007e80:	e004      	b.n	8007e8c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007e82:	6839      	ldr	r1, [r7, #0]
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f000 f8be 	bl	8008006 <USBD_CtlError>
        break;
 8007e8a:	bf00      	nop
}
 8007e8c:	bf00      	nop
 8007e8e:	3708      	adds	r7, #8
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}

08007e94 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b082      	sub	sp, #8
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
 8007e9c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ea4:	b2db      	uxtb	r3, r3
 8007ea6:	3b01      	subs	r3, #1
 8007ea8:	2b02      	cmp	r3, #2
 8007eaa:	d81e      	bhi.n	8007eea <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	88db      	ldrh	r3, [r3, #6]
 8007eb0:	2b02      	cmp	r3, #2
 8007eb2:	d004      	beq.n	8007ebe <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007eb4:	6839      	ldr	r1, [r7, #0]
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f000 f8a5 	bl	8008006 <USBD_CtlError>
        break;
 8007ebc:	e01a      	b.n	8007ef4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2201      	movs	r2, #1
 8007ec2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d005      	beq.n	8007eda <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	68db      	ldr	r3, [r3, #12]
 8007ed2:	f043 0202 	orr.w	r2, r3, #2
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	330c      	adds	r3, #12
 8007ede:	2202      	movs	r2, #2
 8007ee0:	4619      	mov	r1, r3
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f000 f90c 	bl	8008100 <USBD_CtlSendData>
      break;
 8007ee8:	e004      	b.n	8007ef4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007eea:	6839      	ldr	r1, [r7, #0]
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f000 f88a 	bl	8008006 <USBD_CtlError>
      break;
 8007ef2:	bf00      	nop
  }
}
 8007ef4:	bf00      	nop
 8007ef6:	3708      	adds	r7, #8
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bd80      	pop	{r7, pc}

08007efc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b082      	sub	sp, #8
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
 8007f04:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	885b      	ldrh	r3, [r3, #2]
 8007f0a:	2b01      	cmp	r3, #1
 8007f0c:	d107      	bne.n	8007f1e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2201      	movs	r2, #1
 8007f12:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f000 f94c 	bl	80081b4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007f1c:	e013      	b.n	8007f46 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	885b      	ldrh	r3, [r3, #2]
 8007f22:	2b02      	cmp	r3, #2
 8007f24:	d10b      	bne.n	8007f3e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	889b      	ldrh	r3, [r3, #4]
 8007f2a:	0a1b      	lsrs	r3, r3, #8
 8007f2c:	b29b      	uxth	r3, r3
 8007f2e:	b2da      	uxtb	r2, r3
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f000 f93c 	bl	80081b4 <USBD_CtlSendStatus>
}
 8007f3c:	e003      	b.n	8007f46 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007f3e:	6839      	ldr	r1, [r7, #0]
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f000 f860 	bl	8008006 <USBD_CtlError>
}
 8007f46:	bf00      	nop
 8007f48:	3708      	adds	r7, #8
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}

08007f4e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f4e:	b580      	push	{r7, lr}
 8007f50:	b082      	sub	sp, #8
 8007f52:	af00      	add	r7, sp, #0
 8007f54:	6078      	str	r0, [r7, #4]
 8007f56:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f5e:	b2db      	uxtb	r3, r3
 8007f60:	3b01      	subs	r3, #1
 8007f62:	2b02      	cmp	r3, #2
 8007f64:	d80b      	bhi.n	8007f7e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	885b      	ldrh	r3, [r3, #2]
 8007f6a:	2b01      	cmp	r3, #1
 8007f6c:	d10c      	bne.n	8007f88 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2200      	movs	r2, #0
 8007f72:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f000 f91c 	bl	80081b4 <USBD_CtlSendStatus>
      }
      break;
 8007f7c:	e004      	b.n	8007f88 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007f7e:	6839      	ldr	r1, [r7, #0]
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f000 f840 	bl	8008006 <USBD_CtlError>
      break;
 8007f86:	e000      	b.n	8007f8a <USBD_ClrFeature+0x3c>
      break;
 8007f88:	bf00      	nop
  }
}
 8007f8a:	bf00      	nop
 8007f8c:	3708      	adds	r7, #8
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bd80      	pop	{r7, pc}

08007f92 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007f92:	b580      	push	{r7, lr}
 8007f94:	b084      	sub	sp, #16
 8007f96:	af00      	add	r7, sp, #0
 8007f98:	6078      	str	r0, [r7, #4]
 8007f9a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	781a      	ldrb	r2, [r3, #0]
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	3301      	adds	r3, #1
 8007fac:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	781a      	ldrb	r2, [r3, #0]
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	3301      	adds	r3, #1
 8007fba:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007fbc:	68f8      	ldr	r0, [r7, #12]
 8007fbe:	f7ff fa40 	bl	8007442 <SWAPBYTE>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	461a      	mov	r2, r3
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	3301      	adds	r3, #1
 8007fce:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	3301      	adds	r3, #1
 8007fd4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007fd6:	68f8      	ldr	r0, [r7, #12]
 8007fd8:	f7ff fa33 	bl	8007442 <SWAPBYTE>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	461a      	mov	r2, r3
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	3301      	adds	r3, #1
 8007fe8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	3301      	adds	r3, #1
 8007fee:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007ff0:	68f8      	ldr	r0, [r7, #12]
 8007ff2:	f7ff fa26 	bl	8007442 <SWAPBYTE>
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	461a      	mov	r2, r3
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	80da      	strh	r2, [r3, #6]
}
 8007ffe:	bf00      	nop
 8008000:	3710      	adds	r7, #16
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}

08008006 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008006:	b580      	push	{r7, lr}
 8008008:	b082      	sub	sp, #8
 800800a:	af00      	add	r7, sp, #0
 800800c:	6078      	str	r0, [r7, #4]
 800800e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008010:	2180      	movs	r1, #128	@ 0x80
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f000 fce2 	bl	80089dc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008018:	2100      	movs	r1, #0
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f000 fcde 	bl	80089dc <USBD_LL_StallEP>
}
 8008020:	bf00      	nop
 8008022:	3708      	adds	r7, #8
 8008024:	46bd      	mov	sp, r7
 8008026:	bd80      	pop	{r7, pc}

08008028 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b086      	sub	sp, #24
 800802c:	af00      	add	r7, sp, #0
 800802e:	60f8      	str	r0, [r7, #12]
 8008030:	60b9      	str	r1, [r7, #8]
 8008032:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008034:	2300      	movs	r3, #0
 8008036:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d042      	beq.n	80080c4 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8008042:	6938      	ldr	r0, [r7, #16]
 8008044:	f000 f842 	bl	80080cc <USBD_GetLen>
 8008048:	4603      	mov	r3, r0
 800804a:	3301      	adds	r3, #1
 800804c:	005b      	lsls	r3, r3, #1
 800804e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008052:	d808      	bhi.n	8008066 <USBD_GetString+0x3e>
 8008054:	6938      	ldr	r0, [r7, #16]
 8008056:	f000 f839 	bl	80080cc <USBD_GetLen>
 800805a:	4603      	mov	r3, r0
 800805c:	3301      	adds	r3, #1
 800805e:	b29b      	uxth	r3, r3
 8008060:	005b      	lsls	r3, r3, #1
 8008062:	b29a      	uxth	r2, r3
 8008064:	e001      	b.n	800806a <USBD_GetString+0x42>
 8008066:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800806e:	7dfb      	ldrb	r3, [r7, #23]
 8008070:	68ba      	ldr	r2, [r7, #8]
 8008072:	4413      	add	r3, r2
 8008074:	687a      	ldr	r2, [r7, #4]
 8008076:	7812      	ldrb	r2, [r2, #0]
 8008078:	701a      	strb	r2, [r3, #0]
  idx++;
 800807a:	7dfb      	ldrb	r3, [r7, #23]
 800807c:	3301      	adds	r3, #1
 800807e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008080:	7dfb      	ldrb	r3, [r7, #23]
 8008082:	68ba      	ldr	r2, [r7, #8]
 8008084:	4413      	add	r3, r2
 8008086:	2203      	movs	r2, #3
 8008088:	701a      	strb	r2, [r3, #0]
  idx++;
 800808a:	7dfb      	ldrb	r3, [r7, #23]
 800808c:	3301      	adds	r3, #1
 800808e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008090:	e013      	b.n	80080ba <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8008092:	7dfb      	ldrb	r3, [r7, #23]
 8008094:	68ba      	ldr	r2, [r7, #8]
 8008096:	4413      	add	r3, r2
 8008098:	693a      	ldr	r2, [r7, #16]
 800809a:	7812      	ldrb	r2, [r2, #0]
 800809c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	3301      	adds	r3, #1
 80080a2:	613b      	str	r3, [r7, #16]
    idx++;
 80080a4:	7dfb      	ldrb	r3, [r7, #23]
 80080a6:	3301      	adds	r3, #1
 80080a8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80080aa:	7dfb      	ldrb	r3, [r7, #23]
 80080ac:	68ba      	ldr	r2, [r7, #8]
 80080ae:	4413      	add	r3, r2
 80080b0:	2200      	movs	r2, #0
 80080b2:	701a      	strb	r2, [r3, #0]
    idx++;
 80080b4:	7dfb      	ldrb	r3, [r7, #23]
 80080b6:	3301      	adds	r3, #1
 80080b8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80080ba:	693b      	ldr	r3, [r7, #16]
 80080bc:	781b      	ldrb	r3, [r3, #0]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d1e7      	bne.n	8008092 <USBD_GetString+0x6a>
 80080c2:	e000      	b.n	80080c6 <USBD_GetString+0x9e>
    return;
 80080c4:	bf00      	nop
  }
}
 80080c6:	3718      	adds	r7, #24
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}

080080cc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80080cc:	b480      	push	{r7}
 80080ce:	b085      	sub	sp, #20
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80080d4:	2300      	movs	r3, #0
 80080d6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80080dc:	e005      	b.n	80080ea <USBD_GetLen+0x1e>
  {
    len++;
 80080de:	7bfb      	ldrb	r3, [r7, #15]
 80080e0:	3301      	adds	r3, #1
 80080e2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	3301      	adds	r3, #1
 80080e8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	781b      	ldrb	r3, [r3, #0]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d1f5      	bne.n	80080de <USBD_GetLen+0x12>
  }

  return len;
 80080f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	3714      	adds	r7, #20
 80080f8:	46bd      	mov	sp, r7
 80080fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fe:	4770      	bx	lr

08008100 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b084      	sub	sp, #16
 8008104:	af00      	add	r7, sp, #0
 8008106:	60f8      	str	r0, [r7, #12]
 8008108:	60b9      	str	r1, [r7, #8]
 800810a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	2202      	movs	r2, #2
 8008110:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	687a      	ldr	r2, [r7, #4]
 8008118:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	687a      	ldr	r2, [r7, #4]
 800811e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	68ba      	ldr	r2, [r7, #8]
 8008124:	2100      	movs	r1, #0
 8008126:	68f8      	ldr	r0, [r7, #12]
 8008128:	f000 fce1 	bl	8008aee <USBD_LL_Transmit>

  return USBD_OK;
 800812c:	2300      	movs	r3, #0
}
 800812e:	4618      	mov	r0, r3
 8008130:	3710      	adds	r7, #16
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}

08008136 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008136:	b580      	push	{r7, lr}
 8008138:	b084      	sub	sp, #16
 800813a:	af00      	add	r7, sp, #0
 800813c:	60f8      	str	r0, [r7, #12]
 800813e:	60b9      	str	r1, [r7, #8]
 8008140:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	68ba      	ldr	r2, [r7, #8]
 8008146:	2100      	movs	r1, #0
 8008148:	68f8      	ldr	r0, [r7, #12]
 800814a:	f000 fcd0 	bl	8008aee <USBD_LL_Transmit>

  return USBD_OK;
 800814e:	2300      	movs	r3, #0
}
 8008150:	4618      	mov	r0, r3
 8008152:	3710      	adds	r7, #16
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}

08008158 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b084      	sub	sp, #16
 800815c:	af00      	add	r7, sp, #0
 800815e:	60f8      	str	r0, [r7, #12]
 8008160:	60b9      	str	r1, [r7, #8]
 8008162:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	2203      	movs	r2, #3
 8008168:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	687a      	ldr	r2, [r7, #4]
 8008170:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	687a      	ldr	r2, [r7, #4]
 8008178:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	68ba      	ldr	r2, [r7, #8]
 8008180:	2100      	movs	r1, #0
 8008182:	68f8      	ldr	r0, [r7, #12]
 8008184:	f000 fcd4 	bl	8008b30 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008188:	2300      	movs	r3, #0
}
 800818a:	4618      	mov	r0, r3
 800818c:	3710      	adds	r7, #16
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}

08008192 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008192:	b580      	push	{r7, lr}
 8008194:	b084      	sub	sp, #16
 8008196:	af00      	add	r7, sp, #0
 8008198:	60f8      	str	r0, [r7, #12]
 800819a:	60b9      	str	r1, [r7, #8]
 800819c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	68ba      	ldr	r2, [r7, #8]
 80081a2:	2100      	movs	r1, #0
 80081a4:	68f8      	ldr	r0, [r7, #12]
 80081a6:	f000 fcc3 	bl	8008b30 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80081aa:	2300      	movs	r3, #0
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	3710      	adds	r7, #16
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}

080081b4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b082      	sub	sp, #8
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2204      	movs	r2, #4
 80081c0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80081c4:	2300      	movs	r3, #0
 80081c6:	2200      	movs	r2, #0
 80081c8:	2100      	movs	r1, #0
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f000 fc8f 	bl	8008aee <USBD_LL_Transmit>

  return USBD_OK;
 80081d0:	2300      	movs	r3, #0
}
 80081d2:	4618      	mov	r0, r3
 80081d4:	3708      	adds	r7, #8
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd80      	pop	{r7, pc}

080081da <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80081da:	b580      	push	{r7, lr}
 80081dc:	b082      	sub	sp, #8
 80081de:	af00      	add	r7, sp, #0
 80081e0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2205      	movs	r2, #5
 80081e6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80081ea:	2300      	movs	r3, #0
 80081ec:	2200      	movs	r2, #0
 80081ee:	2100      	movs	r1, #0
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	f000 fc9d 	bl	8008b30 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80081f6:	2300      	movs	r3, #0
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	3708      	adds	r7, #8
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bd80      	pop	{r7, pc}

08008200 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008204:	2200      	movs	r2, #0
 8008206:	4912      	ldr	r1, [pc, #72]	@ (8008250 <MX_USB_DEVICE_Init+0x50>)
 8008208:	4812      	ldr	r0, [pc, #72]	@ (8008254 <MX_USB_DEVICE_Init+0x54>)
 800820a:	f7fe fcf7 	bl	8006bfc <USBD_Init>
 800820e:	4603      	mov	r3, r0
 8008210:	2b00      	cmp	r3, #0
 8008212:	d001      	beq.n	8008218 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008214:	f7f9 f90e 	bl	8001434 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008218:	490f      	ldr	r1, [pc, #60]	@ (8008258 <MX_USB_DEVICE_Init+0x58>)
 800821a:	480e      	ldr	r0, [pc, #56]	@ (8008254 <MX_USB_DEVICE_Init+0x54>)
 800821c:	f7fe fd1e 	bl	8006c5c <USBD_RegisterClass>
 8008220:	4603      	mov	r3, r0
 8008222:	2b00      	cmp	r3, #0
 8008224:	d001      	beq.n	800822a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008226:	f7f9 f905 	bl	8001434 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800822a:	490c      	ldr	r1, [pc, #48]	@ (800825c <MX_USB_DEVICE_Init+0x5c>)
 800822c:	4809      	ldr	r0, [pc, #36]	@ (8008254 <MX_USB_DEVICE_Init+0x54>)
 800822e:	f7fe fc15 	bl	8006a5c <USBD_CDC_RegisterInterface>
 8008232:	4603      	mov	r3, r0
 8008234:	2b00      	cmp	r3, #0
 8008236:	d001      	beq.n	800823c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008238:	f7f9 f8fc 	bl	8001434 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800823c:	4805      	ldr	r0, [pc, #20]	@ (8008254 <MX_USB_DEVICE_Init+0x54>)
 800823e:	f7fe fd43 	bl	8006cc8 <USBD_Start>
 8008242:	4603      	mov	r3, r0
 8008244:	2b00      	cmp	r3, #0
 8008246:	d001      	beq.n	800824c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008248:	f7f9 f8f4 	bl	8001434 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800824c:	bf00      	nop
 800824e:	bd80      	pop	{r7, pc}
 8008250:	200000b0 	.word	0x200000b0
 8008254:	20000374 	.word	0x20000374
 8008258:	2000001c 	.word	0x2000001c
 800825c:	2000009c 	.word	0x2000009c

08008260 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008264:	2200      	movs	r2, #0
 8008266:	4905      	ldr	r1, [pc, #20]	@ (800827c <CDC_Init_FS+0x1c>)
 8008268:	4805      	ldr	r0, [pc, #20]	@ (8008280 <CDC_Init_FS+0x20>)
 800826a:	f7fe fc11 	bl	8006a90 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800826e:	4905      	ldr	r1, [pc, #20]	@ (8008284 <CDC_Init_FS+0x24>)
 8008270:	4803      	ldr	r0, [pc, #12]	@ (8008280 <CDC_Init_FS+0x20>)
 8008272:	f7fe fc2f 	bl	8006ad4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008276:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008278:	4618      	mov	r0, r3
 800827a:	bd80      	pop	{r7, pc}
 800827c:	20000e50 	.word	0x20000e50
 8008280:	20000374 	.word	0x20000374
 8008284:	20000650 	.word	0x20000650

08008288 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008288:	b480      	push	{r7}
 800828a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800828c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800828e:	4618      	mov	r0, r3
 8008290:	46bd      	mov	sp, r7
 8008292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008296:	4770      	bx	lr

08008298 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008298:	b480      	push	{r7}
 800829a:	b083      	sub	sp, #12
 800829c:	af00      	add	r7, sp, #0
 800829e:	4603      	mov	r3, r0
 80082a0:	6039      	str	r1, [r7, #0]
 80082a2:	71fb      	strb	r3, [r7, #7]
 80082a4:	4613      	mov	r3, r2
 80082a6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80082a8:	79fb      	ldrb	r3, [r7, #7]
 80082aa:	2b23      	cmp	r3, #35	@ 0x23
 80082ac:	d84a      	bhi.n	8008344 <CDC_Control_FS+0xac>
 80082ae:	a201      	add	r2, pc, #4	@ (adr r2, 80082b4 <CDC_Control_FS+0x1c>)
 80082b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082b4:	08008345 	.word	0x08008345
 80082b8:	08008345 	.word	0x08008345
 80082bc:	08008345 	.word	0x08008345
 80082c0:	08008345 	.word	0x08008345
 80082c4:	08008345 	.word	0x08008345
 80082c8:	08008345 	.word	0x08008345
 80082cc:	08008345 	.word	0x08008345
 80082d0:	08008345 	.word	0x08008345
 80082d4:	08008345 	.word	0x08008345
 80082d8:	08008345 	.word	0x08008345
 80082dc:	08008345 	.word	0x08008345
 80082e0:	08008345 	.word	0x08008345
 80082e4:	08008345 	.word	0x08008345
 80082e8:	08008345 	.word	0x08008345
 80082ec:	08008345 	.word	0x08008345
 80082f0:	08008345 	.word	0x08008345
 80082f4:	08008345 	.word	0x08008345
 80082f8:	08008345 	.word	0x08008345
 80082fc:	08008345 	.word	0x08008345
 8008300:	08008345 	.word	0x08008345
 8008304:	08008345 	.word	0x08008345
 8008308:	08008345 	.word	0x08008345
 800830c:	08008345 	.word	0x08008345
 8008310:	08008345 	.word	0x08008345
 8008314:	08008345 	.word	0x08008345
 8008318:	08008345 	.word	0x08008345
 800831c:	08008345 	.word	0x08008345
 8008320:	08008345 	.word	0x08008345
 8008324:	08008345 	.word	0x08008345
 8008328:	08008345 	.word	0x08008345
 800832c:	08008345 	.word	0x08008345
 8008330:	08008345 	.word	0x08008345
 8008334:	08008345 	.word	0x08008345
 8008338:	08008345 	.word	0x08008345
 800833c:	08008345 	.word	0x08008345
 8008340:	08008345 	.word	0x08008345
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008344:	bf00      	nop
  }

  return (USBD_OK);
 8008346:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008348:	4618      	mov	r0, r3
 800834a:	370c      	adds	r7, #12
 800834c:	46bd      	mov	sp, r7
 800834e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008352:	4770      	bx	lr

08008354 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b082      	sub	sp, #8
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
 800835c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800835e:	6879      	ldr	r1, [r7, #4]
 8008360:	4805      	ldr	r0, [pc, #20]	@ (8008378 <CDC_Receive_FS+0x24>)
 8008362:	f7fe fbb7 	bl	8006ad4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008366:	4804      	ldr	r0, [pc, #16]	@ (8008378 <CDC_Receive_FS+0x24>)
 8008368:	f7fe fc12 	bl	8006b90 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800836c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800836e:	4618      	mov	r0, r3
 8008370:	3708      	adds	r7, #8
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}
 8008376:	bf00      	nop
 8008378:	20000374 	.word	0x20000374

0800837c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b084      	sub	sp, #16
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
 8008384:	460b      	mov	r3, r1
 8008386:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008388:	2300      	movs	r3, #0
 800838a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800838c:	4b0d      	ldr	r3, [pc, #52]	@ (80083c4 <CDC_Transmit_FS+0x48>)
 800838e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008392:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800839a:	2b00      	cmp	r3, #0
 800839c:	d001      	beq.n	80083a2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800839e:	2301      	movs	r3, #1
 80083a0:	e00b      	b.n	80083ba <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80083a2:	887b      	ldrh	r3, [r7, #2]
 80083a4:	461a      	mov	r2, r3
 80083a6:	6879      	ldr	r1, [r7, #4]
 80083a8:	4806      	ldr	r0, [pc, #24]	@ (80083c4 <CDC_Transmit_FS+0x48>)
 80083aa:	f7fe fb71 	bl	8006a90 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80083ae:	4805      	ldr	r0, [pc, #20]	@ (80083c4 <CDC_Transmit_FS+0x48>)
 80083b0:	f7fe fbae 	bl	8006b10 <USBD_CDC_TransmitPacket>
 80083b4:	4603      	mov	r3, r0
 80083b6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80083b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80083ba:	4618      	mov	r0, r3
 80083bc:	3710      	adds	r7, #16
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd80      	pop	{r7, pc}
 80083c2:	bf00      	nop
 80083c4:	20000374 	.word	0x20000374

080083c8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80083c8:	b480      	push	{r7}
 80083ca:	b087      	sub	sp, #28
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	60f8      	str	r0, [r7, #12]
 80083d0:	60b9      	str	r1, [r7, #8]
 80083d2:	4613      	mov	r3, r2
 80083d4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80083d6:	2300      	movs	r3, #0
 80083d8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80083da:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80083de:	4618      	mov	r0, r3
 80083e0:	371c      	adds	r7, #28
 80083e2:	46bd      	mov	sp, r7
 80083e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e8:	4770      	bx	lr
	...

080083ec <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083ec:	b480      	push	{r7}
 80083ee:	b083      	sub	sp, #12
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	4603      	mov	r3, r0
 80083f4:	6039      	str	r1, [r7, #0]
 80083f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	2212      	movs	r2, #18
 80083fc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80083fe:	4b03      	ldr	r3, [pc, #12]	@ (800840c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008400:	4618      	mov	r0, r3
 8008402:	370c      	adds	r7, #12
 8008404:	46bd      	mov	sp, r7
 8008406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840a:	4770      	bx	lr
 800840c:	200000cc 	.word	0x200000cc

08008410 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008410:	b480      	push	{r7}
 8008412:	b083      	sub	sp, #12
 8008414:	af00      	add	r7, sp, #0
 8008416:	4603      	mov	r3, r0
 8008418:	6039      	str	r1, [r7, #0]
 800841a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	2204      	movs	r2, #4
 8008420:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008422:	4b03      	ldr	r3, [pc, #12]	@ (8008430 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008424:	4618      	mov	r0, r3
 8008426:	370c      	adds	r7, #12
 8008428:	46bd      	mov	sp, r7
 800842a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842e:	4770      	bx	lr
 8008430:	200000e0 	.word	0x200000e0

08008434 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b082      	sub	sp, #8
 8008438:	af00      	add	r7, sp, #0
 800843a:	4603      	mov	r3, r0
 800843c:	6039      	str	r1, [r7, #0]
 800843e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008440:	79fb      	ldrb	r3, [r7, #7]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d105      	bne.n	8008452 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008446:	683a      	ldr	r2, [r7, #0]
 8008448:	4907      	ldr	r1, [pc, #28]	@ (8008468 <USBD_FS_ProductStrDescriptor+0x34>)
 800844a:	4808      	ldr	r0, [pc, #32]	@ (800846c <USBD_FS_ProductStrDescriptor+0x38>)
 800844c:	f7ff fdec 	bl	8008028 <USBD_GetString>
 8008450:	e004      	b.n	800845c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008452:	683a      	ldr	r2, [r7, #0]
 8008454:	4904      	ldr	r1, [pc, #16]	@ (8008468 <USBD_FS_ProductStrDescriptor+0x34>)
 8008456:	4805      	ldr	r0, [pc, #20]	@ (800846c <USBD_FS_ProductStrDescriptor+0x38>)
 8008458:	f7ff fde6 	bl	8008028 <USBD_GetString>
  }
  return USBD_StrDesc;
 800845c:	4b02      	ldr	r3, [pc, #8]	@ (8008468 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800845e:	4618      	mov	r0, r3
 8008460:	3708      	adds	r7, #8
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}
 8008466:	bf00      	nop
 8008468:	20001650 	.word	0x20001650
 800846c:	0800c0c8 	.word	0x0800c0c8

08008470 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b082      	sub	sp, #8
 8008474:	af00      	add	r7, sp, #0
 8008476:	4603      	mov	r3, r0
 8008478:	6039      	str	r1, [r7, #0]
 800847a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800847c:	683a      	ldr	r2, [r7, #0]
 800847e:	4904      	ldr	r1, [pc, #16]	@ (8008490 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008480:	4804      	ldr	r0, [pc, #16]	@ (8008494 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008482:	f7ff fdd1 	bl	8008028 <USBD_GetString>
  return USBD_StrDesc;
 8008486:	4b02      	ldr	r3, [pc, #8]	@ (8008490 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008488:	4618      	mov	r0, r3
 800848a:	3708      	adds	r7, #8
 800848c:	46bd      	mov	sp, r7
 800848e:	bd80      	pop	{r7, pc}
 8008490:	20001650 	.word	0x20001650
 8008494:	0800c0e0 	.word	0x0800c0e0

08008498 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b082      	sub	sp, #8
 800849c:	af00      	add	r7, sp, #0
 800849e:	4603      	mov	r3, r0
 80084a0:	6039      	str	r1, [r7, #0]
 80084a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	221a      	movs	r2, #26
 80084a8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80084aa:	f000 f843 	bl	8008534 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80084ae:	4b02      	ldr	r3, [pc, #8]	@ (80084b8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80084b0:	4618      	mov	r0, r3
 80084b2:	3708      	adds	r7, #8
 80084b4:	46bd      	mov	sp, r7
 80084b6:	bd80      	pop	{r7, pc}
 80084b8:	200000e4 	.word	0x200000e4

080084bc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b082      	sub	sp, #8
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	4603      	mov	r3, r0
 80084c4:	6039      	str	r1, [r7, #0]
 80084c6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80084c8:	79fb      	ldrb	r3, [r7, #7]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d105      	bne.n	80084da <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80084ce:	683a      	ldr	r2, [r7, #0]
 80084d0:	4907      	ldr	r1, [pc, #28]	@ (80084f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80084d2:	4808      	ldr	r0, [pc, #32]	@ (80084f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80084d4:	f7ff fda8 	bl	8008028 <USBD_GetString>
 80084d8:	e004      	b.n	80084e4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80084da:	683a      	ldr	r2, [r7, #0]
 80084dc:	4904      	ldr	r1, [pc, #16]	@ (80084f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80084de:	4805      	ldr	r0, [pc, #20]	@ (80084f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80084e0:	f7ff fda2 	bl	8008028 <USBD_GetString>
  }
  return USBD_StrDesc;
 80084e4:	4b02      	ldr	r3, [pc, #8]	@ (80084f0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80084e6:	4618      	mov	r0, r3
 80084e8:	3708      	adds	r7, #8
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bd80      	pop	{r7, pc}
 80084ee:	bf00      	nop
 80084f0:	20001650 	.word	0x20001650
 80084f4:	0800c0f4 	.word	0x0800c0f4

080084f8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b082      	sub	sp, #8
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	4603      	mov	r3, r0
 8008500:	6039      	str	r1, [r7, #0]
 8008502:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008504:	79fb      	ldrb	r3, [r7, #7]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d105      	bne.n	8008516 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800850a:	683a      	ldr	r2, [r7, #0]
 800850c:	4907      	ldr	r1, [pc, #28]	@ (800852c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800850e:	4808      	ldr	r0, [pc, #32]	@ (8008530 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008510:	f7ff fd8a 	bl	8008028 <USBD_GetString>
 8008514:	e004      	b.n	8008520 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008516:	683a      	ldr	r2, [r7, #0]
 8008518:	4904      	ldr	r1, [pc, #16]	@ (800852c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800851a:	4805      	ldr	r0, [pc, #20]	@ (8008530 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800851c:	f7ff fd84 	bl	8008028 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008520:	4b02      	ldr	r3, [pc, #8]	@ (800852c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008522:	4618      	mov	r0, r3
 8008524:	3708      	adds	r7, #8
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}
 800852a:	bf00      	nop
 800852c:	20001650 	.word	0x20001650
 8008530:	0800c100 	.word	0x0800c100

08008534 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b084      	sub	sp, #16
 8008538:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800853a:	4b0f      	ldr	r3, [pc, #60]	@ (8008578 <Get_SerialNum+0x44>)
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008540:	4b0e      	ldr	r3, [pc, #56]	@ (800857c <Get_SerialNum+0x48>)
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008546:	4b0e      	ldr	r3, [pc, #56]	@ (8008580 <Get_SerialNum+0x4c>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800854c:	68fa      	ldr	r2, [r7, #12]
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	4413      	add	r3, r2
 8008552:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d009      	beq.n	800856e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800855a:	2208      	movs	r2, #8
 800855c:	4909      	ldr	r1, [pc, #36]	@ (8008584 <Get_SerialNum+0x50>)
 800855e:	68f8      	ldr	r0, [r7, #12]
 8008560:	f000 f814 	bl	800858c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008564:	2204      	movs	r2, #4
 8008566:	4908      	ldr	r1, [pc, #32]	@ (8008588 <Get_SerialNum+0x54>)
 8008568:	68b8      	ldr	r0, [r7, #8]
 800856a:	f000 f80f 	bl	800858c <IntToUnicode>
  }
}
 800856e:	bf00      	nop
 8008570:	3710      	adds	r7, #16
 8008572:	46bd      	mov	sp, r7
 8008574:	bd80      	pop	{r7, pc}
 8008576:	bf00      	nop
 8008578:	1fff7a10 	.word	0x1fff7a10
 800857c:	1fff7a14 	.word	0x1fff7a14
 8008580:	1fff7a18 	.word	0x1fff7a18
 8008584:	200000e6 	.word	0x200000e6
 8008588:	200000f6 	.word	0x200000f6

0800858c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800858c:	b480      	push	{r7}
 800858e:	b087      	sub	sp, #28
 8008590:	af00      	add	r7, sp, #0
 8008592:	60f8      	str	r0, [r7, #12]
 8008594:	60b9      	str	r1, [r7, #8]
 8008596:	4613      	mov	r3, r2
 8008598:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800859a:	2300      	movs	r3, #0
 800859c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800859e:	2300      	movs	r3, #0
 80085a0:	75fb      	strb	r3, [r7, #23]
 80085a2:	e027      	b.n	80085f4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	0f1b      	lsrs	r3, r3, #28
 80085a8:	2b09      	cmp	r3, #9
 80085aa:	d80b      	bhi.n	80085c4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	0f1b      	lsrs	r3, r3, #28
 80085b0:	b2da      	uxtb	r2, r3
 80085b2:	7dfb      	ldrb	r3, [r7, #23]
 80085b4:	005b      	lsls	r3, r3, #1
 80085b6:	4619      	mov	r1, r3
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	440b      	add	r3, r1
 80085bc:	3230      	adds	r2, #48	@ 0x30
 80085be:	b2d2      	uxtb	r2, r2
 80085c0:	701a      	strb	r2, [r3, #0]
 80085c2:	e00a      	b.n	80085da <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	0f1b      	lsrs	r3, r3, #28
 80085c8:	b2da      	uxtb	r2, r3
 80085ca:	7dfb      	ldrb	r3, [r7, #23]
 80085cc:	005b      	lsls	r3, r3, #1
 80085ce:	4619      	mov	r1, r3
 80085d0:	68bb      	ldr	r3, [r7, #8]
 80085d2:	440b      	add	r3, r1
 80085d4:	3237      	adds	r2, #55	@ 0x37
 80085d6:	b2d2      	uxtb	r2, r2
 80085d8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	011b      	lsls	r3, r3, #4
 80085de:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80085e0:	7dfb      	ldrb	r3, [r7, #23]
 80085e2:	005b      	lsls	r3, r3, #1
 80085e4:	3301      	adds	r3, #1
 80085e6:	68ba      	ldr	r2, [r7, #8]
 80085e8:	4413      	add	r3, r2
 80085ea:	2200      	movs	r2, #0
 80085ec:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80085ee:	7dfb      	ldrb	r3, [r7, #23]
 80085f0:	3301      	adds	r3, #1
 80085f2:	75fb      	strb	r3, [r7, #23]
 80085f4:	7dfa      	ldrb	r2, [r7, #23]
 80085f6:	79fb      	ldrb	r3, [r7, #7]
 80085f8:	429a      	cmp	r2, r3
 80085fa:	d3d3      	bcc.n	80085a4 <IntToUnicode+0x18>
  }
}
 80085fc:	bf00      	nop
 80085fe:	bf00      	nop
 8008600:	371c      	adds	r7, #28
 8008602:	46bd      	mov	sp, r7
 8008604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008608:	4770      	bx	lr
	...

0800860c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b08a      	sub	sp, #40	@ 0x28
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008614:	f107 0314 	add.w	r3, r7, #20
 8008618:	2200      	movs	r2, #0
 800861a:	601a      	str	r2, [r3, #0]
 800861c:	605a      	str	r2, [r3, #4]
 800861e:	609a      	str	r2, [r3, #8]
 8008620:	60da      	str	r2, [r3, #12]
 8008622:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800862c:	d13a      	bne.n	80086a4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800862e:	2300      	movs	r3, #0
 8008630:	613b      	str	r3, [r7, #16]
 8008632:	4b1e      	ldr	r3, [pc, #120]	@ (80086ac <HAL_PCD_MspInit+0xa0>)
 8008634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008636:	4a1d      	ldr	r2, [pc, #116]	@ (80086ac <HAL_PCD_MspInit+0xa0>)
 8008638:	f043 0301 	orr.w	r3, r3, #1
 800863c:	6313      	str	r3, [r2, #48]	@ 0x30
 800863e:	4b1b      	ldr	r3, [pc, #108]	@ (80086ac <HAL_PCD_MspInit+0xa0>)
 8008640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008642:	f003 0301 	and.w	r3, r3, #1
 8008646:	613b      	str	r3, [r7, #16]
 8008648:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800864a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800864e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008650:	2302      	movs	r3, #2
 8008652:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008654:	2300      	movs	r3, #0
 8008656:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008658:	2303      	movs	r3, #3
 800865a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800865c:	230a      	movs	r3, #10
 800865e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008660:	f107 0314 	add.w	r3, r7, #20
 8008664:	4619      	mov	r1, r3
 8008666:	4812      	ldr	r0, [pc, #72]	@ (80086b0 <HAL_PCD_MspInit+0xa4>)
 8008668:	f7f9 fa40 	bl	8001aec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800866c:	4b0f      	ldr	r3, [pc, #60]	@ (80086ac <HAL_PCD_MspInit+0xa0>)
 800866e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008670:	4a0e      	ldr	r2, [pc, #56]	@ (80086ac <HAL_PCD_MspInit+0xa0>)
 8008672:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008676:	6353      	str	r3, [r2, #52]	@ 0x34
 8008678:	2300      	movs	r3, #0
 800867a:	60fb      	str	r3, [r7, #12]
 800867c:	4b0b      	ldr	r3, [pc, #44]	@ (80086ac <HAL_PCD_MspInit+0xa0>)
 800867e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008680:	4a0a      	ldr	r2, [pc, #40]	@ (80086ac <HAL_PCD_MspInit+0xa0>)
 8008682:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008686:	6453      	str	r3, [r2, #68]	@ 0x44
 8008688:	4b08      	ldr	r3, [pc, #32]	@ (80086ac <HAL_PCD_MspInit+0xa0>)
 800868a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800868c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008690:	60fb      	str	r3, [r7, #12]
 8008692:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008694:	2200      	movs	r2, #0
 8008696:	2100      	movs	r1, #0
 8008698:	2043      	movs	r0, #67	@ 0x43
 800869a:	f7f9 f9f0 	bl	8001a7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800869e:	2043      	movs	r0, #67	@ 0x43
 80086a0:	f7f9 fa09 	bl	8001ab6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80086a4:	bf00      	nop
 80086a6:	3728      	adds	r7, #40	@ 0x28
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}
 80086ac:	40023800 	.word	0x40023800
 80086b0:	40020000 	.word	0x40020000

080086b4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b082      	sub	sp, #8
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80086c8:	4619      	mov	r1, r3
 80086ca:	4610      	mov	r0, r2
 80086cc:	f7fe fb49 	bl	8006d62 <USBD_LL_SetupStage>
}
 80086d0:	bf00      	nop
 80086d2:	3708      	adds	r7, #8
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bd80      	pop	{r7, pc}

080086d8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b082      	sub	sp, #8
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
 80086e0:	460b      	mov	r3, r1
 80086e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80086ea:	78fa      	ldrb	r2, [r7, #3]
 80086ec:	6879      	ldr	r1, [r7, #4]
 80086ee:	4613      	mov	r3, r2
 80086f0:	00db      	lsls	r3, r3, #3
 80086f2:	4413      	add	r3, r2
 80086f4:	009b      	lsls	r3, r3, #2
 80086f6:	440b      	add	r3, r1
 80086f8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80086fc:	681a      	ldr	r2, [r3, #0]
 80086fe:	78fb      	ldrb	r3, [r7, #3]
 8008700:	4619      	mov	r1, r3
 8008702:	f7fe fb83 	bl	8006e0c <USBD_LL_DataOutStage>
}
 8008706:	bf00      	nop
 8008708:	3708      	adds	r7, #8
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}

0800870e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800870e:	b580      	push	{r7, lr}
 8008710:	b082      	sub	sp, #8
 8008712:	af00      	add	r7, sp, #0
 8008714:	6078      	str	r0, [r7, #4]
 8008716:	460b      	mov	r3, r1
 8008718:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008720:	78fa      	ldrb	r2, [r7, #3]
 8008722:	6879      	ldr	r1, [r7, #4]
 8008724:	4613      	mov	r3, r2
 8008726:	00db      	lsls	r3, r3, #3
 8008728:	4413      	add	r3, r2
 800872a:	009b      	lsls	r3, r3, #2
 800872c:	440b      	add	r3, r1
 800872e:	3320      	adds	r3, #32
 8008730:	681a      	ldr	r2, [r3, #0]
 8008732:	78fb      	ldrb	r3, [r7, #3]
 8008734:	4619      	mov	r1, r3
 8008736:	f7fe fc1c 	bl	8006f72 <USBD_LL_DataInStage>
}
 800873a:	bf00      	nop
 800873c:	3708      	adds	r7, #8
 800873e:	46bd      	mov	sp, r7
 8008740:	bd80      	pop	{r7, pc}

08008742 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008742:	b580      	push	{r7, lr}
 8008744:	b082      	sub	sp, #8
 8008746:	af00      	add	r7, sp, #0
 8008748:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008750:	4618      	mov	r0, r3
 8008752:	f7fe fd56 	bl	8007202 <USBD_LL_SOF>
}
 8008756:	bf00      	nop
 8008758:	3708      	adds	r7, #8
 800875a:	46bd      	mov	sp, r7
 800875c:	bd80      	pop	{r7, pc}

0800875e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800875e:	b580      	push	{r7, lr}
 8008760:	b084      	sub	sp, #16
 8008762:	af00      	add	r7, sp, #0
 8008764:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008766:	2301      	movs	r3, #1
 8008768:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	79db      	ldrb	r3, [r3, #7]
 800876e:	2b02      	cmp	r3, #2
 8008770:	d001      	beq.n	8008776 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008772:	f7f8 fe5f 	bl	8001434 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800877c:	7bfa      	ldrb	r2, [r7, #15]
 800877e:	4611      	mov	r1, r2
 8008780:	4618      	mov	r0, r3
 8008782:	f7fe fcfa 	bl	800717a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800878c:	4618      	mov	r0, r3
 800878e:	f7fe fca2 	bl	80070d6 <USBD_LL_Reset>
}
 8008792:	bf00      	nop
 8008794:	3710      	adds	r7, #16
 8008796:	46bd      	mov	sp, r7
 8008798:	bd80      	pop	{r7, pc}
	...

0800879c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b082      	sub	sp, #8
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80087aa:	4618      	mov	r0, r3
 80087ac:	f7fe fcf5 	bl	800719a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	687a      	ldr	r2, [r7, #4]
 80087bc:	6812      	ldr	r2, [r2, #0]
 80087be:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80087c2:	f043 0301 	orr.w	r3, r3, #1
 80087c6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	7adb      	ldrb	r3, [r3, #11]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d005      	beq.n	80087dc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80087d0:	4b04      	ldr	r3, [pc, #16]	@ (80087e4 <HAL_PCD_SuspendCallback+0x48>)
 80087d2:	691b      	ldr	r3, [r3, #16]
 80087d4:	4a03      	ldr	r2, [pc, #12]	@ (80087e4 <HAL_PCD_SuspendCallback+0x48>)
 80087d6:	f043 0306 	orr.w	r3, r3, #6
 80087da:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80087dc:	bf00      	nop
 80087de:	3708      	adds	r7, #8
 80087e0:	46bd      	mov	sp, r7
 80087e2:	bd80      	pop	{r7, pc}
 80087e4:	e000ed00 	.word	0xe000ed00

080087e8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b082      	sub	sp, #8
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80087f6:	4618      	mov	r0, r3
 80087f8:	f7fe fceb 	bl	80071d2 <USBD_LL_Resume>
}
 80087fc:	bf00      	nop
 80087fe:	3708      	adds	r7, #8
 8008800:	46bd      	mov	sp, r7
 8008802:	bd80      	pop	{r7, pc}

08008804 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b082      	sub	sp, #8
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
 800880c:	460b      	mov	r3, r1
 800880e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008816:	78fa      	ldrb	r2, [r7, #3]
 8008818:	4611      	mov	r1, r2
 800881a:	4618      	mov	r0, r3
 800881c:	f7fe fd43 	bl	80072a6 <USBD_LL_IsoOUTIncomplete>
}
 8008820:	bf00      	nop
 8008822:	3708      	adds	r7, #8
 8008824:	46bd      	mov	sp, r7
 8008826:	bd80      	pop	{r7, pc}

08008828 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b082      	sub	sp, #8
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
 8008830:	460b      	mov	r3, r1
 8008832:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800883a:	78fa      	ldrb	r2, [r7, #3]
 800883c:	4611      	mov	r1, r2
 800883e:	4618      	mov	r0, r3
 8008840:	f7fe fcff 	bl	8007242 <USBD_LL_IsoINIncomplete>
}
 8008844:	bf00      	nop
 8008846:	3708      	adds	r7, #8
 8008848:	46bd      	mov	sp, r7
 800884a:	bd80      	pop	{r7, pc}

0800884c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b082      	sub	sp, #8
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800885a:	4618      	mov	r0, r3
 800885c:	f7fe fd55 	bl	800730a <USBD_LL_DevConnected>
}
 8008860:	bf00      	nop
 8008862:	3708      	adds	r7, #8
 8008864:	46bd      	mov	sp, r7
 8008866:	bd80      	pop	{r7, pc}

08008868 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b082      	sub	sp, #8
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008876:	4618      	mov	r0, r3
 8008878:	f7fe fd52 	bl	8007320 <USBD_LL_DevDisconnected>
}
 800887c:	bf00      	nop
 800887e:	3708      	adds	r7, #8
 8008880:	46bd      	mov	sp, r7
 8008882:	bd80      	pop	{r7, pc}

08008884 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b082      	sub	sp, #8
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	781b      	ldrb	r3, [r3, #0]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d13c      	bne.n	800890e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008894:	4a20      	ldr	r2, [pc, #128]	@ (8008918 <USBD_LL_Init+0x94>)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	4a1e      	ldr	r2, [pc, #120]	@ (8008918 <USBD_LL_Init+0x94>)
 80088a0:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80088a4:	4b1c      	ldr	r3, [pc, #112]	@ (8008918 <USBD_LL_Init+0x94>)
 80088a6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80088aa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80088ac:	4b1a      	ldr	r3, [pc, #104]	@ (8008918 <USBD_LL_Init+0x94>)
 80088ae:	2204      	movs	r2, #4
 80088b0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80088b2:	4b19      	ldr	r3, [pc, #100]	@ (8008918 <USBD_LL_Init+0x94>)
 80088b4:	2202      	movs	r2, #2
 80088b6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80088b8:	4b17      	ldr	r3, [pc, #92]	@ (8008918 <USBD_LL_Init+0x94>)
 80088ba:	2200      	movs	r2, #0
 80088bc:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80088be:	4b16      	ldr	r3, [pc, #88]	@ (8008918 <USBD_LL_Init+0x94>)
 80088c0:	2202      	movs	r2, #2
 80088c2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80088c4:	4b14      	ldr	r3, [pc, #80]	@ (8008918 <USBD_LL_Init+0x94>)
 80088c6:	2200      	movs	r2, #0
 80088c8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80088ca:	4b13      	ldr	r3, [pc, #76]	@ (8008918 <USBD_LL_Init+0x94>)
 80088cc:	2200      	movs	r2, #0
 80088ce:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80088d0:	4b11      	ldr	r3, [pc, #68]	@ (8008918 <USBD_LL_Init+0x94>)
 80088d2:	2200      	movs	r2, #0
 80088d4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80088d6:	4b10      	ldr	r3, [pc, #64]	@ (8008918 <USBD_LL_Init+0x94>)
 80088d8:	2200      	movs	r2, #0
 80088da:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80088dc:	4b0e      	ldr	r3, [pc, #56]	@ (8008918 <USBD_LL_Init+0x94>)
 80088de:	2200      	movs	r2, #0
 80088e0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80088e2:	480d      	ldr	r0, [pc, #52]	@ (8008918 <USBD_LL_Init+0x94>)
 80088e4:	f7fa fab4 	bl	8002e50 <HAL_PCD_Init>
 80088e8:	4603      	mov	r3, r0
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d001      	beq.n	80088f2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80088ee:	f7f8 fda1 	bl	8001434 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80088f2:	2180      	movs	r1, #128	@ 0x80
 80088f4:	4808      	ldr	r0, [pc, #32]	@ (8008918 <USBD_LL_Init+0x94>)
 80088f6:	f7fb fce0 	bl	80042ba <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80088fa:	2240      	movs	r2, #64	@ 0x40
 80088fc:	2100      	movs	r1, #0
 80088fe:	4806      	ldr	r0, [pc, #24]	@ (8008918 <USBD_LL_Init+0x94>)
 8008900:	f7fb fc94 	bl	800422c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008904:	2280      	movs	r2, #128	@ 0x80
 8008906:	2101      	movs	r1, #1
 8008908:	4803      	ldr	r0, [pc, #12]	@ (8008918 <USBD_LL_Init+0x94>)
 800890a:	f7fb fc8f 	bl	800422c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800890e:	2300      	movs	r3, #0
}
 8008910:	4618      	mov	r0, r3
 8008912:	3708      	adds	r7, #8
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}
 8008918:	20001850 	.word	0x20001850

0800891c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b084      	sub	sp, #16
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008924:	2300      	movs	r3, #0
 8008926:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008928:	2300      	movs	r3, #0
 800892a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008932:	4618      	mov	r0, r3
 8008934:	f7fa fb9b 	bl	800306e <HAL_PCD_Start>
 8008938:	4603      	mov	r3, r0
 800893a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800893c:	7bfb      	ldrb	r3, [r7, #15]
 800893e:	4618      	mov	r0, r3
 8008940:	f000 f942 	bl	8008bc8 <USBD_Get_USB_Status>
 8008944:	4603      	mov	r3, r0
 8008946:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008948:	7bbb      	ldrb	r3, [r7, #14]
}
 800894a:	4618      	mov	r0, r3
 800894c:	3710      	adds	r7, #16
 800894e:	46bd      	mov	sp, r7
 8008950:	bd80      	pop	{r7, pc}

08008952 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008952:	b580      	push	{r7, lr}
 8008954:	b084      	sub	sp, #16
 8008956:	af00      	add	r7, sp, #0
 8008958:	6078      	str	r0, [r7, #4]
 800895a:	4608      	mov	r0, r1
 800895c:	4611      	mov	r1, r2
 800895e:	461a      	mov	r2, r3
 8008960:	4603      	mov	r3, r0
 8008962:	70fb      	strb	r3, [r7, #3]
 8008964:	460b      	mov	r3, r1
 8008966:	70bb      	strb	r3, [r7, #2]
 8008968:	4613      	mov	r3, r2
 800896a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800896c:	2300      	movs	r3, #0
 800896e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008970:	2300      	movs	r3, #0
 8008972:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800897a:	78bb      	ldrb	r3, [r7, #2]
 800897c:	883a      	ldrh	r2, [r7, #0]
 800897e:	78f9      	ldrb	r1, [r7, #3]
 8008980:	f7fb f86f 	bl	8003a62 <HAL_PCD_EP_Open>
 8008984:	4603      	mov	r3, r0
 8008986:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008988:	7bfb      	ldrb	r3, [r7, #15]
 800898a:	4618      	mov	r0, r3
 800898c:	f000 f91c 	bl	8008bc8 <USBD_Get_USB_Status>
 8008990:	4603      	mov	r3, r0
 8008992:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008994:	7bbb      	ldrb	r3, [r7, #14]
}
 8008996:	4618      	mov	r0, r3
 8008998:	3710      	adds	r7, #16
 800899a:	46bd      	mov	sp, r7
 800899c:	bd80      	pop	{r7, pc}

0800899e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800899e:	b580      	push	{r7, lr}
 80089a0:	b084      	sub	sp, #16
 80089a2:	af00      	add	r7, sp, #0
 80089a4:	6078      	str	r0, [r7, #4]
 80089a6:	460b      	mov	r3, r1
 80089a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089aa:	2300      	movs	r3, #0
 80089ac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089ae:	2300      	movs	r3, #0
 80089b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80089b8:	78fa      	ldrb	r2, [r7, #3]
 80089ba:	4611      	mov	r1, r2
 80089bc:	4618      	mov	r0, r3
 80089be:	f7fb f8ba 	bl	8003b36 <HAL_PCD_EP_Close>
 80089c2:	4603      	mov	r3, r0
 80089c4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089c6:	7bfb      	ldrb	r3, [r7, #15]
 80089c8:	4618      	mov	r0, r3
 80089ca:	f000 f8fd 	bl	8008bc8 <USBD_Get_USB_Status>
 80089ce:	4603      	mov	r3, r0
 80089d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80089d4:	4618      	mov	r0, r3
 80089d6:	3710      	adds	r7, #16
 80089d8:	46bd      	mov	sp, r7
 80089da:	bd80      	pop	{r7, pc}

080089dc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b084      	sub	sp, #16
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
 80089e4:	460b      	mov	r3, r1
 80089e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089e8:	2300      	movs	r3, #0
 80089ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089ec:	2300      	movs	r3, #0
 80089ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80089f6:	78fa      	ldrb	r2, [r7, #3]
 80089f8:	4611      	mov	r1, r2
 80089fa:	4618      	mov	r0, r3
 80089fc:	f7fb f972 	bl	8003ce4 <HAL_PCD_EP_SetStall>
 8008a00:	4603      	mov	r3, r0
 8008a02:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a04:	7bfb      	ldrb	r3, [r7, #15]
 8008a06:	4618      	mov	r0, r3
 8008a08:	f000 f8de 	bl	8008bc8 <USBD_Get_USB_Status>
 8008a0c:	4603      	mov	r3, r0
 8008a0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a10:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a12:	4618      	mov	r0, r3
 8008a14:	3710      	adds	r7, #16
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bd80      	pop	{r7, pc}

08008a1a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a1a:	b580      	push	{r7, lr}
 8008a1c:	b084      	sub	sp, #16
 8008a1e:	af00      	add	r7, sp, #0
 8008a20:	6078      	str	r0, [r7, #4]
 8008a22:	460b      	mov	r3, r1
 8008a24:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a26:	2300      	movs	r3, #0
 8008a28:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008a34:	78fa      	ldrb	r2, [r7, #3]
 8008a36:	4611      	mov	r1, r2
 8008a38:	4618      	mov	r0, r3
 8008a3a:	f7fb f9b6 	bl	8003daa <HAL_PCD_EP_ClrStall>
 8008a3e:	4603      	mov	r3, r0
 8008a40:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a42:	7bfb      	ldrb	r3, [r7, #15]
 8008a44:	4618      	mov	r0, r3
 8008a46:	f000 f8bf 	bl	8008bc8 <USBD_Get_USB_Status>
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a4e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a50:	4618      	mov	r0, r3
 8008a52:	3710      	adds	r7, #16
 8008a54:	46bd      	mov	sp, r7
 8008a56:	bd80      	pop	{r7, pc}

08008a58 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a58:	b480      	push	{r7}
 8008a5a:	b085      	sub	sp, #20
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
 8008a60:	460b      	mov	r3, r1
 8008a62:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008a6a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008a6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	da0b      	bge.n	8008a8c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008a74:	78fb      	ldrb	r3, [r7, #3]
 8008a76:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008a7a:	68f9      	ldr	r1, [r7, #12]
 8008a7c:	4613      	mov	r3, r2
 8008a7e:	00db      	lsls	r3, r3, #3
 8008a80:	4413      	add	r3, r2
 8008a82:	009b      	lsls	r3, r3, #2
 8008a84:	440b      	add	r3, r1
 8008a86:	3316      	adds	r3, #22
 8008a88:	781b      	ldrb	r3, [r3, #0]
 8008a8a:	e00b      	b.n	8008aa4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008a8c:	78fb      	ldrb	r3, [r7, #3]
 8008a8e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008a92:	68f9      	ldr	r1, [r7, #12]
 8008a94:	4613      	mov	r3, r2
 8008a96:	00db      	lsls	r3, r3, #3
 8008a98:	4413      	add	r3, r2
 8008a9a:	009b      	lsls	r3, r3, #2
 8008a9c:	440b      	add	r3, r1
 8008a9e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8008aa2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	3714      	adds	r7, #20
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aae:	4770      	bx	lr

08008ab0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b084      	sub	sp, #16
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
 8008ab8:	460b      	mov	r3, r1
 8008aba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008abc:	2300      	movs	r3, #0
 8008abe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008aca:	78fa      	ldrb	r2, [r7, #3]
 8008acc:	4611      	mov	r1, r2
 8008ace:	4618      	mov	r0, r3
 8008ad0:	f7fa ffa3 	bl	8003a1a <HAL_PCD_SetAddress>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ad8:	7bfb      	ldrb	r3, [r7, #15]
 8008ada:	4618      	mov	r0, r3
 8008adc:	f000 f874 	bl	8008bc8 <USBD_Get_USB_Status>
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ae4:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	3710      	adds	r7, #16
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bd80      	pop	{r7, pc}

08008aee <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008aee:	b580      	push	{r7, lr}
 8008af0:	b086      	sub	sp, #24
 8008af2:	af00      	add	r7, sp, #0
 8008af4:	60f8      	str	r0, [r7, #12]
 8008af6:	607a      	str	r2, [r7, #4]
 8008af8:	603b      	str	r3, [r7, #0]
 8008afa:	460b      	mov	r3, r1
 8008afc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008afe:	2300      	movs	r3, #0
 8008b00:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b02:	2300      	movs	r3, #0
 8008b04:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008b0c:	7af9      	ldrb	r1, [r7, #11]
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	687a      	ldr	r2, [r7, #4]
 8008b12:	f7fb f8ad 	bl	8003c70 <HAL_PCD_EP_Transmit>
 8008b16:	4603      	mov	r3, r0
 8008b18:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b1a:	7dfb      	ldrb	r3, [r7, #23]
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	f000 f853 	bl	8008bc8 <USBD_Get_USB_Status>
 8008b22:	4603      	mov	r3, r0
 8008b24:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008b26:	7dbb      	ldrb	r3, [r7, #22]
}
 8008b28:	4618      	mov	r0, r3
 8008b2a:	3718      	adds	r7, #24
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bd80      	pop	{r7, pc}

08008b30 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b086      	sub	sp, #24
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	60f8      	str	r0, [r7, #12]
 8008b38:	607a      	str	r2, [r7, #4]
 8008b3a:	603b      	str	r3, [r7, #0]
 8008b3c:	460b      	mov	r3, r1
 8008b3e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b40:	2300      	movs	r3, #0
 8008b42:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b44:	2300      	movs	r3, #0
 8008b46:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008b4e:	7af9      	ldrb	r1, [r7, #11]
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	687a      	ldr	r2, [r7, #4]
 8008b54:	f7fb f839 	bl	8003bca <HAL_PCD_EP_Receive>
 8008b58:	4603      	mov	r3, r0
 8008b5a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b5c:	7dfb      	ldrb	r3, [r7, #23]
 8008b5e:	4618      	mov	r0, r3
 8008b60:	f000 f832 	bl	8008bc8 <USBD_Get_USB_Status>
 8008b64:	4603      	mov	r3, r0
 8008b66:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008b68:	7dbb      	ldrb	r3, [r7, #22]
}
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	3718      	adds	r7, #24
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	bd80      	pop	{r7, pc}

08008b72 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b72:	b580      	push	{r7, lr}
 8008b74:	b082      	sub	sp, #8
 8008b76:	af00      	add	r7, sp, #0
 8008b78:	6078      	str	r0, [r7, #4]
 8008b7a:	460b      	mov	r3, r1
 8008b7c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008b84:	78fa      	ldrb	r2, [r7, #3]
 8008b86:	4611      	mov	r1, r2
 8008b88:	4618      	mov	r0, r3
 8008b8a:	f7fb f859 	bl	8003c40 <HAL_PCD_EP_GetRxCount>
 8008b8e:	4603      	mov	r3, r0
}
 8008b90:	4618      	mov	r0, r3
 8008b92:	3708      	adds	r7, #8
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bd80      	pop	{r7, pc}

08008b98 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008b98:	b480      	push	{r7}
 8008b9a:	b083      	sub	sp, #12
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008ba0:	4b03      	ldr	r3, [pc, #12]	@ (8008bb0 <USBD_static_malloc+0x18>)
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	370c      	adds	r7, #12
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bac:	4770      	bx	lr
 8008bae:	bf00      	nop
 8008bb0:	20001d34 	.word	0x20001d34

08008bb4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008bb4:	b480      	push	{r7}
 8008bb6:	b083      	sub	sp, #12
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]

}
 8008bbc:	bf00      	nop
 8008bbe:	370c      	adds	r7, #12
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc6:	4770      	bx	lr

08008bc8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008bc8:	b480      	push	{r7}
 8008bca:	b085      	sub	sp, #20
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	4603      	mov	r3, r0
 8008bd0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008bd6:	79fb      	ldrb	r3, [r7, #7]
 8008bd8:	2b03      	cmp	r3, #3
 8008bda:	d817      	bhi.n	8008c0c <USBD_Get_USB_Status+0x44>
 8008bdc:	a201      	add	r2, pc, #4	@ (adr r2, 8008be4 <USBD_Get_USB_Status+0x1c>)
 8008bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008be2:	bf00      	nop
 8008be4:	08008bf5 	.word	0x08008bf5
 8008be8:	08008bfb 	.word	0x08008bfb
 8008bec:	08008c01 	.word	0x08008c01
 8008bf0:	08008c07 	.word	0x08008c07
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	73fb      	strb	r3, [r7, #15]
    break;
 8008bf8:	e00b      	b.n	8008c12 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008bfa:	2303      	movs	r3, #3
 8008bfc:	73fb      	strb	r3, [r7, #15]
    break;
 8008bfe:	e008      	b.n	8008c12 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008c00:	2301      	movs	r3, #1
 8008c02:	73fb      	strb	r3, [r7, #15]
    break;
 8008c04:	e005      	b.n	8008c12 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008c06:	2303      	movs	r3, #3
 8008c08:	73fb      	strb	r3, [r7, #15]
    break;
 8008c0a:	e002      	b.n	8008c12 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008c0c:	2303      	movs	r3, #3
 8008c0e:	73fb      	strb	r3, [r7, #15]
    break;
 8008c10:	bf00      	nop
  }
  return usb_status;
 8008c12:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	3714      	adds	r7, #20
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1e:	4770      	bx	lr

08008c20 <__cvt>:
 8008c20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008c24:	ec57 6b10 	vmov	r6, r7, d0
 8008c28:	2f00      	cmp	r7, #0
 8008c2a:	460c      	mov	r4, r1
 8008c2c:	4619      	mov	r1, r3
 8008c2e:	463b      	mov	r3, r7
 8008c30:	bfbb      	ittet	lt
 8008c32:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008c36:	461f      	movlt	r7, r3
 8008c38:	2300      	movge	r3, #0
 8008c3a:	232d      	movlt	r3, #45	@ 0x2d
 8008c3c:	700b      	strb	r3, [r1, #0]
 8008c3e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008c40:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008c44:	4691      	mov	r9, r2
 8008c46:	f023 0820 	bic.w	r8, r3, #32
 8008c4a:	bfbc      	itt	lt
 8008c4c:	4632      	movlt	r2, r6
 8008c4e:	4616      	movlt	r6, r2
 8008c50:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008c54:	d005      	beq.n	8008c62 <__cvt+0x42>
 8008c56:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008c5a:	d100      	bne.n	8008c5e <__cvt+0x3e>
 8008c5c:	3401      	adds	r4, #1
 8008c5e:	2102      	movs	r1, #2
 8008c60:	e000      	b.n	8008c64 <__cvt+0x44>
 8008c62:	2103      	movs	r1, #3
 8008c64:	ab03      	add	r3, sp, #12
 8008c66:	9301      	str	r3, [sp, #4]
 8008c68:	ab02      	add	r3, sp, #8
 8008c6a:	9300      	str	r3, [sp, #0]
 8008c6c:	ec47 6b10 	vmov	d0, r6, r7
 8008c70:	4653      	mov	r3, sl
 8008c72:	4622      	mov	r2, r4
 8008c74:	f000 fe70 	bl	8009958 <_dtoa_r>
 8008c78:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008c7c:	4605      	mov	r5, r0
 8008c7e:	d119      	bne.n	8008cb4 <__cvt+0x94>
 8008c80:	f019 0f01 	tst.w	r9, #1
 8008c84:	d00e      	beq.n	8008ca4 <__cvt+0x84>
 8008c86:	eb00 0904 	add.w	r9, r0, r4
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	4630      	mov	r0, r6
 8008c90:	4639      	mov	r1, r7
 8008c92:	f7f7 ff21 	bl	8000ad8 <__aeabi_dcmpeq>
 8008c96:	b108      	cbz	r0, 8008c9c <__cvt+0x7c>
 8008c98:	f8cd 900c 	str.w	r9, [sp, #12]
 8008c9c:	2230      	movs	r2, #48	@ 0x30
 8008c9e:	9b03      	ldr	r3, [sp, #12]
 8008ca0:	454b      	cmp	r3, r9
 8008ca2:	d31e      	bcc.n	8008ce2 <__cvt+0xc2>
 8008ca4:	9b03      	ldr	r3, [sp, #12]
 8008ca6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008ca8:	1b5b      	subs	r3, r3, r5
 8008caa:	4628      	mov	r0, r5
 8008cac:	6013      	str	r3, [r2, #0]
 8008cae:	b004      	add	sp, #16
 8008cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cb4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008cb8:	eb00 0904 	add.w	r9, r0, r4
 8008cbc:	d1e5      	bne.n	8008c8a <__cvt+0x6a>
 8008cbe:	7803      	ldrb	r3, [r0, #0]
 8008cc0:	2b30      	cmp	r3, #48	@ 0x30
 8008cc2:	d10a      	bne.n	8008cda <__cvt+0xba>
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	4630      	mov	r0, r6
 8008cca:	4639      	mov	r1, r7
 8008ccc:	f7f7 ff04 	bl	8000ad8 <__aeabi_dcmpeq>
 8008cd0:	b918      	cbnz	r0, 8008cda <__cvt+0xba>
 8008cd2:	f1c4 0401 	rsb	r4, r4, #1
 8008cd6:	f8ca 4000 	str.w	r4, [sl]
 8008cda:	f8da 3000 	ldr.w	r3, [sl]
 8008cde:	4499      	add	r9, r3
 8008ce0:	e7d3      	b.n	8008c8a <__cvt+0x6a>
 8008ce2:	1c59      	adds	r1, r3, #1
 8008ce4:	9103      	str	r1, [sp, #12]
 8008ce6:	701a      	strb	r2, [r3, #0]
 8008ce8:	e7d9      	b.n	8008c9e <__cvt+0x7e>

08008cea <__exponent>:
 8008cea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008cec:	2900      	cmp	r1, #0
 8008cee:	bfba      	itte	lt
 8008cf0:	4249      	neglt	r1, r1
 8008cf2:	232d      	movlt	r3, #45	@ 0x2d
 8008cf4:	232b      	movge	r3, #43	@ 0x2b
 8008cf6:	2909      	cmp	r1, #9
 8008cf8:	7002      	strb	r2, [r0, #0]
 8008cfa:	7043      	strb	r3, [r0, #1]
 8008cfc:	dd29      	ble.n	8008d52 <__exponent+0x68>
 8008cfe:	f10d 0307 	add.w	r3, sp, #7
 8008d02:	461d      	mov	r5, r3
 8008d04:	270a      	movs	r7, #10
 8008d06:	461a      	mov	r2, r3
 8008d08:	fbb1 f6f7 	udiv	r6, r1, r7
 8008d0c:	fb07 1416 	mls	r4, r7, r6, r1
 8008d10:	3430      	adds	r4, #48	@ 0x30
 8008d12:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008d16:	460c      	mov	r4, r1
 8008d18:	2c63      	cmp	r4, #99	@ 0x63
 8008d1a:	f103 33ff 	add.w	r3, r3, #4294967295
 8008d1e:	4631      	mov	r1, r6
 8008d20:	dcf1      	bgt.n	8008d06 <__exponent+0x1c>
 8008d22:	3130      	adds	r1, #48	@ 0x30
 8008d24:	1e94      	subs	r4, r2, #2
 8008d26:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008d2a:	1c41      	adds	r1, r0, #1
 8008d2c:	4623      	mov	r3, r4
 8008d2e:	42ab      	cmp	r3, r5
 8008d30:	d30a      	bcc.n	8008d48 <__exponent+0x5e>
 8008d32:	f10d 0309 	add.w	r3, sp, #9
 8008d36:	1a9b      	subs	r3, r3, r2
 8008d38:	42ac      	cmp	r4, r5
 8008d3a:	bf88      	it	hi
 8008d3c:	2300      	movhi	r3, #0
 8008d3e:	3302      	adds	r3, #2
 8008d40:	4403      	add	r3, r0
 8008d42:	1a18      	subs	r0, r3, r0
 8008d44:	b003      	add	sp, #12
 8008d46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d48:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008d4c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008d50:	e7ed      	b.n	8008d2e <__exponent+0x44>
 8008d52:	2330      	movs	r3, #48	@ 0x30
 8008d54:	3130      	adds	r1, #48	@ 0x30
 8008d56:	7083      	strb	r3, [r0, #2]
 8008d58:	70c1      	strb	r1, [r0, #3]
 8008d5a:	1d03      	adds	r3, r0, #4
 8008d5c:	e7f1      	b.n	8008d42 <__exponent+0x58>
	...

08008d60 <_printf_float>:
 8008d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d64:	b08d      	sub	sp, #52	@ 0x34
 8008d66:	460c      	mov	r4, r1
 8008d68:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008d6c:	4616      	mov	r6, r2
 8008d6e:	461f      	mov	r7, r3
 8008d70:	4605      	mov	r5, r0
 8008d72:	f000 fcef 	bl	8009754 <_localeconv_r>
 8008d76:	6803      	ldr	r3, [r0, #0]
 8008d78:	9304      	str	r3, [sp, #16]
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	f7f7 fa80 	bl	8000280 <strlen>
 8008d80:	2300      	movs	r3, #0
 8008d82:	930a      	str	r3, [sp, #40]	@ 0x28
 8008d84:	f8d8 3000 	ldr.w	r3, [r8]
 8008d88:	9005      	str	r0, [sp, #20]
 8008d8a:	3307      	adds	r3, #7
 8008d8c:	f023 0307 	bic.w	r3, r3, #7
 8008d90:	f103 0208 	add.w	r2, r3, #8
 8008d94:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008d98:	f8d4 b000 	ldr.w	fp, [r4]
 8008d9c:	f8c8 2000 	str.w	r2, [r8]
 8008da0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008da4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008da8:	9307      	str	r3, [sp, #28]
 8008daa:	f8cd 8018 	str.w	r8, [sp, #24]
 8008dae:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008db2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008db6:	4b9c      	ldr	r3, [pc, #624]	@ (8009028 <_printf_float+0x2c8>)
 8008db8:	f04f 32ff 	mov.w	r2, #4294967295
 8008dbc:	f7f7 febe 	bl	8000b3c <__aeabi_dcmpun>
 8008dc0:	bb70      	cbnz	r0, 8008e20 <_printf_float+0xc0>
 8008dc2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008dc6:	4b98      	ldr	r3, [pc, #608]	@ (8009028 <_printf_float+0x2c8>)
 8008dc8:	f04f 32ff 	mov.w	r2, #4294967295
 8008dcc:	f7f7 fe98 	bl	8000b00 <__aeabi_dcmple>
 8008dd0:	bb30      	cbnz	r0, 8008e20 <_printf_float+0xc0>
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	4640      	mov	r0, r8
 8008dd8:	4649      	mov	r1, r9
 8008dda:	f7f7 fe87 	bl	8000aec <__aeabi_dcmplt>
 8008dde:	b110      	cbz	r0, 8008de6 <_printf_float+0x86>
 8008de0:	232d      	movs	r3, #45	@ 0x2d
 8008de2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008de6:	4a91      	ldr	r2, [pc, #580]	@ (800902c <_printf_float+0x2cc>)
 8008de8:	4b91      	ldr	r3, [pc, #580]	@ (8009030 <_printf_float+0x2d0>)
 8008dea:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008dee:	bf94      	ite	ls
 8008df0:	4690      	movls	r8, r2
 8008df2:	4698      	movhi	r8, r3
 8008df4:	2303      	movs	r3, #3
 8008df6:	6123      	str	r3, [r4, #16]
 8008df8:	f02b 0304 	bic.w	r3, fp, #4
 8008dfc:	6023      	str	r3, [r4, #0]
 8008dfe:	f04f 0900 	mov.w	r9, #0
 8008e02:	9700      	str	r7, [sp, #0]
 8008e04:	4633      	mov	r3, r6
 8008e06:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008e08:	4621      	mov	r1, r4
 8008e0a:	4628      	mov	r0, r5
 8008e0c:	f000 f9d2 	bl	80091b4 <_printf_common>
 8008e10:	3001      	adds	r0, #1
 8008e12:	f040 808d 	bne.w	8008f30 <_printf_float+0x1d0>
 8008e16:	f04f 30ff 	mov.w	r0, #4294967295
 8008e1a:	b00d      	add	sp, #52	@ 0x34
 8008e1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e20:	4642      	mov	r2, r8
 8008e22:	464b      	mov	r3, r9
 8008e24:	4640      	mov	r0, r8
 8008e26:	4649      	mov	r1, r9
 8008e28:	f7f7 fe88 	bl	8000b3c <__aeabi_dcmpun>
 8008e2c:	b140      	cbz	r0, 8008e40 <_printf_float+0xe0>
 8008e2e:	464b      	mov	r3, r9
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	bfbc      	itt	lt
 8008e34:	232d      	movlt	r3, #45	@ 0x2d
 8008e36:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008e3a:	4a7e      	ldr	r2, [pc, #504]	@ (8009034 <_printf_float+0x2d4>)
 8008e3c:	4b7e      	ldr	r3, [pc, #504]	@ (8009038 <_printf_float+0x2d8>)
 8008e3e:	e7d4      	b.n	8008dea <_printf_float+0x8a>
 8008e40:	6863      	ldr	r3, [r4, #4]
 8008e42:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008e46:	9206      	str	r2, [sp, #24]
 8008e48:	1c5a      	adds	r2, r3, #1
 8008e4a:	d13b      	bne.n	8008ec4 <_printf_float+0x164>
 8008e4c:	2306      	movs	r3, #6
 8008e4e:	6063      	str	r3, [r4, #4]
 8008e50:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008e54:	2300      	movs	r3, #0
 8008e56:	6022      	str	r2, [r4, #0]
 8008e58:	9303      	str	r3, [sp, #12]
 8008e5a:	ab0a      	add	r3, sp, #40	@ 0x28
 8008e5c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008e60:	ab09      	add	r3, sp, #36	@ 0x24
 8008e62:	9300      	str	r3, [sp, #0]
 8008e64:	6861      	ldr	r1, [r4, #4]
 8008e66:	ec49 8b10 	vmov	d0, r8, r9
 8008e6a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008e6e:	4628      	mov	r0, r5
 8008e70:	f7ff fed6 	bl	8008c20 <__cvt>
 8008e74:	9b06      	ldr	r3, [sp, #24]
 8008e76:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008e78:	2b47      	cmp	r3, #71	@ 0x47
 8008e7a:	4680      	mov	r8, r0
 8008e7c:	d129      	bne.n	8008ed2 <_printf_float+0x172>
 8008e7e:	1cc8      	adds	r0, r1, #3
 8008e80:	db02      	blt.n	8008e88 <_printf_float+0x128>
 8008e82:	6863      	ldr	r3, [r4, #4]
 8008e84:	4299      	cmp	r1, r3
 8008e86:	dd41      	ble.n	8008f0c <_printf_float+0x1ac>
 8008e88:	f1aa 0a02 	sub.w	sl, sl, #2
 8008e8c:	fa5f fa8a 	uxtb.w	sl, sl
 8008e90:	3901      	subs	r1, #1
 8008e92:	4652      	mov	r2, sl
 8008e94:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008e98:	9109      	str	r1, [sp, #36]	@ 0x24
 8008e9a:	f7ff ff26 	bl	8008cea <__exponent>
 8008e9e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008ea0:	1813      	adds	r3, r2, r0
 8008ea2:	2a01      	cmp	r2, #1
 8008ea4:	4681      	mov	r9, r0
 8008ea6:	6123      	str	r3, [r4, #16]
 8008ea8:	dc02      	bgt.n	8008eb0 <_printf_float+0x150>
 8008eaa:	6822      	ldr	r2, [r4, #0]
 8008eac:	07d2      	lsls	r2, r2, #31
 8008eae:	d501      	bpl.n	8008eb4 <_printf_float+0x154>
 8008eb0:	3301      	adds	r3, #1
 8008eb2:	6123      	str	r3, [r4, #16]
 8008eb4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d0a2      	beq.n	8008e02 <_printf_float+0xa2>
 8008ebc:	232d      	movs	r3, #45	@ 0x2d
 8008ebe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008ec2:	e79e      	b.n	8008e02 <_printf_float+0xa2>
 8008ec4:	9a06      	ldr	r2, [sp, #24]
 8008ec6:	2a47      	cmp	r2, #71	@ 0x47
 8008ec8:	d1c2      	bne.n	8008e50 <_printf_float+0xf0>
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d1c0      	bne.n	8008e50 <_printf_float+0xf0>
 8008ece:	2301      	movs	r3, #1
 8008ed0:	e7bd      	b.n	8008e4e <_printf_float+0xee>
 8008ed2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008ed6:	d9db      	bls.n	8008e90 <_printf_float+0x130>
 8008ed8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008edc:	d118      	bne.n	8008f10 <_printf_float+0x1b0>
 8008ede:	2900      	cmp	r1, #0
 8008ee0:	6863      	ldr	r3, [r4, #4]
 8008ee2:	dd0b      	ble.n	8008efc <_printf_float+0x19c>
 8008ee4:	6121      	str	r1, [r4, #16]
 8008ee6:	b913      	cbnz	r3, 8008eee <_printf_float+0x18e>
 8008ee8:	6822      	ldr	r2, [r4, #0]
 8008eea:	07d0      	lsls	r0, r2, #31
 8008eec:	d502      	bpl.n	8008ef4 <_printf_float+0x194>
 8008eee:	3301      	adds	r3, #1
 8008ef0:	440b      	add	r3, r1
 8008ef2:	6123      	str	r3, [r4, #16]
 8008ef4:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008ef6:	f04f 0900 	mov.w	r9, #0
 8008efa:	e7db      	b.n	8008eb4 <_printf_float+0x154>
 8008efc:	b913      	cbnz	r3, 8008f04 <_printf_float+0x1a4>
 8008efe:	6822      	ldr	r2, [r4, #0]
 8008f00:	07d2      	lsls	r2, r2, #31
 8008f02:	d501      	bpl.n	8008f08 <_printf_float+0x1a8>
 8008f04:	3302      	adds	r3, #2
 8008f06:	e7f4      	b.n	8008ef2 <_printf_float+0x192>
 8008f08:	2301      	movs	r3, #1
 8008f0a:	e7f2      	b.n	8008ef2 <_printf_float+0x192>
 8008f0c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008f10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f12:	4299      	cmp	r1, r3
 8008f14:	db05      	blt.n	8008f22 <_printf_float+0x1c2>
 8008f16:	6823      	ldr	r3, [r4, #0]
 8008f18:	6121      	str	r1, [r4, #16]
 8008f1a:	07d8      	lsls	r0, r3, #31
 8008f1c:	d5ea      	bpl.n	8008ef4 <_printf_float+0x194>
 8008f1e:	1c4b      	adds	r3, r1, #1
 8008f20:	e7e7      	b.n	8008ef2 <_printf_float+0x192>
 8008f22:	2900      	cmp	r1, #0
 8008f24:	bfd4      	ite	le
 8008f26:	f1c1 0202 	rsble	r2, r1, #2
 8008f2a:	2201      	movgt	r2, #1
 8008f2c:	4413      	add	r3, r2
 8008f2e:	e7e0      	b.n	8008ef2 <_printf_float+0x192>
 8008f30:	6823      	ldr	r3, [r4, #0]
 8008f32:	055a      	lsls	r2, r3, #21
 8008f34:	d407      	bmi.n	8008f46 <_printf_float+0x1e6>
 8008f36:	6923      	ldr	r3, [r4, #16]
 8008f38:	4642      	mov	r2, r8
 8008f3a:	4631      	mov	r1, r6
 8008f3c:	4628      	mov	r0, r5
 8008f3e:	47b8      	blx	r7
 8008f40:	3001      	adds	r0, #1
 8008f42:	d12b      	bne.n	8008f9c <_printf_float+0x23c>
 8008f44:	e767      	b.n	8008e16 <_printf_float+0xb6>
 8008f46:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008f4a:	f240 80dd 	bls.w	8009108 <_printf_float+0x3a8>
 8008f4e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008f52:	2200      	movs	r2, #0
 8008f54:	2300      	movs	r3, #0
 8008f56:	f7f7 fdbf 	bl	8000ad8 <__aeabi_dcmpeq>
 8008f5a:	2800      	cmp	r0, #0
 8008f5c:	d033      	beq.n	8008fc6 <_printf_float+0x266>
 8008f5e:	4a37      	ldr	r2, [pc, #220]	@ (800903c <_printf_float+0x2dc>)
 8008f60:	2301      	movs	r3, #1
 8008f62:	4631      	mov	r1, r6
 8008f64:	4628      	mov	r0, r5
 8008f66:	47b8      	blx	r7
 8008f68:	3001      	adds	r0, #1
 8008f6a:	f43f af54 	beq.w	8008e16 <_printf_float+0xb6>
 8008f6e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008f72:	4543      	cmp	r3, r8
 8008f74:	db02      	blt.n	8008f7c <_printf_float+0x21c>
 8008f76:	6823      	ldr	r3, [r4, #0]
 8008f78:	07d8      	lsls	r0, r3, #31
 8008f7a:	d50f      	bpl.n	8008f9c <_printf_float+0x23c>
 8008f7c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008f80:	4631      	mov	r1, r6
 8008f82:	4628      	mov	r0, r5
 8008f84:	47b8      	blx	r7
 8008f86:	3001      	adds	r0, #1
 8008f88:	f43f af45 	beq.w	8008e16 <_printf_float+0xb6>
 8008f8c:	f04f 0900 	mov.w	r9, #0
 8008f90:	f108 38ff 	add.w	r8, r8, #4294967295
 8008f94:	f104 0a1a 	add.w	sl, r4, #26
 8008f98:	45c8      	cmp	r8, r9
 8008f9a:	dc09      	bgt.n	8008fb0 <_printf_float+0x250>
 8008f9c:	6823      	ldr	r3, [r4, #0]
 8008f9e:	079b      	lsls	r3, r3, #30
 8008fa0:	f100 8103 	bmi.w	80091aa <_printf_float+0x44a>
 8008fa4:	68e0      	ldr	r0, [r4, #12]
 8008fa6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008fa8:	4298      	cmp	r0, r3
 8008faa:	bfb8      	it	lt
 8008fac:	4618      	movlt	r0, r3
 8008fae:	e734      	b.n	8008e1a <_printf_float+0xba>
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	4652      	mov	r2, sl
 8008fb4:	4631      	mov	r1, r6
 8008fb6:	4628      	mov	r0, r5
 8008fb8:	47b8      	blx	r7
 8008fba:	3001      	adds	r0, #1
 8008fbc:	f43f af2b 	beq.w	8008e16 <_printf_float+0xb6>
 8008fc0:	f109 0901 	add.w	r9, r9, #1
 8008fc4:	e7e8      	b.n	8008f98 <_printf_float+0x238>
 8008fc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	dc39      	bgt.n	8009040 <_printf_float+0x2e0>
 8008fcc:	4a1b      	ldr	r2, [pc, #108]	@ (800903c <_printf_float+0x2dc>)
 8008fce:	2301      	movs	r3, #1
 8008fd0:	4631      	mov	r1, r6
 8008fd2:	4628      	mov	r0, r5
 8008fd4:	47b8      	blx	r7
 8008fd6:	3001      	adds	r0, #1
 8008fd8:	f43f af1d 	beq.w	8008e16 <_printf_float+0xb6>
 8008fdc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008fe0:	ea59 0303 	orrs.w	r3, r9, r3
 8008fe4:	d102      	bne.n	8008fec <_printf_float+0x28c>
 8008fe6:	6823      	ldr	r3, [r4, #0]
 8008fe8:	07d9      	lsls	r1, r3, #31
 8008fea:	d5d7      	bpl.n	8008f9c <_printf_float+0x23c>
 8008fec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008ff0:	4631      	mov	r1, r6
 8008ff2:	4628      	mov	r0, r5
 8008ff4:	47b8      	blx	r7
 8008ff6:	3001      	adds	r0, #1
 8008ff8:	f43f af0d 	beq.w	8008e16 <_printf_float+0xb6>
 8008ffc:	f04f 0a00 	mov.w	sl, #0
 8009000:	f104 0b1a 	add.w	fp, r4, #26
 8009004:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009006:	425b      	negs	r3, r3
 8009008:	4553      	cmp	r3, sl
 800900a:	dc01      	bgt.n	8009010 <_printf_float+0x2b0>
 800900c:	464b      	mov	r3, r9
 800900e:	e793      	b.n	8008f38 <_printf_float+0x1d8>
 8009010:	2301      	movs	r3, #1
 8009012:	465a      	mov	r2, fp
 8009014:	4631      	mov	r1, r6
 8009016:	4628      	mov	r0, r5
 8009018:	47b8      	blx	r7
 800901a:	3001      	adds	r0, #1
 800901c:	f43f aefb 	beq.w	8008e16 <_printf_float+0xb6>
 8009020:	f10a 0a01 	add.w	sl, sl, #1
 8009024:	e7ee      	b.n	8009004 <_printf_float+0x2a4>
 8009026:	bf00      	nop
 8009028:	7fefffff 	.word	0x7fefffff
 800902c:	0800c128 	.word	0x0800c128
 8009030:	0800c12c 	.word	0x0800c12c
 8009034:	0800c130 	.word	0x0800c130
 8009038:	0800c134 	.word	0x0800c134
 800903c:	0800c138 	.word	0x0800c138
 8009040:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009042:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009046:	4553      	cmp	r3, sl
 8009048:	bfa8      	it	ge
 800904a:	4653      	movge	r3, sl
 800904c:	2b00      	cmp	r3, #0
 800904e:	4699      	mov	r9, r3
 8009050:	dc36      	bgt.n	80090c0 <_printf_float+0x360>
 8009052:	f04f 0b00 	mov.w	fp, #0
 8009056:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800905a:	f104 021a 	add.w	r2, r4, #26
 800905e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009060:	9306      	str	r3, [sp, #24]
 8009062:	eba3 0309 	sub.w	r3, r3, r9
 8009066:	455b      	cmp	r3, fp
 8009068:	dc31      	bgt.n	80090ce <_printf_float+0x36e>
 800906a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800906c:	459a      	cmp	sl, r3
 800906e:	dc3a      	bgt.n	80090e6 <_printf_float+0x386>
 8009070:	6823      	ldr	r3, [r4, #0]
 8009072:	07da      	lsls	r2, r3, #31
 8009074:	d437      	bmi.n	80090e6 <_printf_float+0x386>
 8009076:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009078:	ebaa 0903 	sub.w	r9, sl, r3
 800907c:	9b06      	ldr	r3, [sp, #24]
 800907e:	ebaa 0303 	sub.w	r3, sl, r3
 8009082:	4599      	cmp	r9, r3
 8009084:	bfa8      	it	ge
 8009086:	4699      	movge	r9, r3
 8009088:	f1b9 0f00 	cmp.w	r9, #0
 800908c:	dc33      	bgt.n	80090f6 <_printf_float+0x396>
 800908e:	f04f 0800 	mov.w	r8, #0
 8009092:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009096:	f104 0b1a 	add.w	fp, r4, #26
 800909a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800909c:	ebaa 0303 	sub.w	r3, sl, r3
 80090a0:	eba3 0309 	sub.w	r3, r3, r9
 80090a4:	4543      	cmp	r3, r8
 80090a6:	f77f af79 	ble.w	8008f9c <_printf_float+0x23c>
 80090aa:	2301      	movs	r3, #1
 80090ac:	465a      	mov	r2, fp
 80090ae:	4631      	mov	r1, r6
 80090b0:	4628      	mov	r0, r5
 80090b2:	47b8      	blx	r7
 80090b4:	3001      	adds	r0, #1
 80090b6:	f43f aeae 	beq.w	8008e16 <_printf_float+0xb6>
 80090ba:	f108 0801 	add.w	r8, r8, #1
 80090be:	e7ec      	b.n	800909a <_printf_float+0x33a>
 80090c0:	4642      	mov	r2, r8
 80090c2:	4631      	mov	r1, r6
 80090c4:	4628      	mov	r0, r5
 80090c6:	47b8      	blx	r7
 80090c8:	3001      	adds	r0, #1
 80090ca:	d1c2      	bne.n	8009052 <_printf_float+0x2f2>
 80090cc:	e6a3      	b.n	8008e16 <_printf_float+0xb6>
 80090ce:	2301      	movs	r3, #1
 80090d0:	4631      	mov	r1, r6
 80090d2:	4628      	mov	r0, r5
 80090d4:	9206      	str	r2, [sp, #24]
 80090d6:	47b8      	blx	r7
 80090d8:	3001      	adds	r0, #1
 80090da:	f43f ae9c 	beq.w	8008e16 <_printf_float+0xb6>
 80090de:	9a06      	ldr	r2, [sp, #24]
 80090e0:	f10b 0b01 	add.w	fp, fp, #1
 80090e4:	e7bb      	b.n	800905e <_printf_float+0x2fe>
 80090e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80090ea:	4631      	mov	r1, r6
 80090ec:	4628      	mov	r0, r5
 80090ee:	47b8      	blx	r7
 80090f0:	3001      	adds	r0, #1
 80090f2:	d1c0      	bne.n	8009076 <_printf_float+0x316>
 80090f4:	e68f      	b.n	8008e16 <_printf_float+0xb6>
 80090f6:	9a06      	ldr	r2, [sp, #24]
 80090f8:	464b      	mov	r3, r9
 80090fa:	4442      	add	r2, r8
 80090fc:	4631      	mov	r1, r6
 80090fe:	4628      	mov	r0, r5
 8009100:	47b8      	blx	r7
 8009102:	3001      	adds	r0, #1
 8009104:	d1c3      	bne.n	800908e <_printf_float+0x32e>
 8009106:	e686      	b.n	8008e16 <_printf_float+0xb6>
 8009108:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800910c:	f1ba 0f01 	cmp.w	sl, #1
 8009110:	dc01      	bgt.n	8009116 <_printf_float+0x3b6>
 8009112:	07db      	lsls	r3, r3, #31
 8009114:	d536      	bpl.n	8009184 <_printf_float+0x424>
 8009116:	2301      	movs	r3, #1
 8009118:	4642      	mov	r2, r8
 800911a:	4631      	mov	r1, r6
 800911c:	4628      	mov	r0, r5
 800911e:	47b8      	blx	r7
 8009120:	3001      	adds	r0, #1
 8009122:	f43f ae78 	beq.w	8008e16 <_printf_float+0xb6>
 8009126:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800912a:	4631      	mov	r1, r6
 800912c:	4628      	mov	r0, r5
 800912e:	47b8      	blx	r7
 8009130:	3001      	adds	r0, #1
 8009132:	f43f ae70 	beq.w	8008e16 <_printf_float+0xb6>
 8009136:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800913a:	2200      	movs	r2, #0
 800913c:	2300      	movs	r3, #0
 800913e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009142:	f7f7 fcc9 	bl	8000ad8 <__aeabi_dcmpeq>
 8009146:	b9c0      	cbnz	r0, 800917a <_printf_float+0x41a>
 8009148:	4653      	mov	r3, sl
 800914a:	f108 0201 	add.w	r2, r8, #1
 800914e:	4631      	mov	r1, r6
 8009150:	4628      	mov	r0, r5
 8009152:	47b8      	blx	r7
 8009154:	3001      	adds	r0, #1
 8009156:	d10c      	bne.n	8009172 <_printf_float+0x412>
 8009158:	e65d      	b.n	8008e16 <_printf_float+0xb6>
 800915a:	2301      	movs	r3, #1
 800915c:	465a      	mov	r2, fp
 800915e:	4631      	mov	r1, r6
 8009160:	4628      	mov	r0, r5
 8009162:	47b8      	blx	r7
 8009164:	3001      	adds	r0, #1
 8009166:	f43f ae56 	beq.w	8008e16 <_printf_float+0xb6>
 800916a:	f108 0801 	add.w	r8, r8, #1
 800916e:	45d0      	cmp	r8, sl
 8009170:	dbf3      	blt.n	800915a <_printf_float+0x3fa>
 8009172:	464b      	mov	r3, r9
 8009174:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009178:	e6df      	b.n	8008f3a <_printf_float+0x1da>
 800917a:	f04f 0800 	mov.w	r8, #0
 800917e:	f104 0b1a 	add.w	fp, r4, #26
 8009182:	e7f4      	b.n	800916e <_printf_float+0x40e>
 8009184:	2301      	movs	r3, #1
 8009186:	4642      	mov	r2, r8
 8009188:	e7e1      	b.n	800914e <_printf_float+0x3ee>
 800918a:	2301      	movs	r3, #1
 800918c:	464a      	mov	r2, r9
 800918e:	4631      	mov	r1, r6
 8009190:	4628      	mov	r0, r5
 8009192:	47b8      	blx	r7
 8009194:	3001      	adds	r0, #1
 8009196:	f43f ae3e 	beq.w	8008e16 <_printf_float+0xb6>
 800919a:	f108 0801 	add.w	r8, r8, #1
 800919e:	68e3      	ldr	r3, [r4, #12]
 80091a0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80091a2:	1a5b      	subs	r3, r3, r1
 80091a4:	4543      	cmp	r3, r8
 80091a6:	dcf0      	bgt.n	800918a <_printf_float+0x42a>
 80091a8:	e6fc      	b.n	8008fa4 <_printf_float+0x244>
 80091aa:	f04f 0800 	mov.w	r8, #0
 80091ae:	f104 0919 	add.w	r9, r4, #25
 80091b2:	e7f4      	b.n	800919e <_printf_float+0x43e>

080091b4 <_printf_common>:
 80091b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091b8:	4616      	mov	r6, r2
 80091ba:	4698      	mov	r8, r3
 80091bc:	688a      	ldr	r2, [r1, #8]
 80091be:	690b      	ldr	r3, [r1, #16]
 80091c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80091c4:	4293      	cmp	r3, r2
 80091c6:	bfb8      	it	lt
 80091c8:	4613      	movlt	r3, r2
 80091ca:	6033      	str	r3, [r6, #0]
 80091cc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80091d0:	4607      	mov	r7, r0
 80091d2:	460c      	mov	r4, r1
 80091d4:	b10a      	cbz	r2, 80091da <_printf_common+0x26>
 80091d6:	3301      	adds	r3, #1
 80091d8:	6033      	str	r3, [r6, #0]
 80091da:	6823      	ldr	r3, [r4, #0]
 80091dc:	0699      	lsls	r1, r3, #26
 80091de:	bf42      	ittt	mi
 80091e0:	6833      	ldrmi	r3, [r6, #0]
 80091e2:	3302      	addmi	r3, #2
 80091e4:	6033      	strmi	r3, [r6, #0]
 80091e6:	6825      	ldr	r5, [r4, #0]
 80091e8:	f015 0506 	ands.w	r5, r5, #6
 80091ec:	d106      	bne.n	80091fc <_printf_common+0x48>
 80091ee:	f104 0a19 	add.w	sl, r4, #25
 80091f2:	68e3      	ldr	r3, [r4, #12]
 80091f4:	6832      	ldr	r2, [r6, #0]
 80091f6:	1a9b      	subs	r3, r3, r2
 80091f8:	42ab      	cmp	r3, r5
 80091fa:	dc26      	bgt.n	800924a <_printf_common+0x96>
 80091fc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009200:	6822      	ldr	r2, [r4, #0]
 8009202:	3b00      	subs	r3, #0
 8009204:	bf18      	it	ne
 8009206:	2301      	movne	r3, #1
 8009208:	0692      	lsls	r2, r2, #26
 800920a:	d42b      	bmi.n	8009264 <_printf_common+0xb0>
 800920c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009210:	4641      	mov	r1, r8
 8009212:	4638      	mov	r0, r7
 8009214:	47c8      	blx	r9
 8009216:	3001      	adds	r0, #1
 8009218:	d01e      	beq.n	8009258 <_printf_common+0xa4>
 800921a:	6823      	ldr	r3, [r4, #0]
 800921c:	6922      	ldr	r2, [r4, #16]
 800921e:	f003 0306 	and.w	r3, r3, #6
 8009222:	2b04      	cmp	r3, #4
 8009224:	bf02      	ittt	eq
 8009226:	68e5      	ldreq	r5, [r4, #12]
 8009228:	6833      	ldreq	r3, [r6, #0]
 800922a:	1aed      	subeq	r5, r5, r3
 800922c:	68a3      	ldr	r3, [r4, #8]
 800922e:	bf0c      	ite	eq
 8009230:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009234:	2500      	movne	r5, #0
 8009236:	4293      	cmp	r3, r2
 8009238:	bfc4      	itt	gt
 800923a:	1a9b      	subgt	r3, r3, r2
 800923c:	18ed      	addgt	r5, r5, r3
 800923e:	2600      	movs	r6, #0
 8009240:	341a      	adds	r4, #26
 8009242:	42b5      	cmp	r5, r6
 8009244:	d11a      	bne.n	800927c <_printf_common+0xc8>
 8009246:	2000      	movs	r0, #0
 8009248:	e008      	b.n	800925c <_printf_common+0xa8>
 800924a:	2301      	movs	r3, #1
 800924c:	4652      	mov	r2, sl
 800924e:	4641      	mov	r1, r8
 8009250:	4638      	mov	r0, r7
 8009252:	47c8      	blx	r9
 8009254:	3001      	adds	r0, #1
 8009256:	d103      	bne.n	8009260 <_printf_common+0xac>
 8009258:	f04f 30ff 	mov.w	r0, #4294967295
 800925c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009260:	3501      	adds	r5, #1
 8009262:	e7c6      	b.n	80091f2 <_printf_common+0x3e>
 8009264:	18e1      	adds	r1, r4, r3
 8009266:	1c5a      	adds	r2, r3, #1
 8009268:	2030      	movs	r0, #48	@ 0x30
 800926a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800926e:	4422      	add	r2, r4
 8009270:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009274:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009278:	3302      	adds	r3, #2
 800927a:	e7c7      	b.n	800920c <_printf_common+0x58>
 800927c:	2301      	movs	r3, #1
 800927e:	4622      	mov	r2, r4
 8009280:	4641      	mov	r1, r8
 8009282:	4638      	mov	r0, r7
 8009284:	47c8      	blx	r9
 8009286:	3001      	adds	r0, #1
 8009288:	d0e6      	beq.n	8009258 <_printf_common+0xa4>
 800928a:	3601      	adds	r6, #1
 800928c:	e7d9      	b.n	8009242 <_printf_common+0x8e>
	...

08009290 <_printf_i>:
 8009290:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009294:	7e0f      	ldrb	r7, [r1, #24]
 8009296:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009298:	2f78      	cmp	r7, #120	@ 0x78
 800929a:	4691      	mov	r9, r2
 800929c:	4680      	mov	r8, r0
 800929e:	460c      	mov	r4, r1
 80092a0:	469a      	mov	sl, r3
 80092a2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80092a6:	d807      	bhi.n	80092b8 <_printf_i+0x28>
 80092a8:	2f62      	cmp	r7, #98	@ 0x62
 80092aa:	d80a      	bhi.n	80092c2 <_printf_i+0x32>
 80092ac:	2f00      	cmp	r7, #0
 80092ae:	f000 80d2 	beq.w	8009456 <_printf_i+0x1c6>
 80092b2:	2f58      	cmp	r7, #88	@ 0x58
 80092b4:	f000 80b9 	beq.w	800942a <_printf_i+0x19a>
 80092b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80092bc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80092c0:	e03a      	b.n	8009338 <_printf_i+0xa8>
 80092c2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80092c6:	2b15      	cmp	r3, #21
 80092c8:	d8f6      	bhi.n	80092b8 <_printf_i+0x28>
 80092ca:	a101      	add	r1, pc, #4	@ (adr r1, 80092d0 <_printf_i+0x40>)
 80092cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80092d0:	08009329 	.word	0x08009329
 80092d4:	0800933d 	.word	0x0800933d
 80092d8:	080092b9 	.word	0x080092b9
 80092dc:	080092b9 	.word	0x080092b9
 80092e0:	080092b9 	.word	0x080092b9
 80092e4:	080092b9 	.word	0x080092b9
 80092e8:	0800933d 	.word	0x0800933d
 80092ec:	080092b9 	.word	0x080092b9
 80092f0:	080092b9 	.word	0x080092b9
 80092f4:	080092b9 	.word	0x080092b9
 80092f8:	080092b9 	.word	0x080092b9
 80092fc:	0800943d 	.word	0x0800943d
 8009300:	08009367 	.word	0x08009367
 8009304:	080093f7 	.word	0x080093f7
 8009308:	080092b9 	.word	0x080092b9
 800930c:	080092b9 	.word	0x080092b9
 8009310:	0800945f 	.word	0x0800945f
 8009314:	080092b9 	.word	0x080092b9
 8009318:	08009367 	.word	0x08009367
 800931c:	080092b9 	.word	0x080092b9
 8009320:	080092b9 	.word	0x080092b9
 8009324:	080093ff 	.word	0x080093ff
 8009328:	6833      	ldr	r3, [r6, #0]
 800932a:	1d1a      	adds	r2, r3, #4
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	6032      	str	r2, [r6, #0]
 8009330:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009334:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009338:	2301      	movs	r3, #1
 800933a:	e09d      	b.n	8009478 <_printf_i+0x1e8>
 800933c:	6833      	ldr	r3, [r6, #0]
 800933e:	6820      	ldr	r0, [r4, #0]
 8009340:	1d19      	adds	r1, r3, #4
 8009342:	6031      	str	r1, [r6, #0]
 8009344:	0606      	lsls	r6, r0, #24
 8009346:	d501      	bpl.n	800934c <_printf_i+0xbc>
 8009348:	681d      	ldr	r5, [r3, #0]
 800934a:	e003      	b.n	8009354 <_printf_i+0xc4>
 800934c:	0645      	lsls	r5, r0, #25
 800934e:	d5fb      	bpl.n	8009348 <_printf_i+0xb8>
 8009350:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009354:	2d00      	cmp	r5, #0
 8009356:	da03      	bge.n	8009360 <_printf_i+0xd0>
 8009358:	232d      	movs	r3, #45	@ 0x2d
 800935a:	426d      	negs	r5, r5
 800935c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009360:	4859      	ldr	r0, [pc, #356]	@ (80094c8 <_printf_i+0x238>)
 8009362:	230a      	movs	r3, #10
 8009364:	e011      	b.n	800938a <_printf_i+0xfa>
 8009366:	6821      	ldr	r1, [r4, #0]
 8009368:	6833      	ldr	r3, [r6, #0]
 800936a:	0608      	lsls	r0, r1, #24
 800936c:	f853 5b04 	ldr.w	r5, [r3], #4
 8009370:	d402      	bmi.n	8009378 <_printf_i+0xe8>
 8009372:	0649      	lsls	r1, r1, #25
 8009374:	bf48      	it	mi
 8009376:	b2ad      	uxthmi	r5, r5
 8009378:	2f6f      	cmp	r7, #111	@ 0x6f
 800937a:	4853      	ldr	r0, [pc, #332]	@ (80094c8 <_printf_i+0x238>)
 800937c:	6033      	str	r3, [r6, #0]
 800937e:	bf14      	ite	ne
 8009380:	230a      	movne	r3, #10
 8009382:	2308      	moveq	r3, #8
 8009384:	2100      	movs	r1, #0
 8009386:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800938a:	6866      	ldr	r6, [r4, #4]
 800938c:	60a6      	str	r6, [r4, #8]
 800938e:	2e00      	cmp	r6, #0
 8009390:	bfa2      	ittt	ge
 8009392:	6821      	ldrge	r1, [r4, #0]
 8009394:	f021 0104 	bicge.w	r1, r1, #4
 8009398:	6021      	strge	r1, [r4, #0]
 800939a:	b90d      	cbnz	r5, 80093a0 <_printf_i+0x110>
 800939c:	2e00      	cmp	r6, #0
 800939e:	d04b      	beq.n	8009438 <_printf_i+0x1a8>
 80093a0:	4616      	mov	r6, r2
 80093a2:	fbb5 f1f3 	udiv	r1, r5, r3
 80093a6:	fb03 5711 	mls	r7, r3, r1, r5
 80093aa:	5dc7      	ldrb	r7, [r0, r7]
 80093ac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80093b0:	462f      	mov	r7, r5
 80093b2:	42bb      	cmp	r3, r7
 80093b4:	460d      	mov	r5, r1
 80093b6:	d9f4      	bls.n	80093a2 <_printf_i+0x112>
 80093b8:	2b08      	cmp	r3, #8
 80093ba:	d10b      	bne.n	80093d4 <_printf_i+0x144>
 80093bc:	6823      	ldr	r3, [r4, #0]
 80093be:	07df      	lsls	r7, r3, #31
 80093c0:	d508      	bpl.n	80093d4 <_printf_i+0x144>
 80093c2:	6923      	ldr	r3, [r4, #16]
 80093c4:	6861      	ldr	r1, [r4, #4]
 80093c6:	4299      	cmp	r1, r3
 80093c8:	bfde      	ittt	le
 80093ca:	2330      	movle	r3, #48	@ 0x30
 80093cc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80093d0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80093d4:	1b92      	subs	r2, r2, r6
 80093d6:	6122      	str	r2, [r4, #16]
 80093d8:	f8cd a000 	str.w	sl, [sp]
 80093dc:	464b      	mov	r3, r9
 80093de:	aa03      	add	r2, sp, #12
 80093e0:	4621      	mov	r1, r4
 80093e2:	4640      	mov	r0, r8
 80093e4:	f7ff fee6 	bl	80091b4 <_printf_common>
 80093e8:	3001      	adds	r0, #1
 80093ea:	d14a      	bne.n	8009482 <_printf_i+0x1f2>
 80093ec:	f04f 30ff 	mov.w	r0, #4294967295
 80093f0:	b004      	add	sp, #16
 80093f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093f6:	6823      	ldr	r3, [r4, #0]
 80093f8:	f043 0320 	orr.w	r3, r3, #32
 80093fc:	6023      	str	r3, [r4, #0]
 80093fe:	4833      	ldr	r0, [pc, #204]	@ (80094cc <_printf_i+0x23c>)
 8009400:	2778      	movs	r7, #120	@ 0x78
 8009402:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009406:	6823      	ldr	r3, [r4, #0]
 8009408:	6831      	ldr	r1, [r6, #0]
 800940a:	061f      	lsls	r7, r3, #24
 800940c:	f851 5b04 	ldr.w	r5, [r1], #4
 8009410:	d402      	bmi.n	8009418 <_printf_i+0x188>
 8009412:	065f      	lsls	r7, r3, #25
 8009414:	bf48      	it	mi
 8009416:	b2ad      	uxthmi	r5, r5
 8009418:	6031      	str	r1, [r6, #0]
 800941a:	07d9      	lsls	r1, r3, #31
 800941c:	bf44      	itt	mi
 800941e:	f043 0320 	orrmi.w	r3, r3, #32
 8009422:	6023      	strmi	r3, [r4, #0]
 8009424:	b11d      	cbz	r5, 800942e <_printf_i+0x19e>
 8009426:	2310      	movs	r3, #16
 8009428:	e7ac      	b.n	8009384 <_printf_i+0xf4>
 800942a:	4827      	ldr	r0, [pc, #156]	@ (80094c8 <_printf_i+0x238>)
 800942c:	e7e9      	b.n	8009402 <_printf_i+0x172>
 800942e:	6823      	ldr	r3, [r4, #0]
 8009430:	f023 0320 	bic.w	r3, r3, #32
 8009434:	6023      	str	r3, [r4, #0]
 8009436:	e7f6      	b.n	8009426 <_printf_i+0x196>
 8009438:	4616      	mov	r6, r2
 800943a:	e7bd      	b.n	80093b8 <_printf_i+0x128>
 800943c:	6833      	ldr	r3, [r6, #0]
 800943e:	6825      	ldr	r5, [r4, #0]
 8009440:	6961      	ldr	r1, [r4, #20]
 8009442:	1d18      	adds	r0, r3, #4
 8009444:	6030      	str	r0, [r6, #0]
 8009446:	062e      	lsls	r6, r5, #24
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	d501      	bpl.n	8009450 <_printf_i+0x1c0>
 800944c:	6019      	str	r1, [r3, #0]
 800944e:	e002      	b.n	8009456 <_printf_i+0x1c6>
 8009450:	0668      	lsls	r0, r5, #25
 8009452:	d5fb      	bpl.n	800944c <_printf_i+0x1bc>
 8009454:	8019      	strh	r1, [r3, #0]
 8009456:	2300      	movs	r3, #0
 8009458:	6123      	str	r3, [r4, #16]
 800945a:	4616      	mov	r6, r2
 800945c:	e7bc      	b.n	80093d8 <_printf_i+0x148>
 800945e:	6833      	ldr	r3, [r6, #0]
 8009460:	1d1a      	adds	r2, r3, #4
 8009462:	6032      	str	r2, [r6, #0]
 8009464:	681e      	ldr	r6, [r3, #0]
 8009466:	6862      	ldr	r2, [r4, #4]
 8009468:	2100      	movs	r1, #0
 800946a:	4630      	mov	r0, r6
 800946c:	f7f6 feb8 	bl	80001e0 <memchr>
 8009470:	b108      	cbz	r0, 8009476 <_printf_i+0x1e6>
 8009472:	1b80      	subs	r0, r0, r6
 8009474:	6060      	str	r0, [r4, #4]
 8009476:	6863      	ldr	r3, [r4, #4]
 8009478:	6123      	str	r3, [r4, #16]
 800947a:	2300      	movs	r3, #0
 800947c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009480:	e7aa      	b.n	80093d8 <_printf_i+0x148>
 8009482:	6923      	ldr	r3, [r4, #16]
 8009484:	4632      	mov	r2, r6
 8009486:	4649      	mov	r1, r9
 8009488:	4640      	mov	r0, r8
 800948a:	47d0      	blx	sl
 800948c:	3001      	adds	r0, #1
 800948e:	d0ad      	beq.n	80093ec <_printf_i+0x15c>
 8009490:	6823      	ldr	r3, [r4, #0]
 8009492:	079b      	lsls	r3, r3, #30
 8009494:	d413      	bmi.n	80094be <_printf_i+0x22e>
 8009496:	68e0      	ldr	r0, [r4, #12]
 8009498:	9b03      	ldr	r3, [sp, #12]
 800949a:	4298      	cmp	r0, r3
 800949c:	bfb8      	it	lt
 800949e:	4618      	movlt	r0, r3
 80094a0:	e7a6      	b.n	80093f0 <_printf_i+0x160>
 80094a2:	2301      	movs	r3, #1
 80094a4:	4632      	mov	r2, r6
 80094a6:	4649      	mov	r1, r9
 80094a8:	4640      	mov	r0, r8
 80094aa:	47d0      	blx	sl
 80094ac:	3001      	adds	r0, #1
 80094ae:	d09d      	beq.n	80093ec <_printf_i+0x15c>
 80094b0:	3501      	adds	r5, #1
 80094b2:	68e3      	ldr	r3, [r4, #12]
 80094b4:	9903      	ldr	r1, [sp, #12]
 80094b6:	1a5b      	subs	r3, r3, r1
 80094b8:	42ab      	cmp	r3, r5
 80094ba:	dcf2      	bgt.n	80094a2 <_printf_i+0x212>
 80094bc:	e7eb      	b.n	8009496 <_printf_i+0x206>
 80094be:	2500      	movs	r5, #0
 80094c0:	f104 0619 	add.w	r6, r4, #25
 80094c4:	e7f5      	b.n	80094b2 <_printf_i+0x222>
 80094c6:	bf00      	nop
 80094c8:	0800c13a 	.word	0x0800c13a
 80094cc:	0800c14b 	.word	0x0800c14b

080094d0 <std>:
 80094d0:	2300      	movs	r3, #0
 80094d2:	b510      	push	{r4, lr}
 80094d4:	4604      	mov	r4, r0
 80094d6:	e9c0 3300 	strd	r3, r3, [r0]
 80094da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80094de:	6083      	str	r3, [r0, #8]
 80094e0:	8181      	strh	r1, [r0, #12]
 80094e2:	6643      	str	r3, [r0, #100]	@ 0x64
 80094e4:	81c2      	strh	r2, [r0, #14]
 80094e6:	6183      	str	r3, [r0, #24]
 80094e8:	4619      	mov	r1, r3
 80094ea:	2208      	movs	r2, #8
 80094ec:	305c      	adds	r0, #92	@ 0x5c
 80094ee:	f000 f928 	bl	8009742 <memset>
 80094f2:	4b0d      	ldr	r3, [pc, #52]	@ (8009528 <std+0x58>)
 80094f4:	6263      	str	r3, [r4, #36]	@ 0x24
 80094f6:	4b0d      	ldr	r3, [pc, #52]	@ (800952c <std+0x5c>)
 80094f8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80094fa:	4b0d      	ldr	r3, [pc, #52]	@ (8009530 <std+0x60>)
 80094fc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80094fe:	4b0d      	ldr	r3, [pc, #52]	@ (8009534 <std+0x64>)
 8009500:	6323      	str	r3, [r4, #48]	@ 0x30
 8009502:	4b0d      	ldr	r3, [pc, #52]	@ (8009538 <std+0x68>)
 8009504:	6224      	str	r4, [r4, #32]
 8009506:	429c      	cmp	r4, r3
 8009508:	d006      	beq.n	8009518 <std+0x48>
 800950a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800950e:	4294      	cmp	r4, r2
 8009510:	d002      	beq.n	8009518 <std+0x48>
 8009512:	33d0      	adds	r3, #208	@ 0xd0
 8009514:	429c      	cmp	r4, r3
 8009516:	d105      	bne.n	8009524 <std+0x54>
 8009518:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800951c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009520:	f000 b98c 	b.w	800983c <__retarget_lock_init_recursive>
 8009524:	bd10      	pop	{r4, pc}
 8009526:	bf00      	nop
 8009528:	080096bd 	.word	0x080096bd
 800952c:	080096df 	.word	0x080096df
 8009530:	08009717 	.word	0x08009717
 8009534:	0800973b 	.word	0x0800973b
 8009538:	20001f54 	.word	0x20001f54

0800953c <stdio_exit_handler>:
 800953c:	4a02      	ldr	r2, [pc, #8]	@ (8009548 <stdio_exit_handler+0xc>)
 800953e:	4903      	ldr	r1, [pc, #12]	@ (800954c <stdio_exit_handler+0x10>)
 8009540:	4803      	ldr	r0, [pc, #12]	@ (8009550 <stdio_exit_handler+0x14>)
 8009542:	f000 b869 	b.w	8009618 <_fwalk_sglue>
 8009546:	bf00      	nop
 8009548:	20000100 	.word	0x20000100
 800954c:	0800b19d 	.word	0x0800b19d
 8009550:	20000110 	.word	0x20000110

08009554 <cleanup_stdio>:
 8009554:	6841      	ldr	r1, [r0, #4]
 8009556:	4b0c      	ldr	r3, [pc, #48]	@ (8009588 <cleanup_stdio+0x34>)
 8009558:	4299      	cmp	r1, r3
 800955a:	b510      	push	{r4, lr}
 800955c:	4604      	mov	r4, r0
 800955e:	d001      	beq.n	8009564 <cleanup_stdio+0x10>
 8009560:	f001 fe1c 	bl	800b19c <_fflush_r>
 8009564:	68a1      	ldr	r1, [r4, #8]
 8009566:	4b09      	ldr	r3, [pc, #36]	@ (800958c <cleanup_stdio+0x38>)
 8009568:	4299      	cmp	r1, r3
 800956a:	d002      	beq.n	8009572 <cleanup_stdio+0x1e>
 800956c:	4620      	mov	r0, r4
 800956e:	f001 fe15 	bl	800b19c <_fflush_r>
 8009572:	68e1      	ldr	r1, [r4, #12]
 8009574:	4b06      	ldr	r3, [pc, #24]	@ (8009590 <cleanup_stdio+0x3c>)
 8009576:	4299      	cmp	r1, r3
 8009578:	d004      	beq.n	8009584 <cleanup_stdio+0x30>
 800957a:	4620      	mov	r0, r4
 800957c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009580:	f001 be0c 	b.w	800b19c <_fflush_r>
 8009584:	bd10      	pop	{r4, pc}
 8009586:	bf00      	nop
 8009588:	20001f54 	.word	0x20001f54
 800958c:	20001fbc 	.word	0x20001fbc
 8009590:	20002024 	.word	0x20002024

08009594 <global_stdio_init.part.0>:
 8009594:	b510      	push	{r4, lr}
 8009596:	4b0b      	ldr	r3, [pc, #44]	@ (80095c4 <global_stdio_init.part.0+0x30>)
 8009598:	4c0b      	ldr	r4, [pc, #44]	@ (80095c8 <global_stdio_init.part.0+0x34>)
 800959a:	4a0c      	ldr	r2, [pc, #48]	@ (80095cc <global_stdio_init.part.0+0x38>)
 800959c:	601a      	str	r2, [r3, #0]
 800959e:	4620      	mov	r0, r4
 80095a0:	2200      	movs	r2, #0
 80095a2:	2104      	movs	r1, #4
 80095a4:	f7ff ff94 	bl	80094d0 <std>
 80095a8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80095ac:	2201      	movs	r2, #1
 80095ae:	2109      	movs	r1, #9
 80095b0:	f7ff ff8e 	bl	80094d0 <std>
 80095b4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80095b8:	2202      	movs	r2, #2
 80095ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80095be:	2112      	movs	r1, #18
 80095c0:	f7ff bf86 	b.w	80094d0 <std>
 80095c4:	2000208c 	.word	0x2000208c
 80095c8:	20001f54 	.word	0x20001f54
 80095cc:	0800953d 	.word	0x0800953d

080095d0 <__sfp_lock_acquire>:
 80095d0:	4801      	ldr	r0, [pc, #4]	@ (80095d8 <__sfp_lock_acquire+0x8>)
 80095d2:	f000 b934 	b.w	800983e <__retarget_lock_acquire_recursive>
 80095d6:	bf00      	nop
 80095d8:	20002095 	.word	0x20002095

080095dc <__sfp_lock_release>:
 80095dc:	4801      	ldr	r0, [pc, #4]	@ (80095e4 <__sfp_lock_release+0x8>)
 80095de:	f000 b92f 	b.w	8009840 <__retarget_lock_release_recursive>
 80095e2:	bf00      	nop
 80095e4:	20002095 	.word	0x20002095

080095e8 <__sinit>:
 80095e8:	b510      	push	{r4, lr}
 80095ea:	4604      	mov	r4, r0
 80095ec:	f7ff fff0 	bl	80095d0 <__sfp_lock_acquire>
 80095f0:	6a23      	ldr	r3, [r4, #32]
 80095f2:	b11b      	cbz	r3, 80095fc <__sinit+0x14>
 80095f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80095f8:	f7ff bff0 	b.w	80095dc <__sfp_lock_release>
 80095fc:	4b04      	ldr	r3, [pc, #16]	@ (8009610 <__sinit+0x28>)
 80095fe:	6223      	str	r3, [r4, #32]
 8009600:	4b04      	ldr	r3, [pc, #16]	@ (8009614 <__sinit+0x2c>)
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d1f5      	bne.n	80095f4 <__sinit+0xc>
 8009608:	f7ff ffc4 	bl	8009594 <global_stdio_init.part.0>
 800960c:	e7f2      	b.n	80095f4 <__sinit+0xc>
 800960e:	bf00      	nop
 8009610:	08009555 	.word	0x08009555
 8009614:	2000208c 	.word	0x2000208c

08009618 <_fwalk_sglue>:
 8009618:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800961c:	4607      	mov	r7, r0
 800961e:	4688      	mov	r8, r1
 8009620:	4614      	mov	r4, r2
 8009622:	2600      	movs	r6, #0
 8009624:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009628:	f1b9 0901 	subs.w	r9, r9, #1
 800962c:	d505      	bpl.n	800963a <_fwalk_sglue+0x22>
 800962e:	6824      	ldr	r4, [r4, #0]
 8009630:	2c00      	cmp	r4, #0
 8009632:	d1f7      	bne.n	8009624 <_fwalk_sglue+0xc>
 8009634:	4630      	mov	r0, r6
 8009636:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800963a:	89ab      	ldrh	r3, [r5, #12]
 800963c:	2b01      	cmp	r3, #1
 800963e:	d907      	bls.n	8009650 <_fwalk_sglue+0x38>
 8009640:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009644:	3301      	adds	r3, #1
 8009646:	d003      	beq.n	8009650 <_fwalk_sglue+0x38>
 8009648:	4629      	mov	r1, r5
 800964a:	4638      	mov	r0, r7
 800964c:	47c0      	blx	r8
 800964e:	4306      	orrs	r6, r0
 8009650:	3568      	adds	r5, #104	@ 0x68
 8009652:	e7e9      	b.n	8009628 <_fwalk_sglue+0x10>

08009654 <sniprintf>:
 8009654:	b40c      	push	{r2, r3}
 8009656:	b530      	push	{r4, r5, lr}
 8009658:	4b17      	ldr	r3, [pc, #92]	@ (80096b8 <sniprintf+0x64>)
 800965a:	1e0c      	subs	r4, r1, #0
 800965c:	681d      	ldr	r5, [r3, #0]
 800965e:	b09d      	sub	sp, #116	@ 0x74
 8009660:	da08      	bge.n	8009674 <sniprintf+0x20>
 8009662:	238b      	movs	r3, #139	@ 0x8b
 8009664:	602b      	str	r3, [r5, #0]
 8009666:	f04f 30ff 	mov.w	r0, #4294967295
 800966a:	b01d      	add	sp, #116	@ 0x74
 800966c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009670:	b002      	add	sp, #8
 8009672:	4770      	bx	lr
 8009674:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009678:	f8ad 3014 	strh.w	r3, [sp, #20]
 800967c:	bf14      	ite	ne
 800967e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009682:	4623      	moveq	r3, r4
 8009684:	9304      	str	r3, [sp, #16]
 8009686:	9307      	str	r3, [sp, #28]
 8009688:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800968c:	9002      	str	r0, [sp, #8]
 800968e:	9006      	str	r0, [sp, #24]
 8009690:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009694:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009696:	ab21      	add	r3, sp, #132	@ 0x84
 8009698:	a902      	add	r1, sp, #8
 800969a:	4628      	mov	r0, r5
 800969c:	9301      	str	r3, [sp, #4]
 800969e:	f001 fbfd 	bl	800ae9c <_svfiprintf_r>
 80096a2:	1c43      	adds	r3, r0, #1
 80096a4:	bfbc      	itt	lt
 80096a6:	238b      	movlt	r3, #139	@ 0x8b
 80096a8:	602b      	strlt	r3, [r5, #0]
 80096aa:	2c00      	cmp	r4, #0
 80096ac:	d0dd      	beq.n	800966a <sniprintf+0x16>
 80096ae:	9b02      	ldr	r3, [sp, #8]
 80096b0:	2200      	movs	r2, #0
 80096b2:	701a      	strb	r2, [r3, #0]
 80096b4:	e7d9      	b.n	800966a <sniprintf+0x16>
 80096b6:	bf00      	nop
 80096b8:	2000010c 	.word	0x2000010c

080096bc <__sread>:
 80096bc:	b510      	push	{r4, lr}
 80096be:	460c      	mov	r4, r1
 80096c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096c4:	f000 f86c 	bl	80097a0 <_read_r>
 80096c8:	2800      	cmp	r0, #0
 80096ca:	bfab      	itete	ge
 80096cc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80096ce:	89a3      	ldrhlt	r3, [r4, #12]
 80096d0:	181b      	addge	r3, r3, r0
 80096d2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80096d6:	bfac      	ite	ge
 80096d8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80096da:	81a3      	strhlt	r3, [r4, #12]
 80096dc:	bd10      	pop	{r4, pc}

080096de <__swrite>:
 80096de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096e2:	461f      	mov	r7, r3
 80096e4:	898b      	ldrh	r3, [r1, #12]
 80096e6:	05db      	lsls	r3, r3, #23
 80096e8:	4605      	mov	r5, r0
 80096ea:	460c      	mov	r4, r1
 80096ec:	4616      	mov	r6, r2
 80096ee:	d505      	bpl.n	80096fc <__swrite+0x1e>
 80096f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096f4:	2302      	movs	r3, #2
 80096f6:	2200      	movs	r2, #0
 80096f8:	f000 f840 	bl	800977c <_lseek_r>
 80096fc:	89a3      	ldrh	r3, [r4, #12]
 80096fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009702:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009706:	81a3      	strh	r3, [r4, #12]
 8009708:	4632      	mov	r2, r6
 800970a:	463b      	mov	r3, r7
 800970c:	4628      	mov	r0, r5
 800970e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009712:	f000 b857 	b.w	80097c4 <_write_r>

08009716 <__sseek>:
 8009716:	b510      	push	{r4, lr}
 8009718:	460c      	mov	r4, r1
 800971a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800971e:	f000 f82d 	bl	800977c <_lseek_r>
 8009722:	1c43      	adds	r3, r0, #1
 8009724:	89a3      	ldrh	r3, [r4, #12]
 8009726:	bf15      	itete	ne
 8009728:	6560      	strne	r0, [r4, #84]	@ 0x54
 800972a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800972e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009732:	81a3      	strheq	r3, [r4, #12]
 8009734:	bf18      	it	ne
 8009736:	81a3      	strhne	r3, [r4, #12]
 8009738:	bd10      	pop	{r4, pc}

0800973a <__sclose>:
 800973a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800973e:	f000 b80d 	b.w	800975c <_close_r>

08009742 <memset>:
 8009742:	4402      	add	r2, r0
 8009744:	4603      	mov	r3, r0
 8009746:	4293      	cmp	r3, r2
 8009748:	d100      	bne.n	800974c <memset+0xa>
 800974a:	4770      	bx	lr
 800974c:	f803 1b01 	strb.w	r1, [r3], #1
 8009750:	e7f9      	b.n	8009746 <memset+0x4>
	...

08009754 <_localeconv_r>:
 8009754:	4800      	ldr	r0, [pc, #0]	@ (8009758 <_localeconv_r+0x4>)
 8009756:	4770      	bx	lr
 8009758:	2000024c 	.word	0x2000024c

0800975c <_close_r>:
 800975c:	b538      	push	{r3, r4, r5, lr}
 800975e:	4d06      	ldr	r5, [pc, #24]	@ (8009778 <_close_r+0x1c>)
 8009760:	2300      	movs	r3, #0
 8009762:	4604      	mov	r4, r0
 8009764:	4608      	mov	r0, r1
 8009766:	602b      	str	r3, [r5, #0]
 8009768:	f7f7 ff72 	bl	8001650 <_close>
 800976c:	1c43      	adds	r3, r0, #1
 800976e:	d102      	bne.n	8009776 <_close_r+0x1a>
 8009770:	682b      	ldr	r3, [r5, #0]
 8009772:	b103      	cbz	r3, 8009776 <_close_r+0x1a>
 8009774:	6023      	str	r3, [r4, #0]
 8009776:	bd38      	pop	{r3, r4, r5, pc}
 8009778:	20002090 	.word	0x20002090

0800977c <_lseek_r>:
 800977c:	b538      	push	{r3, r4, r5, lr}
 800977e:	4d07      	ldr	r5, [pc, #28]	@ (800979c <_lseek_r+0x20>)
 8009780:	4604      	mov	r4, r0
 8009782:	4608      	mov	r0, r1
 8009784:	4611      	mov	r1, r2
 8009786:	2200      	movs	r2, #0
 8009788:	602a      	str	r2, [r5, #0]
 800978a:	461a      	mov	r2, r3
 800978c:	f7f7 ff87 	bl	800169e <_lseek>
 8009790:	1c43      	adds	r3, r0, #1
 8009792:	d102      	bne.n	800979a <_lseek_r+0x1e>
 8009794:	682b      	ldr	r3, [r5, #0]
 8009796:	b103      	cbz	r3, 800979a <_lseek_r+0x1e>
 8009798:	6023      	str	r3, [r4, #0]
 800979a:	bd38      	pop	{r3, r4, r5, pc}
 800979c:	20002090 	.word	0x20002090

080097a0 <_read_r>:
 80097a0:	b538      	push	{r3, r4, r5, lr}
 80097a2:	4d07      	ldr	r5, [pc, #28]	@ (80097c0 <_read_r+0x20>)
 80097a4:	4604      	mov	r4, r0
 80097a6:	4608      	mov	r0, r1
 80097a8:	4611      	mov	r1, r2
 80097aa:	2200      	movs	r2, #0
 80097ac:	602a      	str	r2, [r5, #0]
 80097ae:	461a      	mov	r2, r3
 80097b0:	f7f7 ff15 	bl	80015de <_read>
 80097b4:	1c43      	adds	r3, r0, #1
 80097b6:	d102      	bne.n	80097be <_read_r+0x1e>
 80097b8:	682b      	ldr	r3, [r5, #0]
 80097ba:	b103      	cbz	r3, 80097be <_read_r+0x1e>
 80097bc:	6023      	str	r3, [r4, #0]
 80097be:	bd38      	pop	{r3, r4, r5, pc}
 80097c0:	20002090 	.word	0x20002090

080097c4 <_write_r>:
 80097c4:	b538      	push	{r3, r4, r5, lr}
 80097c6:	4d07      	ldr	r5, [pc, #28]	@ (80097e4 <_write_r+0x20>)
 80097c8:	4604      	mov	r4, r0
 80097ca:	4608      	mov	r0, r1
 80097cc:	4611      	mov	r1, r2
 80097ce:	2200      	movs	r2, #0
 80097d0:	602a      	str	r2, [r5, #0]
 80097d2:	461a      	mov	r2, r3
 80097d4:	f7f7 ff20 	bl	8001618 <_write>
 80097d8:	1c43      	adds	r3, r0, #1
 80097da:	d102      	bne.n	80097e2 <_write_r+0x1e>
 80097dc:	682b      	ldr	r3, [r5, #0]
 80097de:	b103      	cbz	r3, 80097e2 <_write_r+0x1e>
 80097e0:	6023      	str	r3, [r4, #0]
 80097e2:	bd38      	pop	{r3, r4, r5, pc}
 80097e4:	20002090 	.word	0x20002090

080097e8 <__errno>:
 80097e8:	4b01      	ldr	r3, [pc, #4]	@ (80097f0 <__errno+0x8>)
 80097ea:	6818      	ldr	r0, [r3, #0]
 80097ec:	4770      	bx	lr
 80097ee:	bf00      	nop
 80097f0:	2000010c 	.word	0x2000010c

080097f4 <__libc_init_array>:
 80097f4:	b570      	push	{r4, r5, r6, lr}
 80097f6:	4d0d      	ldr	r5, [pc, #52]	@ (800982c <__libc_init_array+0x38>)
 80097f8:	4c0d      	ldr	r4, [pc, #52]	@ (8009830 <__libc_init_array+0x3c>)
 80097fa:	1b64      	subs	r4, r4, r5
 80097fc:	10a4      	asrs	r4, r4, #2
 80097fe:	2600      	movs	r6, #0
 8009800:	42a6      	cmp	r6, r4
 8009802:	d109      	bne.n	8009818 <__libc_init_array+0x24>
 8009804:	4d0b      	ldr	r5, [pc, #44]	@ (8009834 <__libc_init_array+0x40>)
 8009806:	4c0c      	ldr	r4, [pc, #48]	@ (8009838 <__libc_init_array+0x44>)
 8009808:	f002 fc30 	bl	800c06c <_init>
 800980c:	1b64      	subs	r4, r4, r5
 800980e:	10a4      	asrs	r4, r4, #2
 8009810:	2600      	movs	r6, #0
 8009812:	42a6      	cmp	r6, r4
 8009814:	d105      	bne.n	8009822 <__libc_init_array+0x2e>
 8009816:	bd70      	pop	{r4, r5, r6, pc}
 8009818:	f855 3b04 	ldr.w	r3, [r5], #4
 800981c:	4798      	blx	r3
 800981e:	3601      	adds	r6, #1
 8009820:	e7ee      	b.n	8009800 <__libc_init_array+0xc>
 8009822:	f855 3b04 	ldr.w	r3, [r5], #4
 8009826:	4798      	blx	r3
 8009828:	3601      	adds	r6, #1
 800982a:	e7f2      	b.n	8009812 <__libc_init_array+0x1e>
 800982c:	0800c4b8 	.word	0x0800c4b8
 8009830:	0800c4b8 	.word	0x0800c4b8
 8009834:	0800c4b8 	.word	0x0800c4b8
 8009838:	0800c4bc 	.word	0x0800c4bc

0800983c <__retarget_lock_init_recursive>:
 800983c:	4770      	bx	lr

0800983e <__retarget_lock_acquire_recursive>:
 800983e:	4770      	bx	lr

08009840 <__retarget_lock_release_recursive>:
 8009840:	4770      	bx	lr

08009842 <quorem>:
 8009842:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009846:	6903      	ldr	r3, [r0, #16]
 8009848:	690c      	ldr	r4, [r1, #16]
 800984a:	42a3      	cmp	r3, r4
 800984c:	4607      	mov	r7, r0
 800984e:	db7e      	blt.n	800994e <quorem+0x10c>
 8009850:	3c01      	subs	r4, #1
 8009852:	f101 0814 	add.w	r8, r1, #20
 8009856:	00a3      	lsls	r3, r4, #2
 8009858:	f100 0514 	add.w	r5, r0, #20
 800985c:	9300      	str	r3, [sp, #0]
 800985e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009862:	9301      	str	r3, [sp, #4]
 8009864:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009868:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800986c:	3301      	adds	r3, #1
 800986e:	429a      	cmp	r2, r3
 8009870:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009874:	fbb2 f6f3 	udiv	r6, r2, r3
 8009878:	d32e      	bcc.n	80098d8 <quorem+0x96>
 800987a:	f04f 0a00 	mov.w	sl, #0
 800987e:	46c4      	mov	ip, r8
 8009880:	46ae      	mov	lr, r5
 8009882:	46d3      	mov	fp, sl
 8009884:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009888:	b298      	uxth	r0, r3
 800988a:	fb06 a000 	mla	r0, r6, r0, sl
 800988e:	0c02      	lsrs	r2, r0, #16
 8009890:	0c1b      	lsrs	r3, r3, #16
 8009892:	fb06 2303 	mla	r3, r6, r3, r2
 8009896:	f8de 2000 	ldr.w	r2, [lr]
 800989a:	b280      	uxth	r0, r0
 800989c:	b292      	uxth	r2, r2
 800989e:	1a12      	subs	r2, r2, r0
 80098a0:	445a      	add	r2, fp
 80098a2:	f8de 0000 	ldr.w	r0, [lr]
 80098a6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80098aa:	b29b      	uxth	r3, r3
 80098ac:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80098b0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80098b4:	b292      	uxth	r2, r2
 80098b6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80098ba:	45e1      	cmp	r9, ip
 80098bc:	f84e 2b04 	str.w	r2, [lr], #4
 80098c0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80098c4:	d2de      	bcs.n	8009884 <quorem+0x42>
 80098c6:	9b00      	ldr	r3, [sp, #0]
 80098c8:	58eb      	ldr	r3, [r5, r3]
 80098ca:	b92b      	cbnz	r3, 80098d8 <quorem+0x96>
 80098cc:	9b01      	ldr	r3, [sp, #4]
 80098ce:	3b04      	subs	r3, #4
 80098d0:	429d      	cmp	r5, r3
 80098d2:	461a      	mov	r2, r3
 80098d4:	d32f      	bcc.n	8009936 <quorem+0xf4>
 80098d6:	613c      	str	r4, [r7, #16]
 80098d8:	4638      	mov	r0, r7
 80098da:	f001 f97b 	bl	800abd4 <__mcmp>
 80098de:	2800      	cmp	r0, #0
 80098e0:	db25      	blt.n	800992e <quorem+0xec>
 80098e2:	4629      	mov	r1, r5
 80098e4:	2000      	movs	r0, #0
 80098e6:	f858 2b04 	ldr.w	r2, [r8], #4
 80098ea:	f8d1 c000 	ldr.w	ip, [r1]
 80098ee:	fa1f fe82 	uxth.w	lr, r2
 80098f2:	fa1f f38c 	uxth.w	r3, ip
 80098f6:	eba3 030e 	sub.w	r3, r3, lr
 80098fa:	4403      	add	r3, r0
 80098fc:	0c12      	lsrs	r2, r2, #16
 80098fe:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009902:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009906:	b29b      	uxth	r3, r3
 8009908:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800990c:	45c1      	cmp	r9, r8
 800990e:	f841 3b04 	str.w	r3, [r1], #4
 8009912:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009916:	d2e6      	bcs.n	80098e6 <quorem+0xa4>
 8009918:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800991c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009920:	b922      	cbnz	r2, 800992c <quorem+0xea>
 8009922:	3b04      	subs	r3, #4
 8009924:	429d      	cmp	r5, r3
 8009926:	461a      	mov	r2, r3
 8009928:	d30b      	bcc.n	8009942 <quorem+0x100>
 800992a:	613c      	str	r4, [r7, #16]
 800992c:	3601      	adds	r6, #1
 800992e:	4630      	mov	r0, r6
 8009930:	b003      	add	sp, #12
 8009932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009936:	6812      	ldr	r2, [r2, #0]
 8009938:	3b04      	subs	r3, #4
 800993a:	2a00      	cmp	r2, #0
 800993c:	d1cb      	bne.n	80098d6 <quorem+0x94>
 800993e:	3c01      	subs	r4, #1
 8009940:	e7c6      	b.n	80098d0 <quorem+0x8e>
 8009942:	6812      	ldr	r2, [r2, #0]
 8009944:	3b04      	subs	r3, #4
 8009946:	2a00      	cmp	r2, #0
 8009948:	d1ef      	bne.n	800992a <quorem+0xe8>
 800994a:	3c01      	subs	r4, #1
 800994c:	e7ea      	b.n	8009924 <quorem+0xe2>
 800994e:	2000      	movs	r0, #0
 8009950:	e7ee      	b.n	8009930 <quorem+0xee>
 8009952:	0000      	movs	r0, r0
 8009954:	0000      	movs	r0, r0
	...

08009958 <_dtoa_r>:
 8009958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800995c:	69c7      	ldr	r7, [r0, #28]
 800995e:	b099      	sub	sp, #100	@ 0x64
 8009960:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009964:	ec55 4b10 	vmov	r4, r5, d0
 8009968:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800996a:	9109      	str	r1, [sp, #36]	@ 0x24
 800996c:	4683      	mov	fp, r0
 800996e:	920e      	str	r2, [sp, #56]	@ 0x38
 8009970:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009972:	b97f      	cbnz	r7, 8009994 <_dtoa_r+0x3c>
 8009974:	2010      	movs	r0, #16
 8009976:	f000 fdfd 	bl	800a574 <malloc>
 800997a:	4602      	mov	r2, r0
 800997c:	f8cb 001c 	str.w	r0, [fp, #28]
 8009980:	b920      	cbnz	r0, 800998c <_dtoa_r+0x34>
 8009982:	4ba7      	ldr	r3, [pc, #668]	@ (8009c20 <_dtoa_r+0x2c8>)
 8009984:	21ef      	movs	r1, #239	@ 0xef
 8009986:	48a7      	ldr	r0, [pc, #668]	@ (8009c24 <_dtoa_r+0x2cc>)
 8009988:	f001 fc68 	bl	800b25c <__assert_func>
 800998c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009990:	6007      	str	r7, [r0, #0]
 8009992:	60c7      	str	r7, [r0, #12]
 8009994:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009998:	6819      	ldr	r1, [r3, #0]
 800999a:	b159      	cbz	r1, 80099b4 <_dtoa_r+0x5c>
 800999c:	685a      	ldr	r2, [r3, #4]
 800999e:	604a      	str	r2, [r1, #4]
 80099a0:	2301      	movs	r3, #1
 80099a2:	4093      	lsls	r3, r2
 80099a4:	608b      	str	r3, [r1, #8]
 80099a6:	4658      	mov	r0, fp
 80099a8:	f000 feda 	bl	800a760 <_Bfree>
 80099ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 80099b0:	2200      	movs	r2, #0
 80099b2:	601a      	str	r2, [r3, #0]
 80099b4:	1e2b      	subs	r3, r5, #0
 80099b6:	bfb9      	ittee	lt
 80099b8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80099bc:	9303      	strlt	r3, [sp, #12]
 80099be:	2300      	movge	r3, #0
 80099c0:	6033      	strge	r3, [r6, #0]
 80099c2:	9f03      	ldr	r7, [sp, #12]
 80099c4:	4b98      	ldr	r3, [pc, #608]	@ (8009c28 <_dtoa_r+0x2d0>)
 80099c6:	bfbc      	itt	lt
 80099c8:	2201      	movlt	r2, #1
 80099ca:	6032      	strlt	r2, [r6, #0]
 80099cc:	43bb      	bics	r3, r7
 80099ce:	d112      	bne.n	80099f6 <_dtoa_r+0x9e>
 80099d0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80099d2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80099d6:	6013      	str	r3, [r2, #0]
 80099d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80099dc:	4323      	orrs	r3, r4
 80099de:	f000 854d 	beq.w	800a47c <_dtoa_r+0xb24>
 80099e2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80099e4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8009c3c <_dtoa_r+0x2e4>
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	f000 854f 	beq.w	800a48c <_dtoa_r+0xb34>
 80099ee:	f10a 0303 	add.w	r3, sl, #3
 80099f2:	f000 bd49 	b.w	800a488 <_dtoa_r+0xb30>
 80099f6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80099fa:	2200      	movs	r2, #0
 80099fc:	ec51 0b17 	vmov	r0, r1, d7
 8009a00:	2300      	movs	r3, #0
 8009a02:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8009a06:	f7f7 f867 	bl	8000ad8 <__aeabi_dcmpeq>
 8009a0a:	4680      	mov	r8, r0
 8009a0c:	b158      	cbz	r0, 8009a26 <_dtoa_r+0xce>
 8009a0e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009a10:	2301      	movs	r3, #1
 8009a12:	6013      	str	r3, [r2, #0]
 8009a14:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009a16:	b113      	cbz	r3, 8009a1e <_dtoa_r+0xc6>
 8009a18:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009a1a:	4b84      	ldr	r3, [pc, #528]	@ (8009c2c <_dtoa_r+0x2d4>)
 8009a1c:	6013      	str	r3, [r2, #0]
 8009a1e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009c40 <_dtoa_r+0x2e8>
 8009a22:	f000 bd33 	b.w	800a48c <_dtoa_r+0xb34>
 8009a26:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009a2a:	aa16      	add	r2, sp, #88	@ 0x58
 8009a2c:	a917      	add	r1, sp, #92	@ 0x5c
 8009a2e:	4658      	mov	r0, fp
 8009a30:	f001 f980 	bl	800ad34 <__d2b>
 8009a34:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009a38:	4681      	mov	r9, r0
 8009a3a:	2e00      	cmp	r6, #0
 8009a3c:	d077      	beq.n	8009b2e <_dtoa_r+0x1d6>
 8009a3e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009a40:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8009a44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009a48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009a4c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009a50:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009a54:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009a58:	4619      	mov	r1, r3
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	4b74      	ldr	r3, [pc, #464]	@ (8009c30 <_dtoa_r+0x2d8>)
 8009a5e:	f7f6 fc1b 	bl	8000298 <__aeabi_dsub>
 8009a62:	a369      	add	r3, pc, #420	@ (adr r3, 8009c08 <_dtoa_r+0x2b0>)
 8009a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a68:	f7f6 fdce 	bl	8000608 <__aeabi_dmul>
 8009a6c:	a368      	add	r3, pc, #416	@ (adr r3, 8009c10 <_dtoa_r+0x2b8>)
 8009a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a72:	f7f6 fc13 	bl	800029c <__adddf3>
 8009a76:	4604      	mov	r4, r0
 8009a78:	4630      	mov	r0, r6
 8009a7a:	460d      	mov	r5, r1
 8009a7c:	f7f6 fd5a 	bl	8000534 <__aeabi_i2d>
 8009a80:	a365      	add	r3, pc, #404	@ (adr r3, 8009c18 <_dtoa_r+0x2c0>)
 8009a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a86:	f7f6 fdbf 	bl	8000608 <__aeabi_dmul>
 8009a8a:	4602      	mov	r2, r0
 8009a8c:	460b      	mov	r3, r1
 8009a8e:	4620      	mov	r0, r4
 8009a90:	4629      	mov	r1, r5
 8009a92:	f7f6 fc03 	bl	800029c <__adddf3>
 8009a96:	4604      	mov	r4, r0
 8009a98:	460d      	mov	r5, r1
 8009a9a:	f7f7 f865 	bl	8000b68 <__aeabi_d2iz>
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	4607      	mov	r7, r0
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	4620      	mov	r0, r4
 8009aa6:	4629      	mov	r1, r5
 8009aa8:	f7f7 f820 	bl	8000aec <__aeabi_dcmplt>
 8009aac:	b140      	cbz	r0, 8009ac0 <_dtoa_r+0x168>
 8009aae:	4638      	mov	r0, r7
 8009ab0:	f7f6 fd40 	bl	8000534 <__aeabi_i2d>
 8009ab4:	4622      	mov	r2, r4
 8009ab6:	462b      	mov	r3, r5
 8009ab8:	f7f7 f80e 	bl	8000ad8 <__aeabi_dcmpeq>
 8009abc:	b900      	cbnz	r0, 8009ac0 <_dtoa_r+0x168>
 8009abe:	3f01      	subs	r7, #1
 8009ac0:	2f16      	cmp	r7, #22
 8009ac2:	d851      	bhi.n	8009b68 <_dtoa_r+0x210>
 8009ac4:	4b5b      	ldr	r3, [pc, #364]	@ (8009c34 <_dtoa_r+0x2dc>)
 8009ac6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ace:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009ad2:	f7f7 f80b 	bl	8000aec <__aeabi_dcmplt>
 8009ad6:	2800      	cmp	r0, #0
 8009ad8:	d048      	beq.n	8009b6c <_dtoa_r+0x214>
 8009ada:	3f01      	subs	r7, #1
 8009adc:	2300      	movs	r3, #0
 8009ade:	9312      	str	r3, [sp, #72]	@ 0x48
 8009ae0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009ae2:	1b9b      	subs	r3, r3, r6
 8009ae4:	1e5a      	subs	r2, r3, #1
 8009ae6:	bf44      	itt	mi
 8009ae8:	f1c3 0801 	rsbmi	r8, r3, #1
 8009aec:	2300      	movmi	r3, #0
 8009aee:	9208      	str	r2, [sp, #32]
 8009af0:	bf54      	ite	pl
 8009af2:	f04f 0800 	movpl.w	r8, #0
 8009af6:	9308      	strmi	r3, [sp, #32]
 8009af8:	2f00      	cmp	r7, #0
 8009afa:	db39      	blt.n	8009b70 <_dtoa_r+0x218>
 8009afc:	9b08      	ldr	r3, [sp, #32]
 8009afe:	970f      	str	r7, [sp, #60]	@ 0x3c
 8009b00:	443b      	add	r3, r7
 8009b02:	9308      	str	r3, [sp, #32]
 8009b04:	2300      	movs	r3, #0
 8009b06:	930a      	str	r3, [sp, #40]	@ 0x28
 8009b08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b0a:	2b09      	cmp	r3, #9
 8009b0c:	d864      	bhi.n	8009bd8 <_dtoa_r+0x280>
 8009b0e:	2b05      	cmp	r3, #5
 8009b10:	bfc4      	itt	gt
 8009b12:	3b04      	subgt	r3, #4
 8009b14:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8009b16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b18:	f1a3 0302 	sub.w	r3, r3, #2
 8009b1c:	bfcc      	ite	gt
 8009b1e:	2400      	movgt	r4, #0
 8009b20:	2401      	movle	r4, #1
 8009b22:	2b03      	cmp	r3, #3
 8009b24:	d863      	bhi.n	8009bee <_dtoa_r+0x296>
 8009b26:	e8df f003 	tbb	[pc, r3]
 8009b2a:	372a      	.short	0x372a
 8009b2c:	5535      	.short	0x5535
 8009b2e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8009b32:	441e      	add	r6, r3
 8009b34:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009b38:	2b20      	cmp	r3, #32
 8009b3a:	bfc1      	itttt	gt
 8009b3c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009b40:	409f      	lslgt	r7, r3
 8009b42:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009b46:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009b4a:	bfd6      	itet	le
 8009b4c:	f1c3 0320 	rsble	r3, r3, #32
 8009b50:	ea47 0003 	orrgt.w	r0, r7, r3
 8009b54:	fa04 f003 	lslle.w	r0, r4, r3
 8009b58:	f7f6 fcdc 	bl	8000514 <__aeabi_ui2d>
 8009b5c:	2201      	movs	r2, #1
 8009b5e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009b62:	3e01      	subs	r6, #1
 8009b64:	9214      	str	r2, [sp, #80]	@ 0x50
 8009b66:	e777      	b.n	8009a58 <_dtoa_r+0x100>
 8009b68:	2301      	movs	r3, #1
 8009b6a:	e7b8      	b.n	8009ade <_dtoa_r+0x186>
 8009b6c:	9012      	str	r0, [sp, #72]	@ 0x48
 8009b6e:	e7b7      	b.n	8009ae0 <_dtoa_r+0x188>
 8009b70:	427b      	negs	r3, r7
 8009b72:	930a      	str	r3, [sp, #40]	@ 0x28
 8009b74:	2300      	movs	r3, #0
 8009b76:	eba8 0807 	sub.w	r8, r8, r7
 8009b7a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009b7c:	e7c4      	b.n	8009b08 <_dtoa_r+0x1b0>
 8009b7e:	2300      	movs	r3, #0
 8009b80:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009b82:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	dc35      	bgt.n	8009bf4 <_dtoa_r+0x29c>
 8009b88:	2301      	movs	r3, #1
 8009b8a:	9300      	str	r3, [sp, #0]
 8009b8c:	9307      	str	r3, [sp, #28]
 8009b8e:	461a      	mov	r2, r3
 8009b90:	920e      	str	r2, [sp, #56]	@ 0x38
 8009b92:	e00b      	b.n	8009bac <_dtoa_r+0x254>
 8009b94:	2301      	movs	r3, #1
 8009b96:	e7f3      	b.n	8009b80 <_dtoa_r+0x228>
 8009b98:	2300      	movs	r3, #0
 8009b9a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009b9c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b9e:	18fb      	adds	r3, r7, r3
 8009ba0:	9300      	str	r3, [sp, #0]
 8009ba2:	3301      	adds	r3, #1
 8009ba4:	2b01      	cmp	r3, #1
 8009ba6:	9307      	str	r3, [sp, #28]
 8009ba8:	bfb8      	it	lt
 8009baa:	2301      	movlt	r3, #1
 8009bac:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009bb0:	2100      	movs	r1, #0
 8009bb2:	2204      	movs	r2, #4
 8009bb4:	f102 0514 	add.w	r5, r2, #20
 8009bb8:	429d      	cmp	r5, r3
 8009bba:	d91f      	bls.n	8009bfc <_dtoa_r+0x2a4>
 8009bbc:	6041      	str	r1, [r0, #4]
 8009bbe:	4658      	mov	r0, fp
 8009bc0:	f000 fd8e 	bl	800a6e0 <_Balloc>
 8009bc4:	4682      	mov	sl, r0
 8009bc6:	2800      	cmp	r0, #0
 8009bc8:	d13c      	bne.n	8009c44 <_dtoa_r+0x2ec>
 8009bca:	4b1b      	ldr	r3, [pc, #108]	@ (8009c38 <_dtoa_r+0x2e0>)
 8009bcc:	4602      	mov	r2, r0
 8009bce:	f240 11af 	movw	r1, #431	@ 0x1af
 8009bd2:	e6d8      	b.n	8009986 <_dtoa_r+0x2e>
 8009bd4:	2301      	movs	r3, #1
 8009bd6:	e7e0      	b.n	8009b9a <_dtoa_r+0x242>
 8009bd8:	2401      	movs	r4, #1
 8009bda:	2300      	movs	r3, #0
 8009bdc:	9309      	str	r3, [sp, #36]	@ 0x24
 8009bde:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009be0:	f04f 33ff 	mov.w	r3, #4294967295
 8009be4:	9300      	str	r3, [sp, #0]
 8009be6:	9307      	str	r3, [sp, #28]
 8009be8:	2200      	movs	r2, #0
 8009bea:	2312      	movs	r3, #18
 8009bec:	e7d0      	b.n	8009b90 <_dtoa_r+0x238>
 8009bee:	2301      	movs	r3, #1
 8009bf0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009bf2:	e7f5      	b.n	8009be0 <_dtoa_r+0x288>
 8009bf4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009bf6:	9300      	str	r3, [sp, #0]
 8009bf8:	9307      	str	r3, [sp, #28]
 8009bfa:	e7d7      	b.n	8009bac <_dtoa_r+0x254>
 8009bfc:	3101      	adds	r1, #1
 8009bfe:	0052      	lsls	r2, r2, #1
 8009c00:	e7d8      	b.n	8009bb4 <_dtoa_r+0x25c>
 8009c02:	bf00      	nop
 8009c04:	f3af 8000 	nop.w
 8009c08:	636f4361 	.word	0x636f4361
 8009c0c:	3fd287a7 	.word	0x3fd287a7
 8009c10:	8b60c8b3 	.word	0x8b60c8b3
 8009c14:	3fc68a28 	.word	0x3fc68a28
 8009c18:	509f79fb 	.word	0x509f79fb
 8009c1c:	3fd34413 	.word	0x3fd34413
 8009c20:	0800c169 	.word	0x0800c169
 8009c24:	0800c180 	.word	0x0800c180
 8009c28:	7ff00000 	.word	0x7ff00000
 8009c2c:	0800c139 	.word	0x0800c139
 8009c30:	3ff80000 	.word	0x3ff80000
 8009c34:	0800c278 	.word	0x0800c278
 8009c38:	0800c1d8 	.word	0x0800c1d8
 8009c3c:	0800c165 	.word	0x0800c165
 8009c40:	0800c138 	.word	0x0800c138
 8009c44:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009c48:	6018      	str	r0, [r3, #0]
 8009c4a:	9b07      	ldr	r3, [sp, #28]
 8009c4c:	2b0e      	cmp	r3, #14
 8009c4e:	f200 80a4 	bhi.w	8009d9a <_dtoa_r+0x442>
 8009c52:	2c00      	cmp	r4, #0
 8009c54:	f000 80a1 	beq.w	8009d9a <_dtoa_r+0x442>
 8009c58:	2f00      	cmp	r7, #0
 8009c5a:	dd33      	ble.n	8009cc4 <_dtoa_r+0x36c>
 8009c5c:	4bad      	ldr	r3, [pc, #692]	@ (8009f14 <_dtoa_r+0x5bc>)
 8009c5e:	f007 020f 	and.w	r2, r7, #15
 8009c62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009c66:	ed93 7b00 	vldr	d7, [r3]
 8009c6a:	05f8      	lsls	r0, r7, #23
 8009c6c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009c70:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009c74:	d516      	bpl.n	8009ca4 <_dtoa_r+0x34c>
 8009c76:	4ba8      	ldr	r3, [pc, #672]	@ (8009f18 <_dtoa_r+0x5c0>)
 8009c78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009c7c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009c80:	f7f6 fdec 	bl	800085c <__aeabi_ddiv>
 8009c84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c88:	f004 040f 	and.w	r4, r4, #15
 8009c8c:	2603      	movs	r6, #3
 8009c8e:	4da2      	ldr	r5, [pc, #648]	@ (8009f18 <_dtoa_r+0x5c0>)
 8009c90:	b954      	cbnz	r4, 8009ca8 <_dtoa_r+0x350>
 8009c92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009c96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c9a:	f7f6 fddf 	bl	800085c <__aeabi_ddiv>
 8009c9e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ca2:	e028      	b.n	8009cf6 <_dtoa_r+0x39e>
 8009ca4:	2602      	movs	r6, #2
 8009ca6:	e7f2      	b.n	8009c8e <_dtoa_r+0x336>
 8009ca8:	07e1      	lsls	r1, r4, #31
 8009caa:	d508      	bpl.n	8009cbe <_dtoa_r+0x366>
 8009cac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009cb0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009cb4:	f7f6 fca8 	bl	8000608 <__aeabi_dmul>
 8009cb8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009cbc:	3601      	adds	r6, #1
 8009cbe:	1064      	asrs	r4, r4, #1
 8009cc0:	3508      	adds	r5, #8
 8009cc2:	e7e5      	b.n	8009c90 <_dtoa_r+0x338>
 8009cc4:	f000 80d2 	beq.w	8009e6c <_dtoa_r+0x514>
 8009cc8:	427c      	negs	r4, r7
 8009cca:	4b92      	ldr	r3, [pc, #584]	@ (8009f14 <_dtoa_r+0x5bc>)
 8009ccc:	4d92      	ldr	r5, [pc, #584]	@ (8009f18 <_dtoa_r+0x5c0>)
 8009cce:	f004 020f 	and.w	r2, r4, #15
 8009cd2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cda:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009cde:	f7f6 fc93 	bl	8000608 <__aeabi_dmul>
 8009ce2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ce6:	1124      	asrs	r4, r4, #4
 8009ce8:	2300      	movs	r3, #0
 8009cea:	2602      	movs	r6, #2
 8009cec:	2c00      	cmp	r4, #0
 8009cee:	f040 80b2 	bne.w	8009e56 <_dtoa_r+0x4fe>
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d1d3      	bne.n	8009c9e <_dtoa_r+0x346>
 8009cf6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009cf8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	f000 80b7 	beq.w	8009e70 <_dtoa_r+0x518>
 8009d02:	4b86      	ldr	r3, [pc, #536]	@ (8009f1c <_dtoa_r+0x5c4>)
 8009d04:	2200      	movs	r2, #0
 8009d06:	4620      	mov	r0, r4
 8009d08:	4629      	mov	r1, r5
 8009d0a:	f7f6 feef 	bl	8000aec <__aeabi_dcmplt>
 8009d0e:	2800      	cmp	r0, #0
 8009d10:	f000 80ae 	beq.w	8009e70 <_dtoa_r+0x518>
 8009d14:	9b07      	ldr	r3, [sp, #28]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	f000 80aa 	beq.w	8009e70 <_dtoa_r+0x518>
 8009d1c:	9b00      	ldr	r3, [sp, #0]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	dd37      	ble.n	8009d92 <_dtoa_r+0x43a>
 8009d22:	1e7b      	subs	r3, r7, #1
 8009d24:	9304      	str	r3, [sp, #16]
 8009d26:	4620      	mov	r0, r4
 8009d28:	4b7d      	ldr	r3, [pc, #500]	@ (8009f20 <_dtoa_r+0x5c8>)
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	4629      	mov	r1, r5
 8009d2e:	f7f6 fc6b 	bl	8000608 <__aeabi_dmul>
 8009d32:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d36:	9c00      	ldr	r4, [sp, #0]
 8009d38:	3601      	adds	r6, #1
 8009d3a:	4630      	mov	r0, r6
 8009d3c:	f7f6 fbfa 	bl	8000534 <__aeabi_i2d>
 8009d40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009d44:	f7f6 fc60 	bl	8000608 <__aeabi_dmul>
 8009d48:	4b76      	ldr	r3, [pc, #472]	@ (8009f24 <_dtoa_r+0x5cc>)
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	f7f6 faa6 	bl	800029c <__adddf3>
 8009d50:	4605      	mov	r5, r0
 8009d52:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009d56:	2c00      	cmp	r4, #0
 8009d58:	f040 808d 	bne.w	8009e76 <_dtoa_r+0x51e>
 8009d5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d60:	4b71      	ldr	r3, [pc, #452]	@ (8009f28 <_dtoa_r+0x5d0>)
 8009d62:	2200      	movs	r2, #0
 8009d64:	f7f6 fa98 	bl	8000298 <__aeabi_dsub>
 8009d68:	4602      	mov	r2, r0
 8009d6a:	460b      	mov	r3, r1
 8009d6c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009d70:	462a      	mov	r2, r5
 8009d72:	4633      	mov	r3, r6
 8009d74:	f7f6 fed8 	bl	8000b28 <__aeabi_dcmpgt>
 8009d78:	2800      	cmp	r0, #0
 8009d7a:	f040 828b 	bne.w	800a294 <_dtoa_r+0x93c>
 8009d7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d82:	462a      	mov	r2, r5
 8009d84:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009d88:	f7f6 feb0 	bl	8000aec <__aeabi_dcmplt>
 8009d8c:	2800      	cmp	r0, #0
 8009d8e:	f040 8128 	bne.w	8009fe2 <_dtoa_r+0x68a>
 8009d92:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009d96:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009d9a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	f2c0 815a 	blt.w	800a056 <_dtoa_r+0x6fe>
 8009da2:	2f0e      	cmp	r7, #14
 8009da4:	f300 8157 	bgt.w	800a056 <_dtoa_r+0x6fe>
 8009da8:	4b5a      	ldr	r3, [pc, #360]	@ (8009f14 <_dtoa_r+0x5bc>)
 8009daa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009dae:	ed93 7b00 	vldr	d7, [r3]
 8009db2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	ed8d 7b00 	vstr	d7, [sp]
 8009dba:	da03      	bge.n	8009dc4 <_dtoa_r+0x46c>
 8009dbc:	9b07      	ldr	r3, [sp, #28]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	f340 8101 	ble.w	8009fc6 <_dtoa_r+0x66e>
 8009dc4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009dc8:	4656      	mov	r6, sl
 8009dca:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009dce:	4620      	mov	r0, r4
 8009dd0:	4629      	mov	r1, r5
 8009dd2:	f7f6 fd43 	bl	800085c <__aeabi_ddiv>
 8009dd6:	f7f6 fec7 	bl	8000b68 <__aeabi_d2iz>
 8009dda:	4680      	mov	r8, r0
 8009ddc:	f7f6 fbaa 	bl	8000534 <__aeabi_i2d>
 8009de0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009de4:	f7f6 fc10 	bl	8000608 <__aeabi_dmul>
 8009de8:	4602      	mov	r2, r0
 8009dea:	460b      	mov	r3, r1
 8009dec:	4620      	mov	r0, r4
 8009dee:	4629      	mov	r1, r5
 8009df0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009df4:	f7f6 fa50 	bl	8000298 <__aeabi_dsub>
 8009df8:	f806 4b01 	strb.w	r4, [r6], #1
 8009dfc:	9d07      	ldr	r5, [sp, #28]
 8009dfe:	eba6 040a 	sub.w	r4, r6, sl
 8009e02:	42a5      	cmp	r5, r4
 8009e04:	4602      	mov	r2, r0
 8009e06:	460b      	mov	r3, r1
 8009e08:	f040 8117 	bne.w	800a03a <_dtoa_r+0x6e2>
 8009e0c:	f7f6 fa46 	bl	800029c <__adddf3>
 8009e10:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009e14:	4604      	mov	r4, r0
 8009e16:	460d      	mov	r5, r1
 8009e18:	f7f6 fe86 	bl	8000b28 <__aeabi_dcmpgt>
 8009e1c:	2800      	cmp	r0, #0
 8009e1e:	f040 80f9 	bne.w	800a014 <_dtoa_r+0x6bc>
 8009e22:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009e26:	4620      	mov	r0, r4
 8009e28:	4629      	mov	r1, r5
 8009e2a:	f7f6 fe55 	bl	8000ad8 <__aeabi_dcmpeq>
 8009e2e:	b118      	cbz	r0, 8009e38 <_dtoa_r+0x4e0>
 8009e30:	f018 0f01 	tst.w	r8, #1
 8009e34:	f040 80ee 	bne.w	800a014 <_dtoa_r+0x6bc>
 8009e38:	4649      	mov	r1, r9
 8009e3a:	4658      	mov	r0, fp
 8009e3c:	f000 fc90 	bl	800a760 <_Bfree>
 8009e40:	2300      	movs	r3, #0
 8009e42:	7033      	strb	r3, [r6, #0]
 8009e44:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009e46:	3701      	adds	r7, #1
 8009e48:	601f      	str	r7, [r3, #0]
 8009e4a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	f000 831d 	beq.w	800a48c <_dtoa_r+0xb34>
 8009e52:	601e      	str	r6, [r3, #0]
 8009e54:	e31a      	b.n	800a48c <_dtoa_r+0xb34>
 8009e56:	07e2      	lsls	r2, r4, #31
 8009e58:	d505      	bpl.n	8009e66 <_dtoa_r+0x50e>
 8009e5a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009e5e:	f7f6 fbd3 	bl	8000608 <__aeabi_dmul>
 8009e62:	3601      	adds	r6, #1
 8009e64:	2301      	movs	r3, #1
 8009e66:	1064      	asrs	r4, r4, #1
 8009e68:	3508      	adds	r5, #8
 8009e6a:	e73f      	b.n	8009cec <_dtoa_r+0x394>
 8009e6c:	2602      	movs	r6, #2
 8009e6e:	e742      	b.n	8009cf6 <_dtoa_r+0x39e>
 8009e70:	9c07      	ldr	r4, [sp, #28]
 8009e72:	9704      	str	r7, [sp, #16]
 8009e74:	e761      	b.n	8009d3a <_dtoa_r+0x3e2>
 8009e76:	4b27      	ldr	r3, [pc, #156]	@ (8009f14 <_dtoa_r+0x5bc>)
 8009e78:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009e7a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009e7e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009e82:	4454      	add	r4, sl
 8009e84:	2900      	cmp	r1, #0
 8009e86:	d053      	beq.n	8009f30 <_dtoa_r+0x5d8>
 8009e88:	4928      	ldr	r1, [pc, #160]	@ (8009f2c <_dtoa_r+0x5d4>)
 8009e8a:	2000      	movs	r0, #0
 8009e8c:	f7f6 fce6 	bl	800085c <__aeabi_ddiv>
 8009e90:	4633      	mov	r3, r6
 8009e92:	462a      	mov	r2, r5
 8009e94:	f7f6 fa00 	bl	8000298 <__aeabi_dsub>
 8009e98:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009e9c:	4656      	mov	r6, sl
 8009e9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ea2:	f7f6 fe61 	bl	8000b68 <__aeabi_d2iz>
 8009ea6:	4605      	mov	r5, r0
 8009ea8:	f7f6 fb44 	bl	8000534 <__aeabi_i2d>
 8009eac:	4602      	mov	r2, r0
 8009eae:	460b      	mov	r3, r1
 8009eb0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009eb4:	f7f6 f9f0 	bl	8000298 <__aeabi_dsub>
 8009eb8:	3530      	adds	r5, #48	@ 0x30
 8009eba:	4602      	mov	r2, r0
 8009ebc:	460b      	mov	r3, r1
 8009ebe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009ec2:	f806 5b01 	strb.w	r5, [r6], #1
 8009ec6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009eca:	f7f6 fe0f 	bl	8000aec <__aeabi_dcmplt>
 8009ece:	2800      	cmp	r0, #0
 8009ed0:	d171      	bne.n	8009fb6 <_dtoa_r+0x65e>
 8009ed2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009ed6:	4911      	ldr	r1, [pc, #68]	@ (8009f1c <_dtoa_r+0x5c4>)
 8009ed8:	2000      	movs	r0, #0
 8009eda:	f7f6 f9dd 	bl	8000298 <__aeabi_dsub>
 8009ede:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009ee2:	f7f6 fe03 	bl	8000aec <__aeabi_dcmplt>
 8009ee6:	2800      	cmp	r0, #0
 8009ee8:	f040 8095 	bne.w	800a016 <_dtoa_r+0x6be>
 8009eec:	42a6      	cmp	r6, r4
 8009eee:	f43f af50 	beq.w	8009d92 <_dtoa_r+0x43a>
 8009ef2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009ef6:	4b0a      	ldr	r3, [pc, #40]	@ (8009f20 <_dtoa_r+0x5c8>)
 8009ef8:	2200      	movs	r2, #0
 8009efa:	f7f6 fb85 	bl	8000608 <__aeabi_dmul>
 8009efe:	4b08      	ldr	r3, [pc, #32]	@ (8009f20 <_dtoa_r+0x5c8>)
 8009f00:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009f04:	2200      	movs	r2, #0
 8009f06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f0a:	f7f6 fb7d 	bl	8000608 <__aeabi_dmul>
 8009f0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009f12:	e7c4      	b.n	8009e9e <_dtoa_r+0x546>
 8009f14:	0800c278 	.word	0x0800c278
 8009f18:	0800c250 	.word	0x0800c250
 8009f1c:	3ff00000 	.word	0x3ff00000
 8009f20:	40240000 	.word	0x40240000
 8009f24:	401c0000 	.word	0x401c0000
 8009f28:	40140000 	.word	0x40140000
 8009f2c:	3fe00000 	.word	0x3fe00000
 8009f30:	4631      	mov	r1, r6
 8009f32:	4628      	mov	r0, r5
 8009f34:	f7f6 fb68 	bl	8000608 <__aeabi_dmul>
 8009f38:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009f3c:	9415      	str	r4, [sp, #84]	@ 0x54
 8009f3e:	4656      	mov	r6, sl
 8009f40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f44:	f7f6 fe10 	bl	8000b68 <__aeabi_d2iz>
 8009f48:	4605      	mov	r5, r0
 8009f4a:	f7f6 faf3 	bl	8000534 <__aeabi_i2d>
 8009f4e:	4602      	mov	r2, r0
 8009f50:	460b      	mov	r3, r1
 8009f52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f56:	f7f6 f99f 	bl	8000298 <__aeabi_dsub>
 8009f5a:	3530      	adds	r5, #48	@ 0x30
 8009f5c:	f806 5b01 	strb.w	r5, [r6], #1
 8009f60:	4602      	mov	r2, r0
 8009f62:	460b      	mov	r3, r1
 8009f64:	42a6      	cmp	r6, r4
 8009f66:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009f6a:	f04f 0200 	mov.w	r2, #0
 8009f6e:	d124      	bne.n	8009fba <_dtoa_r+0x662>
 8009f70:	4bac      	ldr	r3, [pc, #688]	@ (800a224 <_dtoa_r+0x8cc>)
 8009f72:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009f76:	f7f6 f991 	bl	800029c <__adddf3>
 8009f7a:	4602      	mov	r2, r0
 8009f7c:	460b      	mov	r3, r1
 8009f7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f82:	f7f6 fdd1 	bl	8000b28 <__aeabi_dcmpgt>
 8009f86:	2800      	cmp	r0, #0
 8009f88:	d145      	bne.n	800a016 <_dtoa_r+0x6be>
 8009f8a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009f8e:	49a5      	ldr	r1, [pc, #660]	@ (800a224 <_dtoa_r+0x8cc>)
 8009f90:	2000      	movs	r0, #0
 8009f92:	f7f6 f981 	bl	8000298 <__aeabi_dsub>
 8009f96:	4602      	mov	r2, r0
 8009f98:	460b      	mov	r3, r1
 8009f9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f9e:	f7f6 fda5 	bl	8000aec <__aeabi_dcmplt>
 8009fa2:	2800      	cmp	r0, #0
 8009fa4:	f43f aef5 	beq.w	8009d92 <_dtoa_r+0x43a>
 8009fa8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8009faa:	1e73      	subs	r3, r6, #1
 8009fac:	9315      	str	r3, [sp, #84]	@ 0x54
 8009fae:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009fb2:	2b30      	cmp	r3, #48	@ 0x30
 8009fb4:	d0f8      	beq.n	8009fa8 <_dtoa_r+0x650>
 8009fb6:	9f04      	ldr	r7, [sp, #16]
 8009fb8:	e73e      	b.n	8009e38 <_dtoa_r+0x4e0>
 8009fba:	4b9b      	ldr	r3, [pc, #620]	@ (800a228 <_dtoa_r+0x8d0>)
 8009fbc:	f7f6 fb24 	bl	8000608 <__aeabi_dmul>
 8009fc0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009fc4:	e7bc      	b.n	8009f40 <_dtoa_r+0x5e8>
 8009fc6:	d10c      	bne.n	8009fe2 <_dtoa_r+0x68a>
 8009fc8:	4b98      	ldr	r3, [pc, #608]	@ (800a22c <_dtoa_r+0x8d4>)
 8009fca:	2200      	movs	r2, #0
 8009fcc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009fd0:	f7f6 fb1a 	bl	8000608 <__aeabi_dmul>
 8009fd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009fd8:	f7f6 fd9c 	bl	8000b14 <__aeabi_dcmpge>
 8009fdc:	2800      	cmp	r0, #0
 8009fde:	f000 8157 	beq.w	800a290 <_dtoa_r+0x938>
 8009fe2:	2400      	movs	r4, #0
 8009fe4:	4625      	mov	r5, r4
 8009fe6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009fe8:	43db      	mvns	r3, r3
 8009fea:	9304      	str	r3, [sp, #16]
 8009fec:	4656      	mov	r6, sl
 8009fee:	2700      	movs	r7, #0
 8009ff0:	4621      	mov	r1, r4
 8009ff2:	4658      	mov	r0, fp
 8009ff4:	f000 fbb4 	bl	800a760 <_Bfree>
 8009ff8:	2d00      	cmp	r5, #0
 8009ffa:	d0dc      	beq.n	8009fb6 <_dtoa_r+0x65e>
 8009ffc:	b12f      	cbz	r7, 800a00a <_dtoa_r+0x6b2>
 8009ffe:	42af      	cmp	r7, r5
 800a000:	d003      	beq.n	800a00a <_dtoa_r+0x6b2>
 800a002:	4639      	mov	r1, r7
 800a004:	4658      	mov	r0, fp
 800a006:	f000 fbab 	bl	800a760 <_Bfree>
 800a00a:	4629      	mov	r1, r5
 800a00c:	4658      	mov	r0, fp
 800a00e:	f000 fba7 	bl	800a760 <_Bfree>
 800a012:	e7d0      	b.n	8009fb6 <_dtoa_r+0x65e>
 800a014:	9704      	str	r7, [sp, #16]
 800a016:	4633      	mov	r3, r6
 800a018:	461e      	mov	r6, r3
 800a01a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a01e:	2a39      	cmp	r2, #57	@ 0x39
 800a020:	d107      	bne.n	800a032 <_dtoa_r+0x6da>
 800a022:	459a      	cmp	sl, r3
 800a024:	d1f8      	bne.n	800a018 <_dtoa_r+0x6c0>
 800a026:	9a04      	ldr	r2, [sp, #16]
 800a028:	3201      	adds	r2, #1
 800a02a:	9204      	str	r2, [sp, #16]
 800a02c:	2230      	movs	r2, #48	@ 0x30
 800a02e:	f88a 2000 	strb.w	r2, [sl]
 800a032:	781a      	ldrb	r2, [r3, #0]
 800a034:	3201      	adds	r2, #1
 800a036:	701a      	strb	r2, [r3, #0]
 800a038:	e7bd      	b.n	8009fb6 <_dtoa_r+0x65e>
 800a03a:	4b7b      	ldr	r3, [pc, #492]	@ (800a228 <_dtoa_r+0x8d0>)
 800a03c:	2200      	movs	r2, #0
 800a03e:	f7f6 fae3 	bl	8000608 <__aeabi_dmul>
 800a042:	2200      	movs	r2, #0
 800a044:	2300      	movs	r3, #0
 800a046:	4604      	mov	r4, r0
 800a048:	460d      	mov	r5, r1
 800a04a:	f7f6 fd45 	bl	8000ad8 <__aeabi_dcmpeq>
 800a04e:	2800      	cmp	r0, #0
 800a050:	f43f aebb 	beq.w	8009dca <_dtoa_r+0x472>
 800a054:	e6f0      	b.n	8009e38 <_dtoa_r+0x4e0>
 800a056:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a058:	2a00      	cmp	r2, #0
 800a05a:	f000 80db 	beq.w	800a214 <_dtoa_r+0x8bc>
 800a05e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a060:	2a01      	cmp	r2, #1
 800a062:	f300 80bf 	bgt.w	800a1e4 <_dtoa_r+0x88c>
 800a066:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a068:	2a00      	cmp	r2, #0
 800a06a:	f000 80b7 	beq.w	800a1dc <_dtoa_r+0x884>
 800a06e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a072:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a074:	4646      	mov	r6, r8
 800a076:	9a08      	ldr	r2, [sp, #32]
 800a078:	2101      	movs	r1, #1
 800a07a:	441a      	add	r2, r3
 800a07c:	4658      	mov	r0, fp
 800a07e:	4498      	add	r8, r3
 800a080:	9208      	str	r2, [sp, #32]
 800a082:	f000 fc21 	bl	800a8c8 <__i2b>
 800a086:	4605      	mov	r5, r0
 800a088:	b15e      	cbz	r6, 800a0a2 <_dtoa_r+0x74a>
 800a08a:	9b08      	ldr	r3, [sp, #32]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	dd08      	ble.n	800a0a2 <_dtoa_r+0x74a>
 800a090:	42b3      	cmp	r3, r6
 800a092:	9a08      	ldr	r2, [sp, #32]
 800a094:	bfa8      	it	ge
 800a096:	4633      	movge	r3, r6
 800a098:	eba8 0803 	sub.w	r8, r8, r3
 800a09c:	1af6      	subs	r6, r6, r3
 800a09e:	1ad3      	subs	r3, r2, r3
 800a0a0:	9308      	str	r3, [sp, #32]
 800a0a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a0a4:	b1f3      	cbz	r3, 800a0e4 <_dtoa_r+0x78c>
 800a0a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	f000 80b7 	beq.w	800a21c <_dtoa_r+0x8c4>
 800a0ae:	b18c      	cbz	r4, 800a0d4 <_dtoa_r+0x77c>
 800a0b0:	4629      	mov	r1, r5
 800a0b2:	4622      	mov	r2, r4
 800a0b4:	4658      	mov	r0, fp
 800a0b6:	f000 fcc7 	bl	800aa48 <__pow5mult>
 800a0ba:	464a      	mov	r2, r9
 800a0bc:	4601      	mov	r1, r0
 800a0be:	4605      	mov	r5, r0
 800a0c0:	4658      	mov	r0, fp
 800a0c2:	f000 fc17 	bl	800a8f4 <__multiply>
 800a0c6:	4649      	mov	r1, r9
 800a0c8:	9004      	str	r0, [sp, #16]
 800a0ca:	4658      	mov	r0, fp
 800a0cc:	f000 fb48 	bl	800a760 <_Bfree>
 800a0d0:	9b04      	ldr	r3, [sp, #16]
 800a0d2:	4699      	mov	r9, r3
 800a0d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a0d6:	1b1a      	subs	r2, r3, r4
 800a0d8:	d004      	beq.n	800a0e4 <_dtoa_r+0x78c>
 800a0da:	4649      	mov	r1, r9
 800a0dc:	4658      	mov	r0, fp
 800a0de:	f000 fcb3 	bl	800aa48 <__pow5mult>
 800a0e2:	4681      	mov	r9, r0
 800a0e4:	2101      	movs	r1, #1
 800a0e6:	4658      	mov	r0, fp
 800a0e8:	f000 fbee 	bl	800a8c8 <__i2b>
 800a0ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a0ee:	4604      	mov	r4, r0
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	f000 81cf 	beq.w	800a494 <_dtoa_r+0xb3c>
 800a0f6:	461a      	mov	r2, r3
 800a0f8:	4601      	mov	r1, r0
 800a0fa:	4658      	mov	r0, fp
 800a0fc:	f000 fca4 	bl	800aa48 <__pow5mult>
 800a100:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a102:	2b01      	cmp	r3, #1
 800a104:	4604      	mov	r4, r0
 800a106:	f300 8095 	bgt.w	800a234 <_dtoa_r+0x8dc>
 800a10a:	9b02      	ldr	r3, [sp, #8]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	f040 8087 	bne.w	800a220 <_dtoa_r+0x8c8>
 800a112:	9b03      	ldr	r3, [sp, #12]
 800a114:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a118:	2b00      	cmp	r3, #0
 800a11a:	f040 8089 	bne.w	800a230 <_dtoa_r+0x8d8>
 800a11e:	9b03      	ldr	r3, [sp, #12]
 800a120:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a124:	0d1b      	lsrs	r3, r3, #20
 800a126:	051b      	lsls	r3, r3, #20
 800a128:	b12b      	cbz	r3, 800a136 <_dtoa_r+0x7de>
 800a12a:	9b08      	ldr	r3, [sp, #32]
 800a12c:	3301      	adds	r3, #1
 800a12e:	9308      	str	r3, [sp, #32]
 800a130:	f108 0801 	add.w	r8, r8, #1
 800a134:	2301      	movs	r3, #1
 800a136:	930a      	str	r3, [sp, #40]	@ 0x28
 800a138:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	f000 81b0 	beq.w	800a4a0 <_dtoa_r+0xb48>
 800a140:	6923      	ldr	r3, [r4, #16]
 800a142:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a146:	6918      	ldr	r0, [r3, #16]
 800a148:	f000 fb72 	bl	800a830 <__hi0bits>
 800a14c:	f1c0 0020 	rsb	r0, r0, #32
 800a150:	9b08      	ldr	r3, [sp, #32]
 800a152:	4418      	add	r0, r3
 800a154:	f010 001f 	ands.w	r0, r0, #31
 800a158:	d077      	beq.n	800a24a <_dtoa_r+0x8f2>
 800a15a:	f1c0 0320 	rsb	r3, r0, #32
 800a15e:	2b04      	cmp	r3, #4
 800a160:	dd6b      	ble.n	800a23a <_dtoa_r+0x8e2>
 800a162:	9b08      	ldr	r3, [sp, #32]
 800a164:	f1c0 001c 	rsb	r0, r0, #28
 800a168:	4403      	add	r3, r0
 800a16a:	4480      	add	r8, r0
 800a16c:	4406      	add	r6, r0
 800a16e:	9308      	str	r3, [sp, #32]
 800a170:	f1b8 0f00 	cmp.w	r8, #0
 800a174:	dd05      	ble.n	800a182 <_dtoa_r+0x82a>
 800a176:	4649      	mov	r1, r9
 800a178:	4642      	mov	r2, r8
 800a17a:	4658      	mov	r0, fp
 800a17c:	f000 fcbe 	bl	800aafc <__lshift>
 800a180:	4681      	mov	r9, r0
 800a182:	9b08      	ldr	r3, [sp, #32]
 800a184:	2b00      	cmp	r3, #0
 800a186:	dd05      	ble.n	800a194 <_dtoa_r+0x83c>
 800a188:	4621      	mov	r1, r4
 800a18a:	461a      	mov	r2, r3
 800a18c:	4658      	mov	r0, fp
 800a18e:	f000 fcb5 	bl	800aafc <__lshift>
 800a192:	4604      	mov	r4, r0
 800a194:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a196:	2b00      	cmp	r3, #0
 800a198:	d059      	beq.n	800a24e <_dtoa_r+0x8f6>
 800a19a:	4621      	mov	r1, r4
 800a19c:	4648      	mov	r0, r9
 800a19e:	f000 fd19 	bl	800abd4 <__mcmp>
 800a1a2:	2800      	cmp	r0, #0
 800a1a4:	da53      	bge.n	800a24e <_dtoa_r+0x8f6>
 800a1a6:	1e7b      	subs	r3, r7, #1
 800a1a8:	9304      	str	r3, [sp, #16]
 800a1aa:	4649      	mov	r1, r9
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	220a      	movs	r2, #10
 800a1b0:	4658      	mov	r0, fp
 800a1b2:	f000 faf7 	bl	800a7a4 <__multadd>
 800a1b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a1b8:	4681      	mov	r9, r0
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	f000 8172 	beq.w	800a4a4 <_dtoa_r+0xb4c>
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	4629      	mov	r1, r5
 800a1c4:	220a      	movs	r2, #10
 800a1c6:	4658      	mov	r0, fp
 800a1c8:	f000 faec 	bl	800a7a4 <__multadd>
 800a1cc:	9b00      	ldr	r3, [sp, #0]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	4605      	mov	r5, r0
 800a1d2:	dc67      	bgt.n	800a2a4 <_dtoa_r+0x94c>
 800a1d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a1d6:	2b02      	cmp	r3, #2
 800a1d8:	dc41      	bgt.n	800a25e <_dtoa_r+0x906>
 800a1da:	e063      	b.n	800a2a4 <_dtoa_r+0x94c>
 800a1dc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a1de:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a1e2:	e746      	b.n	800a072 <_dtoa_r+0x71a>
 800a1e4:	9b07      	ldr	r3, [sp, #28]
 800a1e6:	1e5c      	subs	r4, r3, #1
 800a1e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a1ea:	42a3      	cmp	r3, r4
 800a1ec:	bfbf      	itttt	lt
 800a1ee:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a1f0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800a1f2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800a1f4:	1ae3      	sublt	r3, r4, r3
 800a1f6:	bfb4      	ite	lt
 800a1f8:	18d2      	addlt	r2, r2, r3
 800a1fa:	1b1c      	subge	r4, r3, r4
 800a1fc:	9b07      	ldr	r3, [sp, #28]
 800a1fe:	bfbc      	itt	lt
 800a200:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800a202:	2400      	movlt	r4, #0
 800a204:	2b00      	cmp	r3, #0
 800a206:	bfb5      	itete	lt
 800a208:	eba8 0603 	sublt.w	r6, r8, r3
 800a20c:	9b07      	ldrge	r3, [sp, #28]
 800a20e:	2300      	movlt	r3, #0
 800a210:	4646      	movge	r6, r8
 800a212:	e730      	b.n	800a076 <_dtoa_r+0x71e>
 800a214:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a216:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a218:	4646      	mov	r6, r8
 800a21a:	e735      	b.n	800a088 <_dtoa_r+0x730>
 800a21c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a21e:	e75c      	b.n	800a0da <_dtoa_r+0x782>
 800a220:	2300      	movs	r3, #0
 800a222:	e788      	b.n	800a136 <_dtoa_r+0x7de>
 800a224:	3fe00000 	.word	0x3fe00000
 800a228:	40240000 	.word	0x40240000
 800a22c:	40140000 	.word	0x40140000
 800a230:	9b02      	ldr	r3, [sp, #8]
 800a232:	e780      	b.n	800a136 <_dtoa_r+0x7de>
 800a234:	2300      	movs	r3, #0
 800a236:	930a      	str	r3, [sp, #40]	@ 0x28
 800a238:	e782      	b.n	800a140 <_dtoa_r+0x7e8>
 800a23a:	d099      	beq.n	800a170 <_dtoa_r+0x818>
 800a23c:	9a08      	ldr	r2, [sp, #32]
 800a23e:	331c      	adds	r3, #28
 800a240:	441a      	add	r2, r3
 800a242:	4498      	add	r8, r3
 800a244:	441e      	add	r6, r3
 800a246:	9208      	str	r2, [sp, #32]
 800a248:	e792      	b.n	800a170 <_dtoa_r+0x818>
 800a24a:	4603      	mov	r3, r0
 800a24c:	e7f6      	b.n	800a23c <_dtoa_r+0x8e4>
 800a24e:	9b07      	ldr	r3, [sp, #28]
 800a250:	9704      	str	r7, [sp, #16]
 800a252:	2b00      	cmp	r3, #0
 800a254:	dc20      	bgt.n	800a298 <_dtoa_r+0x940>
 800a256:	9300      	str	r3, [sp, #0]
 800a258:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a25a:	2b02      	cmp	r3, #2
 800a25c:	dd1e      	ble.n	800a29c <_dtoa_r+0x944>
 800a25e:	9b00      	ldr	r3, [sp, #0]
 800a260:	2b00      	cmp	r3, #0
 800a262:	f47f aec0 	bne.w	8009fe6 <_dtoa_r+0x68e>
 800a266:	4621      	mov	r1, r4
 800a268:	2205      	movs	r2, #5
 800a26a:	4658      	mov	r0, fp
 800a26c:	f000 fa9a 	bl	800a7a4 <__multadd>
 800a270:	4601      	mov	r1, r0
 800a272:	4604      	mov	r4, r0
 800a274:	4648      	mov	r0, r9
 800a276:	f000 fcad 	bl	800abd4 <__mcmp>
 800a27a:	2800      	cmp	r0, #0
 800a27c:	f77f aeb3 	ble.w	8009fe6 <_dtoa_r+0x68e>
 800a280:	4656      	mov	r6, sl
 800a282:	2331      	movs	r3, #49	@ 0x31
 800a284:	f806 3b01 	strb.w	r3, [r6], #1
 800a288:	9b04      	ldr	r3, [sp, #16]
 800a28a:	3301      	adds	r3, #1
 800a28c:	9304      	str	r3, [sp, #16]
 800a28e:	e6ae      	b.n	8009fee <_dtoa_r+0x696>
 800a290:	9c07      	ldr	r4, [sp, #28]
 800a292:	9704      	str	r7, [sp, #16]
 800a294:	4625      	mov	r5, r4
 800a296:	e7f3      	b.n	800a280 <_dtoa_r+0x928>
 800a298:	9b07      	ldr	r3, [sp, #28]
 800a29a:	9300      	str	r3, [sp, #0]
 800a29c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	f000 8104 	beq.w	800a4ac <_dtoa_r+0xb54>
 800a2a4:	2e00      	cmp	r6, #0
 800a2a6:	dd05      	ble.n	800a2b4 <_dtoa_r+0x95c>
 800a2a8:	4629      	mov	r1, r5
 800a2aa:	4632      	mov	r2, r6
 800a2ac:	4658      	mov	r0, fp
 800a2ae:	f000 fc25 	bl	800aafc <__lshift>
 800a2b2:	4605      	mov	r5, r0
 800a2b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d05a      	beq.n	800a370 <_dtoa_r+0xa18>
 800a2ba:	6869      	ldr	r1, [r5, #4]
 800a2bc:	4658      	mov	r0, fp
 800a2be:	f000 fa0f 	bl	800a6e0 <_Balloc>
 800a2c2:	4606      	mov	r6, r0
 800a2c4:	b928      	cbnz	r0, 800a2d2 <_dtoa_r+0x97a>
 800a2c6:	4b84      	ldr	r3, [pc, #528]	@ (800a4d8 <_dtoa_r+0xb80>)
 800a2c8:	4602      	mov	r2, r0
 800a2ca:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a2ce:	f7ff bb5a 	b.w	8009986 <_dtoa_r+0x2e>
 800a2d2:	692a      	ldr	r2, [r5, #16]
 800a2d4:	3202      	adds	r2, #2
 800a2d6:	0092      	lsls	r2, r2, #2
 800a2d8:	f105 010c 	add.w	r1, r5, #12
 800a2dc:	300c      	adds	r0, #12
 800a2de:	f000 ffaf 	bl	800b240 <memcpy>
 800a2e2:	2201      	movs	r2, #1
 800a2e4:	4631      	mov	r1, r6
 800a2e6:	4658      	mov	r0, fp
 800a2e8:	f000 fc08 	bl	800aafc <__lshift>
 800a2ec:	f10a 0301 	add.w	r3, sl, #1
 800a2f0:	9307      	str	r3, [sp, #28]
 800a2f2:	9b00      	ldr	r3, [sp, #0]
 800a2f4:	4453      	add	r3, sl
 800a2f6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a2f8:	9b02      	ldr	r3, [sp, #8]
 800a2fa:	f003 0301 	and.w	r3, r3, #1
 800a2fe:	462f      	mov	r7, r5
 800a300:	930a      	str	r3, [sp, #40]	@ 0x28
 800a302:	4605      	mov	r5, r0
 800a304:	9b07      	ldr	r3, [sp, #28]
 800a306:	4621      	mov	r1, r4
 800a308:	3b01      	subs	r3, #1
 800a30a:	4648      	mov	r0, r9
 800a30c:	9300      	str	r3, [sp, #0]
 800a30e:	f7ff fa98 	bl	8009842 <quorem>
 800a312:	4639      	mov	r1, r7
 800a314:	9002      	str	r0, [sp, #8]
 800a316:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a31a:	4648      	mov	r0, r9
 800a31c:	f000 fc5a 	bl	800abd4 <__mcmp>
 800a320:	462a      	mov	r2, r5
 800a322:	9008      	str	r0, [sp, #32]
 800a324:	4621      	mov	r1, r4
 800a326:	4658      	mov	r0, fp
 800a328:	f000 fc70 	bl	800ac0c <__mdiff>
 800a32c:	68c2      	ldr	r2, [r0, #12]
 800a32e:	4606      	mov	r6, r0
 800a330:	bb02      	cbnz	r2, 800a374 <_dtoa_r+0xa1c>
 800a332:	4601      	mov	r1, r0
 800a334:	4648      	mov	r0, r9
 800a336:	f000 fc4d 	bl	800abd4 <__mcmp>
 800a33a:	4602      	mov	r2, r0
 800a33c:	4631      	mov	r1, r6
 800a33e:	4658      	mov	r0, fp
 800a340:	920e      	str	r2, [sp, #56]	@ 0x38
 800a342:	f000 fa0d 	bl	800a760 <_Bfree>
 800a346:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a348:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a34a:	9e07      	ldr	r6, [sp, #28]
 800a34c:	ea43 0102 	orr.w	r1, r3, r2
 800a350:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a352:	4319      	orrs	r1, r3
 800a354:	d110      	bne.n	800a378 <_dtoa_r+0xa20>
 800a356:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a35a:	d029      	beq.n	800a3b0 <_dtoa_r+0xa58>
 800a35c:	9b08      	ldr	r3, [sp, #32]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	dd02      	ble.n	800a368 <_dtoa_r+0xa10>
 800a362:	9b02      	ldr	r3, [sp, #8]
 800a364:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a368:	9b00      	ldr	r3, [sp, #0]
 800a36a:	f883 8000 	strb.w	r8, [r3]
 800a36e:	e63f      	b.n	8009ff0 <_dtoa_r+0x698>
 800a370:	4628      	mov	r0, r5
 800a372:	e7bb      	b.n	800a2ec <_dtoa_r+0x994>
 800a374:	2201      	movs	r2, #1
 800a376:	e7e1      	b.n	800a33c <_dtoa_r+0x9e4>
 800a378:	9b08      	ldr	r3, [sp, #32]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	db04      	blt.n	800a388 <_dtoa_r+0xa30>
 800a37e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a380:	430b      	orrs	r3, r1
 800a382:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a384:	430b      	orrs	r3, r1
 800a386:	d120      	bne.n	800a3ca <_dtoa_r+0xa72>
 800a388:	2a00      	cmp	r2, #0
 800a38a:	dded      	ble.n	800a368 <_dtoa_r+0xa10>
 800a38c:	4649      	mov	r1, r9
 800a38e:	2201      	movs	r2, #1
 800a390:	4658      	mov	r0, fp
 800a392:	f000 fbb3 	bl	800aafc <__lshift>
 800a396:	4621      	mov	r1, r4
 800a398:	4681      	mov	r9, r0
 800a39a:	f000 fc1b 	bl	800abd4 <__mcmp>
 800a39e:	2800      	cmp	r0, #0
 800a3a0:	dc03      	bgt.n	800a3aa <_dtoa_r+0xa52>
 800a3a2:	d1e1      	bne.n	800a368 <_dtoa_r+0xa10>
 800a3a4:	f018 0f01 	tst.w	r8, #1
 800a3a8:	d0de      	beq.n	800a368 <_dtoa_r+0xa10>
 800a3aa:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a3ae:	d1d8      	bne.n	800a362 <_dtoa_r+0xa0a>
 800a3b0:	9a00      	ldr	r2, [sp, #0]
 800a3b2:	2339      	movs	r3, #57	@ 0x39
 800a3b4:	7013      	strb	r3, [r2, #0]
 800a3b6:	4633      	mov	r3, r6
 800a3b8:	461e      	mov	r6, r3
 800a3ba:	3b01      	subs	r3, #1
 800a3bc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a3c0:	2a39      	cmp	r2, #57	@ 0x39
 800a3c2:	d052      	beq.n	800a46a <_dtoa_r+0xb12>
 800a3c4:	3201      	adds	r2, #1
 800a3c6:	701a      	strb	r2, [r3, #0]
 800a3c8:	e612      	b.n	8009ff0 <_dtoa_r+0x698>
 800a3ca:	2a00      	cmp	r2, #0
 800a3cc:	dd07      	ble.n	800a3de <_dtoa_r+0xa86>
 800a3ce:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a3d2:	d0ed      	beq.n	800a3b0 <_dtoa_r+0xa58>
 800a3d4:	9a00      	ldr	r2, [sp, #0]
 800a3d6:	f108 0301 	add.w	r3, r8, #1
 800a3da:	7013      	strb	r3, [r2, #0]
 800a3dc:	e608      	b.n	8009ff0 <_dtoa_r+0x698>
 800a3de:	9b07      	ldr	r3, [sp, #28]
 800a3e0:	9a07      	ldr	r2, [sp, #28]
 800a3e2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800a3e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a3e8:	4293      	cmp	r3, r2
 800a3ea:	d028      	beq.n	800a43e <_dtoa_r+0xae6>
 800a3ec:	4649      	mov	r1, r9
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	220a      	movs	r2, #10
 800a3f2:	4658      	mov	r0, fp
 800a3f4:	f000 f9d6 	bl	800a7a4 <__multadd>
 800a3f8:	42af      	cmp	r7, r5
 800a3fa:	4681      	mov	r9, r0
 800a3fc:	f04f 0300 	mov.w	r3, #0
 800a400:	f04f 020a 	mov.w	r2, #10
 800a404:	4639      	mov	r1, r7
 800a406:	4658      	mov	r0, fp
 800a408:	d107      	bne.n	800a41a <_dtoa_r+0xac2>
 800a40a:	f000 f9cb 	bl	800a7a4 <__multadd>
 800a40e:	4607      	mov	r7, r0
 800a410:	4605      	mov	r5, r0
 800a412:	9b07      	ldr	r3, [sp, #28]
 800a414:	3301      	adds	r3, #1
 800a416:	9307      	str	r3, [sp, #28]
 800a418:	e774      	b.n	800a304 <_dtoa_r+0x9ac>
 800a41a:	f000 f9c3 	bl	800a7a4 <__multadd>
 800a41e:	4629      	mov	r1, r5
 800a420:	4607      	mov	r7, r0
 800a422:	2300      	movs	r3, #0
 800a424:	220a      	movs	r2, #10
 800a426:	4658      	mov	r0, fp
 800a428:	f000 f9bc 	bl	800a7a4 <__multadd>
 800a42c:	4605      	mov	r5, r0
 800a42e:	e7f0      	b.n	800a412 <_dtoa_r+0xaba>
 800a430:	9b00      	ldr	r3, [sp, #0]
 800a432:	2b00      	cmp	r3, #0
 800a434:	bfcc      	ite	gt
 800a436:	461e      	movgt	r6, r3
 800a438:	2601      	movle	r6, #1
 800a43a:	4456      	add	r6, sl
 800a43c:	2700      	movs	r7, #0
 800a43e:	4649      	mov	r1, r9
 800a440:	2201      	movs	r2, #1
 800a442:	4658      	mov	r0, fp
 800a444:	f000 fb5a 	bl	800aafc <__lshift>
 800a448:	4621      	mov	r1, r4
 800a44a:	4681      	mov	r9, r0
 800a44c:	f000 fbc2 	bl	800abd4 <__mcmp>
 800a450:	2800      	cmp	r0, #0
 800a452:	dcb0      	bgt.n	800a3b6 <_dtoa_r+0xa5e>
 800a454:	d102      	bne.n	800a45c <_dtoa_r+0xb04>
 800a456:	f018 0f01 	tst.w	r8, #1
 800a45a:	d1ac      	bne.n	800a3b6 <_dtoa_r+0xa5e>
 800a45c:	4633      	mov	r3, r6
 800a45e:	461e      	mov	r6, r3
 800a460:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a464:	2a30      	cmp	r2, #48	@ 0x30
 800a466:	d0fa      	beq.n	800a45e <_dtoa_r+0xb06>
 800a468:	e5c2      	b.n	8009ff0 <_dtoa_r+0x698>
 800a46a:	459a      	cmp	sl, r3
 800a46c:	d1a4      	bne.n	800a3b8 <_dtoa_r+0xa60>
 800a46e:	9b04      	ldr	r3, [sp, #16]
 800a470:	3301      	adds	r3, #1
 800a472:	9304      	str	r3, [sp, #16]
 800a474:	2331      	movs	r3, #49	@ 0x31
 800a476:	f88a 3000 	strb.w	r3, [sl]
 800a47a:	e5b9      	b.n	8009ff0 <_dtoa_r+0x698>
 800a47c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a47e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a4dc <_dtoa_r+0xb84>
 800a482:	b11b      	cbz	r3, 800a48c <_dtoa_r+0xb34>
 800a484:	f10a 0308 	add.w	r3, sl, #8
 800a488:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a48a:	6013      	str	r3, [r2, #0]
 800a48c:	4650      	mov	r0, sl
 800a48e:	b019      	add	sp, #100	@ 0x64
 800a490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a494:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a496:	2b01      	cmp	r3, #1
 800a498:	f77f ae37 	ble.w	800a10a <_dtoa_r+0x7b2>
 800a49c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a49e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a4a0:	2001      	movs	r0, #1
 800a4a2:	e655      	b.n	800a150 <_dtoa_r+0x7f8>
 800a4a4:	9b00      	ldr	r3, [sp, #0]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	f77f aed6 	ble.w	800a258 <_dtoa_r+0x900>
 800a4ac:	4656      	mov	r6, sl
 800a4ae:	4621      	mov	r1, r4
 800a4b0:	4648      	mov	r0, r9
 800a4b2:	f7ff f9c6 	bl	8009842 <quorem>
 800a4b6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a4ba:	f806 8b01 	strb.w	r8, [r6], #1
 800a4be:	9b00      	ldr	r3, [sp, #0]
 800a4c0:	eba6 020a 	sub.w	r2, r6, sl
 800a4c4:	4293      	cmp	r3, r2
 800a4c6:	ddb3      	ble.n	800a430 <_dtoa_r+0xad8>
 800a4c8:	4649      	mov	r1, r9
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	220a      	movs	r2, #10
 800a4ce:	4658      	mov	r0, fp
 800a4d0:	f000 f968 	bl	800a7a4 <__multadd>
 800a4d4:	4681      	mov	r9, r0
 800a4d6:	e7ea      	b.n	800a4ae <_dtoa_r+0xb56>
 800a4d8:	0800c1d8 	.word	0x0800c1d8
 800a4dc:	0800c15c 	.word	0x0800c15c

0800a4e0 <_free_r>:
 800a4e0:	b538      	push	{r3, r4, r5, lr}
 800a4e2:	4605      	mov	r5, r0
 800a4e4:	2900      	cmp	r1, #0
 800a4e6:	d041      	beq.n	800a56c <_free_r+0x8c>
 800a4e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a4ec:	1f0c      	subs	r4, r1, #4
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	bfb8      	it	lt
 800a4f2:	18e4      	addlt	r4, r4, r3
 800a4f4:	f000 f8e8 	bl	800a6c8 <__malloc_lock>
 800a4f8:	4a1d      	ldr	r2, [pc, #116]	@ (800a570 <_free_r+0x90>)
 800a4fa:	6813      	ldr	r3, [r2, #0]
 800a4fc:	b933      	cbnz	r3, 800a50c <_free_r+0x2c>
 800a4fe:	6063      	str	r3, [r4, #4]
 800a500:	6014      	str	r4, [r2, #0]
 800a502:	4628      	mov	r0, r5
 800a504:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a508:	f000 b8e4 	b.w	800a6d4 <__malloc_unlock>
 800a50c:	42a3      	cmp	r3, r4
 800a50e:	d908      	bls.n	800a522 <_free_r+0x42>
 800a510:	6820      	ldr	r0, [r4, #0]
 800a512:	1821      	adds	r1, r4, r0
 800a514:	428b      	cmp	r3, r1
 800a516:	bf01      	itttt	eq
 800a518:	6819      	ldreq	r1, [r3, #0]
 800a51a:	685b      	ldreq	r3, [r3, #4]
 800a51c:	1809      	addeq	r1, r1, r0
 800a51e:	6021      	streq	r1, [r4, #0]
 800a520:	e7ed      	b.n	800a4fe <_free_r+0x1e>
 800a522:	461a      	mov	r2, r3
 800a524:	685b      	ldr	r3, [r3, #4]
 800a526:	b10b      	cbz	r3, 800a52c <_free_r+0x4c>
 800a528:	42a3      	cmp	r3, r4
 800a52a:	d9fa      	bls.n	800a522 <_free_r+0x42>
 800a52c:	6811      	ldr	r1, [r2, #0]
 800a52e:	1850      	adds	r0, r2, r1
 800a530:	42a0      	cmp	r0, r4
 800a532:	d10b      	bne.n	800a54c <_free_r+0x6c>
 800a534:	6820      	ldr	r0, [r4, #0]
 800a536:	4401      	add	r1, r0
 800a538:	1850      	adds	r0, r2, r1
 800a53a:	4283      	cmp	r3, r0
 800a53c:	6011      	str	r1, [r2, #0]
 800a53e:	d1e0      	bne.n	800a502 <_free_r+0x22>
 800a540:	6818      	ldr	r0, [r3, #0]
 800a542:	685b      	ldr	r3, [r3, #4]
 800a544:	6053      	str	r3, [r2, #4]
 800a546:	4408      	add	r0, r1
 800a548:	6010      	str	r0, [r2, #0]
 800a54a:	e7da      	b.n	800a502 <_free_r+0x22>
 800a54c:	d902      	bls.n	800a554 <_free_r+0x74>
 800a54e:	230c      	movs	r3, #12
 800a550:	602b      	str	r3, [r5, #0]
 800a552:	e7d6      	b.n	800a502 <_free_r+0x22>
 800a554:	6820      	ldr	r0, [r4, #0]
 800a556:	1821      	adds	r1, r4, r0
 800a558:	428b      	cmp	r3, r1
 800a55a:	bf04      	itt	eq
 800a55c:	6819      	ldreq	r1, [r3, #0]
 800a55e:	685b      	ldreq	r3, [r3, #4]
 800a560:	6063      	str	r3, [r4, #4]
 800a562:	bf04      	itt	eq
 800a564:	1809      	addeq	r1, r1, r0
 800a566:	6021      	streq	r1, [r4, #0]
 800a568:	6054      	str	r4, [r2, #4]
 800a56a:	e7ca      	b.n	800a502 <_free_r+0x22>
 800a56c:	bd38      	pop	{r3, r4, r5, pc}
 800a56e:	bf00      	nop
 800a570:	2000209c 	.word	0x2000209c

0800a574 <malloc>:
 800a574:	4b02      	ldr	r3, [pc, #8]	@ (800a580 <malloc+0xc>)
 800a576:	4601      	mov	r1, r0
 800a578:	6818      	ldr	r0, [r3, #0]
 800a57a:	f000 b825 	b.w	800a5c8 <_malloc_r>
 800a57e:	bf00      	nop
 800a580:	2000010c 	.word	0x2000010c

0800a584 <sbrk_aligned>:
 800a584:	b570      	push	{r4, r5, r6, lr}
 800a586:	4e0f      	ldr	r6, [pc, #60]	@ (800a5c4 <sbrk_aligned+0x40>)
 800a588:	460c      	mov	r4, r1
 800a58a:	6831      	ldr	r1, [r6, #0]
 800a58c:	4605      	mov	r5, r0
 800a58e:	b911      	cbnz	r1, 800a596 <sbrk_aligned+0x12>
 800a590:	f000 fe46 	bl	800b220 <_sbrk_r>
 800a594:	6030      	str	r0, [r6, #0]
 800a596:	4621      	mov	r1, r4
 800a598:	4628      	mov	r0, r5
 800a59a:	f000 fe41 	bl	800b220 <_sbrk_r>
 800a59e:	1c43      	adds	r3, r0, #1
 800a5a0:	d103      	bne.n	800a5aa <sbrk_aligned+0x26>
 800a5a2:	f04f 34ff 	mov.w	r4, #4294967295
 800a5a6:	4620      	mov	r0, r4
 800a5a8:	bd70      	pop	{r4, r5, r6, pc}
 800a5aa:	1cc4      	adds	r4, r0, #3
 800a5ac:	f024 0403 	bic.w	r4, r4, #3
 800a5b0:	42a0      	cmp	r0, r4
 800a5b2:	d0f8      	beq.n	800a5a6 <sbrk_aligned+0x22>
 800a5b4:	1a21      	subs	r1, r4, r0
 800a5b6:	4628      	mov	r0, r5
 800a5b8:	f000 fe32 	bl	800b220 <_sbrk_r>
 800a5bc:	3001      	adds	r0, #1
 800a5be:	d1f2      	bne.n	800a5a6 <sbrk_aligned+0x22>
 800a5c0:	e7ef      	b.n	800a5a2 <sbrk_aligned+0x1e>
 800a5c2:	bf00      	nop
 800a5c4:	20002098 	.word	0x20002098

0800a5c8 <_malloc_r>:
 800a5c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5cc:	1ccd      	adds	r5, r1, #3
 800a5ce:	f025 0503 	bic.w	r5, r5, #3
 800a5d2:	3508      	adds	r5, #8
 800a5d4:	2d0c      	cmp	r5, #12
 800a5d6:	bf38      	it	cc
 800a5d8:	250c      	movcc	r5, #12
 800a5da:	2d00      	cmp	r5, #0
 800a5dc:	4606      	mov	r6, r0
 800a5de:	db01      	blt.n	800a5e4 <_malloc_r+0x1c>
 800a5e0:	42a9      	cmp	r1, r5
 800a5e2:	d904      	bls.n	800a5ee <_malloc_r+0x26>
 800a5e4:	230c      	movs	r3, #12
 800a5e6:	6033      	str	r3, [r6, #0]
 800a5e8:	2000      	movs	r0, #0
 800a5ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a6c4 <_malloc_r+0xfc>
 800a5f2:	f000 f869 	bl	800a6c8 <__malloc_lock>
 800a5f6:	f8d8 3000 	ldr.w	r3, [r8]
 800a5fa:	461c      	mov	r4, r3
 800a5fc:	bb44      	cbnz	r4, 800a650 <_malloc_r+0x88>
 800a5fe:	4629      	mov	r1, r5
 800a600:	4630      	mov	r0, r6
 800a602:	f7ff ffbf 	bl	800a584 <sbrk_aligned>
 800a606:	1c43      	adds	r3, r0, #1
 800a608:	4604      	mov	r4, r0
 800a60a:	d158      	bne.n	800a6be <_malloc_r+0xf6>
 800a60c:	f8d8 4000 	ldr.w	r4, [r8]
 800a610:	4627      	mov	r7, r4
 800a612:	2f00      	cmp	r7, #0
 800a614:	d143      	bne.n	800a69e <_malloc_r+0xd6>
 800a616:	2c00      	cmp	r4, #0
 800a618:	d04b      	beq.n	800a6b2 <_malloc_r+0xea>
 800a61a:	6823      	ldr	r3, [r4, #0]
 800a61c:	4639      	mov	r1, r7
 800a61e:	4630      	mov	r0, r6
 800a620:	eb04 0903 	add.w	r9, r4, r3
 800a624:	f000 fdfc 	bl	800b220 <_sbrk_r>
 800a628:	4581      	cmp	r9, r0
 800a62a:	d142      	bne.n	800a6b2 <_malloc_r+0xea>
 800a62c:	6821      	ldr	r1, [r4, #0]
 800a62e:	1a6d      	subs	r5, r5, r1
 800a630:	4629      	mov	r1, r5
 800a632:	4630      	mov	r0, r6
 800a634:	f7ff ffa6 	bl	800a584 <sbrk_aligned>
 800a638:	3001      	adds	r0, #1
 800a63a:	d03a      	beq.n	800a6b2 <_malloc_r+0xea>
 800a63c:	6823      	ldr	r3, [r4, #0]
 800a63e:	442b      	add	r3, r5
 800a640:	6023      	str	r3, [r4, #0]
 800a642:	f8d8 3000 	ldr.w	r3, [r8]
 800a646:	685a      	ldr	r2, [r3, #4]
 800a648:	bb62      	cbnz	r2, 800a6a4 <_malloc_r+0xdc>
 800a64a:	f8c8 7000 	str.w	r7, [r8]
 800a64e:	e00f      	b.n	800a670 <_malloc_r+0xa8>
 800a650:	6822      	ldr	r2, [r4, #0]
 800a652:	1b52      	subs	r2, r2, r5
 800a654:	d420      	bmi.n	800a698 <_malloc_r+0xd0>
 800a656:	2a0b      	cmp	r2, #11
 800a658:	d917      	bls.n	800a68a <_malloc_r+0xc2>
 800a65a:	1961      	adds	r1, r4, r5
 800a65c:	42a3      	cmp	r3, r4
 800a65e:	6025      	str	r5, [r4, #0]
 800a660:	bf18      	it	ne
 800a662:	6059      	strne	r1, [r3, #4]
 800a664:	6863      	ldr	r3, [r4, #4]
 800a666:	bf08      	it	eq
 800a668:	f8c8 1000 	streq.w	r1, [r8]
 800a66c:	5162      	str	r2, [r4, r5]
 800a66e:	604b      	str	r3, [r1, #4]
 800a670:	4630      	mov	r0, r6
 800a672:	f000 f82f 	bl	800a6d4 <__malloc_unlock>
 800a676:	f104 000b 	add.w	r0, r4, #11
 800a67a:	1d23      	adds	r3, r4, #4
 800a67c:	f020 0007 	bic.w	r0, r0, #7
 800a680:	1ac2      	subs	r2, r0, r3
 800a682:	bf1c      	itt	ne
 800a684:	1a1b      	subne	r3, r3, r0
 800a686:	50a3      	strne	r3, [r4, r2]
 800a688:	e7af      	b.n	800a5ea <_malloc_r+0x22>
 800a68a:	6862      	ldr	r2, [r4, #4]
 800a68c:	42a3      	cmp	r3, r4
 800a68e:	bf0c      	ite	eq
 800a690:	f8c8 2000 	streq.w	r2, [r8]
 800a694:	605a      	strne	r2, [r3, #4]
 800a696:	e7eb      	b.n	800a670 <_malloc_r+0xa8>
 800a698:	4623      	mov	r3, r4
 800a69a:	6864      	ldr	r4, [r4, #4]
 800a69c:	e7ae      	b.n	800a5fc <_malloc_r+0x34>
 800a69e:	463c      	mov	r4, r7
 800a6a0:	687f      	ldr	r7, [r7, #4]
 800a6a2:	e7b6      	b.n	800a612 <_malloc_r+0x4a>
 800a6a4:	461a      	mov	r2, r3
 800a6a6:	685b      	ldr	r3, [r3, #4]
 800a6a8:	42a3      	cmp	r3, r4
 800a6aa:	d1fb      	bne.n	800a6a4 <_malloc_r+0xdc>
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	6053      	str	r3, [r2, #4]
 800a6b0:	e7de      	b.n	800a670 <_malloc_r+0xa8>
 800a6b2:	230c      	movs	r3, #12
 800a6b4:	6033      	str	r3, [r6, #0]
 800a6b6:	4630      	mov	r0, r6
 800a6b8:	f000 f80c 	bl	800a6d4 <__malloc_unlock>
 800a6bc:	e794      	b.n	800a5e8 <_malloc_r+0x20>
 800a6be:	6005      	str	r5, [r0, #0]
 800a6c0:	e7d6      	b.n	800a670 <_malloc_r+0xa8>
 800a6c2:	bf00      	nop
 800a6c4:	2000209c 	.word	0x2000209c

0800a6c8 <__malloc_lock>:
 800a6c8:	4801      	ldr	r0, [pc, #4]	@ (800a6d0 <__malloc_lock+0x8>)
 800a6ca:	f7ff b8b8 	b.w	800983e <__retarget_lock_acquire_recursive>
 800a6ce:	bf00      	nop
 800a6d0:	20002094 	.word	0x20002094

0800a6d4 <__malloc_unlock>:
 800a6d4:	4801      	ldr	r0, [pc, #4]	@ (800a6dc <__malloc_unlock+0x8>)
 800a6d6:	f7ff b8b3 	b.w	8009840 <__retarget_lock_release_recursive>
 800a6da:	bf00      	nop
 800a6dc:	20002094 	.word	0x20002094

0800a6e0 <_Balloc>:
 800a6e0:	b570      	push	{r4, r5, r6, lr}
 800a6e2:	69c6      	ldr	r6, [r0, #28]
 800a6e4:	4604      	mov	r4, r0
 800a6e6:	460d      	mov	r5, r1
 800a6e8:	b976      	cbnz	r6, 800a708 <_Balloc+0x28>
 800a6ea:	2010      	movs	r0, #16
 800a6ec:	f7ff ff42 	bl	800a574 <malloc>
 800a6f0:	4602      	mov	r2, r0
 800a6f2:	61e0      	str	r0, [r4, #28]
 800a6f4:	b920      	cbnz	r0, 800a700 <_Balloc+0x20>
 800a6f6:	4b18      	ldr	r3, [pc, #96]	@ (800a758 <_Balloc+0x78>)
 800a6f8:	4818      	ldr	r0, [pc, #96]	@ (800a75c <_Balloc+0x7c>)
 800a6fa:	216b      	movs	r1, #107	@ 0x6b
 800a6fc:	f000 fdae 	bl	800b25c <__assert_func>
 800a700:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a704:	6006      	str	r6, [r0, #0]
 800a706:	60c6      	str	r6, [r0, #12]
 800a708:	69e6      	ldr	r6, [r4, #28]
 800a70a:	68f3      	ldr	r3, [r6, #12]
 800a70c:	b183      	cbz	r3, 800a730 <_Balloc+0x50>
 800a70e:	69e3      	ldr	r3, [r4, #28]
 800a710:	68db      	ldr	r3, [r3, #12]
 800a712:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a716:	b9b8      	cbnz	r0, 800a748 <_Balloc+0x68>
 800a718:	2101      	movs	r1, #1
 800a71a:	fa01 f605 	lsl.w	r6, r1, r5
 800a71e:	1d72      	adds	r2, r6, #5
 800a720:	0092      	lsls	r2, r2, #2
 800a722:	4620      	mov	r0, r4
 800a724:	f000 fdb8 	bl	800b298 <_calloc_r>
 800a728:	b160      	cbz	r0, 800a744 <_Balloc+0x64>
 800a72a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a72e:	e00e      	b.n	800a74e <_Balloc+0x6e>
 800a730:	2221      	movs	r2, #33	@ 0x21
 800a732:	2104      	movs	r1, #4
 800a734:	4620      	mov	r0, r4
 800a736:	f000 fdaf 	bl	800b298 <_calloc_r>
 800a73a:	69e3      	ldr	r3, [r4, #28]
 800a73c:	60f0      	str	r0, [r6, #12]
 800a73e:	68db      	ldr	r3, [r3, #12]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d1e4      	bne.n	800a70e <_Balloc+0x2e>
 800a744:	2000      	movs	r0, #0
 800a746:	bd70      	pop	{r4, r5, r6, pc}
 800a748:	6802      	ldr	r2, [r0, #0]
 800a74a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a74e:	2300      	movs	r3, #0
 800a750:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a754:	e7f7      	b.n	800a746 <_Balloc+0x66>
 800a756:	bf00      	nop
 800a758:	0800c169 	.word	0x0800c169
 800a75c:	0800c1e9 	.word	0x0800c1e9

0800a760 <_Bfree>:
 800a760:	b570      	push	{r4, r5, r6, lr}
 800a762:	69c6      	ldr	r6, [r0, #28]
 800a764:	4605      	mov	r5, r0
 800a766:	460c      	mov	r4, r1
 800a768:	b976      	cbnz	r6, 800a788 <_Bfree+0x28>
 800a76a:	2010      	movs	r0, #16
 800a76c:	f7ff ff02 	bl	800a574 <malloc>
 800a770:	4602      	mov	r2, r0
 800a772:	61e8      	str	r0, [r5, #28]
 800a774:	b920      	cbnz	r0, 800a780 <_Bfree+0x20>
 800a776:	4b09      	ldr	r3, [pc, #36]	@ (800a79c <_Bfree+0x3c>)
 800a778:	4809      	ldr	r0, [pc, #36]	@ (800a7a0 <_Bfree+0x40>)
 800a77a:	218f      	movs	r1, #143	@ 0x8f
 800a77c:	f000 fd6e 	bl	800b25c <__assert_func>
 800a780:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a784:	6006      	str	r6, [r0, #0]
 800a786:	60c6      	str	r6, [r0, #12]
 800a788:	b13c      	cbz	r4, 800a79a <_Bfree+0x3a>
 800a78a:	69eb      	ldr	r3, [r5, #28]
 800a78c:	6862      	ldr	r2, [r4, #4]
 800a78e:	68db      	ldr	r3, [r3, #12]
 800a790:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a794:	6021      	str	r1, [r4, #0]
 800a796:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a79a:	bd70      	pop	{r4, r5, r6, pc}
 800a79c:	0800c169 	.word	0x0800c169
 800a7a0:	0800c1e9 	.word	0x0800c1e9

0800a7a4 <__multadd>:
 800a7a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7a8:	690d      	ldr	r5, [r1, #16]
 800a7aa:	4607      	mov	r7, r0
 800a7ac:	460c      	mov	r4, r1
 800a7ae:	461e      	mov	r6, r3
 800a7b0:	f101 0c14 	add.w	ip, r1, #20
 800a7b4:	2000      	movs	r0, #0
 800a7b6:	f8dc 3000 	ldr.w	r3, [ip]
 800a7ba:	b299      	uxth	r1, r3
 800a7bc:	fb02 6101 	mla	r1, r2, r1, r6
 800a7c0:	0c1e      	lsrs	r6, r3, #16
 800a7c2:	0c0b      	lsrs	r3, r1, #16
 800a7c4:	fb02 3306 	mla	r3, r2, r6, r3
 800a7c8:	b289      	uxth	r1, r1
 800a7ca:	3001      	adds	r0, #1
 800a7cc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a7d0:	4285      	cmp	r5, r0
 800a7d2:	f84c 1b04 	str.w	r1, [ip], #4
 800a7d6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a7da:	dcec      	bgt.n	800a7b6 <__multadd+0x12>
 800a7dc:	b30e      	cbz	r6, 800a822 <__multadd+0x7e>
 800a7de:	68a3      	ldr	r3, [r4, #8]
 800a7e0:	42ab      	cmp	r3, r5
 800a7e2:	dc19      	bgt.n	800a818 <__multadd+0x74>
 800a7e4:	6861      	ldr	r1, [r4, #4]
 800a7e6:	4638      	mov	r0, r7
 800a7e8:	3101      	adds	r1, #1
 800a7ea:	f7ff ff79 	bl	800a6e0 <_Balloc>
 800a7ee:	4680      	mov	r8, r0
 800a7f0:	b928      	cbnz	r0, 800a7fe <__multadd+0x5a>
 800a7f2:	4602      	mov	r2, r0
 800a7f4:	4b0c      	ldr	r3, [pc, #48]	@ (800a828 <__multadd+0x84>)
 800a7f6:	480d      	ldr	r0, [pc, #52]	@ (800a82c <__multadd+0x88>)
 800a7f8:	21ba      	movs	r1, #186	@ 0xba
 800a7fa:	f000 fd2f 	bl	800b25c <__assert_func>
 800a7fe:	6922      	ldr	r2, [r4, #16]
 800a800:	3202      	adds	r2, #2
 800a802:	f104 010c 	add.w	r1, r4, #12
 800a806:	0092      	lsls	r2, r2, #2
 800a808:	300c      	adds	r0, #12
 800a80a:	f000 fd19 	bl	800b240 <memcpy>
 800a80e:	4621      	mov	r1, r4
 800a810:	4638      	mov	r0, r7
 800a812:	f7ff ffa5 	bl	800a760 <_Bfree>
 800a816:	4644      	mov	r4, r8
 800a818:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a81c:	3501      	adds	r5, #1
 800a81e:	615e      	str	r6, [r3, #20]
 800a820:	6125      	str	r5, [r4, #16]
 800a822:	4620      	mov	r0, r4
 800a824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a828:	0800c1d8 	.word	0x0800c1d8
 800a82c:	0800c1e9 	.word	0x0800c1e9

0800a830 <__hi0bits>:
 800a830:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a834:	4603      	mov	r3, r0
 800a836:	bf36      	itet	cc
 800a838:	0403      	lslcc	r3, r0, #16
 800a83a:	2000      	movcs	r0, #0
 800a83c:	2010      	movcc	r0, #16
 800a83e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a842:	bf3c      	itt	cc
 800a844:	021b      	lslcc	r3, r3, #8
 800a846:	3008      	addcc	r0, #8
 800a848:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a84c:	bf3c      	itt	cc
 800a84e:	011b      	lslcc	r3, r3, #4
 800a850:	3004      	addcc	r0, #4
 800a852:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a856:	bf3c      	itt	cc
 800a858:	009b      	lslcc	r3, r3, #2
 800a85a:	3002      	addcc	r0, #2
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	db05      	blt.n	800a86c <__hi0bits+0x3c>
 800a860:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a864:	f100 0001 	add.w	r0, r0, #1
 800a868:	bf08      	it	eq
 800a86a:	2020      	moveq	r0, #32
 800a86c:	4770      	bx	lr

0800a86e <__lo0bits>:
 800a86e:	6803      	ldr	r3, [r0, #0]
 800a870:	4602      	mov	r2, r0
 800a872:	f013 0007 	ands.w	r0, r3, #7
 800a876:	d00b      	beq.n	800a890 <__lo0bits+0x22>
 800a878:	07d9      	lsls	r1, r3, #31
 800a87a:	d421      	bmi.n	800a8c0 <__lo0bits+0x52>
 800a87c:	0798      	lsls	r0, r3, #30
 800a87e:	bf49      	itett	mi
 800a880:	085b      	lsrmi	r3, r3, #1
 800a882:	089b      	lsrpl	r3, r3, #2
 800a884:	2001      	movmi	r0, #1
 800a886:	6013      	strmi	r3, [r2, #0]
 800a888:	bf5c      	itt	pl
 800a88a:	6013      	strpl	r3, [r2, #0]
 800a88c:	2002      	movpl	r0, #2
 800a88e:	4770      	bx	lr
 800a890:	b299      	uxth	r1, r3
 800a892:	b909      	cbnz	r1, 800a898 <__lo0bits+0x2a>
 800a894:	0c1b      	lsrs	r3, r3, #16
 800a896:	2010      	movs	r0, #16
 800a898:	b2d9      	uxtb	r1, r3
 800a89a:	b909      	cbnz	r1, 800a8a0 <__lo0bits+0x32>
 800a89c:	3008      	adds	r0, #8
 800a89e:	0a1b      	lsrs	r3, r3, #8
 800a8a0:	0719      	lsls	r1, r3, #28
 800a8a2:	bf04      	itt	eq
 800a8a4:	091b      	lsreq	r3, r3, #4
 800a8a6:	3004      	addeq	r0, #4
 800a8a8:	0799      	lsls	r1, r3, #30
 800a8aa:	bf04      	itt	eq
 800a8ac:	089b      	lsreq	r3, r3, #2
 800a8ae:	3002      	addeq	r0, #2
 800a8b0:	07d9      	lsls	r1, r3, #31
 800a8b2:	d403      	bmi.n	800a8bc <__lo0bits+0x4e>
 800a8b4:	085b      	lsrs	r3, r3, #1
 800a8b6:	f100 0001 	add.w	r0, r0, #1
 800a8ba:	d003      	beq.n	800a8c4 <__lo0bits+0x56>
 800a8bc:	6013      	str	r3, [r2, #0]
 800a8be:	4770      	bx	lr
 800a8c0:	2000      	movs	r0, #0
 800a8c2:	4770      	bx	lr
 800a8c4:	2020      	movs	r0, #32
 800a8c6:	4770      	bx	lr

0800a8c8 <__i2b>:
 800a8c8:	b510      	push	{r4, lr}
 800a8ca:	460c      	mov	r4, r1
 800a8cc:	2101      	movs	r1, #1
 800a8ce:	f7ff ff07 	bl	800a6e0 <_Balloc>
 800a8d2:	4602      	mov	r2, r0
 800a8d4:	b928      	cbnz	r0, 800a8e2 <__i2b+0x1a>
 800a8d6:	4b05      	ldr	r3, [pc, #20]	@ (800a8ec <__i2b+0x24>)
 800a8d8:	4805      	ldr	r0, [pc, #20]	@ (800a8f0 <__i2b+0x28>)
 800a8da:	f240 1145 	movw	r1, #325	@ 0x145
 800a8de:	f000 fcbd 	bl	800b25c <__assert_func>
 800a8e2:	2301      	movs	r3, #1
 800a8e4:	6144      	str	r4, [r0, #20]
 800a8e6:	6103      	str	r3, [r0, #16]
 800a8e8:	bd10      	pop	{r4, pc}
 800a8ea:	bf00      	nop
 800a8ec:	0800c1d8 	.word	0x0800c1d8
 800a8f0:	0800c1e9 	.word	0x0800c1e9

0800a8f4 <__multiply>:
 800a8f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8f8:	4614      	mov	r4, r2
 800a8fa:	690a      	ldr	r2, [r1, #16]
 800a8fc:	6923      	ldr	r3, [r4, #16]
 800a8fe:	429a      	cmp	r2, r3
 800a900:	bfa8      	it	ge
 800a902:	4623      	movge	r3, r4
 800a904:	460f      	mov	r7, r1
 800a906:	bfa4      	itt	ge
 800a908:	460c      	movge	r4, r1
 800a90a:	461f      	movge	r7, r3
 800a90c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a910:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a914:	68a3      	ldr	r3, [r4, #8]
 800a916:	6861      	ldr	r1, [r4, #4]
 800a918:	eb0a 0609 	add.w	r6, sl, r9
 800a91c:	42b3      	cmp	r3, r6
 800a91e:	b085      	sub	sp, #20
 800a920:	bfb8      	it	lt
 800a922:	3101      	addlt	r1, #1
 800a924:	f7ff fedc 	bl	800a6e0 <_Balloc>
 800a928:	b930      	cbnz	r0, 800a938 <__multiply+0x44>
 800a92a:	4602      	mov	r2, r0
 800a92c:	4b44      	ldr	r3, [pc, #272]	@ (800aa40 <__multiply+0x14c>)
 800a92e:	4845      	ldr	r0, [pc, #276]	@ (800aa44 <__multiply+0x150>)
 800a930:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a934:	f000 fc92 	bl	800b25c <__assert_func>
 800a938:	f100 0514 	add.w	r5, r0, #20
 800a93c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a940:	462b      	mov	r3, r5
 800a942:	2200      	movs	r2, #0
 800a944:	4543      	cmp	r3, r8
 800a946:	d321      	bcc.n	800a98c <__multiply+0x98>
 800a948:	f107 0114 	add.w	r1, r7, #20
 800a94c:	f104 0214 	add.w	r2, r4, #20
 800a950:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a954:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a958:	9302      	str	r3, [sp, #8]
 800a95a:	1b13      	subs	r3, r2, r4
 800a95c:	3b15      	subs	r3, #21
 800a95e:	f023 0303 	bic.w	r3, r3, #3
 800a962:	3304      	adds	r3, #4
 800a964:	f104 0715 	add.w	r7, r4, #21
 800a968:	42ba      	cmp	r2, r7
 800a96a:	bf38      	it	cc
 800a96c:	2304      	movcc	r3, #4
 800a96e:	9301      	str	r3, [sp, #4]
 800a970:	9b02      	ldr	r3, [sp, #8]
 800a972:	9103      	str	r1, [sp, #12]
 800a974:	428b      	cmp	r3, r1
 800a976:	d80c      	bhi.n	800a992 <__multiply+0x9e>
 800a978:	2e00      	cmp	r6, #0
 800a97a:	dd03      	ble.n	800a984 <__multiply+0x90>
 800a97c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a980:	2b00      	cmp	r3, #0
 800a982:	d05b      	beq.n	800aa3c <__multiply+0x148>
 800a984:	6106      	str	r6, [r0, #16]
 800a986:	b005      	add	sp, #20
 800a988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a98c:	f843 2b04 	str.w	r2, [r3], #4
 800a990:	e7d8      	b.n	800a944 <__multiply+0x50>
 800a992:	f8b1 a000 	ldrh.w	sl, [r1]
 800a996:	f1ba 0f00 	cmp.w	sl, #0
 800a99a:	d024      	beq.n	800a9e6 <__multiply+0xf2>
 800a99c:	f104 0e14 	add.w	lr, r4, #20
 800a9a0:	46a9      	mov	r9, r5
 800a9a2:	f04f 0c00 	mov.w	ip, #0
 800a9a6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a9aa:	f8d9 3000 	ldr.w	r3, [r9]
 800a9ae:	fa1f fb87 	uxth.w	fp, r7
 800a9b2:	b29b      	uxth	r3, r3
 800a9b4:	fb0a 330b 	mla	r3, sl, fp, r3
 800a9b8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a9bc:	f8d9 7000 	ldr.w	r7, [r9]
 800a9c0:	4463      	add	r3, ip
 800a9c2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a9c6:	fb0a c70b 	mla	r7, sl, fp, ip
 800a9ca:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a9ce:	b29b      	uxth	r3, r3
 800a9d0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a9d4:	4572      	cmp	r2, lr
 800a9d6:	f849 3b04 	str.w	r3, [r9], #4
 800a9da:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a9de:	d8e2      	bhi.n	800a9a6 <__multiply+0xb2>
 800a9e0:	9b01      	ldr	r3, [sp, #4]
 800a9e2:	f845 c003 	str.w	ip, [r5, r3]
 800a9e6:	9b03      	ldr	r3, [sp, #12]
 800a9e8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a9ec:	3104      	adds	r1, #4
 800a9ee:	f1b9 0f00 	cmp.w	r9, #0
 800a9f2:	d021      	beq.n	800aa38 <__multiply+0x144>
 800a9f4:	682b      	ldr	r3, [r5, #0]
 800a9f6:	f104 0c14 	add.w	ip, r4, #20
 800a9fa:	46ae      	mov	lr, r5
 800a9fc:	f04f 0a00 	mov.w	sl, #0
 800aa00:	f8bc b000 	ldrh.w	fp, [ip]
 800aa04:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800aa08:	fb09 770b 	mla	r7, r9, fp, r7
 800aa0c:	4457      	add	r7, sl
 800aa0e:	b29b      	uxth	r3, r3
 800aa10:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800aa14:	f84e 3b04 	str.w	r3, [lr], #4
 800aa18:	f85c 3b04 	ldr.w	r3, [ip], #4
 800aa1c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800aa20:	f8be 3000 	ldrh.w	r3, [lr]
 800aa24:	fb09 330a 	mla	r3, r9, sl, r3
 800aa28:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800aa2c:	4562      	cmp	r2, ip
 800aa2e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800aa32:	d8e5      	bhi.n	800aa00 <__multiply+0x10c>
 800aa34:	9f01      	ldr	r7, [sp, #4]
 800aa36:	51eb      	str	r3, [r5, r7]
 800aa38:	3504      	adds	r5, #4
 800aa3a:	e799      	b.n	800a970 <__multiply+0x7c>
 800aa3c:	3e01      	subs	r6, #1
 800aa3e:	e79b      	b.n	800a978 <__multiply+0x84>
 800aa40:	0800c1d8 	.word	0x0800c1d8
 800aa44:	0800c1e9 	.word	0x0800c1e9

0800aa48 <__pow5mult>:
 800aa48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa4c:	4615      	mov	r5, r2
 800aa4e:	f012 0203 	ands.w	r2, r2, #3
 800aa52:	4607      	mov	r7, r0
 800aa54:	460e      	mov	r6, r1
 800aa56:	d007      	beq.n	800aa68 <__pow5mult+0x20>
 800aa58:	4c25      	ldr	r4, [pc, #148]	@ (800aaf0 <__pow5mult+0xa8>)
 800aa5a:	3a01      	subs	r2, #1
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800aa62:	f7ff fe9f 	bl	800a7a4 <__multadd>
 800aa66:	4606      	mov	r6, r0
 800aa68:	10ad      	asrs	r5, r5, #2
 800aa6a:	d03d      	beq.n	800aae8 <__pow5mult+0xa0>
 800aa6c:	69fc      	ldr	r4, [r7, #28]
 800aa6e:	b97c      	cbnz	r4, 800aa90 <__pow5mult+0x48>
 800aa70:	2010      	movs	r0, #16
 800aa72:	f7ff fd7f 	bl	800a574 <malloc>
 800aa76:	4602      	mov	r2, r0
 800aa78:	61f8      	str	r0, [r7, #28]
 800aa7a:	b928      	cbnz	r0, 800aa88 <__pow5mult+0x40>
 800aa7c:	4b1d      	ldr	r3, [pc, #116]	@ (800aaf4 <__pow5mult+0xac>)
 800aa7e:	481e      	ldr	r0, [pc, #120]	@ (800aaf8 <__pow5mult+0xb0>)
 800aa80:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800aa84:	f000 fbea 	bl	800b25c <__assert_func>
 800aa88:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800aa8c:	6004      	str	r4, [r0, #0]
 800aa8e:	60c4      	str	r4, [r0, #12]
 800aa90:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800aa94:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800aa98:	b94c      	cbnz	r4, 800aaae <__pow5mult+0x66>
 800aa9a:	f240 2171 	movw	r1, #625	@ 0x271
 800aa9e:	4638      	mov	r0, r7
 800aaa0:	f7ff ff12 	bl	800a8c8 <__i2b>
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	f8c8 0008 	str.w	r0, [r8, #8]
 800aaaa:	4604      	mov	r4, r0
 800aaac:	6003      	str	r3, [r0, #0]
 800aaae:	f04f 0900 	mov.w	r9, #0
 800aab2:	07eb      	lsls	r3, r5, #31
 800aab4:	d50a      	bpl.n	800aacc <__pow5mult+0x84>
 800aab6:	4631      	mov	r1, r6
 800aab8:	4622      	mov	r2, r4
 800aaba:	4638      	mov	r0, r7
 800aabc:	f7ff ff1a 	bl	800a8f4 <__multiply>
 800aac0:	4631      	mov	r1, r6
 800aac2:	4680      	mov	r8, r0
 800aac4:	4638      	mov	r0, r7
 800aac6:	f7ff fe4b 	bl	800a760 <_Bfree>
 800aaca:	4646      	mov	r6, r8
 800aacc:	106d      	asrs	r5, r5, #1
 800aace:	d00b      	beq.n	800aae8 <__pow5mult+0xa0>
 800aad0:	6820      	ldr	r0, [r4, #0]
 800aad2:	b938      	cbnz	r0, 800aae4 <__pow5mult+0x9c>
 800aad4:	4622      	mov	r2, r4
 800aad6:	4621      	mov	r1, r4
 800aad8:	4638      	mov	r0, r7
 800aada:	f7ff ff0b 	bl	800a8f4 <__multiply>
 800aade:	6020      	str	r0, [r4, #0]
 800aae0:	f8c0 9000 	str.w	r9, [r0]
 800aae4:	4604      	mov	r4, r0
 800aae6:	e7e4      	b.n	800aab2 <__pow5mult+0x6a>
 800aae8:	4630      	mov	r0, r6
 800aaea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aaee:	bf00      	nop
 800aaf0:	0800c244 	.word	0x0800c244
 800aaf4:	0800c169 	.word	0x0800c169
 800aaf8:	0800c1e9 	.word	0x0800c1e9

0800aafc <__lshift>:
 800aafc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab00:	460c      	mov	r4, r1
 800ab02:	6849      	ldr	r1, [r1, #4]
 800ab04:	6923      	ldr	r3, [r4, #16]
 800ab06:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ab0a:	68a3      	ldr	r3, [r4, #8]
 800ab0c:	4607      	mov	r7, r0
 800ab0e:	4691      	mov	r9, r2
 800ab10:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ab14:	f108 0601 	add.w	r6, r8, #1
 800ab18:	42b3      	cmp	r3, r6
 800ab1a:	db0b      	blt.n	800ab34 <__lshift+0x38>
 800ab1c:	4638      	mov	r0, r7
 800ab1e:	f7ff fddf 	bl	800a6e0 <_Balloc>
 800ab22:	4605      	mov	r5, r0
 800ab24:	b948      	cbnz	r0, 800ab3a <__lshift+0x3e>
 800ab26:	4602      	mov	r2, r0
 800ab28:	4b28      	ldr	r3, [pc, #160]	@ (800abcc <__lshift+0xd0>)
 800ab2a:	4829      	ldr	r0, [pc, #164]	@ (800abd0 <__lshift+0xd4>)
 800ab2c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ab30:	f000 fb94 	bl	800b25c <__assert_func>
 800ab34:	3101      	adds	r1, #1
 800ab36:	005b      	lsls	r3, r3, #1
 800ab38:	e7ee      	b.n	800ab18 <__lshift+0x1c>
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	f100 0114 	add.w	r1, r0, #20
 800ab40:	f100 0210 	add.w	r2, r0, #16
 800ab44:	4618      	mov	r0, r3
 800ab46:	4553      	cmp	r3, sl
 800ab48:	db33      	blt.n	800abb2 <__lshift+0xb6>
 800ab4a:	6920      	ldr	r0, [r4, #16]
 800ab4c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ab50:	f104 0314 	add.w	r3, r4, #20
 800ab54:	f019 091f 	ands.w	r9, r9, #31
 800ab58:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ab5c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ab60:	d02b      	beq.n	800abba <__lshift+0xbe>
 800ab62:	f1c9 0e20 	rsb	lr, r9, #32
 800ab66:	468a      	mov	sl, r1
 800ab68:	2200      	movs	r2, #0
 800ab6a:	6818      	ldr	r0, [r3, #0]
 800ab6c:	fa00 f009 	lsl.w	r0, r0, r9
 800ab70:	4310      	orrs	r0, r2
 800ab72:	f84a 0b04 	str.w	r0, [sl], #4
 800ab76:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab7a:	459c      	cmp	ip, r3
 800ab7c:	fa22 f20e 	lsr.w	r2, r2, lr
 800ab80:	d8f3      	bhi.n	800ab6a <__lshift+0x6e>
 800ab82:	ebac 0304 	sub.w	r3, ip, r4
 800ab86:	3b15      	subs	r3, #21
 800ab88:	f023 0303 	bic.w	r3, r3, #3
 800ab8c:	3304      	adds	r3, #4
 800ab8e:	f104 0015 	add.w	r0, r4, #21
 800ab92:	4584      	cmp	ip, r0
 800ab94:	bf38      	it	cc
 800ab96:	2304      	movcc	r3, #4
 800ab98:	50ca      	str	r2, [r1, r3]
 800ab9a:	b10a      	cbz	r2, 800aba0 <__lshift+0xa4>
 800ab9c:	f108 0602 	add.w	r6, r8, #2
 800aba0:	3e01      	subs	r6, #1
 800aba2:	4638      	mov	r0, r7
 800aba4:	612e      	str	r6, [r5, #16]
 800aba6:	4621      	mov	r1, r4
 800aba8:	f7ff fdda 	bl	800a760 <_Bfree>
 800abac:	4628      	mov	r0, r5
 800abae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abb2:	f842 0f04 	str.w	r0, [r2, #4]!
 800abb6:	3301      	adds	r3, #1
 800abb8:	e7c5      	b.n	800ab46 <__lshift+0x4a>
 800abba:	3904      	subs	r1, #4
 800abbc:	f853 2b04 	ldr.w	r2, [r3], #4
 800abc0:	f841 2f04 	str.w	r2, [r1, #4]!
 800abc4:	459c      	cmp	ip, r3
 800abc6:	d8f9      	bhi.n	800abbc <__lshift+0xc0>
 800abc8:	e7ea      	b.n	800aba0 <__lshift+0xa4>
 800abca:	bf00      	nop
 800abcc:	0800c1d8 	.word	0x0800c1d8
 800abd0:	0800c1e9 	.word	0x0800c1e9

0800abd4 <__mcmp>:
 800abd4:	690a      	ldr	r2, [r1, #16]
 800abd6:	4603      	mov	r3, r0
 800abd8:	6900      	ldr	r0, [r0, #16]
 800abda:	1a80      	subs	r0, r0, r2
 800abdc:	b530      	push	{r4, r5, lr}
 800abde:	d10e      	bne.n	800abfe <__mcmp+0x2a>
 800abe0:	3314      	adds	r3, #20
 800abe2:	3114      	adds	r1, #20
 800abe4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800abe8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800abec:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800abf0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800abf4:	4295      	cmp	r5, r2
 800abf6:	d003      	beq.n	800ac00 <__mcmp+0x2c>
 800abf8:	d205      	bcs.n	800ac06 <__mcmp+0x32>
 800abfa:	f04f 30ff 	mov.w	r0, #4294967295
 800abfe:	bd30      	pop	{r4, r5, pc}
 800ac00:	42a3      	cmp	r3, r4
 800ac02:	d3f3      	bcc.n	800abec <__mcmp+0x18>
 800ac04:	e7fb      	b.n	800abfe <__mcmp+0x2a>
 800ac06:	2001      	movs	r0, #1
 800ac08:	e7f9      	b.n	800abfe <__mcmp+0x2a>
	...

0800ac0c <__mdiff>:
 800ac0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac10:	4689      	mov	r9, r1
 800ac12:	4606      	mov	r6, r0
 800ac14:	4611      	mov	r1, r2
 800ac16:	4648      	mov	r0, r9
 800ac18:	4614      	mov	r4, r2
 800ac1a:	f7ff ffdb 	bl	800abd4 <__mcmp>
 800ac1e:	1e05      	subs	r5, r0, #0
 800ac20:	d112      	bne.n	800ac48 <__mdiff+0x3c>
 800ac22:	4629      	mov	r1, r5
 800ac24:	4630      	mov	r0, r6
 800ac26:	f7ff fd5b 	bl	800a6e0 <_Balloc>
 800ac2a:	4602      	mov	r2, r0
 800ac2c:	b928      	cbnz	r0, 800ac3a <__mdiff+0x2e>
 800ac2e:	4b3f      	ldr	r3, [pc, #252]	@ (800ad2c <__mdiff+0x120>)
 800ac30:	f240 2137 	movw	r1, #567	@ 0x237
 800ac34:	483e      	ldr	r0, [pc, #248]	@ (800ad30 <__mdiff+0x124>)
 800ac36:	f000 fb11 	bl	800b25c <__assert_func>
 800ac3a:	2301      	movs	r3, #1
 800ac3c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ac40:	4610      	mov	r0, r2
 800ac42:	b003      	add	sp, #12
 800ac44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac48:	bfbc      	itt	lt
 800ac4a:	464b      	movlt	r3, r9
 800ac4c:	46a1      	movlt	r9, r4
 800ac4e:	4630      	mov	r0, r6
 800ac50:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ac54:	bfba      	itte	lt
 800ac56:	461c      	movlt	r4, r3
 800ac58:	2501      	movlt	r5, #1
 800ac5a:	2500      	movge	r5, #0
 800ac5c:	f7ff fd40 	bl	800a6e0 <_Balloc>
 800ac60:	4602      	mov	r2, r0
 800ac62:	b918      	cbnz	r0, 800ac6c <__mdiff+0x60>
 800ac64:	4b31      	ldr	r3, [pc, #196]	@ (800ad2c <__mdiff+0x120>)
 800ac66:	f240 2145 	movw	r1, #581	@ 0x245
 800ac6a:	e7e3      	b.n	800ac34 <__mdiff+0x28>
 800ac6c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ac70:	6926      	ldr	r6, [r4, #16]
 800ac72:	60c5      	str	r5, [r0, #12]
 800ac74:	f109 0310 	add.w	r3, r9, #16
 800ac78:	f109 0514 	add.w	r5, r9, #20
 800ac7c:	f104 0e14 	add.w	lr, r4, #20
 800ac80:	f100 0b14 	add.w	fp, r0, #20
 800ac84:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ac88:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ac8c:	9301      	str	r3, [sp, #4]
 800ac8e:	46d9      	mov	r9, fp
 800ac90:	f04f 0c00 	mov.w	ip, #0
 800ac94:	9b01      	ldr	r3, [sp, #4]
 800ac96:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ac9a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ac9e:	9301      	str	r3, [sp, #4]
 800aca0:	fa1f f38a 	uxth.w	r3, sl
 800aca4:	4619      	mov	r1, r3
 800aca6:	b283      	uxth	r3, r0
 800aca8:	1acb      	subs	r3, r1, r3
 800acaa:	0c00      	lsrs	r0, r0, #16
 800acac:	4463      	add	r3, ip
 800acae:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800acb2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800acb6:	b29b      	uxth	r3, r3
 800acb8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800acbc:	4576      	cmp	r6, lr
 800acbe:	f849 3b04 	str.w	r3, [r9], #4
 800acc2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800acc6:	d8e5      	bhi.n	800ac94 <__mdiff+0x88>
 800acc8:	1b33      	subs	r3, r6, r4
 800acca:	3b15      	subs	r3, #21
 800accc:	f023 0303 	bic.w	r3, r3, #3
 800acd0:	3415      	adds	r4, #21
 800acd2:	3304      	adds	r3, #4
 800acd4:	42a6      	cmp	r6, r4
 800acd6:	bf38      	it	cc
 800acd8:	2304      	movcc	r3, #4
 800acda:	441d      	add	r5, r3
 800acdc:	445b      	add	r3, fp
 800acde:	461e      	mov	r6, r3
 800ace0:	462c      	mov	r4, r5
 800ace2:	4544      	cmp	r4, r8
 800ace4:	d30e      	bcc.n	800ad04 <__mdiff+0xf8>
 800ace6:	f108 0103 	add.w	r1, r8, #3
 800acea:	1b49      	subs	r1, r1, r5
 800acec:	f021 0103 	bic.w	r1, r1, #3
 800acf0:	3d03      	subs	r5, #3
 800acf2:	45a8      	cmp	r8, r5
 800acf4:	bf38      	it	cc
 800acf6:	2100      	movcc	r1, #0
 800acf8:	440b      	add	r3, r1
 800acfa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800acfe:	b191      	cbz	r1, 800ad26 <__mdiff+0x11a>
 800ad00:	6117      	str	r7, [r2, #16]
 800ad02:	e79d      	b.n	800ac40 <__mdiff+0x34>
 800ad04:	f854 1b04 	ldr.w	r1, [r4], #4
 800ad08:	46e6      	mov	lr, ip
 800ad0a:	0c08      	lsrs	r0, r1, #16
 800ad0c:	fa1c fc81 	uxtah	ip, ip, r1
 800ad10:	4471      	add	r1, lr
 800ad12:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ad16:	b289      	uxth	r1, r1
 800ad18:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ad1c:	f846 1b04 	str.w	r1, [r6], #4
 800ad20:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ad24:	e7dd      	b.n	800ace2 <__mdiff+0xd6>
 800ad26:	3f01      	subs	r7, #1
 800ad28:	e7e7      	b.n	800acfa <__mdiff+0xee>
 800ad2a:	bf00      	nop
 800ad2c:	0800c1d8 	.word	0x0800c1d8
 800ad30:	0800c1e9 	.word	0x0800c1e9

0800ad34 <__d2b>:
 800ad34:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ad38:	460f      	mov	r7, r1
 800ad3a:	2101      	movs	r1, #1
 800ad3c:	ec59 8b10 	vmov	r8, r9, d0
 800ad40:	4616      	mov	r6, r2
 800ad42:	f7ff fccd 	bl	800a6e0 <_Balloc>
 800ad46:	4604      	mov	r4, r0
 800ad48:	b930      	cbnz	r0, 800ad58 <__d2b+0x24>
 800ad4a:	4602      	mov	r2, r0
 800ad4c:	4b23      	ldr	r3, [pc, #140]	@ (800addc <__d2b+0xa8>)
 800ad4e:	4824      	ldr	r0, [pc, #144]	@ (800ade0 <__d2b+0xac>)
 800ad50:	f240 310f 	movw	r1, #783	@ 0x30f
 800ad54:	f000 fa82 	bl	800b25c <__assert_func>
 800ad58:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ad5c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ad60:	b10d      	cbz	r5, 800ad66 <__d2b+0x32>
 800ad62:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ad66:	9301      	str	r3, [sp, #4]
 800ad68:	f1b8 0300 	subs.w	r3, r8, #0
 800ad6c:	d023      	beq.n	800adb6 <__d2b+0x82>
 800ad6e:	4668      	mov	r0, sp
 800ad70:	9300      	str	r3, [sp, #0]
 800ad72:	f7ff fd7c 	bl	800a86e <__lo0bits>
 800ad76:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ad7a:	b1d0      	cbz	r0, 800adb2 <__d2b+0x7e>
 800ad7c:	f1c0 0320 	rsb	r3, r0, #32
 800ad80:	fa02 f303 	lsl.w	r3, r2, r3
 800ad84:	430b      	orrs	r3, r1
 800ad86:	40c2      	lsrs	r2, r0
 800ad88:	6163      	str	r3, [r4, #20]
 800ad8a:	9201      	str	r2, [sp, #4]
 800ad8c:	9b01      	ldr	r3, [sp, #4]
 800ad8e:	61a3      	str	r3, [r4, #24]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	bf0c      	ite	eq
 800ad94:	2201      	moveq	r2, #1
 800ad96:	2202      	movne	r2, #2
 800ad98:	6122      	str	r2, [r4, #16]
 800ad9a:	b1a5      	cbz	r5, 800adc6 <__d2b+0x92>
 800ad9c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ada0:	4405      	add	r5, r0
 800ada2:	603d      	str	r5, [r7, #0]
 800ada4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ada8:	6030      	str	r0, [r6, #0]
 800adaa:	4620      	mov	r0, r4
 800adac:	b003      	add	sp, #12
 800adae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800adb2:	6161      	str	r1, [r4, #20]
 800adb4:	e7ea      	b.n	800ad8c <__d2b+0x58>
 800adb6:	a801      	add	r0, sp, #4
 800adb8:	f7ff fd59 	bl	800a86e <__lo0bits>
 800adbc:	9b01      	ldr	r3, [sp, #4]
 800adbe:	6163      	str	r3, [r4, #20]
 800adc0:	3020      	adds	r0, #32
 800adc2:	2201      	movs	r2, #1
 800adc4:	e7e8      	b.n	800ad98 <__d2b+0x64>
 800adc6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800adca:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800adce:	6038      	str	r0, [r7, #0]
 800add0:	6918      	ldr	r0, [r3, #16]
 800add2:	f7ff fd2d 	bl	800a830 <__hi0bits>
 800add6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800adda:	e7e5      	b.n	800ada8 <__d2b+0x74>
 800addc:	0800c1d8 	.word	0x0800c1d8
 800ade0:	0800c1e9 	.word	0x0800c1e9

0800ade4 <__ssputs_r>:
 800ade4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ade8:	688e      	ldr	r6, [r1, #8]
 800adea:	461f      	mov	r7, r3
 800adec:	42be      	cmp	r6, r7
 800adee:	680b      	ldr	r3, [r1, #0]
 800adf0:	4682      	mov	sl, r0
 800adf2:	460c      	mov	r4, r1
 800adf4:	4690      	mov	r8, r2
 800adf6:	d82d      	bhi.n	800ae54 <__ssputs_r+0x70>
 800adf8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800adfc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ae00:	d026      	beq.n	800ae50 <__ssputs_r+0x6c>
 800ae02:	6965      	ldr	r5, [r4, #20]
 800ae04:	6909      	ldr	r1, [r1, #16]
 800ae06:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ae0a:	eba3 0901 	sub.w	r9, r3, r1
 800ae0e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ae12:	1c7b      	adds	r3, r7, #1
 800ae14:	444b      	add	r3, r9
 800ae16:	106d      	asrs	r5, r5, #1
 800ae18:	429d      	cmp	r5, r3
 800ae1a:	bf38      	it	cc
 800ae1c:	461d      	movcc	r5, r3
 800ae1e:	0553      	lsls	r3, r2, #21
 800ae20:	d527      	bpl.n	800ae72 <__ssputs_r+0x8e>
 800ae22:	4629      	mov	r1, r5
 800ae24:	f7ff fbd0 	bl	800a5c8 <_malloc_r>
 800ae28:	4606      	mov	r6, r0
 800ae2a:	b360      	cbz	r0, 800ae86 <__ssputs_r+0xa2>
 800ae2c:	6921      	ldr	r1, [r4, #16]
 800ae2e:	464a      	mov	r2, r9
 800ae30:	f000 fa06 	bl	800b240 <memcpy>
 800ae34:	89a3      	ldrh	r3, [r4, #12]
 800ae36:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ae3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ae3e:	81a3      	strh	r3, [r4, #12]
 800ae40:	6126      	str	r6, [r4, #16]
 800ae42:	6165      	str	r5, [r4, #20]
 800ae44:	444e      	add	r6, r9
 800ae46:	eba5 0509 	sub.w	r5, r5, r9
 800ae4a:	6026      	str	r6, [r4, #0]
 800ae4c:	60a5      	str	r5, [r4, #8]
 800ae4e:	463e      	mov	r6, r7
 800ae50:	42be      	cmp	r6, r7
 800ae52:	d900      	bls.n	800ae56 <__ssputs_r+0x72>
 800ae54:	463e      	mov	r6, r7
 800ae56:	6820      	ldr	r0, [r4, #0]
 800ae58:	4632      	mov	r2, r6
 800ae5a:	4641      	mov	r1, r8
 800ae5c:	f000 f9c6 	bl	800b1ec <memmove>
 800ae60:	68a3      	ldr	r3, [r4, #8]
 800ae62:	1b9b      	subs	r3, r3, r6
 800ae64:	60a3      	str	r3, [r4, #8]
 800ae66:	6823      	ldr	r3, [r4, #0]
 800ae68:	4433      	add	r3, r6
 800ae6a:	6023      	str	r3, [r4, #0]
 800ae6c:	2000      	movs	r0, #0
 800ae6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae72:	462a      	mov	r2, r5
 800ae74:	f000 fa36 	bl	800b2e4 <_realloc_r>
 800ae78:	4606      	mov	r6, r0
 800ae7a:	2800      	cmp	r0, #0
 800ae7c:	d1e0      	bne.n	800ae40 <__ssputs_r+0x5c>
 800ae7e:	6921      	ldr	r1, [r4, #16]
 800ae80:	4650      	mov	r0, sl
 800ae82:	f7ff fb2d 	bl	800a4e0 <_free_r>
 800ae86:	230c      	movs	r3, #12
 800ae88:	f8ca 3000 	str.w	r3, [sl]
 800ae8c:	89a3      	ldrh	r3, [r4, #12]
 800ae8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ae92:	81a3      	strh	r3, [r4, #12]
 800ae94:	f04f 30ff 	mov.w	r0, #4294967295
 800ae98:	e7e9      	b.n	800ae6e <__ssputs_r+0x8a>
	...

0800ae9c <_svfiprintf_r>:
 800ae9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aea0:	4698      	mov	r8, r3
 800aea2:	898b      	ldrh	r3, [r1, #12]
 800aea4:	061b      	lsls	r3, r3, #24
 800aea6:	b09d      	sub	sp, #116	@ 0x74
 800aea8:	4607      	mov	r7, r0
 800aeaa:	460d      	mov	r5, r1
 800aeac:	4614      	mov	r4, r2
 800aeae:	d510      	bpl.n	800aed2 <_svfiprintf_r+0x36>
 800aeb0:	690b      	ldr	r3, [r1, #16]
 800aeb2:	b973      	cbnz	r3, 800aed2 <_svfiprintf_r+0x36>
 800aeb4:	2140      	movs	r1, #64	@ 0x40
 800aeb6:	f7ff fb87 	bl	800a5c8 <_malloc_r>
 800aeba:	6028      	str	r0, [r5, #0]
 800aebc:	6128      	str	r0, [r5, #16]
 800aebe:	b930      	cbnz	r0, 800aece <_svfiprintf_r+0x32>
 800aec0:	230c      	movs	r3, #12
 800aec2:	603b      	str	r3, [r7, #0]
 800aec4:	f04f 30ff 	mov.w	r0, #4294967295
 800aec8:	b01d      	add	sp, #116	@ 0x74
 800aeca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aece:	2340      	movs	r3, #64	@ 0x40
 800aed0:	616b      	str	r3, [r5, #20]
 800aed2:	2300      	movs	r3, #0
 800aed4:	9309      	str	r3, [sp, #36]	@ 0x24
 800aed6:	2320      	movs	r3, #32
 800aed8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800aedc:	f8cd 800c 	str.w	r8, [sp, #12]
 800aee0:	2330      	movs	r3, #48	@ 0x30
 800aee2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b080 <_svfiprintf_r+0x1e4>
 800aee6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800aeea:	f04f 0901 	mov.w	r9, #1
 800aeee:	4623      	mov	r3, r4
 800aef0:	469a      	mov	sl, r3
 800aef2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aef6:	b10a      	cbz	r2, 800aefc <_svfiprintf_r+0x60>
 800aef8:	2a25      	cmp	r2, #37	@ 0x25
 800aefa:	d1f9      	bne.n	800aef0 <_svfiprintf_r+0x54>
 800aefc:	ebba 0b04 	subs.w	fp, sl, r4
 800af00:	d00b      	beq.n	800af1a <_svfiprintf_r+0x7e>
 800af02:	465b      	mov	r3, fp
 800af04:	4622      	mov	r2, r4
 800af06:	4629      	mov	r1, r5
 800af08:	4638      	mov	r0, r7
 800af0a:	f7ff ff6b 	bl	800ade4 <__ssputs_r>
 800af0e:	3001      	adds	r0, #1
 800af10:	f000 80a7 	beq.w	800b062 <_svfiprintf_r+0x1c6>
 800af14:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800af16:	445a      	add	r2, fp
 800af18:	9209      	str	r2, [sp, #36]	@ 0x24
 800af1a:	f89a 3000 	ldrb.w	r3, [sl]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	f000 809f 	beq.w	800b062 <_svfiprintf_r+0x1c6>
 800af24:	2300      	movs	r3, #0
 800af26:	f04f 32ff 	mov.w	r2, #4294967295
 800af2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800af2e:	f10a 0a01 	add.w	sl, sl, #1
 800af32:	9304      	str	r3, [sp, #16]
 800af34:	9307      	str	r3, [sp, #28]
 800af36:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800af3a:	931a      	str	r3, [sp, #104]	@ 0x68
 800af3c:	4654      	mov	r4, sl
 800af3e:	2205      	movs	r2, #5
 800af40:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af44:	484e      	ldr	r0, [pc, #312]	@ (800b080 <_svfiprintf_r+0x1e4>)
 800af46:	f7f5 f94b 	bl	80001e0 <memchr>
 800af4a:	9a04      	ldr	r2, [sp, #16]
 800af4c:	b9d8      	cbnz	r0, 800af86 <_svfiprintf_r+0xea>
 800af4e:	06d0      	lsls	r0, r2, #27
 800af50:	bf44      	itt	mi
 800af52:	2320      	movmi	r3, #32
 800af54:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800af58:	0711      	lsls	r1, r2, #28
 800af5a:	bf44      	itt	mi
 800af5c:	232b      	movmi	r3, #43	@ 0x2b
 800af5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800af62:	f89a 3000 	ldrb.w	r3, [sl]
 800af66:	2b2a      	cmp	r3, #42	@ 0x2a
 800af68:	d015      	beq.n	800af96 <_svfiprintf_r+0xfa>
 800af6a:	9a07      	ldr	r2, [sp, #28]
 800af6c:	4654      	mov	r4, sl
 800af6e:	2000      	movs	r0, #0
 800af70:	f04f 0c0a 	mov.w	ip, #10
 800af74:	4621      	mov	r1, r4
 800af76:	f811 3b01 	ldrb.w	r3, [r1], #1
 800af7a:	3b30      	subs	r3, #48	@ 0x30
 800af7c:	2b09      	cmp	r3, #9
 800af7e:	d94b      	bls.n	800b018 <_svfiprintf_r+0x17c>
 800af80:	b1b0      	cbz	r0, 800afb0 <_svfiprintf_r+0x114>
 800af82:	9207      	str	r2, [sp, #28]
 800af84:	e014      	b.n	800afb0 <_svfiprintf_r+0x114>
 800af86:	eba0 0308 	sub.w	r3, r0, r8
 800af8a:	fa09 f303 	lsl.w	r3, r9, r3
 800af8e:	4313      	orrs	r3, r2
 800af90:	9304      	str	r3, [sp, #16]
 800af92:	46a2      	mov	sl, r4
 800af94:	e7d2      	b.n	800af3c <_svfiprintf_r+0xa0>
 800af96:	9b03      	ldr	r3, [sp, #12]
 800af98:	1d19      	adds	r1, r3, #4
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	9103      	str	r1, [sp, #12]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	bfbb      	ittet	lt
 800afa2:	425b      	neglt	r3, r3
 800afa4:	f042 0202 	orrlt.w	r2, r2, #2
 800afa8:	9307      	strge	r3, [sp, #28]
 800afaa:	9307      	strlt	r3, [sp, #28]
 800afac:	bfb8      	it	lt
 800afae:	9204      	strlt	r2, [sp, #16]
 800afb0:	7823      	ldrb	r3, [r4, #0]
 800afb2:	2b2e      	cmp	r3, #46	@ 0x2e
 800afb4:	d10a      	bne.n	800afcc <_svfiprintf_r+0x130>
 800afb6:	7863      	ldrb	r3, [r4, #1]
 800afb8:	2b2a      	cmp	r3, #42	@ 0x2a
 800afba:	d132      	bne.n	800b022 <_svfiprintf_r+0x186>
 800afbc:	9b03      	ldr	r3, [sp, #12]
 800afbe:	1d1a      	adds	r2, r3, #4
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	9203      	str	r2, [sp, #12]
 800afc4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800afc8:	3402      	adds	r4, #2
 800afca:	9305      	str	r3, [sp, #20]
 800afcc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b090 <_svfiprintf_r+0x1f4>
 800afd0:	7821      	ldrb	r1, [r4, #0]
 800afd2:	2203      	movs	r2, #3
 800afd4:	4650      	mov	r0, sl
 800afd6:	f7f5 f903 	bl	80001e0 <memchr>
 800afda:	b138      	cbz	r0, 800afec <_svfiprintf_r+0x150>
 800afdc:	9b04      	ldr	r3, [sp, #16]
 800afde:	eba0 000a 	sub.w	r0, r0, sl
 800afe2:	2240      	movs	r2, #64	@ 0x40
 800afe4:	4082      	lsls	r2, r0
 800afe6:	4313      	orrs	r3, r2
 800afe8:	3401      	adds	r4, #1
 800afea:	9304      	str	r3, [sp, #16]
 800afec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aff0:	4824      	ldr	r0, [pc, #144]	@ (800b084 <_svfiprintf_r+0x1e8>)
 800aff2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800aff6:	2206      	movs	r2, #6
 800aff8:	f7f5 f8f2 	bl	80001e0 <memchr>
 800affc:	2800      	cmp	r0, #0
 800affe:	d036      	beq.n	800b06e <_svfiprintf_r+0x1d2>
 800b000:	4b21      	ldr	r3, [pc, #132]	@ (800b088 <_svfiprintf_r+0x1ec>)
 800b002:	bb1b      	cbnz	r3, 800b04c <_svfiprintf_r+0x1b0>
 800b004:	9b03      	ldr	r3, [sp, #12]
 800b006:	3307      	adds	r3, #7
 800b008:	f023 0307 	bic.w	r3, r3, #7
 800b00c:	3308      	adds	r3, #8
 800b00e:	9303      	str	r3, [sp, #12]
 800b010:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b012:	4433      	add	r3, r6
 800b014:	9309      	str	r3, [sp, #36]	@ 0x24
 800b016:	e76a      	b.n	800aeee <_svfiprintf_r+0x52>
 800b018:	fb0c 3202 	mla	r2, ip, r2, r3
 800b01c:	460c      	mov	r4, r1
 800b01e:	2001      	movs	r0, #1
 800b020:	e7a8      	b.n	800af74 <_svfiprintf_r+0xd8>
 800b022:	2300      	movs	r3, #0
 800b024:	3401      	adds	r4, #1
 800b026:	9305      	str	r3, [sp, #20]
 800b028:	4619      	mov	r1, r3
 800b02a:	f04f 0c0a 	mov.w	ip, #10
 800b02e:	4620      	mov	r0, r4
 800b030:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b034:	3a30      	subs	r2, #48	@ 0x30
 800b036:	2a09      	cmp	r2, #9
 800b038:	d903      	bls.n	800b042 <_svfiprintf_r+0x1a6>
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d0c6      	beq.n	800afcc <_svfiprintf_r+0x130>
 800b03e:	9105      	str	r1, [sp, #20]
 800b040:	e7c4      	b.n	800afcc <_svfiprintf_r+0x130>
 800b042:	fb0c 2101 	mla	r1, ip, r1, r2
 800b046:	4604      	mov	r4, r0
 800b048:	2301      	movs	r3, #1
 800b04a:	e7f0      	b.n	800b02e <_svfiprintf_r+0x192>
 800b04c:	ab03      	add	r3, sp, #12
 800b04e:	9300      	str	r3, [sp, #0]
 800b050:	462a      	mov	r2, r5
 800b052:	4b0e      	ldr	r3, [pc, #56]	@ (800b08c <_svfiprintf_r+0x1f0>)
 800b054:	a904      	add	r1, sp, #16
 800b056:	4638      	mov	r0, r7
 800b058:	f7fd fe82 	bl	8008d60 <_printf_float>
 800b05c:	1c42      	adds	r2, r0, #1
 800b05e:	4606      	mov	r6, r0
 800b060:	d1d6      	bne.n	800b010 <_svfiprintf_r+0x174>
 800b062:	89ab      	ldrh	r3, [r5, #12]
 800b064:	065b      	lsls	r3, r3, #25
 800b066:	f53f af2d 	bmi.w	800aec4 <_svfiprintf_r+0x28>
 800b06a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b06c:	e72c      	b.n	800aec8 <_svfiprintf_r+0x2c>
 800b06e:	ab03      	add	r3, sp, #12
 800b070:	9300      	str	r3, [sp, #0]
 800b072:	462a      	mov	r2, r5
 800b074:	4b05      	ldr	r3, [pc, #20]	@ (800b08c <_svfiprintf_r+0x1f0>)
 800b076:	a904      	add	r1, sp, #16
 800b078:	4638      	mov	r0, r7
 800b07a:	f7fe f909 	bl	8009290 <_printf_i>
 800b07e:	e7ed      	b.n	800b05c <_svfiprintf_r+0x1c0>
 800b080:	0800c340 	.word	0x0800c340
 800b084:	0800c34a 	.word	0x0800c34a
 800b088:	08008d61 	.word	0x08008d61
 800b08c:	0800ade5 	.word	0x0800ade5
 800b090:	0800c346 	.word	0x0800c346

0800b094 <__sflush_r>:
 800b094:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b09c:	0716      	lsls	r6, r2, #28
 800b09e:	4605      	mov	r5, r0
 800b0a0:	460c      	mov	r4, r1
 800b0a2:	d454      	bmi.n	800b14e <__sflush_r+0xba>
 800b0a4:	684b      	ldr	r3, [r1, #4]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	dc02      	bgt.n	800b0b0 <__sflush_r+0x1c>
 800b0aa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	dd48      	ble.n	800b142 <__sflush_r+0xae>
 800b0b0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b0b2:	2e00      	cmp	r6, #0
 800b0b4:	d045      	beq.n	800b142 <__sflush_r+0xae>
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b0bc:	682f      	ldr	r7, [r5, #0]
 800b0be:	6a21      	ldr	r1, [r4, #32]
 800b0c0:	602b      	str	r3, [r5, #0]
 800b0c2:	d030      	beq.n	800b126 <__sflush_r+0x92>
 800b0c4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b0c6:	89a3      	ldrh	r3, [r4, #12]
 800b0c8:	0759      	lsls	r1, r3, #29
 800b0ca:	d505      	bpl.n	800b0d8 <__sflush_r+0x44>
 800b0cc:	6863      	ldr	r3, [r4, #4]
 800b0ce:	1ad2      	subs	r2, r2, r3
 800b0d0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b0d2:	b10b      	cbz	r3, 800b0d8 <__sflush_r+0x44>
 800b0d4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b0d6:	1ad2      	subs	r2, r2, r3
 800b0d8:	2300      	movs	r3, #0
 800b0da:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b0dc:	6a21      	ldr	r1, [r4, #32]
 800b0de:	4628      	mov	r0, r5
 800b0e0:	47b0      	blx	r6
 800b0e2:	1c43      	adds	r3, r0, #1
 800b0e4:	89a3      	ldrh	r3, [r4, #12]
 800b0e6:	d106      	bne.n	800b0f6 <__sflush_r+0x62>
 800b0e8:	6829      	ldr	r1, [r5, #0]
 800b0ea:	291d      	cmp	r1, #29
 800b0ec:	d82b      	bhi.n	800b146 <__sflush_r+0xb2>
 800b0ee:	4a2a      	ldr	r2, [pc, #168]	@ (800b198 <__sflush_r+0x104>)
 800b0f0:	410a      	asrs	r2, r1
 800b0f2:	07d6      	lsls	r6, r2, #31
 800b0f4:	d427      	bmi.n	800b146 <__sflush_r+0xb2>
 800b0f6:	2200      	movs	r2, #0
 800b0f8:	6062      	str	r2, [r4, #4]
 800b0fa:	04d9      	lsls	r1, r3, #19
 800b0fc:	6922      	ldr	r2, [r4, #16]
 800b0fe:	6022      	str	r2, [r4, #0]
 800b100:	d504      	bpl.n	800b10c <__sflush_r+0x78>
 800b102:	1c42      	adds	r2, r0, #1
 800b104:	d101      	bne.n	800b10a <__sflush_r+0x76>
 800b106:	682b      	ldr	r3, [r5, #0]
 800b108:	b903      	cbnz	r3, 800b10c <__sflush_r+0x78>
 800b10a:	6560      	str	r0, [r4, #84]	@ 0x54
 800b10c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b10e:	602f      	str	r7, [r5, #0]
 800b110:	b1b9      	cbz	r1, 800b142 <__sflush_r+0xae>
 800b112:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b116:	4299      	cmp	r1, r3
 800b118:	d002      	beq.n	800b120 <__sflush_r+0x8c>
 800b11a:	4628      	mov	r0, r5
 800b11c:	f7ff f9e0 	bl	800a4e0 <_free_r>
 800b120:	2300      	movs	r3, #0
 800b122:	6363      	str	r3, [r4, #52]	@ 0x34
 800b124:	e00d      	b.n	800b142 <__sflush_r+0xae>
 800b126:	2301      	movs	r3, #1
 800b128:	4628      	mov	r0, r5
 800b12a:	47b0      	blx	r6
 800b12c:	4602      	mov	r2, r0
 800b12e:	1c50      	adds	r0, r2, #1
 800b130:	d1c9      	bne.n	800b0c6 <__sflush_r+0x32>
 800b132:	682b      	ldr	r3, [r5, #0]
 800b134:	2b00      	cmp	r3, #0
 800b136:	d0c6      	beq.n	800b0c6 <__sflush_r+0x32>
 800b138:	2b1d      	cmp	r3, #29
 800b13a:	d001      	beq.n	800b140 <__sflush_r+0xac>
 800b13c:	2b16      	cmp	r3, #22
 800b13e:	d11e      	bne.n	800b17e <__sflush_r+0xea>
 800b140:	602f      	str	r7, [r5, #0]
 800b142:	2000      	movs	r0, #0
 800b144:	e022      	b.n	800b18c <__sflush_r+0xf8>
 800b146:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b14a:	b21b      	sxth	r3, r3
 800b14c:	e01b      	b.n	800b186 <__sflush_r+0xf2>
 800b14e:	690f      	ldr	r7, [r1, #16]
 800b150:	2f00      	cmp	r7, #0
 800b152:	d0f6      	beq.n	800b142 <__sflush_r+0xae>
 800b154:	0793      	lsls	r3, r2, #30
 800b156:	680e      	ldr	r6, [r1, #0]
 800b158:	bf08      	it	eq
 800b15a:	694b      	ldreq	r3, [r1, #20]
 800b15c:	600f      	str	r7, [r1, #0]
 800b15e:	bf18      	it	ne
 800b160:	2300      	movne	r3, #0
 800b162:	eba6 0807 	sub.w	r8, r6, r7
 800b166:	608b      	str	r3, [r1, #8]
 800b168:	f1b8 0f00 	cmp.w	r8, #0
 800b16c:	dde9      	ble.n	800b142 <__sflush_r+0xae>
 800b16e:	6a21      	ldr	r1, [r4, #32]
 800b170:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b172:	4643      	mov	r3, r8
 800b174:	463a      	mov	r2, r7
 800b176:	4628      	mov	r0, r5
 800b178:	47b0      	blx	r6
 800b17a:	2800      	cmp	r0, #0
 800b17c:	dc08      	bgt.n	800b190 <__sflush_r+0xfc>
 800b17e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b182:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b186:	81a3      	strh	r3, [r4, #12]
 800b188:	f04f 30ff 	mov.w	r0, #4294967295
 800b18c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b190:	4407      	add	r7, r0
 800b192:	eba8 0800 	sub.w	r8, r8, r0
 800b196:	e7e7      	b.n	800b168 <__sflush_r+0xd4>
 800b198:	dfbffffe 	.word	0xdfbffffe

0800b19c <_fflush_r>:
 800b19c:	b538      	push	{r3, r4, r5, lr}
 800b19e:	690b      	ldr	r3, [r1, #16]
 800b1a0:	4605      	mov	r5, r0
 800b1a2:	460c      	mov	r4, r1
 800b1a4:	b913      	cbnz	r3, 800b1ac <_fflush_r+0x10>
 800b1a6:	2500      	movs	r5, #0
 800b1a8:	4628      	mov	r0, r5
 800b1aa:	bd38      	pop	{r3, r4, r5, pc}
 800b1ac:	b118      	cbz	r0, 800b1b6 <_fflush_r+0x1a>
 800b1ae:	6a03      	ldr	r3, [r0, #32]
 800b1b0:	b90b      	cbnz	r3, 800b1b6 <_fflush_r+0x1a>
 800b1b2:	f7fe fa19 	bl	80095e8 <__sinit>
 800b1b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d0f3      	beq.n	800b1a6 <_fflush_r+0xa>
 800b1be:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b1c0:	07d0      	lsls	r0, r2, #31
 800b1c2:	d404      	bmi.n	800b1ce <_fflush_r+0x32>
 800b1c4:	0599      	lsls	r1, r3, #22
 800b1c6:	d402      	bmi.n	800b1ce <_fflush_r+0x32>
 800b1c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b1ca:	f7fe fb38 	bl	800983e <__retarget_lock_acquire_recursive>
 800b1ce:	4628      	mov	r0, r5
 800b1d0:	4621      	mov	r1, r4
 800b1d2:	f7ff ff5f 	bl	800b094 <__sflush_r>
 800b1d6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b1d8:	07da      	lsls	r2, r3, #31
 800b1da:	4605      	mov	r5, r0
 800b1dc:	d4e4      	bmi.n	800b1a8 <_fflush_r+0xc>
 800b1de:	89a3      	ldrh	r3, [r4, #12]
 800b1e0:	059b      	lsls	r3, r3, #22
 800b1e2:	d4e1      	bmi.n	800b1a8 <_fflush_r+0xc>
 800b1e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b1e6:	f7fe fb2b 	bl	8009840 <__retarget_lock_release_recursive>
 800b1ea:	e7dd      	b.n	800b1a8 <_fflush_r+0xc>

0800b1ec <memmove>:
 800b1ec:	4288      	cmp	r0, r1
 800b1ee:	b510      	push	{r4, lr}
 800b1f0:	eb01 0402 	add.w	r4, r1, r2
 800b1f4:	d902      	bls.n	800b1fc <memmove+0x10>
 800b1f6:	4284      	cmp	r4, r0
 800b1f8:	4623      	mov	r3, r4
 800b1fa:	d807      	bhi.n	800b20c <memmove+0x20>
 800b1fc:	1e43      	subs	r3, r0, #1
 800b1fe:	42a1      	cmp	r1, r4
 800b200:	d008      	beq.n	800b214 <memmove+0x28>
 800b202:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b206:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b20a:	e7f8      	b.n	800b1fe <memmove+0x12>
 800b20c:	4402      	add	r2, r0
 800b20e:	4601      	mov	r1, r0
 800b210:	428a      	cmp	r2, r1
 800b212:	d100      	bne.n	800b216 <memmove+0x2a>
 800b214:	bd10      	pop	{r4, pc}
 800b216:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b21a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b21e:	e7f7      	b.n	800b210 <memmove+0x24>

0800b220 <_sbrk_r>:
 800b220:	b538      	push	{r3, r4, r5, lr}
 800b222:	4d06      	ldr	r5, [pc, #24]	@ (800b23c <_sbrk_r+0x1c>)
 800b224:	2300      	movs	r3, #0
 800b226:	4604      	mov	r4, r0
 800b228:	4608      	mov	r0, r1
 800b22a:	602b      	str	r3, [r5, #0]
 800b22c:	f7f6 fa44 	bl	80016b8 <_sbrk>
 800b230:	1c43      	adds	r3, r0, #1
 800b232:	d102      	bne.n	800b23a <_sbrk_r+0x1a>
 800b234:	682b      	ldr	r3, [r5, #0]
 800b236:	b103      	cbz	r3, 800b23a <_sbrk_r+0x1a>
 800b238:	6023      	str	r3, [r4, #0]
 800b23a:	bd38      	pop	{r3, r4, r5, pc}
 800b23c:	20002090 	.word	0x20002090

0800b240 <memcpy>:
 800b240:	440a      	add	r2, r1
 800b242:	4291      	cmp	r1, r2
 800b244:	f100 33ff 	add.w	r3, r0, #4294967295
 800b248:	d100      	bne.n	800b24c <memcpy+0xc>
 800b24a:	4770      	bx	lr
 800b24c:	b510      	push	{r4, lr}
 800b24e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b252:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b256:	4291      	cmp	r1, r2
 800b258:	d1f9      	bne.n	800b24e <memcpy+0xe>
 800b25a:	bd10      	pop	{r4, pc}

0800b25c <__assert_func>:
 800b25c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b25e:	4614      	mov	r4, r2
 800b260:	461a      	mov	r2, r3
 800b262:	4b09      	ldr	r3, [pc, #36]	@ (800b288 <__assert_func+0x2c>)
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	4605      	mov	r5, r0
 800b268:	68d8      	ldr	r0, [r3, #12]
 800b26a:	b954      	cbnz	r4, 800b282 <__assert_func+0x26>
 800b26c:	4b07      	ldr	r3, [pc, #28]	@ (800b28c <__assert_func+0x30>)
 800b26e:	461c      	mov	r4, r3
 800b270:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b274:	9100      	str	r1, [sp, #0]
 800b276:	462b      	mov	r3, r5
 800b278:	4905      	ldr	r1, [pc, #20]	@ (800b290 <__assert_func+0x34>)
 800b27a:	f000 f86f 	bl	800b35c <fiprintf>
 800b27e:	f000 f87f 	bl	800b380 <abort>
 800b282:	4b04      	ldr	r3, [pc, #16]	@ (800b294 <__assert_func+0x38>)
 800b284:	e7f4      	b.n	800b270 <__assert_func+0x14>
 800b286:	bf00      	nop
 800b288:	2000010c 	.word	0x2000010c
 800b28c:	0800c396 	.word	0x0800c396
 800b290:	0800c368 	.word	0x0800c368
 800b294:	0800c35b 	.word	0x0800c35b

0800b298 <_calloc_r>:
 800b298:	b570      	push	{r4, r5, r6, lr}
 800b29a:	fba1 5402 	umull	r5, r4, r1, r2
 800b29e:	b93c      	cbnz	r4, 800b2b0 <_calloc_r+0x18>
 800b2a0:	4629      	mov	r1, r5
 800b2a2:	f7ff f991 	bl	800a5c8 <_malloc_r>
 800b2a6:	4606      	mov	r6, r0
 800b2a8:	b928      	cbnz	r0, 800b2b6 <_calloc_r+0x1e>
 800b2aa:	2600      	movs	r6, #0
 800b2ac:	4630      	mov	r0, r6
 800b2ae:	bd70      	pop	{r4, r5, r6, pc}
 800b2b0:	220c      	movs	r2, #12
 800b2b2:	6002      	str	r2, [r0, #0]
 800b2b4:	e7f9      	b.n	800b2aa <_calloc_r+0x12>
 800b2b6:	462a      	mov	r2, r5
 800b2b8:	4621      	mov	r1, r4
 800b2ba:	f7fe fa42 	bl	8009742 <memset>
 800b2be:	e7f5      	b.n	800b2ac <_calloc_r+0x14>

0800b2c0 <__ascii_mbtowc>:
 800b2c0:	b082      	sub	sp, #8
 800b2c2:	b901      	cbnz	r1, 800b2c6 <__ascii_mbtowc+0x6>
 800b2c4:	a901      	add	r1, sp, #4
 800b2c6:	b142      	cbz	r2, 800b2da <__ascii_mbtowc+0x1a>
 800b2c8:	b14b      	cbz	r3, 800b2de <__ascii_mbtowc+0x1e>
 800b2ca:	7813      	ldrb	r3, [r2, #0]
 800b2cc:	600b      	str	r3, [r1, #0]
 800b2ce:	7812      	ldrb	r2, [r2, #0]
 800b2d0:	1e10      	subs	r0, r2, #0
 800b2d2:	bf18      	it	ne
 800b2d4:	2001      	movne	r0, #1
 800b2d6:	b002      	add	sp, #8
 800b2d8:	4770      	bx	lr
 800b2da:	4610      	mov	r0, r2
 800b2dc:	e7fb      	b.n	800b2d6 <__ascii_mbtowc+0x16>
 800b2de:	f06f 0001 	mvn.w	r0, #1
 800b2e2:	e7f8      	b.n	800b2d6 <__ascii_mbtowc+0x16>

0800b2e4 <_realloc_r>:
 800b2e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2e8:	4680      	mov	r8, r0
 800b2ea:	4615      	mov	r5, r2
 800b2ec:	460c      	mov	r4, r1
 800b2ee:	b921      	cbnz	r1, 800b2fa <_realloc_r+0x16>
 800b2f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b2f4:	4611      	mov	r1, r2
 800b2f6:	f7ff b967 	b.w	800a5c8 <_malloc_r>
 800b2fa:	b92a      	cbnz	r2, 800b308 <_realloc_r+0x24>
 800b2fc:	f7ff f8f0 	bl	800a4e0 <_free_r>
 800b300:	2400      	movs	r4, #0
 800b302:	4620      	mov	r0, r4
 800b304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b308:	f000 f841 	bl	800b38e <_malloc_usable_size_r>
 800b30c:	4285      	cmp	r5, r0
 800b30e:	4606      	mov	r6, r0
 800b310:	d802      	bhi.n	800b318 <_realloc_r+0x34>
 800b312:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b316:	d8f4      	bhi.n	800b302 <_realloc_r+0x1e>
 800b318:	4629      	mov	r1, r5
 800b31a:	4640      	mov	r0, r8
 800b31c:	f7ff f954 	bl	800a5c8 <_malloc_r>
 800b320:	4607      	mov	r7, r0
 800b322:	2800      	cmp	r0, #0
 800b324:	d0ec      	beq.n	800b300 <_realloc_r+0x1c>
 800b326:	42b5      	cmp	r5, r6
 800b328:	462a      	mov	r2, r5
 800b32a:	4621      	mov	r1, r4
 800b32c:	bf28      	it	cs
 800b32e:	4632      	movcs	r2, r6
 800b330:	f7ff ff86 	bl	800b240 <memcpy>
 800b334:	4621      	mov	r1, r4
 800b336:	4640      	mov	r0, r8
 800b338:	f7ff f8d2 	bl	800a4e0 <_free_r>
 800b33c:	463c      	mov	r4, r7
 800b33e:	e7e0      	b.n	800b302 <_realloc_r+0x1e>

0800b340 <__ascii_wctomb>:
 800b340:	4603      	mov	r3, r0
 800b342:	4608      	mov	r0, r1
 800b344:	b141      	cbz	r1, 800b358 <__ascii_wctomb+0x18>
 800b346:	2aff      	cmp	r2, #255	@ 0xff
 800b348:	d904      	bls.n	800b354 <__ascii_wctomb+0x14>
 800b34a:	228a      	movs	r2, #138	@ 0x8a
 800b34c:	601a      	str	r2, [r3, #0]
 800b34e:	f04f 30ff 	mov.w	r0, #4294967295
 800b352:	4770      	bx	lr
 800b354:	700a      	strb	r2, [r1, #0]
 800b356:	2001      	movs	r0, #1
 800b358:	4770      	bx	lr
	...

0800b35c <fiprintf>:
 800b35c:	b40e      	push	{r1, r2, r3}
 800b35e:	b503      	push	{r0, r1, lr}
 800b360:	4601      	mov	r1, r0
 800b362:	ab03      	add	r3, sp, #12
 800b364:	4805      	ldr	r0, [pc, #20]	@ (800b37c <fiprintf+0x20>)
 800b366:	f853 2b04 	ldr.w	r2, [r3], #4
 800b36a:	6800      	ldr	r0, [r0, #0]
 800b36c:	9301      	str	r3, [sp, #4]
 800b36e:	f000 f83f 	bl	800b3f0 <_vfiprintf_r>
 800b372:	b002      	add	sp, #8
 800b374:	f85d eb04 	ldr.w	lr, [sp], #4
 800b378:	b003      	add	sp, #12
 800b37a:	4770      	bx	lr
 800b37c:	2000010c 	.word	0x2000010c

0800b380 <abort>:
 800b380:	b508      	push	{r3, lr}
 800b382:	2006      	movs	r0, #6
 800b384:	f000 fa08 	bl	800b798 <raise>
 800b388:	2001      	movs	r0, #1
 800b38a:	f7f6 f91d 	bl	80015c8 <_exit>

0800b38e <_malloc_usable_size_r>:
 800b38e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b392:	1f18      	subs	r0, r3, #4
 800b394:	2b00      	cmp	r3, #0
 800b396:	bfbc      	itt	lt
 800b398:	580b      	ldrlt	r3, [r1, r0]
 800b39a:	18c0      	addlt	r0, r0, r3
 800b39c:	4770      	bx	lr

0800b39e <__sfputc_r>:
 800b39e:	6893      	ldr	r3, [r2, #8]
 800b3a0:	3b01      	subs	r3, #1
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	b410      	push	{r4}
 800b3a6:	6093      	str	r3, [r2, #8]
 800b3a8:	da08      	bge.n	800b3bc <__sfputc_r+0x1e>
 800b3aa:	6994      	ldr	r4, [r2, #24]
 800b3ac:	42a3      	cmp	r3, r4
 800b3ae:	db01      	blt.n	800b3b4 <__sfputc_r+0x16>
 800b3b0:	290a      	cmp	r1, #10
 800b3b2:	d103      	bne.n	800b3bc <__sfputc_r+0x1e>
 800b3b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b3b8:	f000 b932 	b.w	800b620 <__swbuf_r>
 800b3bc:	6813      	ldr	r3, [r2, #0]
 800b3be:	1c58      	adds	r0, r3, #1
 800b3c0:	6010      	str	r0, [r2, #0]
 800b3c2:	7019      	strb	r1, [r3, #0]
 800b3c4:	4608      	mov	r0, r1
 800b3c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b3ca:	4770      	bx	lr

0800b3cc <__sfputs_r>:
 800b3cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3ce:	4606      	mov	r6, r0
 800b3d0:	460f      	mov	r7, r1
 800b3d2:	4614      	mov	r4, r2
 800b3d4:	18d5      	adds	r5, r2, r3
 800b3d6:	42ac      	cmp	r4, r5
 800b3d8:	d101      	bne.n	800b3de <__sfputs_r+0x12>
 800b3da:	2000      	movs	r0, #0
 800b3dc:	e007      	b.n	800b3ee <__sfputs_r+0x22>
 800b3de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3e2:	463a      	mov	r2, r7
 800b3e4:	4630      	mov	r0, r6
 800b3e6:	f7ff ffda 	bl	800b39e <__sfputc_r>
 800b3ea:	1c43      	adds	r3, r0, #1
 800b3ec:	d1f3      	bne.n	800b3d6 <__sfputs_r+0xa>
 800b3ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b3f0 <_vfiprintf_r>:
 800b3f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3f4:	460d      	mov	r5, r1
 800b3f6:	b09d      	sub	sp, #116	@ 0x74
 800b3f8:	4614      	mov	r4, r2
 800b3fa:	4698      	mov	r8, r3
 800b3fc:	4606      	mov	r6, r0
 800b3fe:	b118      	cbz	r0, 800b408 <_vfiprintf_r+0x18>
 800b400:	6a03      	ldr	r3, [r0, #32]
 800b402:	b90b      	cbnz	r3, 800b408 <_vfiprintf_r+0x18>
 800b404:	f7fe f8f0 	bl	80095e8 <__sinit>
 800b408:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b40a:	07d9      	lsls	r1, r3, #31
 800b40c:	d405      	bmi.n	800b41a <_vfiprintf_r+0x2a>
 800b40e:	89ab      	ldrh	r3, [r5, #12]
 800b410:	059a      	lsls	r2, r3, #22
 800b412:	d402      	bmi.n	800b41a <_vfiprintf_r+0x2a>
 800b414:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b416:	f7fe fa12 	bl	800983e <__retarget_lock_acquire_recursive>
 800b41a:	89ab      	ldrh	r3, [r5, #12]
 800b41c:	071b      	lsls	r3, r3, #28
 800b41e:	d501      	bpl.n	800b424 <_vfiprintf_r+0x34>
 800b420:	692b      	ldr	r3, [r5, #16]
 800b422:	b99b      	cbnz	r3, 800b44c <_vfiprintf_r+0x5c>
 800b424:	4629      	mov	r1, r5
 800b426:	4630      	mov	r0, r6
 800b428:	f000 f938 	bl	800b69c <__swsetup_r>
 800b42c:	b170      	cbz	r0, 800b44c <_vfiprintf_r+0x5c>
 800b42e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b430:	07dc      	lsls	r4, r3, #31
 800b432:	d504      	bpl.n	800b43e <_vfiprintf_r+0x4e>
 800b434:	f04f 30ff 	mov.w	r0, #4294967295
 800b438:	b01d      	add	sp, #116	@ 0x74
 800b43a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b43e:	89ab      	ldrh	r3, [r5, #12]
 800b440:	0598      	lsls	r0, r3, #22
 800b442:	d4f7      	bmi.n	800b434 <_vfiprintf_r+0x44>
 800b444:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b446:	f7fe f9fb 	bl	8009840 <__retarget_lock_release_recursive>
 800b44a:	e7f3      	b.n	800b434 <_vfiprintf_r+0x44>
 800b44c:	2300      	movs	r3, #0
 800b44e:	9309      	str	r3, [sp, #36]	@ 0x24
 800b450:	2320      	movs	r3, #32
 800b452:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b456:	f8cd 800c 	str.w	r8, [sp, #12]
 800b45a:	2330      	movs	r3, #48	@ 0x30
 800b45c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b60c <_vfiprintf_r+0x21c>
 800b460:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b464:	f04f 0901 	mov.w	r9, #1
 800b468:	4623      	mov	r3, r4
 800b46a:	469a      	mov	sl, r3
 800b46c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b470:	b10a      	cbz	r2, 800b476 <_vfiprintf_r+0x86>
 800b472:	2a25      	cmp	r2, #37	@ 0x25
 800b474:	d1f9      	bne.n	800b46a <_vfiprintf_r+0x7a>
 800b476:	ebba 0b04 	subs.w	fp, sl, r4
 800b47a:	d00b      	beq.n	800b494 <_vfiprintf_r+0xa4>
 800b47c:	465b      	mov	r3, fp
 800b47e:	4622      	mov	r2, r4
 800b480:	4629      	mov	r1, r5
 800b482:	4630      	mov	r0, r6
 800b484:	f7ff ffa2 	bl	800b3cc <__sfputs_r>
 800b488:	3001      	adds	r0, #1
 800b48a:	f000 80a7 	beq.w	800b5dc <_vfiprintf_r+0x1ec>
 800b48e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b490:	445a      	add	r2, fp
 800b492:	9209      	str	r2, [sp, #36]	@ 0x24
 800b494:	f89a 3000 	ldrb.w	r3, [sl]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	f000 809f 	beq.w	800b5dc <_vfiprintf_r+0x1ec>
 800b49e:	2300      	movs	r3, #0
 800b4a0:	f04f 32ff 	mov.w	r2, #4294967295
 800b4a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b4a8:	f10a 0a01 	add.w	sl, sl, #1
 800b4ac:	9304      	str	r3, [sp, #16]
 800b4ae:	9307      	str	r3, [sp, #28]
 800b4b0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b4b4:	931a      	str	r3, [sp, #104]	@ 0x68
 800b4b6:	4654      	mov	r4, sl
 800b4b8:	2205      	movs	r2, #5
 800b4ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4be:	4853      	ldr	r0, [pc, #332]	@ (800b60c <_vfiprintf_r+0x21c>)
 800b4c0:	f7f4 fe8e 	bl	80001e0 <memchr>
 800b4c4:	9a04      	ldr	r2, [sp, #16]
 800b4c6:	b9d8      	cbnz	r0, 800b500 <_vfiprintf_r+0x110>
 800b4c8:	06d1      	lsls	r1, r2, #27
 800b4ca:	bf44      	itt	mi
 800b4cc:	2320      	movmi	r3, #32
 800b4ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b4d2:	0713      	lsls	r3, r2, #28
 800b4d4:	bf44      	itt	mi
 800b4d6:	232b      	movmi	r3, #43	@ 0x2b
 800b4d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b4dc:	f89a 3000 	ldrb.w	r3, [sl]
 800b4e0:	2b2a      	cmp	r3, #42	@ 0x2a
 800b4e2:	d015      	beq.n	800b510 <_vfiprintf_r+0x120>
 800b4e4:	9a07      	ldr	r2, [sp, #28]
 800b4e6:	4654      	mov	r4, sl
 800b4e8:	2000      	movs	r0, #0
 800b4ea:	f04f 0c0a 	mov.w	ip, #10
 800b4ee:	4621      	mov	r1, r4
 800b4f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b4f4:	3b30      	subs	r3, #48	@ 0x30
 800b4f6:	2b09      	cmp	r3, #9
 800b4f8:	d94b      	bls.n	800b592 <_vfiprintf_r+0x1a2>
 800b4fa:	b1b0      	cbz	r0, 800b52a <_vfiprintf_r+0x13a>
 800b4fc:	9207      	str	r2, [sp, #28]
 800b4fe:	e014      	b.n	800b52a <_vfiprintf_r+0x13a>
 800b500:	eba0 0308 	sub.w	r3, r0, r8
 800b504:	fa09 f303 	lsl.w	r3, r9, r3
 800b508:	4313      	orrs	r3, r2
 800b50a:	9304      	str	r3, [sp, #16]
 800b50c:	46a2      	mov	sl, r4
 800b50e:	e7d2      	b.n	800b4b6 <_vfiprintf_r+0xc6>
 800b510:	9b03      	ldr	r3, [sp, #12]
 800b512:	1d19      	adds	r1, r3, #4
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	9103      	str	r1, [sp, #12]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	bfbb      	ittet	lt
 800b51c:	425b      	neglt	r3, r3
 800b51e:	f042 0202 	orrlt.w	r2, r2, #2
 800b522:	9307      	strge	r3, [sp, #28]
 800b524:	9307      	strlt	r3, [sp, #28]
 800b526:	bfb8      	it	lt
 800b528:	9204      	strlt	r2, [sp, #16]
 800b52a:	7823      	ldrb	r3, [r4, #0]
 800b52c:	2b2e      	cmp	r3, #46	@ 0x2e
 800b52e:	d10a      	bne.n	800b546 <_vfiprintf_r+0x156>
 800b530:	7863      	ldrb	r3, [r4, #1]
 800b532:	2b2a      	cmp	r3, #42	@ 0x2a
 800b534:	d132      	bne.n	800b59c <_vfiprintf_r+0x1ac>
 800b536:	9b03      	ldr	r3, [sp, #12]
 800b538:	1d1a      	adds	r2, r3, #4
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	9203      	str	r2, [sp, #12]
 800b53e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b542:	3402      	adds	r4, #2
 800b544:	9305      	str	r3, [sp, #20]
 800b546:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b61c <_vfiprintf_r+0x22c>
 800b54a:	7821      	ldrb	r1, [r4, #0]
 800b54c:	2203      	movs	r2, #3
 800b54e:	4650      	mov	r0, sl
 800b550:	f7f4 fe46 	bl	80001e0 <memchr>
 800b554:	b138      	cbz	r0, 800b566 <_vfiprintf_r+0x176>
 800b556:	9b04      	ldr	r3, [sp, #16]
 800b558:	eba0 000a 	sub.w	r0, r0, sl
 800b55c:	2240      	movs	r2, #64	@ 0x40
 800b55e:	4082      	lsls	r2, r0
 800b560:	4313      	orrs	r3, r2
 800b562:	3401      	adds	r4, #1
 800b564:	9304      	str	r3, [sp, #16]
 800b566:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b56a:	4829      	ldr	r0, [pc, #164]	@ (800b610 <_vfiprintf_r+0x220>)
 800b56c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b570:	2206      	movs	r2, #6
 800b572:	f7f4 fe35 	bl	80001e0 <memchr>
 800b576:	2800      	cmp	r0, #0
 800b578:	d03f      	beq.n	800b5fa <_vfiprintf_r+0x20a>
 800b57a:	4b26      	ldr	r3, [pc, #152]	@ (800b614 <_vfiprintf_r+0x224>)
 800b57c:	bb1b      	cbnz	r3, 800b5c6 <_vfiprintf_r+0x1d6>
 800b57e:	9b03      	ldr	r3, [sp, #12]
 800b580:	3307      	adds	r3, #7
 800b582:	f023 0307 	bic.w	r3, r3, #7
 800b586:	3308      	adds	r3, #8
 800b588:	9303      	str	r3, [sp, #12]
 800b58a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b58c:	443b      	add	r3, r7
 800b58e:	9309      	str	r3, [sp, #36]	@ 0x24
 800b590:	e76a      	b.n	800b468 <_vfiprintf_r+0x78>
 800b592:	fb0c 3202 	mla	r2, ip, r2, r3
 800b596:	460c      	mov	r4, r1
 800b598:	2001      	movs	r0, #1
 800b59a:	e7a8      	b.n	800b4ee <_vfiprintf_r+0xfe>
 800b59c:	2300      	movs	r3, #0
 800b59e:	3401      	adds	r4, #1
 800b5a0:	9305      	str	r3, [sp, #20]
 800b5a2:	4619      	mov	r1, r3
 800b5a4:	f04f 0c0a 	mov.w	ip, #10
 800b5a8:	4620      	mov	r0, r4
 800b5aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b5ae:	3a30      	subs	r2, #48	@ 0x30
 800b5b0:	2a09      	cmp	r2, #9
 800b5b2:	d903      	bls.n	800b5bc <_vfiprintf_r+0x1cc>
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d0c6      	beq.n	800b546 <_vfiprintf_r+0x156>
 800b5b8:	9105      	str	r1, [sp, #20]
 800b5ba:	e7c4      	b.n	800b546 <_vfiprintf_r+0x156>
 800b5bc:	fb0c 2101 	mla	r1, ip, r1, r2
 800b5c0:	4604      	mov	r4, r0
 800b5c2:	2301      	movs	r3, #1
 800b5c4:	e7f0      	b.n	800b5a8 <_vfiprintf_r+0x1b8>
 800b5c6:	ab03      	add	r3, sp, #12
 800b5c8:	9300      	str	r3, [sp, #0]
 800b5ca:	462a      	mov	r2, r5
 800b5cc:	4b12      	ldr	r3, [pc, #72]	@ (800b618 <_vfiprintf_r+0x228>)
 800b5ce:	a904      	add	r1, sp, #16
 800b5d0:	4630      	mov	r0, r6
 800b5d2:	f7fd fbc5 	bl	8008d60 <_printf_float>
 800b5d6:	4607      	mov	r7, r0
 800b5d8:	1c78      	adds	r0, r7, #1
 800b5da:	d1d6      	bne.n	800b58a <_vfiprintf_r+0x19a>
 800b5dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b5de:	07d9      	lsls	r1, r3, #31
 800b5e0:	d405      	bmi.n	800b5ee <_vfiprintf_r+0x1fe>
 800b5e2:	89ab      	ldrh	r3, [r5, #12]
 800b5e4:	059a      	lsls	r2, r3, #22
 800b5e6:	d402      	bmi.n	800b5ee <_vfiprintf_r+0x1fe>
 800b5e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b5ea:	f7fe f929 	bl	8009840 <__retarget_lock_release_recursive>
 800b5ee:	89ab      	ldrh	r3, [r5, #12]
 800b5f0:	065b      	lsls	r3, r3, #25
 800b5f2:	f53f af1f 	bmi.w	800b434 <_vfiprintf_r+0x44>
 800b5f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b5f8:	e71e      	b.n	800b438 <_vfiprintf_r+0x48>
 800b5fa:	ab03      	add	r3, sp, #12
 800b5fc:	9300      	str	r3, [sp, #0]
 800b5fe:	462a      	mov	r2, r5
 800b600:	4b05      	ldr	r3, [pc, #20]	@ (800b618 <_vfiprintf_r+0x228>)
 800b602:	a904      	add	r1, sp, #16
 800b604:	4630      	mov	r0, r6
 800b606:	f7fd fe43 	bl	8009290 <_printf_i>
 800b60a:	e7e4      	b.n	800b5d6 <_vfiprintf_r+0x1e6>
 800b60c:	0800c340 	.word	0x0800c340
 800b610:	0800c34a 	.word	0x0800c34a
 800b614:	08008d61 	.word	0x08008d61
 800b618:	0800b3cd 	.word	0x0800b3cd
 800b61c:	0800c346 	.word	0x0800c346

0800b620 <__swbuf_r>:
 800b620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b622:	460e      	mov	r6, r1
 800b624:	4614      	mov	r4, r2
 800b626:	4605      	mov	r5, r0
 800b628:	b118      	cbz	r0, 800b632 <__swbuf_r+0x12>
 800b62a:	6a03      	ldr	r3, [r0, #32]
 800b62c:	b90b      	cbnz	r3, 800b632 <__swbuf_r+0x12>
 800b62e:	f7fd ffdb 	bl	80095e8 <__sinit>
 800b632:	69a3      	ldr	r3, [r4, #24]
 800b634:	60a3      	str	r3, [r4, #8]
 800b636:	89a3      	ldrh	r3, [r4, #12]
 800b638:	071a      	lsls	r2, r3, #28
 800b63a:	d501      	bpl.n	800b640 <__swbuf_r+0x20>
 800b63c:	6923      	ldr	r3, [r4, #16]
 800b63e:	b943      	cbnz	r3, 800b652 <__swbuf_r+0x32>
 800b640:	4621      	mov	r1, r4
 800b642:	4628      	mov	r0, r5
 800b644:	f000 f82a 	bl	800b69c <__swsetup_r>
 800b648:	b118      	cbz	r0, 800b652 <__swbuf_r+0x32>
 800b64a:	f04f 37ff 	mov.w	r7, #4294967295
 800b64e:	4638      	mov	r0, r7
 800b650:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b652:	6823      	ldr	r3, [r4, #0]
 800b654:	6922      	ldr	r2, [r4, #16]
 800b656:	1a98      	subs	r0, r3, r2
 800b658:	6963      	ldr	r3, [r4, #20]
 800b65a:	b2f6      	uxtb	r6, r6
 800b65c:	4283      	cmp	r3, r0
 800b65e:	4637      	mov	r7, r6
 800b660:	dc05      	bgt.n	800b66e <__swbuf_r+0x4e>
 800b662:	4621      	mov	r1, r4
 800b664:	4628      	mov	r0, r5
 800b666:	f7ff fd99 	bl	800b19c <_fflush_r>
 800b66a:	2800      	cmp	r0, #0
 800b66c:	d1ed      	bne.n	800b64a <__swbuf_r+0x2a>
 800b66e:	68a3      	ldr	r3, [r4, #8]
 800b670:	3b01      	subs	r3, #1
 800b672:	60a3      	str	r3, [r4, #8]
 800b674:	6823      	ldr	r3, [r4, #0]
 800b676:	1c5a      	adds	r2, r3, #1
 800b678:	6022      	str	r2, [r4, #0]
 800b67a:	701e      	strb	r6, [r3, #0]
 800b67c:	6962      	ldr	r2, [r4, #20]
 800b67e:	1c43      	adds	r3, r0, #1
 800b680:	429a      	cmp	r2, r3
 800b682:	d004      	beq.n	800b68e <__swbuf_r+0x6e>
 800b684:	89a3      	ldrh	r3, [r4, #12]
 800b686:	07db      	lsls	r3, r3, #31
 800b688:	d5e1      	bpl.n	800b64e <__swbuf_r+0x2e>
 800b68a:	2e0a      	cmp	r6, #10
 800b68c:	d1df      	bne.n	800b64e <__swbuf_r+0x2e>
 800b68e:	4621      	mov	r1, r4
 800b690:	4628      	mov	r0, r5
 800b692:	f7ff fd83 	bl	800b19c <_fflush_r>
 800b696:	2800      	cmp	r0, #0
 800b698:	d0d9      	beq.n	800b64e <__swbuf_r+0x2e>
 800b69a:	e7d6      	b.n	800b64a <__swbuf_r+0x2a>

0800b69c <__swsetup_r>:
 800b69c:	b538      	push	{r3, r4, r5, lr}
 800b69e:	4b29      	ldr	r3, [pc, #164]	@ (800b744 <__swsetup_r+0xa8>)
 800b6a0:	4605      	mov	r5, r0
 800b6a2:	6818      	ldr	r0, [r3, #0]
 800b6a4:	460c      	mov	r4, r1
 800b6a6:	b118      	cbz	r0, 800b6b0 <__swsetup_r+0x14>
 800b6a8:	6a03      	ldr	r3, [r0, #32]
 800b6aa:	b90b      	cbnz	r3, 800b6b0 <__swsetup_r+0x14>
 800b6ac:	f7fd ff9c 	bl	80095e8 <__sinit>
 800b6b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6b4:	0719      	lsls	r1, r3, #28
 800b6b6:	d422      	bmi.n	800b6fe <__swsetup_r+0x62>
 800b6b8:	06da      	lsls	r2, r3, #27
 800b6ba:	d407      	bmi.n	800b6cc <__swsetup_r+0x30>
 800b6bc:	2209      	movs	r2, #9
 800b6be:	602a      	str	r2, [r5, #0]
 800b6c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b6c4:	81a3      	strh	r3, [r4, #12]
 800b6c6:	f04f 30ff 	mov.w	r0, #4294967295
 800b6ca:	e033      	b.n	800b734 <__swsetup_r+0x98>
 800b6cc:	0758      	lsls	r0, r3, #29
 800b6ce:	d512      	bpl.n	800b6f6 <__swsetup_r+0x5a>
 800b6d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b6d2:	b141      	cbz	r1, 800b6e6 <__swsetup_r+0x4a>
 800b6d4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b6d8:	4299      	cmp	r1, r3
 800b6da:	d002      	beq.n	800b6e2 <__swsetup_r+0x46>
 800b6dc:	4628      	mov	r0, r5
 800b6de:	f7fe feff 	bl	800a4e0 <_free_r>
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	6363      	str	r3, [r4, #52]	@ 0x34
 800b6e6:	89a3      	ldrh	r3, [r4, #12]
 800b6e8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b6ec:	81a3      	strh	r3, [r4, #12]
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	6063      	str	r3, [r4, #4]
 800b6f2:	6923      	ldr	r3, [r4, #16]
 800b6f4:	6023      	str	r3, [r4, #0]
 800b6f6:	89a3      	ldrh	r3, [r4, #12]
 800b6f8:	f043 0308 	orr.w	r3, r3, #8
 800b6fc:	81a3      	strh	r3, [r4, #12]
 800b6fe:	6923      	ldr	r3, [r4, #16]
 800b700:	b94b      	cbnz	r3, 800b716 <__swsetup_r+0x7a>
 800b702:	89a3      	ldrh	r3, [r4, #12]
 800b704:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b708:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b70c:	d003      	beq.n	800b716 <__swsetup_r+0x7a>
 800b70e:	4621      	mov	r1, r4
 800b710:	4628      	mov	r0, r5
 800b712:	f000 f883 	bl	800b81c <__smakebuf_r>
 800b716:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b71a:	f013 0201 	ands.w	r2, r3, #1
 800b71e:	d00a      	beq.n	800b736 <__swsetup_r+0x9a>
 800b720:	2200      	movs	r2, #0
 800b722:	60a2      	str	r2, [r4, #8]
 800b724:	6962      	ldr	r2, [r4, #20]
 800b726:	4252      	negs	r2, r2
 800b728:	61a2      	str	r2, [r4, #24]
 800b72a:	6922      	ldr	r2, [r4, #16]
 800b72c:	b942      	cbnz	r2, 800b740 <__swsetup_r+0xa4>
 800b72e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b732:	d1c5      	bne.n	800b6c0 <__swsetup_r+0x24>
 800b734:	bd38      	pop	{r3, r4, r5, pc}
 800b736:	0799      	lsls	r1, r3, #30
 800b738:	bf58      	it	pl
 800b73a:	6962      	ldrpl	r2, [r4, #20]
 800b73c:	60a2      	str	r2, [r4, #8]
 800b73e:	e7f4      	b.n	800b72a <__swsetup_r+0x8e>
 800b740:	2000      	movs	r0, #0
 800b742:	e7f7      	b.n	800b734 <__swsetup_r+0x98>
 800b744:	2000010c 	.word	0x2000010c

0800b748 <_raise_r>:
 800b748:	291f      	cmp	r1, #31
 800b74a:	b538      	push	{r3, r4, r5, lr}
 800b74c:	4605      	mov	r5, r0
 800b74e:	460c      	mov	r4, r1
 800b750:	d904      	bls.n	800b75c <_raise_r+0x14>
 800b752:	2316      	movs	r3, #22
 800b754:	6003      	str	r3, [r0, #0]
 800b756:	f04f 30ff 	mov.w	r0, #4294967295
 800b75a:	bd38      	pop	{r3, r4, r5, pc}
 800b75c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b75e:	b112      	cbz	r2, 800b766 <_raise_r+0x1e>
 800b760:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b764:	b94b      	cbnz	r3, 800b77a <_raise_r+0x32>
 800b766:	4628      	mov	r0, r5
 800b768:	f000 f830 	bl	800b7cc <_getpid_r>
 800b76c:	4622      	mov	r2, r4
 800b76e:	4601      	mov	r1, r0
 800b770:	4628      	mov	r0, r5
 800b772:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b776:	f000 b817 	b.w	800b7a8 <_kill_r>
 800b77a:	2b01      	cmp	r3, #1
 800b77c:	d00a      	beq.n	800b794 <_raise_r+0x4c>
 800b77e:	1c59      	adds	r1, r3, #1
 800b780:	d103      	bne.n	800b78a <_raise_r+0x42>
 800b782:	2316      	movs	r3, #22
 800b784:	6003      	str	r3, [r0, #0]
 800b786:	2001      	movs	r0, #1
 800b788:	e7e7      	b.n	800b75a <_raise_r+0x12>
 800b78a:	2100      	movs	r1, #0
 800b78c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b790:	4620      	mov	r0, r4
 800b792:	4798      	blx	r3
 800b794:	2000      	movs	r0, #0
 800b796:	e7e0      	b.n	800b75a <_raise_r+0x12>

0800b798 <raise>:
 800b798:	4b02      	ldr	r3, [pc, #8]	@ (800b7a4 <raise+0xc>)
 800b79a:	4601      	mov	r1, r0
 800b79c:	6818      	ldr	r0, [r3, #0]
 800b79e:	f7ff bfd3 	b.w	800b748 <_raise_r>
 800b7a2:	bf00      	nop
 800b7a4:	2000010c 	.word	0x2000010c

0800b7a8 <_kill_r>:
 800b7a8:	b538      	push	{r3, r4, r5, lr}
 800b7aa:	4d07      	ldr	r5, [pc, #28]	@ (800b7c8 <_kill_r+0x20>)
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	4604      	mov	r4, r0
 800b7b0:	4608      	mov	r0, r1
 800b7b2:	4611      	mov	r1, r2
 800b7b4:	602b      	str	r3, [r5, #0]
 800b7b6:	f7f5 fef7 	bl	80015a8 <_kill>
 800b7ba:	1c43      	adds	r3, r0, #1
 800b7bc:	d102      	bne.n	800b7c4 <_kill_r+0x1c>
 800b7be:	682b      	ldr	r3, [r5, #0]
 800b7c0:	b103      	cbz	r3, 800b7c4 <_kill_r+0x1c>
 800b7c2:	6023      	str	r3, [r4, #0]
 800b7c4:	bd38      	pop	{r3, r4, r5, pc}
 800b7c6:	bf00      	nop
 800b7c8:	20002090 	.word	0x20002090

0800b7cc <_getpid_r>:
 800b7cc:	f7f5 bee4 	b.w	8001598 <_getpid>

0800b7d0 <__swhatbuf_r>:
 800b7d0:	b570      	push	{r4, r5, r6, lr}
 800b7d2:	460c      	mov	r4, r1
 800b7d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7d8:	2900      	cmp	r1, #0
 800b7da:	b096      	sub	sp, #88	@ 0x58
 800b7dc:	4615      	mov	r5, r2
 800b7de:	461e      	mov	r6, r3
 800b7e0:	da0d      	bge.n	800b7fe <__swhatbuf_r+0x2e>
 800b7e2:	89a3      	ldrh	r3, [r4, #12]
 800b7e4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b7e8:	f04f 0100 	mov.w	r1, #0
 800b7ec:	bf14      	ite	ne
 800b7ee:	2340      	movne	r3, #64	@ 0x40
 800b7f0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b7f4:	2000      	movs	r0, #0
 800b7f6:	6031      	str	r1, [r6, #0]
 800b7f8:	602b      	str	r3, [r5, #0]
 800b7fa:	b016      	add	sp, #88	@ 0x58
 800b7fc:	bd70      	pop	{r4, r5, r6, pc}
 800b7fe:	466a      	mov	r2, sp
 800b800:	f000 f848 	bl	800b894 <_fstat_r>
 800b804:	2800      	cmp	r0, #0
 800b806:	dbec      	blt.n	800b7e2 <__swhatbuf_r+0x12>
 800b808:	9901      	ldr	r1, [sp, #4]
 800b80a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b80e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b812:	4259      	negs	r1, r3
 800b814:	4159      	adcs	r1, r3
 800b816:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b81a:	e7eb      	b.n	800b7f4 <__swhatbuf_r+0x24>

0800b81c <__smakebuf_r>:
 800b81c:	898b      	ldrh	r3, [r1, #12]
 800b81e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b820:	079d      	lsls	r5, r3, #30
 800b822:	4606      	mov	r6, r0
 800b824:	460c      	mov	r4, r1
 800b826:	d507      	bpl.n	800b838 <__smakebuf_r+0x1c>
 800b828:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b82c:	6023      	str	r3, [r4, #0]
 800b82e:	6123      	str	r3, [r4, #16]
 800b830:	2301      	movs	r3, #1
 800b832:	6163      	str	r3, [r4, #20]
 800b834:	b003      	add	sp, #12
 800b836:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b838:	ab01      	add	r3, sp, #4
 800b83a:	466a      	mov	r2, sp
 800b83c:	f7ff ffc8 	bl	800b7d0 <__swhatbuf_r>
 800b840:	9f00      	ldr	r7, [sp, #0]
 800b842:	4605      	mov	r5, r0
 800b844:	4639      	mov	r1, r7
 800b846:	4630      	mov	r0, r6
 800b848:	f7fe febe 	bl	800a5c8 <_malloc_r>
 800b84c:	b948      	cbnz	r0, 800b862 <__smakebuf_r+0x46>
 800b84e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b852:	059a      	lsls	r2, r3, #22
 800b854:	d4ee      	bmi.n	800b834 <__smakebuf_r+0x18>
 800b856:	f023 0303 	bic.w	r3, r3, #3
 800b85a:	f043 0302 	orr.w	r3, r3, #2
 800b85e:	81a3      	strh	r3, [r4, #12]
 800b860:	e7e2      	b.n	800b828 <__smakebuf_r+0xc>
 800b862:	89a3      	ldrh	r3, [r4, #12]
 800b864:	6020      	str	r0, [r4, #0]
 800b866:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b86a:	81a3      	strh	r3, [r4, #12]
 800b86c:	9b01      	ldr	r3, [sp, #4]
 800b86e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b872:	b15b      	cbz	r3, 800b88c <__smakebuf_r+0x70>
 800b874:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b878:	4630      	mov	r0, r6
 800b87a:	f000 f81d 	bl	800b8b8 <_isatty_r>
 800b87e:	b128      	cbz	r0, 800b88c <__smakebuf_r+0x70>
 800b880:	89a3      	ldrh	r3, [r4, #12]
 800b882:	f023 0303 	bic.w	r3, r3, #3
 800b886:	f043 0301 	orr.w	r3, r3, #1
 800b88a:	81a3      	strh	r3, [r4, #12]
 800b88c:	89a3      	ldrh	r3, [r4, #12]
 800b88e:	431d      	orrs	r5, r3
 800b890:	81a5      	strh	r5, [r4, #12]
 800b892:	e7cf      	b.n	800b834 <__smakebuf_r+0x18>

0800b894 <_fstat_r>:
 800b894:	b538      	push	{r3, r4, r5, lr}
 800b896:	4d07      	ldr	r5, [pc, #28]	@ (800b8b4 <_fstat_r+0x20>)
 800b898:	2300      	movs	r3, #0
 800b89a:	4604      	mov	r4, r0
 800b89c:	4608      	mov	r0, r1
 800b89e:	4611      	mov	r1, r2
 800b8a0:	602b      	str	r3, [r5, #0]
 800b8a2:	f7f5 fee1 	bl	8001668 <_fstat>
 800b8a6:	1c43      	adds	r3, r0, #1
 800b8a8:	d102      	bne.n	800b8b0 <_fstat_r+0x1c>
 800b8aa:	682b      	ldr	r3, [r5, #0]
 800b8ac:	b103      	cbz	r3, 800b8b0 <_fstat_r+0x1c>
 800b8ae:	6023      	str	r3, [r4, #0]
 800b8b0:	bd38      	pop	{r3, r4, r5, pc}
 800b8b2:	bf00      	nop
 800b8b4:	20002090 	.word	0x20002090

0800b8b8 <_isatty_r>:
 800b8b8:	b538      	push	{r3, r4, r5, lr}
 800b8ba:	4d06      	ldr	r5, [pc, #24]	@ (800b8d4 <_isatty_r+0x1c>)
 800b8bc:	2300      	movs	r3, #0
 800b8be:	4604      	mov	r4, r0
 800b8c0:	4608      	mov	r0, r1
 800b8c2:	602b      	str	r3, [r5, #0]
 800b8c4:	f7f5 fee0 	bl	8001688 <_isatty>
 800b8c8:	1c43      	adds	r3, r0, #1
 800b8ca:	d102      	bne.n	800b8d2 <_isatty_r+0x1a>
 800b8cc:	682b      	ldr	r3, [r5, #0]
 800b8ce:	b103      	cbz	r3, 800b8d2 <_isatty_r+0x1a>
 800b8d0:	6023      	str	r3, [r4, #0]
 800b8d2:	bd38      	pop	{r3, r4, r5, pc}
 800b8d4:	20002090 	.word	0x20002090

0800b8d8 <powf>:
 800b8d8:	b508      	push	{r3, lr}
 800b8da:	ed2d 8b04 	vpush	{d8-d9}
 800b8de:	eeb0 8a60 	vmov.f32	s16, s1
 800b8e2:	eeb0 9a40 	vmov.f32	s18, s0
 800b8e6:	f000 f859 	bl	800b99c <__ieee754_powf>
 800b8ea:	eeb4 8a48 	vcmp.f32	s16, s16
 800b8ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8f2:	eef0 8a40 	vmov.f32	s17, s0
 800b8f6:	d63e      	bvs.n	800b976 <powf+0x9e>
 800b8f8:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800b8fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b900:	d112      	bne.n	800b928 <powf+0x50>
 800b902:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800b906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b90a:	d039      	beq.n	800b980 <powf+0xa8>
 800b90c:	eeb0 0a48 	vmov.f32	s0, s16
 800b910:	f000 f839 	bl	800b986 <finitef>
 800b914:	b378      	cbz	r0, 800b976 <powf+0x9e>
 800b916:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800b91a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b91e:	d52a      	bpl.n	800b976 <powf+0x9e>
 800b920:	f7fd ff62 	bl	80097e8 <__errno>
 800b924:	2322      	movs	r3, #34	@ 0x22
 800b926:	e014      	b.n	800b952 <powf+0x7a>
 800b928:	f000 f82d 	bl	800b986 <finitef>
 800b92c:	b998      	cbnz	r0, 800b956 <powf+0x7e>
 800b92e:	eeb0 0a49 	vmov.f32	s0, s18
 800b932:	f000 f828 	bl	800b986 <finitef>
 800b936:	b170      	cbz	r0, 800b956 <powf+0x7e>
 800b938:	eeb0 0a48 	vmov.f32	s0, s16
 800b93c:	f000 f823 	bl	800b986 <finitef>
 800b940:	b148      	cbz	r0, 800b956 <powf+0x7e>
 800b942:	eef4 8a68 	vcmp.f32	s17, s17
 800b946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b94a:	d7e9      	bvc.n	800b920 <powf+0x48>
 800b94c:	f7fd ff4c 	bl	80097e8 <__errno>
 800b950:	2321      	movs	r3, #33	@ 0x21
 800b952:	6003      	str	r3, [r0, #0]
 800b954:	e00f      	b.n	800b976 <powf+0x9e>
 800b956:	eef5 8a40 	vcmp.f32	s17, #0.0
 800b95a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b95e:	d10a      	bne.n	800b976 <powf+0x9e>
 800b960:	eeb0 0a49 	vmov.f32	s0, s18
 800b964:	f000 f80f 	bl	800b986 <finitef>
 800b968:	b128      	cbz	r0, 800b976 <powf+0x9e>
 800b96a:	eeb0 0a48 	vmov.f32	s0, s16
 800b96e:	f000 f80a 	bl	800b986 <finitef>
 800b972:	2800      	cmp	r0, #0
 800b974:	d1d4      	bne.n	800b920 <powf+0x48>
 800b976:	eeb0 0a68 	vmov.f32	s0, s17
 800b97a:	ecbd 8b04 	vpop	{d8-d9}
 800b97e:	bd08      	pop	{r3, pc}
 800b980:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 800b984:	e7f7      	b.n	800b976 <powf+0x9e>

0800b986 <finitef>:
 800b986:	ee10 3a10 	vmov	r3, s0
 800b98a:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800b98e:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800b992:	bfac      	ite	ge
 800b994:	2000      	movge	r0, #0
 800b996:	2001      	movlt	r0, #1
 800b998:	4770      	bx	lr
	...

0800b99c <__ieee754_powf>:
 800b99c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b9a0:	ee10 4a90 	vmov	r4, s1
 800b9a4:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 800b9a8:	ed2d 8b02 	vpush	{d8}
 800b9ac:	ee10 6a10 	vmov	r6, s0
 800b9b0:	eeb0 8a40 	vmov.f32	s16, s0
 800b9b4:	eef0 8a60 	vmov.f32	s17, s1
 800b9b8:	d10c      	bne.n	800b9d4 <__ieee754_powf+0x38>
 800b9ba:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 800b9be:	0076      	lsls	r6, r6, #1
 800b9c0:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 800b9c4:	f240 829c 	bls.w	800bf00 <__ieee754_powf+0x564>
 800b9c8:	ee38 0a28 	vadd.f32	s0, s16, s17
 800b9cc:	ecbd 8b02 	vpop	{d8}
 800b9d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9d4:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 800b9d8:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 800b9dc:	d802      	bhi.n	800b9e4 <__ieee754_powf+0x48>
 800b9de:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800b9e2:	d908      	bls.n	800b9f6 <__ieee754_powf+0x5a>
 800b9e4:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 800b9e8:	d1ee      	bne.n	800b9c8 <__ieee754_powf+0x2c>
 800b9ea:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 800b9ee:	0064      	lsls	r4, r4, #1
 800b9f0:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 800b9f4:	e7e6      	b.n	800b9c4 <__ieee754_powf+0x28>
 800b9f6:	2e00      	cmp	r6, #0
 800b9f8:	da1e      	bge.n	800ba38 <__ieee754_powf+0x9c>
 800b9fa:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 800b9fe:	d22b      	bcs.n	800ba58 <__ieee754_powf+0xbc>
 800ba00:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800ba04:	d332      	bcc.n	800ba6c <__ieee754_powf+0xd0>
 800ba06:	ea4f 53e9 	mov.w	r3, r9, asr #23
 800ba0a:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 800ba0e:	fa49 f503 	asr.w	r5, r9, r3
 800ba12:	fa05 f303 	lsl.w	r3, r5, r3
 800ba16:	454b      	cmp	r3, r9
 800ba18:	d126      	bne.n	800ba68 <__ieee754_powf+0xcc>
 800ba1a:	f005 0501 	and.w	r5, r5, #1
 800ba1e:	f1c5 0502 	rsb	r5, r5, #2
 800ba22:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800ba26:	d122      	bne.n	800ba6e <__ieee754_powf+0xd2>
 800ba28:	2c00      	cmp	r4, #0
 800ba2a:	f280 826f 	bge.w	800bf0c <__ieee754_powf+0x570>
 800ba2e:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800ba32:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800ba36:	e7c9      	b.n	800b9cc <__ieee754_powf+0x30>
 800ba38:	2500      	movs	r5, #0
 800ba3a:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800ba3e:	d1f0      	bne.n	800ba22 <__ieee754_powf+0x86>
 800ba40:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 800ba44:	f000 825c 	beq.w	800bf00 <__ieee754_powf+0x564>
 800ba48:	d908      	bls.n	800ba5c <__ieee754_powf+0xc0>
 800ba4a:	ed9f 0ad8 	vldr	s0, [pc, #864]	@ 800bdac <__ieee754_powf+0x410>
 800ba4e:	2c00      	cmp	r4, #0
 800ba50:	bfa8      	it	ge
 800ba52:	eeb0 0a68 	vmovge.f32	s0, s17
 800ba56:	e7b9      	b.n	800b9cc <__ieee754_powf+0x30>
 800ba58:	2502      	movs	r5, #2
 800ba5a:	e7ee      	b.n	800ba3a <__ieee754_powf+0x9e>
 800ba5c:	2c00      	cmp	r4, #0
 800ba5e:	f280 8252 	bge.w	800bf06 <__ieee754_powf+0x56a>
 800ba62:	eeb1 0a68 	vneg.f32	s0, s17
 800ba66:	e7b1      	b.n	800b9cc <__ieee754_powf+0x30>
 800ba68:	2500      	movs	r5, #0
 800ba6a:	e7da      	b.n	800ba22 <__ieee754_powf+0x86>
 800ba6c:	2500      	movs	r5, #0
 800ba6e:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800ba72:	d102      	bne.n	800ba7a <__ieee754_powf+0xde>
 800ba74:	ee28 0a08 	vmul.f32	s0, s16, s16
 800ba78:	e7a8      	b.n	800b9cc <__ieee754_powf+0x30>
 800ba7a:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800ba7e:	d109      	bne.n	800ba94 <__ieee754_powf+0xf8>
 800ba80:	2e00      	cmp	r6, #0
 800ba82:	db07      	blt.n	800ba94 <__ieee754_powf+0xf8>
 800ba84:	eeb0 0a48 	vmov.f32	s0, s16
 800ba88:	ecbd 8b02 	vpop	{d8}
 800ba8c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba90:	f000 bae8 	b.w	800c064 <__ieee754_sqrtf>
 800ba94:	eeb0 0a48 	vmov.f32	s0, s16
 800ba98:	f000 fa50 	bl	800bf3c <fabsf>
 800ba9c:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 800baa0:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 800baa4:	4647      	mov	r7, r8
 800baa6:	d002      	beq.n	800baae <__ieee754_powf+0x112>
 800baa8:	f1b8 0f00 	cmp.w	r8, #0
 800baac:	d117      	bne.n	800bade <__ieee754_powf+0x142>
 800baae:	2c00      	cmp	r4, #0
 800bab0:	bfbc      	itt	lt
 800bab2:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 800bab6:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800baba:	2e00      	cmp	r6, #0
 800babc:	da86      	bge.n	800b9cc <__ieee754_powf+0x30>
 800babe:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 800bac2:	ea58 0805 	orrs.w	r8, r8, r5
 800bac6:	d104      	bne.n	800bad2 <__ieee754_powf+0x136>
 800bac8:	ee70 7a40 	vsub.f32	s15, s0, s0
 800bacc:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800bad0:	e77c      	b.n	800b9cc <__ieee754_powf+0x30>
 800bad2:	2d01      	cmp	r5, #1
 800bad4:	f47f af7a 	bne.w	800b9cc <__ieee754_powf+0x30>
 800bad8:	eeb1 0a40 	vneg.f32	s0, s0
 800badc:	e776      	b.n	800b9cc <__ieee754_powf+0x30>
 800bade:	0ff0      	lsrs	r0, r6, #31
 800bae0:	3801      	subs	r0, #1
 800bae2:	ea55 0300 	orrs.w	r3, r5, r0
 800bae6:	d104      	bne.n	800baf2 <__ieee754_powf+0x156>
 800bae8:	ee38 8a48 	vsub.f32	s16, s16, s16
 800baec:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800baf0:	e76c      	b.n	800b9cc <__ieee754_powf+0x30>
 800baf2:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 800baf6:	d973      	bls.n	800bbe0 <__ieee754_powf+0x244>
 800baf8:	4bad      	ldr	r3, [pc, #692]	@ (800bdb0 <__ieee754_powf+0x414>)
 800bafa:	4598      	cmp	r8, r3
 800bafc:	d808      	bhi.n	800bb10 <__ieee754_powf+0x174>
 800bafe:	2c00      	cmp	r4, #0
 800bb00:	da0b      	bge.n	800bb1a <__ieee754_powf+0x17e>
 800bb02:	2000      	movs	r0, #0
 800bb04:	ecbd 8b02 	vpop	{d8}
 800bb08:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb0c:	f000 baa4 	b.w	800c058 <__math_oflowf>
 800bb10:	4ba8      	ldr	r3, [pc, #672]	@ (800bdb4 <__ieee754_powf+0x418>)
 800bb12:	4598      	cmp	r8, r3
 800bb14:	d908      	bls.n	800bb28 <__ieee754_powf+0x18c>
 800bb16:	2c00      	cmp	r4, #0
 800bb18:	dcf3      	bgt.n	800bb02 <__ieee754_powf+0x166>
 800bb1a:	2000      	movs	r0, #0
 800bb1c:	ecbd 8b02 	vpop	{d8}
 800bb20:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb24:	f000 ba92 	b.w	800c04c <__math_uflowf>
 800bb28:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800bb2c:	ee30 0a67 	vsub.f32	s0, s0, s15
 800bb30:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 800bdb8 <__ieee754_powf+0x41c>
 800bb34:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 800bb38:	eee0 6a67 	vfms.f32	s13, s0, s15
 800bb3c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800bb40:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800bb44:	ee20 7a00 	vmul.f32	s14, s0, s0
 800bb48:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bb4c:	eddf 7a9b 	vldr	s15, [pc, #620]	@ 800bdbc <__ieee754_powf+0x420>
 800bb50:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 800bb54:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 800bdc0 <__ieee754_powf+0x424>
 800bb58:	eee0 7a07 	vfma.f32	s15, s0, s14
 800bb5c:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 800bdc4 <__ieee754_powf+0x428>
 800bb60:	eef0 6a67 	vmov.f32	s13, s15
 800bb64:	eee0 6a07 	vfma.f32	s13, s0, s14
 800bb68:	ee16 3a90 	vmov	r3, s13
 800bb6c:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800bb70:	f023 030f 	bic.w	r3, r3, #15
 800bb74:	ee06 3a90 	vmov	s13, r3
 800bb78:	eee0 6a47 	vfms.f32	s13, s0, s14
 800bb7c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800bb80:	3d01      	subs	r5, #1
 800bb82:	f424 647f 	bic.w	r4, r4, #4080	@ 0xff0
 800bb86:	4305      	orrs	r5, r0
 800bb88:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bb8c:	f024 040f 	bic.w	r4, r4, #15
 800bb90:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 800bb94:	bf18      	it	ne
 800bb96:	eeb0 8a47 	vmovne.f32	s16, s14
 800bb9a:	ee07 4a10 	vmov	s14, r4
 800bb9e:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800bba2:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800bba6:	ee07 3a90 	vmov	s15, r3
 800bbaa:	eee7 0a27 	vfma.f32	s1, s14, s15
 800bbae:	ee07 4a10 	vmov	s14, r4
 800bbb2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bbb6:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800bbba:	ee17 1a10 	vmov	r1, s14
 800bbbe:	2900      	cmp	r1, #0
 800bbc0:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800bbc4:	f340 80dd 	ble.w	800bd82 <__ieee754_powf+0x3e6>
 800bbc8:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 800bbcc:	f240 80ca 	bls.w	800bd64 <__ieee754_powf+0x3c8>
 800bbd0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800bbd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbd8:	bf4c      	ite	mi
 800bbda:	2001      	movmi	r0, #1
 800bbdc:	2000      	movpl	r0, #0
 800bbde:	e791      	b.n	800bb04 <__ieee754_powf+0x168>
 800bbe0:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 800bbe4:	bf01      	itttt	eq
 800bbe6:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 800bdc8 <__ieee754_powf+0x42c>
 800bbea:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800bbee:	f06f 0317 	mvneq.w	r3, #23
 800bbf2:	ee17 7a90 	vmoveq	r7, s15
 800bbf6:	ea4f 52e7 	mov.w	r2, r7, asr #23
 800bbfa:	bf18      	it	ne
 800bbfc:	2300      	movne	r3, #0
 800bbfe:	3a7f      	subs	r2, #127	@ 0x7f
 800bc00:	441a      	add	r2, r3
 800bc02:	4b72      	ldr	r3, [pc, #456]	@ (800bdcc <__ieee754_powf+0x430>)
 800bc04:	f3c7 0716 	ubfx	r7, r7, #0, #23
 800bc08:	429f      	cmp	r7, r3
 800bc0a:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 800bc0e:	dd06      	ble.n	800bc1e <__ieee754_powf+0x282>
 800bc10:	4b6f      	ldr	r3, [pc, #444]	@ (800bdd0 <__ieee754_powf+0x434>)
 800bc12:	429f      	cmp	r7, r3
 800bc14:	f340 80a4 	ble.w	800bd60 <__ieee754_powf+0x3c4>
 800bc18:	3201      	adds	r2, #1
 800bc1a:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 800bc1e:	2600      	movs	r6, #0
 800bc20:	4b6c      	ldr	r3, [pc, #432]	@ (800bdd4 <__ieee754_powf+0x438>)
 800bc22:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800bc26:	ee07 1a10 	vmov	s14, r1
 800bc2a:	edd3 5a00 	vldr	s11, [r3]
 800bc2e:	4b6a      	ldr	r3, [pc, #424]	@ (800bdd8 <__ieee754_powf+0x43c>)
 800bc30:	ee75 7a87 	vadd.f32	s15, s11, s14
 800bc34:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bc38:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 800bc3c:	1049      	asrs	r1, r1, #1
 800bc3e:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 800bc42:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 800bc46:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 800bc4a:	ee37 6a65 	vsub.f32	s12, s14, s11
 800bc4e:	ee07 1a90 	vmov	s15, r1
 800bc52:	ee26 5a24 	vmul.f32	s10, s12, s9
 800bc56:	ee77 5ae5 	vsub.f32	s11, s15, s11
 800bc5a:	ee15 7a10 	vmov	r7, s10
 800bc5e:	401f      	ands	r7, r3
 800bc60:	ee06 7a90 	vmov	s13, r7
 800bc64:	eea6 6ae7 	vfms.f32	s12, s13, s15
 800bc68:	ee37 7a65 	vsub.f32	s14, s14, s11
 800bc6c:	ee65 7a05 	vmul.f32	s15, s10, s10
 800bc70:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800bc74:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800bddc <__ieee754_powf+0x440>
 800bc78:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 800bde0 <__ieee754_powf+0x444>
 800bc7c:	eee7 5a87 	vfma.f32	s11, s15, s14
 800bc80:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 800bde4 <__ieee754_powf+0x448>
 800bc84:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800bc88:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 800bdb8 <__ieee754_powf+0x41c>
 800bc8c:	eee7 5a27 	vfma.f32	s11, s14, s15
 800bc90:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 800bde8 <__ieee754_powf+0x44c>
 800bc94:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800bc98:	eddf 5a54 	vldr	s11, [pc, #336]	@ 800bdec <__ieee754_powf+0x450>
 800bc9c:	ee26 6a24 	vmul.f32	s12, s12, s9
 800bca0:	eee7 5a27 	vfma.f32	s11, s14, s15
 800bca4:	ee35 7a26 	vadd.f32	s14, s10, s13
 800bca8:	ee67 4aa7 	vmul.f32	s9, s15, s15
 800bcac:	ee27 7a06 	vmul.f32	s14, s14, s12
 800bcb0:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 800bcb4:	eea4 7aa5 	vfma.f32	s14, s9, s11
 800bcb8:	eef0 5a67 	vmov.f32	s11, s15
 800bcbc:	eee6 5aa6 	vfma.f32	s11, s13, s13
 800bcc0:	ee75 5a87 	vadd.f32	s11, s11, s14
 800bcc4:	ee15 1a90 	vmov	r1, s11
 800bcc8:	4019      	ands	r1, r3
 800bcca:	ee05 1a90 	vmov	s11, r1
 800bcce:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800bcd2:	eee6 7ae6 	vfms.f32	s15, s13, s13
 800bcd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bcda:	ee67 7a85 	vmul.f32	s15, s15, s10
 800bcde:	eee6 7a25 	vfma.f32	s15, s12, s11
 800bce2:	eeb0 6a67 	vmov.f32	s12, s15
 800bce6:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800bcea:	ee16 1a10 	vmov	r1, s12
 800bcee:	4019      	ands	r1, r3
 800bcf0:	ee06 1a10 	vmov	s12, r1
 800bcf4:	eeb0 7a46 	vmov.f32	s14, s12
 800bcf8:	eea6 7ae5 	vfms.f32	s14, s13, s11
 800bcfc:	493c      	ldr	r1, [pc, #240]	@ (800bdf0 <__ieee754_powf+0x454>)
 800bcfe:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 800bd02:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bd06:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 800bdf4 <__ieee754_powf+0x458>
 800bd0a:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 800bdf8 <__ieee754_powf+0x45c>
 800bd0e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bd12:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800bdfc <__ieee754_powf+0x460>
 800bd16:	eee6 7a07 	vfma.f32	s15, s12, s14
 800bd1a:	ed91 7a00 	vldr	s14, [r1]
 800bd1e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bd22:	ee07 2a10 	vmov	s14, r2
 800bd26:	eef0 6a67 	vmov.f32	s13, s15
 800bd2a:	4a35      	ldr	r2, [pc, #212]	@ (800be00 <__ieee754_powf+0x464>)
 800bd2c:	eee6 6a25 	vfma.f32	s13, s12, s11
 800bd30:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 800bd34:	ed92 5a00 	vldr	s10, [r2]
 800bd38:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800bd3c:	ee76 6a85 	vadd.f32	s13, s13, s10
 800bd40:	ee76 6a87 	vadd.f32	s13, s13, s14
 800bd44:	ee16 2a90 	vmov	r2, s13
 800bd48:	4013      	ands	r3, r2
 800bd4a:	ee06 3a90 	vmov	s13, r3
 800bd4e:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800bd52:	ee37 7a45 	vsub.f32	s14, s14, s10
 800bd56:	eea6 7a65 	vfms.f32	s14, s12, s11
 800bd5a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bd5e:	e70f      	b.n	800bb80 <__ieee754_powf+0x1e4>
 800bd60:	2601      	movs	r6, #1
 800bd62:	e75d      	b.n	800bc20 <__ieee754_powf+0x284>
 800bd64:	d152      	bne.n	800be0c <__ieee754_powf+0x470>
 800bd66:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800be04 <__ieee754_powf+0x468>
 800bd6a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800bd6e:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800bd72:	eef4 6ac7 	vcmpe.f32	s13, s14
 800bd76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd7a:	f73f af29 	bgt.w	800bbd0 <__ieee754_powf+0x234>
 800bd7e:	2386      	movs	r3, #134	@ 0x86
 800bd80:	e048      	b.n	800be14 <__ieee754_powf+0x478>
 800bd82:	4a21      	ldr	r2, [pc, #132]	@ (800be08 <__ieee754_powf+0x46c>)
 800bd84:	4293      	cmp	r3, r2
 800bd86:	d907      	bls.n	800bd98 <__ieee754_powf+0x3fc>
 800bd88:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800bd8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd90:	bf4c      	ite	mi
 800bd92:	2001      	movmi	r0, #1
 800bd94:	2000      	movpl	r0, #0
 800bd96:	e6c1      	b.n	800bb1c <__ieee754_powf+0x180>
 800bd98:	d138      	bne.n	800be0c <__ieee754_powf+0x470>
 800bd9a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800bd9e:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800bda2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bda6:	dbea      	blt.n	800bd7e <__ieee754_powf+0x3e2>
 800bda8:	e7ee      	b.n	800bd88 <__ieee754_powf+0x3ec>
 800bdaa:	bf00      	nop
 800bdac:	00000000 	.word	0x00000000
 800bdb0:	3f7ffff3 	.word	0x3f7ffff3
 800bdb4:	3f800007 	.word	0x3f800007
 800bdb8:	3eaaaaab 	.word	0x3eaaaaab
 800bdbc:	3fb8aa3b 	.word	0x3fb8aa3b
 800bdc0:	36eca570 	.word	0x36eca570
 800bdc4:	3fb8aa00 	.word	0x3fb8aa00
 800bdc8:	4b800000 	.word	0x4b800000
 800bdcc:	001cc471 	.word	0x001cc471
 800bdd0:	005db3d6 	.word	0x005db3d6
 800bdd4:	0800c4a8 	.word	0x0800c4a8
 800bdd8:	fffff000 	.word	0xfffff000
 800bddc:	3e6c3255 	.word	0x3e6c3255
 800bde0:	3e53f142 	.word	0x3e53f142
 800bde4:	3e8ba305 	.word	0x3e8ba305
 800bde8:	3edb6db7 	.word	0x3edb6db7
 800bdec:	3f19999a 	.word	0x3f19999a
 800bdf0:	0800c498 	.word	0x0800c498
 800bdf4:	3f76384f 	.word	0x3f76384f
 800bdf8:	3f763800 	.word	0x3f763800
 800bdfc:	369dc3a0 	.word	0x369dc3a0
 800be00:	0800c4a0 	.word	0x0800c4a0
 800be04:	3338aa3c 	.word	0x3338aa3c
 800be08:	43160000 	.word	0x43160000
 800be0c:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 800be10:	d971      	bls.n	800bef6 <__ieee754_powf+0x55a>
 800be12:	15db      	asrs	r3, r3, #23
 800be14:	3b7e      	subs	r3, #126	@ 0x7e
 800be16:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800be1a:	4118      	asrs	r0, r3
 800be1c:	4408      	add	r0, r1
 800be1e:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800be22:	4a3c      	ldr	r2, [pc, #240]	@ (800bf14 <__ieee754_powf+0x578>)
 800be24:	3b7f      	subs	r3, #127	@ 0x7f
 800be26:	411a      	asrs	r2, r3
 800be28:	4002      	ands	r2, r0
 800be2a:	ee07 2a10 	vmov	s14, r2
 800be2e:	f3c0 0016 	ubfx	r0, r0, #0, #23
 800be32:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800be36:	f1c3 0317 	rsb	r3, r3, #23
 800be3a:	4118      	asrs	r0, r3
 800be3c:	2900      	cmp	r1, #0
 800be3e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800be42:	bfb8      	it	lt
 800be44:	4240      	neglt	r0, r0
 800be46:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800be4a:	eddf 6a33 	vldr	s13, [pc, #204]	@ 800bf18 <__ieee754_powf+0x57c>
 800be4e:	ed9f 6a33 	vldr	s12, [pc, #204]	@ 800bf1c <__ieee754_powf+0x580>
 800be52:	ee17 3a10 	vmov	r3, s14
 800be56:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800be5a:	f023 030f 	bic.w	r3, r3, #15
 800be5e:	ee07 3a10 	vmov	s14, r3
 800be62:	ee77 7a67 	vsub.f32	s15, s14, s15
 800be66:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800be6a:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800be6e:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 800bf20 <__ieee754_powf+0x584>
 800be72:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be76:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800be7a:	eef0 6a67 	vmov.f32	s13, s15
 800be7e:	eee7 6a06 	vfma.f32	s13, s14, s12
 800be82:	eef0 5a66 	vmov.f32	s11, s13
 800be86:	eee7 5a46 	vfms.f32	s11, s14, s12
 800be8a:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800be8e:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800be92:	ed9f 6a24 	vldr	s12, [pc, #144]	@ 800bf24 <__ieee754_powf+0x588>
 800be96:	eddf 5a24 	vldr	s11, [pc, #144]	@ 800bf28 <__ieee754_powf+0x58c>
 800be9a:	eea7 6a25 	vfma.f32	s12, s14, s11
 800be9e:	eddf 5a23 	vldr	s11, [pc, #140]	@ 800bf2c <__ieee754_powf+0x590>
 800bea2:	eee6 5a07 	vfma.f32	s11, s12, s14
 800bea6:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 800bf30 <__ieee754_powf+0x594>
 800beaa:	eea5 6a87 	vfma.f32	s12, s11, s14
 800beae:	eddf 5a21 	vldr	s11, [pc, #132]	@ 800bf34 <__ieee754_powf+0x598>
 800beb2:	eee6 5a07 	vfma.f32	s11, s12, s14
 800beb6:	eeb0 6a66 	vmov.f32	s12, s13
 800beba:	eea5 6ac7 	vfms.f32	s12, s11, s14
 800bebe:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800bec2:	ee66 5a86 	vmul.f32	s11, s13, s12
 800bec6:	ee36 6a47 	vsub.f32	s12, s12, s14
 800beca:	eee6 7aa7 	vfma.f32	s15, s13, s15
 800bece:	ee85 7a86 	vdiv.f32	s14, s11, s12
 800bed2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bed6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800beda:	ee30 0a67 	vsub.f32	s0, s0, s15
 800bede:	ee10 3a10 	vmov	r3, s0
 800bee2:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800bee6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800beea:	da06      	bge.n	800befa <__ieee754_powf+0x55e>
 800beec:	f000 f82e 	bl	800bf4c <scalbnf>
 800bef0:	ee20 0a08 	vmul.f32	s0, s0, s16
 800bef4:	e56a      	b.n	800b9cc <__ieee754_powf+0x30>
 800bef6:	2000      	movs	r0, #0
 800bef8:	e7a5      	b.n	800be46 <__ieee754_powf+0x4aa>
 800befa:	ee00 3a10 	vmov	s0, r3
 800befe:	e7f7      	b.n	800bef0 <__ieee754_powf+0x554>
 800bf00:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800bf04:	e562      	b.n	800b9cc <__ieee754_powf+0x30>
 800bf06:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 800bf38 <__ieee754_powf+0x59c>
 800bf0a:	e55f      	b.n	800b9cc <__ieee754_powf+0x30>
 800bf0c:	eeb0 0a48 	vmov.f32	s0, s16
 800bf10:	e55c      	b.n	800b9cc <__ieee754_powf+0x30>
 800bf12:	bf00      	nop
 800bf14:	ff800000 	.word	0xff800000
 800bf18:	3f317218 	.word	0x3f317218
 800bf1c:	3f317200 	.word	0x3f317200
 800bf20:	35bfbe8c 	.word	0x35bfbe8c
 800bf24:	b5ddea0e 	.word	0xb5ddea0e
 800bf28:	3331bb4c 	.word	0x3331bb4c
 800bf2c:	388ab355 	.word	0x388ab355
 800bf30:	bb360b61 	.word	0xbb360b61
 800bf34:	3e2aaaab 	.word	0x3e2aaaab
 800bf38:	00000000 	.word	0x00000000

0800bf3c <fabsf>:
 800bf3c:	ee10 3a10 	vmov	r3, s0
 800bf40:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bf44:	ee00 3a10 	vmov	s0, r3
 800bf48:	4770      	bx	lr
	...

0800bf4c <scalbnf>:
 800bf4c:	ee10 3a10 	vmov	r3, s0
 800bf50:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800bf54:	d02b      	beq.n	800bfae <scalbnf+0x62>
 800bf56:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800bf5a:	d302      	bcc.n	800bf62 <scalbnf+0x16>
 800bf5c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800bf60:	4770      	bx	lr
 800bf62:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800bf66:	d123      	bne.n	800bfb0 <scalbnf+0x64>
 800bf68:	4b24      	ldr	r3, [pc, #144]	@ (800bffc <scalbnf+0xb0>)
 800bf6a:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800c000 <scalbnf+0xb4>
 800bf6e:	4298      	cmp	r0, r3
 800bf70:	ee20 0a27 	vmul.f32	s0, s0, s15
 800bf74:	db17      	blt.n	800bfa6 <scalbnf+0x5a>
 800bf76:	ee10 3a10 	vmov	r3, s0
 800bf7a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800bf7e:	3a19      	subs	r2, #25
 800bf80:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800bf84:	4288      	cmp	r0, r1
 800bf86:	dd15      	ble.n	800bfb4 <scalbnf+0x68>
 800bf88:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800c004 <scalbnf+0xb8>
 800bf8c:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800c008 <scalbnf+0xbc>
 800bf90:	ee10 3a10 	vmov	r3, s0
 800bf94:	eeb0 7a67 	vmov.f32	s14, s15
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	bfb8      	it	lt
 800bf9c:	eef0 7a66 	vmovlt.f32	s15, s13
 800bfa0:	ee27 0a87 	vmul.f32	s0, s15, s14
 800bfa4:	4770      	bx	lr
 800bfa6:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800c00c <scalbnf+0xc0>
 800bfaa:	ee27 0a80 	vmul.f32	s0, s15, s0
 800bfae:	4770      	bx	lr
 800bfb0:	0dd2      	lsrs	r2, r2, #23
 800bfb2:	e7e5      	b.n	800bf80 <scalbnf+0x34>
 800bfb4:	4410      	add	r0, r2
 800bfb6:	28fe      	cmp	r0, #254	@ 0xfe
 800bfb8:	dce6      	bgt.n	800bf88 <scalbnf+0x3c>
 800bfba:	2800      	cmp	r0, #0
 800bfbc:	dd06      	ble.n	800bfcc <scalbnf+0x80>
 800bfbe:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800bfc2:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800bfc6:	ee00 3a10 	vmov	s0, r3
 800bfca:	4770      	bx	lr
 800bfcc:	f110 0f16 	cmn.w	r0, #22
 800bfd0:	da09      	bge.n	800bfe6 <scalbnf+0x9a>
 800bfd2:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800c00c <scalbnf+0xc0>
 800bfd6:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800c010 <scalbnf+0xc4>
 800bfda:	ee10 3a10 	vmov	r3, s0
 800bfde:	eeb0 7a67 	vmov.f32	s14, s15
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	e7d9      	b.n	800bf9a <scalbnf+0x4e>
 800bfe6:	3019      	adds	r0, #25
 800bfe8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800bfec:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800bff0:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800c014 <scalbnf+0xc8>
 800bff4:	ee07 3a90 	vmov	s15, r3
 800bff8:	e7d7      	b.n	800bfaa <scalbnf+0x5e>
 800bffa:	bf00      	nop
 800bffc:	ffff3cb0 	.word	0xffff3cb0
 800c000:	4c000000 	.word	0x4c000000
 800c004:	7149f2ca 	.word	0x7149f2ca
 800c008:	f149f2ca 	.word	0xf149f2ca
 800c00c:	0da24260 	.word	0x0da24260
 800c010:	8da24260 	.word	0x8da24260
 800c014:	33000000 	.word	0x33000000

0800c018 <with_errnof>:
 800c018:	b510      	push	{r4, lr}
 800c01a:	ed2d 8b02 	vpush	{d8}
 800c01e:	eeb0 8a40 	vmov.f32	s16, s0
 800c022:	4604      	mov	r4, r0
 800c024:	f7fd fbe0 	bl	80097e8 <__errno>
 800c028:	eeb0 0a48 	vmov.f32	s0, s16
 800c02c:	ecbd 8b02 	vpop	{d8}
 800c030:	6004      	str	r4, [r0, #0]
 800c032:	bd10      	pop	{r4, pc}

0800c034 <xflowf>:
 800c034:	b130      	cbz	r0, 800c044 <xflowf+0x10>
 800c036:	eef1 7a40 	vneg.f32	s15, s0
 800c03a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800c03e:	2022      	movs	r0, #34	@ 0x22
 800c040:	f7ff bfea 	b.w	800c018 <with_errnof>
 800c044:	eef0 7a40 	vmov.f32	s15, s0
 800c048:	e7f7      	b.n	800c03a <xflowf+0x6>
	...

0800c04c <__math_uflowf>:
 800c04c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800c054 <__math_uflowf+0x8>
 800c050:	f7ff bff0 	b.w	800c034 <xflowf>
 800c054:	10000000 	.word	0x10000000

0800c058 <__math_oflowf>:
 800c058:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800c060 <__math_oflowf+0x8>
 800c05c:	f7ff bfea 	b.w	800c034 <xflowf>
 800c060:	70000000 	.word	0x70000000

0800c064 <__ieee754_sqrtf>:
 800c064:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800c068:	4770      	bx	lr
	...

0800c06c <_init>:
 800c06c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c06e:	bf00      	nop
 800c070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c072:	bc08      	pop	{r3}
 800c074:	469e      	mov	lr, r3
 800c076:	4770      	bx	lr

0800c078 <_fini>:
 800c078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c07a:	bf00      	nop
 800c07c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c07e:	bc08      	pop	{r3}
 800c080:	469e      	mov	lr, r3
 800c082:	4770      	bx	lr
