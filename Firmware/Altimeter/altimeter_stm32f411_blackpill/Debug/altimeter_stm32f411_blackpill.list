
altimeter_stm32f411_blackpill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c214  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000494  0800c3b8  0800c3b8  0001c3b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c84c  0800c84c  000202d0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c84c  0800c84c  0001c84c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c854  0800c854  000202d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c854  0800c854  0001c854  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c858  0800c858  0001c858  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d0  20000000  0800c85c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001cc4  200002d0  0800cb2c  000202d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001f94  0800cb2c  00021f94  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000124d8  00000000  00000000  00020300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003124  00000000  00000000  000327d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f08  00000000  00000000  00035900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000da8  00000000  00000000  00036808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000199af  00000000  00000000  000375b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013e05  00000000  00000000  00050f5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b89d  00000000  00000000  00064d64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f0601  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050d4  00000000  00000000  000f0654  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002d0 	.word	0x200002d0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c39c 	.word	0x0800c39c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002d4 	.word	0x200002d4
 80001dc:	0800c39c 	.word	0x0800c39c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bcc:	f000 b974 	b.w	8000eb8 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468e      	mov	lr, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d14d      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	4694      	mov	ip, r2
 8000bfa:	d969      	bls.n	8000cd0 <__udivmoddi4+0xe8>
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	b152      	cbz	r2, 8000c18 <__udivmoddi4+0x30>
 8000c02:	fa01 f302 	lsl.w	r3, r1, r2
 8000c06:	f1c2 0120 	rsb	r1, r2, #32
 8000c0a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c0e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c12:	ea41 0e03 	orr.w	lr, r1, r3
 8000c16:	4094      	lsls	r4, r2
 8000c18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c1c:	0c21      	lsrs	r1, r4, #16
 8000c1e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c22:	fa1f f78c 	uxth.w	r7, ip
 8000c26:	fb08 e316 	mls	r3, r8, r6, lr
 8000c2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c2e:	fb06 f107 	mul.w	r1, r6, r7
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c3e:	f080 811f 	bcs.w	8000e80 <__udivmoddi4+0x298>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 811c 	bls.w	8000e80 <__udivmoddi4+0x298>
 8000c48:	3e02      	subs	r6, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a5b      	subs	r3, r3, r1
 8000c4e:	b2a4      	uxth	r4, r4
 8000c50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c54:	fb08 3310 	mls	r3, r8, r0, r3
 8000c58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c5c:	fb00 f707 	mul.w	r7, r0, r7
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x92>
 8000c64:	eb1c 0404 	adds.w	r4, ip, r4
 8000c68:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c6c:	f080 810a 	bcs.w	8000e84 <__udivmoddi4+0x29c>
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	f240 8107 	bls.w	8000e84 <__udivmoddi4+0x29c>
 8000c76:	4464      	add	r4, ip
 8000c78:	3802      	subs	r0, #2
 8000c7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c7e:	1be4      	subs	r4, r4, r7
 8000c80:	2600      	movs	r6, #0
 8000c82:	b11d      	cbz	r5, 8000c8c <__udivmoddi4+0xa4>
 8000c84:	40d4      	lsrs	r4, r2
 8000c86:	2300      	movs	r3, #0
 8000c88:	e9c5 4300 	strd	r4, r3, [r5]
 8000c8c:	4631      	mov	r1, r6
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d909      	bls.n	8000caa <__udivmoddi4+0xc2>
 8000c96:	2d00      	cmp	r5, #0
 8000c98:	f000 80ef 	beq.w	8000e7a <__udivmoddi4+0x292>
 8000c9c:	2600      	movs	r6, #0
 8000c9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca2:	4630      	mov	r0, r6
 8000ca4:	4631      	mov	r1, r6
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	fab3 f683 	clz	r6, r3
 8000cae:	2e00      	cmp	r6, #0
 8000cb0:	d14a      	bne.n	8000d48 <__udivmoddi4+0x160>
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d302      	bcc.n	8000cbc <__udivmoddi4+0xd4>
 8000cb6:	4282      	cmp	r2, r0
 8000cb8:	f200 80f9 	bhi.w	8000eae <__udivmoddi4+0x2c6>
 8000cbc:	1a84      	subs	r4, r0, r2
 8000cbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	469e      	mov	lr, r3
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	d0e0      	beq.n	8000c8c <__udivmoddi4+0xa4>
 8000cca:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cce:	e7dd      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000cd0:	b902      	cbnz	r2, 8000cd4 <__udivmoddi4+0xec>
 8000cd2:	deff      	udf	#255	; 0xff
 8000cd4:	fab2 f282 	clz	r2, r2
 8000cd8:	2a00      	cmp	r2, #0
 8000cda:	f040 8092 	bne.w	8000e02 <__udivmoddi4+0x21a>
 8000cde:	eba1 010c 	sub.w	r1, r1, ip
 8000ce2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce6:	fa1f fe8c 	uxth.w	lr, ip
 8000cea:	2601      	movs	r6, #1
 8000cec:	0c20      	lsrs	r0, r4, #16
 8000cee:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cf2:	fb07 1113 	mls	r1, r7, r3, r1
 8000cf6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cfa:	fb0e f003 	mul.w	r0, lr, r3
 8000cfe:	4288      	cmp	r0, r1
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x12c>
 8000d02:	eb1c 0101 	adds.w	r1, ip, r1
 8000d06:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x12a>
 8000d0c:	4288      	cmp	r0, r1
 8000d0e:	f200 80cb 	bhi.w	8000ea8 <__udivmoddi4+0x2c0>
 8000d12:	4643      	mov	r3, r8
 8000d14:	1a09      	subs	r1, r1, r0
 8000d16:	b2a4      	uxth	r4, r4
 8000d18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d1c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d20:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d24:	fb0e fe00 	mul.w	lr, lr, r0
 8000d28:	45a6      	cmp	lr, r4
 8000d2a:	d908      	bls.n	8000d3e <__udivmoddi4+0x156>
 8000d2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d30:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d34:	d202      	bcs.n	8000d3c <__udivmoddi4+0x154>
 8000d36:	45a6      	cmp	lr, r4
 8000d38:	f200 80bb 	bhi.w	8000eb2 <__udivmoddi4+0x2ca>
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	eba4 040e 	sub.w	r4, r4, lr
 8000d42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d46:	e79c      	b.n	8000c82 <__udivmoddi4+0x9a>
 8000d48:	f1c6 0720 	rsb	r7, r6, #32
 8000d4c:	40b3      	lsls	r3, r6
 8000d4e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d52:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d56:	fa20 f407 	lsr.w	r4, r0, r7
 8000d5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d5e:	431c      	orrs	r4, r3
 8000d60:	40f9      	lsrs	r1, r7
 8000d62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d66:	fa00 f306 	lsl.w	r3, r0, r6
 8000d6a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d6e:	0c20      	lsrs	r0, r4, #16
 8000d70:	fa1f fe8c 	uxth.w	lr, ip
 8000d74:	fb09 1118 	mls	r1, r9, r8, r1
 8000d78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d7c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d80:	4288      	cmp	r0, r1
 8000d82:	fa02 f206 	lsl.w	r2, r2, r6
 8000d86:	d90b      	bls.n	8000da0 <__udivmoddi4+0x1b8>
 8000d88:	eb1c 0101 	adds.w	r1, ip, r1
 8000d8c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d90:	f080 8088 	bcs.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d94:	4288      	cmp	r0, r1
 8000d96:	f240 8085 	bls.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d9e:	4461      	add	r1, ip
 8000da0:	1a09      	subs	r1, r1, r0
 8000da2:	b2a4      	uxth	r4, r4
 8000da4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000da8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000db0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db4:	458e      	cmp	lr, r1
 8000db6:	d908      	bls.n	8000dca <__udivmoddi4+0x1e2>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000dc0:	d26c      	bcs.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc2:	458e      	cmp	lr, r1
 8000dc4:	d96a      	bls.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	4461      	add	r1, ip
 8000dca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dce:	fba0 9402 	umull	r9, r4, r0, r2
 8000dd2:	eba1 010e 	sub.w	r1, r1, lr
 8000dd6:	42a1      	cmp	r1, r4
 8000dd8:	46c8      	mov	r8, r9
 8000dda:	46a6      	mov	lr, r4
 8000ddc:	d356      	bcc.n	8000e8c <__udivmoddi4+0x2a4>
 8000dde:	d053      	beq.n	8000e88 <__udivmoddi4+0x2a0>
 8000de0:	b15d      	cbz	r5, 8000dfa <__udivmoddi4+0x212>
 8000de2:	ebb3 0208 	subs.w	r2, r3, r8
 8000de6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dea:	fa01 f707 	lsl.w	r7, r1, r7
 8000dee:	fa22 f306 	lsr.w	r3, r2, r6
 8000df2:	40f1      	lsrs	r1, r6
 8000df4:	431f      	orrs	r7, r3
 8000df6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dfa:	2600      	movs	r6, #0
 8000dfc:	4631      	mov	r1, r6
 8000dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e02:	f1c2 0320 	rsb	r3, r2, #32
 8000e06:	40d8      	lsrs	r0, r3
 8000e08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e0c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e10:	4091      	lsls	r1, r2
 8000e12:	4301      	orrs	r1, r0
 8000e14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e18:	fa1f fe8c 	uxth.w	lr, ip
 8000e1c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e20:	fb07 3610 	mls	r6, r7, r0, r3
 8000e24:	0c0b      	lsrs	r3, r1, #16
 8000e26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e2a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e2e:	429e      	cmp	r6, r3
 8000e30:	fa04 f402 	lsl.w	r4, r4, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x260>
 8000e36:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e3e:	d22f      	bcs.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e40:	429e      	cmp	r6, r3
 8000e42:	d92d      	bls.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e44:	3802      	subs	r0, #2
 8000e46:	4463      	add	r3, ip
 8000e48:	1b9b      	subs	r3, r3, r6
 8000e4a:	b289      	uxth	r1, r1
 8000e4c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e50:	fb07 3316 	mls	r3, r7, r6, r3
 8000e54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e58:	fb06 f30e 	mul.w	r3, r6, lr
 8000e5c:	428b      	cmp	r3, r1
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x28a>
 8000e60:	eb1c 0101 	adds.w	r1, ip, r1
 8000e64:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000e68:	d216      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d914      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6e:	3e02      	subs	r6, #2
 8000e70:	4461      	add	r1, ip
 8000e72:	1ac9      	subs	r1, r1, r3
 8000e74:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e78:	e738      	b.n	8000cec <__udivmoddi4+0x104>
 8000e7a:	462e      	mov	r6, r5
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	e705      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000e80:	4606      	mov	r6, r0
 8000e82:	e6e3      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e6f8      	b.n	8000c7a <__udivmoddi4+0x92>
 8000e88:	454b      	cmp	r3, r9
 8000e8a:	d2a9      	bcs.n	8000de0 <__udivmoddi4+0x1f8>
 8000e8c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e90:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e94:	3801      	subs	r0, #1
 8000e96:	e7a3      	b.n	8000de0 <__udivmoddi4+0x1f8>
 8000e98:	4646      	mov	r6, r8
 8000e9a:	e7ea      	b.n	8000e72 <__udivmoddi4+0x28a>
 8000e9c:	4620      	mov	r0, r4
 8000e9e:	e794      	b.n	8000dca <__udivmoddi4+0x1e2>
 8000ea0:	4640      	mov	r0, r8
 8000ea2:	e7d1      	b.n	8000e48 <__udivmoddi4+0x260>
 8000ea4:	46d0      	mov	r8, sl
 8000ea6:	e77b      	b.n	8000da0 <__udivmoddi4+0x1b8>
 8000ea8:	3b02      	subs	r3, #2
 8000eaa:	4461      	add	r1, ip
 8000eac:	e732      	b.n	8000d14 <__udivmoddi4+0x12c>
 8000eae:	4630      	mov	r0, r6
 8000eb0:	e709      	b.n	8000cc6 <__udivmoddi4+0xde>
 8000eb2:	4464      	add	r4, ip
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	e742      	b.n	8000d3e <__udivmoddi4+0x156>

08000eb8 <__aeabi_idiv0>:
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop

08000ebc <MS580301_WriteCommand>:
float MS580301_Sea_Level_Pressure = 1013;
/*
 * Private functions
 */
static void MS580301_WriteCommand(MS580301* sensor, uint8_t command)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af02      	add	r7, sp, #8
 8000ec2:	6078      	str	r0, [r7, #4]
 8000ec4:	460b      	mov	r3, r1
 8000ec6:	70fb      	strb	r3, [r7, #3]
	HAL_I2C_Master_Transmit(sensor -> hi2c, sensor -> address, &command, 1, HAL_MAX_DELAY);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6818      	ldr	r0, [r3, #0]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	791b      	ldrb	r3, [r3, #4]
 8000ed0:	b299      	uxth	r1, r3
 8000ed2:	1cfa      	adds	r2, r7, #3
 8000ed4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ed8:	9300      	str	r3, [sp, #0]
 8000eda:	2301      	movs	r3, #1
 8000edc:	f001 f904 	bl	80020e8 <HAL_I2C_Master_Transmit>
}
 8000ee0:	bf00      	nop
 8000ee2:	3708      	adds	r7, #8
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <MS580301_ReadData>:

static uint16_t MS580301_ReadData(MS580301* sensor, uint8_t command)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b086      	sub	sp, #24
 8000eec:	af02      	add	r7, sp, #8
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	460b      	mov	r3, r1
 8000ef2:	70fb      	strb	r3, [r7, #3]
	uint8_t data[2];
	HAL_I2C_Master_Transmit(sensor->hi2c, sensor-> address, &command, 1, HAL_MAX_DELAY);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6818      	ldr	r0, [r3, #0]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	791b      	ldrb	r3, [r3, #4]
 8000efc:	b299      	uxth	r1, r3
 8000efe:	1cfa      	adds	r2, r7, #3
 8000f00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f04:	9300      	str	r3, [sp, #0]
 8000f06:	2301      	movs	r3, #1
 8000f08:	f001 f8ee 	bl	80020e8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(sensor->hi2c, sensor-> address, data, 2, HAL_MAX_DELAY);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6818      	ldr	r0, [r3, #0]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	791b      	ldrb	r3, [r3, #4]
 8000f14:	b299      	uxth	r1, r3
 8000f16:	f107 020c 	add.w	r2, r7, #12
 8000f1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f1e:	9300      	str	r3, [sp, #0]
 8000f20:	2302      	movs	r3, #2
 8000f22:	f001 f9df 	bl	80022e4 <HAL_I2C_Master_Receive>
	return (data[0] << 8) | data[1];
 8000f26:	7b3b      	ldrb	r3, [r7, #12]
 8000f28:	021b      	lsls	r3, r3, #8
 8000f2a:	b21a      	sxth	r2, r3
 8000f2c:	7b7b      	ldrb	r3, [r7, #13]
 8000f2e:	b21b      	sxth	r3, r3
 8000f30:	4313      	orrs	r3, r2
 8000f32:	b21b      	sxth	r3, r3
 8000f34:	b29b      	uxth	r3, r3
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3710      	adds	r7, #16
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <MS580301_Init>:

// Public functions

void MS580301_Init(MS580301* sensor, I2C_HandleTypeDef* hi2c)
{
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b082      	sub	sp, #8
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	6078      	str	r0, [r7, #4]
 8000f46:	6039      	str	r1, [r7, #0]
	sensor->hi2c = hi2c;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	683a      	ldr	r2, [r7, #0]
 8000f4c:	601a      	str	r2, [r3, #0]
	sensor->address = MS580301_I2C_ADDRESS;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2276      	movs	r2, #118	; 0x76
 8000f52:	711a      	strb	r2, [r3, #4]
	MS580301_Reset(sensor);
 8000f54:	6878      	ldr	r0, [r7, #4]
 8000f56:	f000 f804 	bl	8000f62 <MS580301_Reset>
}
 8000f5a:	bf00      	nop
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <MS580301_Reset>:
	sensor->C6 = (float)coefficients[5];
}


void MS580301_Reset(MS580301* sensor)
{
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b082      	sub	sp, #8
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	6078      	str	r0, [r7, #4]
	MS580301_WriteCommand(sensor, 0x1E);
 8000f6a:	211e      	movs	r1, #30
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	f7ff ffa5 	bl	8000ebc <MS580301_WriteCommand>
	HAL_Delay(10);
 8000f72:	200a      	movs	r0, #10
 8000f74:	f000 fc86 	bl	8001884 <HAL_Delay>
}
 8000f78:	bf00      	nop
 8000f7a:	3708      	adds	r7, #8
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <MS580301_ReadSensorData>:



void MS580301_ReadSensorData(MS580301* sensor, uint32_t* pressure, uint32_t* temperature)
{
 8000f80:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000f84:	b08c      	sub	sp, #48	; 0x30
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	60f8      	str	r0, [r7, #12]
 8000f8a:	60b9      	str	r1, [r7, #8]
 8000f8c:	607a      	str	r2, [r7, #4]
	//read temperature
	MS580301_WriteCommand(sensor, 0x48);
 8000f8e:	2148      	movs	r1, #72	; 0x48
 8000f90:	68f8      	ldr	r0, [r7, #12]
 8000f92:	f7ff ff93 	bl	8000ebc <MS580301_WriteCommand>
	HAL_Delay(10);
 8000f96:	200a      	movs	r0, #10
 8000f98:	f000 fc74 	bl	8001884 <HAL_Delay>
	uint32_t rawTemperature = MS580301_ReadData(sensor, 0x00);
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	68f8      	ldr	r0, [r7, #12]
 8000fa0:	f7ff ffa2 	bl	8000ee8 <MS580301_ReadData>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	61fb      	str	r3, [r7, #28]

	// read pressure
	MS580301_WriteCommand(sensor, 0x58);
 8000fa8:	2158      	movs	r1, #88	; 0x58
 8000faa:	68f8      	ldr	r0, [r7, #12]
 8000fac:	f7ff ff86 	bl	8000ebc <MS580301_WriteCommand>
	HAL_Delay(10);
 8000fb0:	200a      	movs	r0, #10
 8000fb2:	f000 fc67 	bl	8001884 <HAL_Delay>
	uint32_t rawPressure = MS580301_ReadData(sensor, 0x00);
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	68f8      	ldr	r0, [r7, #12]
 8000fba:	f7ff ff95 	bl	8000ee8 <MS580301_ReadData>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	61bb      	str	r3, [r7, #24]




// Calculate compensated temperature and pressure
int32_t dT = (int32_t)rawTemperature - ((int32_t)sensor ->c [5] << 8);
 8000fc2:	69fa      	ldr	r2, [r7, #28]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	8a1b      	ldrh	r3, [r3, #16]
 8000fc8:	021b      	lsls	r3, r3, #8
 8000fca:	1ad3      	subs	r3, r2, r3
 8000fcc:	617b      	str	r3, [r7, #20]
int32_t offset1 = ((int32_t)sensor -> c[2] << 16) + ((int32_t) sensor -> c[4] * dT)  /128;
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	895b      	ldrh	r3, [r3, #10]
 8000fd2:	041a      	lsls	r2, r3, #16
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	89db      	ldrh	r3, [r3, #14]
 8000fd8:	4619      	mov	r1, r3
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	fb01 f303 	mul.w	r3, r1, r3
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	da00      	bge.n	8000fe6 <MS580301_ReadSensorData+0x66>
 8000fe4:	337f      	adds	r3, #127	; 0x7f
 8000fe6:	11db      	asrs	r3, r3, #7
 8000fe8:	4413      	add	r3, r2
 8000fea:	62fb      	str	r3, [r7, #44]	; 0x2c
int32_t sens = ((int32_t)sensor ->c[1] << 15) + ((int32_t)sensor -> c[3] * dT) / 256;
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	891b      	ldrh	r3, [r3, #8]
 8000ff0:	03da      	lsls	r2, r3, #15
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	899b      	ldrh	r3, [r3, #12]
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	fb01 f303 	mul.w	r3, r1, r3
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	da00      	bge.n	8001004 <MS580301_ReadSensorData+0x84>
 8001002:	33ff      	adds	r3, #255	; 0xff
 8001004:	121b      	asrs	r3, r3, #8
 8001006:	4413      	add	r3, r2
 8001008:	62bb      	str	r3, [r7, #40]	; 0x28
*temperature = 2000 + ((int32_t)dT * sensor ->c[6]) / 8388608;
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	8a5b      	ldrh	r3, [r3, #18]
 800100e:	461a      	mov	r2, r3
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	fb02 f303 	mul.w	r3, r2, r3
 8001016:	2b00      	cmp	r3, #0
 8001018:	da02      	bge.n	8001020 <MS580301_ReadSensorData+0xa0>
 800101a:	4a49      	ldr	r2, [pc, #292]	; (8001140 <MS580301_ReadSensorData+0x1c0>)
 800101c:	441a      	add	r2, r3
 800101e:	4613      	mov	r3, r2
 8001020:	15db      	asrs	r3, r3, #23
 8001022:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8001026:	461a      	mov	r2, r3
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	601a      	str	r2, [r3, #0]
int32_t t2 = 0;
 800102c:	2300      	movs	r3, #0
 800102e:	613b      	str	r3, [r7, #16]
int32_t offset2 = 0;
 8001030:	2300      	movs	r3, #0
 8001032:	627b      	str	r3, [r7, #36]	; 0x24
int32_t sens2 = 0;
 8001034:	2300      	movs	r3, #0
 8001036:	623b      	str	r3, [r7, #32]
if (*temperature < 2000)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001040:	d26e      	bcs.n	8001120 <MS580301_ReadSensorData+0x1a0>
	{
		t2 = (int32_t)dT * dT / 2147483648;
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	fb03 f303 	mul.w	r3, r3, r3
 8001048:	17da      	asrs	r2, r3, #31
 800104a:	4698      	mov	r8, r3
 800104c:	4691      	mov	r9, r2
 800104e:	4642      	mov	r2, r8
 8001050:	464b      	mov	r3, r9
 8001052:	2b00      	cmp	r3, #0
 8001054:	da06      	bge.n	8001064 <MS580301_ReadSensorData+0xe4>
 8001056:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800105a:	1854      	adds	r4, r2, r1
 800105c:	f143 0500 	adc.w	r5, r3, #0
 8001060:	4622      	mov	r2, r4
 8001062:	462b      	mov	r3, r5
 8001064:	f04f 0000 	mov.w	r0, #0
 8001068:	f04f 0100 	mov.w	r1, #0
 800106c:	0fd0      	lsrs	r0, r2, #31
 800106e:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8001072:	17d9      	asrs	r1, r3, #31
 8001074:	4602      	mov	r2, r0
 8001076:	460b      	mov	r3, r1
 8001078:	4613      	mov	r3, r2
 800107a:	613b      	str	r3, [r7, #16]
		offset2 = 5* ((*temperature -2000) * (*temperature - 2000)) / 2;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	4613      	mov	r3, r2
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	4413      	add	r3, r2
 8001086:	f5a3 531c 	sub.w	r3, r3, #9984	; 0x2700
 800108a:	3b10      	subs	r3, #16
 800108c:	687a      	ldr	r2, [r7, #4]
 800108e:	6812      	ldr	r2, [r2, #0]
 8001090:	f5a2 62fa 	sub.w	r2, r2, #2000	; 0x7d0
 8001094:	fb02 f303 	mul.w	r3, r2, r3
 8001098:	085b      	lsrs	r3, r3, #1
 800109a:	627b      	str	r3, [r7, #36]	; 0x24
		sens2 = 5 * ((*temperature - 2000) * (*temperature - 2000)) / 8;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	4613      	mov	r3, r2
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	4413      	add	r3, r2
 80010a6:	f5a3 531c 	sub.w	r3, r3, #9984	; 0x2700
 80010aa:	3b10      	subs	r3, #16
 80010ac:	687a      	ldr	r2, [r7, #4]
 80010ae:	6812      	ldr	r2, [r2, #0]
 80010b0:	f5a2 62fa 	sub.w	r2, r2, #2000	; 0x7d0
 80010b4:	fb02 f303 	mul.w	r3, r2, r3
 80010b8:	08db      	lsrs	r3, r3, #3
 80010ba:	623b      	str	r3, [r7, #32]
		if (*temperature < -1500)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a20      	ldr	r2, [pc, #128]	; (8001144 <MS580301_ReadSensorData+0x1c4>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d81e      	bhi.n	8001104 <MS580301_ReadSensorData+0x184>
		{
			offset2 = offset2 + 7 * ((*temperature + 1500) * (*temperature + 1500));
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	4613      	mov	r3, r2
 80010cc:	00db      	lsls	r3, r3, #3
 80010ce:	1a9b      	subs	r3, r3, r2
 80010d0:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 80010d4:	3304      	adds	r3, #4
 80010d6:	687a      	ldr	r2, [r7, #4]
 80010d8:	6812      	ldr	r2, [r2, #0]
 80010da:	f202 52dc 	addw	r2, r2, #1500	; 0x5dc
 80010de:	fb03 f202 	mul.w	r2, r3, r2
 80010e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e4:	4413      	add	r3, r2
 80010e6:	627b      	str	r3, [r7, #36]	; 0x24
			sens2 = sens2 + 4 * ((*temperature + 1500) * (*temperature + 1500));
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 80010f0:	687a      	ldr	r2, [r7, #4]
 80010f2:	6812      	ldr	r2, [r2, #0]
 80010f4:	f202 52dc 	addw	r2, r2, #1500	; 0x5dc
 80010f8:	fb02 f303 	mul.w	r3, r2, r3
 80010fc:	009a      	lsls	r2, r3, #2
 80010fe:	6a3b      	ldr	r3, [r7, #32]
 8001100:	4413      	add	r3, r2
 8001102:	623b      	str	r3, [r7, #32]
		}
		*temperature = *temperature - t2;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	1ad2      	subs	r2, r2, r3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	601a      	str	r2, [r3, #0]
		offset1 = offset1 - offset2;
 8001110:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	62fb      	str	r3, [r7, #44]	; 0x2c
		sens = sens - sens2;
 8001118:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800111a:	6a3b      	ldr	r3, [r7, #32]
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	62bb      	str	r3, [r7, #40]	; 0x28
	}
	*pressure = ((rawPressure * sens) / 2097152 - offset1) / 32768;
 8001120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	fb02 f303 	mul.w	r3, r2, r3
 8001128:	0d5a      	lsrs	r2, r3, #21
 800112a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800112c:	1ad3      	subs	r3, r2, r3
 800112e:	0bda      	lsrs	r2, r3, #15
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	601a      	str	r2, [r3, #0]
}
 8001134:	bf00      	nop
 8001136:	3730      	adds	r7, #48	; 0x30
 8001138:	46bd      	mov	sp, r7
 800113a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800113e:	bf00      	nop
 8001140:	007fffff 	.word	0x007fffff
 8001144:	fffffa23 	.word	0xfffffa23

08001148 <MS580301_CalculateAltitude>:


//Calculations

float MS580301_CalculateAltitude(MS580301* sensor, uint32_t pressure)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	6039      	str	r1, [r7, #0]
	float altitude = (1 - powf((float)pressure / MS580301_Sea_Level_Pressure, 0.1903f)) * 44330.0f;
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	ee07 3a90 	vmov	s15, r3
 8001158:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800115c:	4b0f      	ldr	r3, [pc, #60]	; (800119c <MS580301_CalculateAltitude+0x54>)
 800115e:	edd3 7a00 	vldr	s15, [r3]
 8001162:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001166:	eddf 0a0e 	vldr	s1, [pc, #56]	; 80011a0 <MS580301_CalculateAltitude+0x58>
 800116a:	eeb0 0a66 	vmov.f32	s0, s13
 800116e:	f00a fd43 	bl	800bbf8 <powf>
 8001172:	eef0 7a40 	vmov.f32	s15, s0
 8001176:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800117a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800117e:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80011a4 <MS580301_CalculateAltitude+0x5c>
 8001182:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001186:	edc7 7a03 	vstr	s15, [r7, #12]
	return altitude;
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	ee07 3a90 	vmov	s15, r3
}
 8001190:	eeb0 0a67 	vmov.f32	s0, s15
 8001194:	3710      	adds	r7, #16
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	20000000 	.word	0x20000000
 80011a0:	3e42de01 	.word	0x3e42de01
 80011a4:	472d2a00 	.word	0x472d2a00

080011a8 <main>:
static void MX_GPIO_Init(void);
static void MX_I2C1_Init(void);


int main(void)
{
 80011a8:	b5b0      	push	{r4, r5, r7, lr}
 80011aa:	b0a6      	sub	sp, #152	; 0x98
 80011ac:	af04      	add	r7, sp, #16

  HAL_Init();
 80011ae:	f000 faf7 	bl	80017a0 <HAL_Init>
  SystemClock_Config();
 80011b2:	f000 f84f 	bl	8001254 <SystemClock_Config>
  MX_GPIO_Init();
 80011b6:	f000 f8e5 	bl	8001384 <MX_GPIO_Init>
  MX_I2C1_Init();
 80011ba:	f000 f8b5 	bl	8001328 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 80011be:	f007 f8e1 	bl	8008384 <MX_USB_DEVICE_Init>

// Sensor config
  MS580301_Init(&ms5803, &hi2c1);
 80011c2:	491e      	ldr	r1, [pc, #120]	; (800123c <main+0x94>)
 80011c4:	481e      	ldr	r0, [pc, #120]	; (8001240 <main+0x98>)
 80011c6:	f7ff feba 	bl	8000f3e <MS580301_Init>
uint32_t timerLed;

  while (1)
  {

	  MS580301_ReadSensorData(&ms5803, &pressure, &temperature);
 80011ca:	4a1e      	ldr	r2, [pc, #120]	; (8001244 <main+0x9c>)
 80011cc:	491e      	ldr	r1, [pc, #120]	; (8001248 <main+0xa0>)
 80011ce:	481c      	ldr	r0, [pc, #112]	; (8001240 <main+0x98>)
 80011d0:	f7ff fed6 	bl	8000f80 <MS580301_ReadSensorData>
	  float altitude = MS580301_CalculateAltitude(&ms5803, pressure);
 80011d4:	4b1c      	ldr	r3, [pc, #112]	; (8001248 <main+0xa0>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4619      	mov	r1, r3
 80011da:	4819      	ldr	r0, [pc, #100]	; (8001240 <main+0x98>)
 80011dc:	f7ff ffb4 	bl	8001148 <MS580301_CalculateAltitude>
 80011e0:	ee07 0a90 	vmov	s15, r0
 80011e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011e8:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
	  char buffer[64];
	  snprintf(buffer, 64, "Pressure: %lu Pa, Temperature: %lu mdegc, Altitude: %.2f m\r\n", pressure, temperature, altitude);
 80011ec:	4b16      	ldr	r3, [pc, #88]	; (8001248 <main+0xa0>)
 80011ee:	681d      	ldr	r5, [r3, #0]
 80011f0:	4b14      	ldr	r3, [pc, #80]	; (8001244 <main+0x9c>)
 80011f2:	681c      	ldr	r4, [r3, #0]
 80011f4:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 80011f8:	f7ff f9ae 	bl	8000558 <__aeabi_f2d>
 80011fc:	4602      	mov	r2, r0
 80011fe:	460b      	mov	r3, r1
 8001200:	1d38      	adds	r0, r7, #4
 8001202:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001206:	9400      	str	r4, [sp, #0]
 8001208:	462b      	mov	r3, r5
 800120a:	4a10      	ldr	r2, [pc, #64]	; (800124c <main+0xa4>)
 800120c:	2140      	movs	r1, #64	; 0x40
 800120e:	f008 fa65 	bl	80096dc <sniprintf>
	  CDC_Transmit_FS((uint8_t*)buffer, strlen(buffer));
 8001212:	1d3b      	adds	r3, r7, #4
 8001214:	4618      	mov	r0, r3
 8001216:	f7fe ffe3 	bl	80001e0 <strlen>
 800121a:	4603      	mov	r3, r0
 800121c:	b29a      	uxth	r2, r3
 800121e:	1d3b      	adds	r3, r7, #4
 8001220:	4611      	mov	r1, r2
 8001222:	4618      	mov	r0, r3
 8001224:	f007 f96c 	bl	8008500 <CDC_Transmit_FS>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001228:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800122c:	4808      	ldr	r0, [pc, #32]	; (8001250 <main+0xa8>)
 800122e:	f000 fdfc 	bl	8001e2a <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8001232:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001236:	f000 fb25 	bl	8001884 <HAL_Delay>
  {
 800123a:	e7c6      	b.n	80011ca <main+0x22>
 800123c:	200002ec 	.word	0x200002ec
 8001240:	20000340 	.word	0x20000340
 8001244:	2000036c 	.word	0x2000036c
 8001248:	20000368 	.word	0x20000368
 800124c:	0800c3b8 	.word	0x0800c3b8
 8001250:	40020800 	.word	0x40020800

08001254 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b094      	sub	sp, #80	; 0x50
 8001258:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800125a:	f107 0320 	add.w	r3, r7, #32
 800125e:	2230      	movs	r2, #48	; 0x30
 8001260:	2100      	movs	r1, #0
 8001262:	4618      	mov	r0, r3
 8001264:	f007 fdc8 	bl	8008df8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001268:	f107 030c 	add.w	r3, r7, #12
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	605a      	str	r2, [r3, #4]
 8001272:	609a      	str	r2, [r3, #8]
 8001274:	60da      	str	r2, [r3, #12]
 8001276:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001278:	2300      	movs	r3, #0
 800127a:	60bb      	str	r3, [r7, #8]
 800127c:	4b28      	ldr	r3, [pc, #160]	; (8001320 <SystemClock_Config+0xcc>)
 800127e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001280:	4a27      	ldr	r2, [pc, #156]	; (8001320 <SystemClock_Config+0xcc>)
 8001282:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001286:	6413      	str	r3, [r2, #64]	; 0x40
 8001288:	4b25      	ldr	r3, [pc, #148]	; (8001320 <SystemClock_Config+0xcc>)
 800128a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001290:	60bb      	str	r3, [r7, #8]
 8001292:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001294:	2300      	movs	r3, #0
 8001296:	607b      	str	r3, [r7, #4]
 8001298:	4b22      	ldr	r3, [pc, #136]	; (8001324 <SystemClock_Config+0xd0>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a21      	ldr	r2, [pc, #132]	; (8001324 <SystemClock_Config+0xd0>)
 800129e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012a2:	6013      	str	r3, [r2, #0]
 80012a4:	4b1f      	ldr	r3, [pc, #124]	; (8001324 <SystemClock_Config+0xd0>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012ac:	607b      	str	r3, [r7, #4]
 80012ae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012b0:	2301      	movs	r3, #1
 80012b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012b8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012ba:	2302      	movs	r3, #2
 80012bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 80012c4:	230f      	movs	r3, #15
 80012c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 80012c8:	2390      	movs	r3, #144	; 0x90
 80012ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012cc:	2302      	movs	r3, #2
 80012ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80012d0:	2305      	movs	r3, #5
 80012d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012d4:	f107 0320 	add.w	r3, r7, #32
 80012d8:	4618      	mov	r0, r3
 80012da:	f002 ffd3 	bl	8004284 <HAL_RCC_OscConfig>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80012e4:	f000 f8ae 	bl	8001444 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012e8:	230f      	movs	r3, #15
 80012ea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80012ec:	2301      	movs	r3, #1
 80012ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012f0:	2300      	movs	r3, #0
 80012f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012f4:	2300      	movs	r3, #0
 80012f6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012f8:	2300      	movs	r3, #0
 80012fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012fc:	f107 030c 	add.w	r3, r7, #12
 8001300:	2100      	movs	r1, #0
 8001302:	4618      	mov	r0, r3
 8001304:	f003 fa36 	bl	8004774 <HAL_RCC_ClockConfig>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800130e:	f000 f899 	bl	8001444 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8001312:	f003 fb15 	bl	8004940 <HAL_RCC_EnableCSS>
}
 8001316:	bf00      	nop
 8001318:	3750      	adds	r7, #80	; 0x50
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	40023800 	.word	0x40023800
 8001324:	40007000 	.word	0x40007000

08001328 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800132c:	4b12      	ldr	r3, [pc, #72]	; (8001378 <MX_I2C1_Init+0x50>)
 800132e:	4a13      	ldr	r2, [pc, #76]	; (800137c <MX_I2C1_Init+0x54>)
 8001330:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001332:	4b11      	ldr	r3, [pc, #68]	; (8001378 <MX_I2C1_Init+0x50>)
 8001334:	4a12      	ldr	r2, [pc, #72]	; (8001380 <MX_I2C1_Init+0x58>)
 8001336:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001338:	4b0f      	ldr	r3, [pc, #60]	; (8001378 <MX_I2C1_Init+0x50>)
 800133a:	2200      	movs	r2, #0
 800133c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800133e:	4b0e      	ldr	r3, [pc, #56]	; (8001378 <MX_I2C1_Init+0x50>)
 8001340:	2200      	movs	r2, #0
 8001342:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001344:	4b0c      	ldr	r3, [pc, #48]	; (8001378 <MX_I2C1_Init+0x50>)
 8001346:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800134a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800134c:	4b0a      	ldr	r3, [pc, #40]	; (8001378 <MX_I2C1_Init+0x50>)
 800134e:	2200      	movs	r2, #0
 8001350:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001352:	4b09      	ldr	r3, [pc, #36]	; (8001378 <MX_I2C1_Init+0x50>)
 8001354:	2200      	movs	r2, #0
 8001356:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001358:	4b07      	ldr	r3, [pc, #28]	; (8001378 <MX_I2C1_Init+0x50>)
 800135a:	2200      	movs	r2, #0
 800135c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800135e:	4b06      	ldr	r3, [pc, #24]	; (8001378 <MX_I2C1_Init+0x50>)
 8001360:	2200      	movs	r2, #0
 8001362:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001364:	4804      	ldr	r0, [pc, #16]	; (8001378 <MX_I2C1_Init+0x50>)
 8001366:	f000 fd7b 	bl	8001e60 <HAL_I2C_Init>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001370:	f000 f868 	bl	8001444 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001374:	bf00      	nop
 8001376:	bd80      	pop	{r7, pc}
 8001378:	200002ec 	.word	0x200002ec
 800137c:	40005400 	.word	0x40005400
 8001380:	000186a0 	.word	0x000186a0

08001384 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b08a      	sub	sp, #40	; 0x28
 8001388:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800138a:	f107 0314 	add.w	r3, r7, #20
 800138e:	2200      	movs	r2, #0
 8001390:	601a      	str	r2, [r3, #0]
 8001392:	605a      	str	r2, [r3, #4]
 8001394:	609a      	str	r2, [r3, #8]
 8001396:	60da      	str	r2, [r3, #12]
 8001398:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800139a:	2300      	movs	r3, #0
 800139c:	613b      	str	r3, [r7, #16]
 800139e:	4b27      	ldr	r3, [pc, #156]	; (800143c <MX_GPIO_Init+0xb8>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a2:	4a26      	ldr	r2, [pc, #152]	; (800143c <MX_GPIO_Init+0xb8>)
 80013a4:	f043 0304 	orr.w	r3, r3, #4
 80013a8:	6313      	str	r3, [r2, #48]	; 0x30
 80013aa:	4b24      	ldr	r3, [pc, #144]	; (800143c <MX_GPIO_Init+0xb8>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ae:	f003 0304 	and.w	r3, r3, #4
 80013b2:	613b      	str	r3, [r7, #16]
 80013b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	60fb      	str	r3, [r7, #12]
 80013ba:	4b20      	ldr	r3, [pc, #128]	; (800143c <MX_GPIO_Init+0xb8>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	4a1f      	ldr	r2, [pc, #124]	; (800143c <MX_GPIO_Init+0xb8>)
 80013c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013c4:	6313      	str	r3, [r2, #48]	; 0x30
 80013c6:	4b1d      	ldr	r3, [pc, #116]	; (800143c <MX_GPIO_Init+0xb8>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013ce:	60fb      	str	r3, [r7, #12]
 80013d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	60bb      	str	r3, [r7, #8]
 80013d6:	4b19      	ldr	r3, [pc, #100]	; (800143c <MX_GPIO_Init+0xb8>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	4a18      	ldr	r2, [pc, #96]	; (800143c <MX_GPIO_Init+0xb8>)
 80013dc:	f043 0301 	orr.w	r3, r3, #1
 80013e0:	6313      	str	r3, [r2, #48]	; 0x30
 80013e2:	4b16      	ldr	r3, [pc, #88]	; (800143c <MX_GPIO_Init+0xb8>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	f003 0301 	and.w	r3, r3, #1
 80013ea:	60bb      	str	r3, [r7, #8]
 80013ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	607b      	str	r3, [r7, #4]
 80013f2:	4b12      	ldr	r3, [pc, #72]	; (800143c <MX_GPIO_Init+0xb8>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	4a11      	ldr	r2, [pc, #68]	; (800143c <MX_GPIO_Init+0xb8>)
 80013f8:	f043 0302 	orr.w	r3, r3, #2
 80013fc:	6313      	str	r3, [r2, #48]	; 0x30
 80013fe:	4b0f      	ldr	r3, [pc, #60]	; (800143c <MX_GPIO_Init+0xb8>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	f003 0302 	and.w	r3, r3, #2
 8001406:	607b      	str	r3, [r7, #4]
 8001408:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800140a:	2200      	movs	r2, #0
 800140c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001410:	480b      	ldr	r0, [pc, #44]	; (8001440 <MX_GPIO_Init+0xbc>)
 8001412:	f000 fcf1 	bl	8001df8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001416:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800141a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800141c:	2301      	movs	r3, #1
 800141e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001420:	2300      	movs	r3, #0
 8001422:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001424:	2300      	movs	r3, #0
 8001426:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001428:	f107 0314 	add.w	r3, r7, #20
 800142c:	4619      	mov	r1, r3
 800142e:	4804      	ldr	r0, [pc, #16]	; (8001440 <MX_GPIO_Init+0xbc>)
 8001430:	f000 fb5e 	bl	8001af0 <HAL_GPIO_Init>

}
 8001434:	bf00      	nop
 8001436:	3728      	adds	r7, #40	; 0x28
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	40023800 	.word	0x40023800
 8001440:	40020800 	.word	0x40020800

08001444 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001448:	b672      	cpsid	i
}
 800144a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800144c:	e7fe      	b.n	800144c <Error_Handler+0x8>
	...

08001450 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001456:	2300      	movs	r3, #0
 8001458:	607b      	str	r3, [r7, #4]
 800145a:	4b10      	ldr	r3, [pc, #64]	; (800149c <HAL_MspInit+0x4c>)
 800145c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800145e:	4a0f      	ldr	r2, [pc, #60]	; (800149c <HAL_MspInit+0x4c>)
 8001460:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001464:	6453      	str	r3, [r2, #68]	; 0x44
 8001466:	4b0d      	ldr	r3, [pc, #52]	; (800149c <HAL_MspInit+0x4c>)
 8001468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800146e:	607b      	str	r3, [r7, #4]
 8001470:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	603b      	str	r3, [r7, #0]
 8001476:	4b09      	ldr	r3, [pc, #36]	; (800149c <HAL_MspInit+0x4c>)
 8001478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147a:	4a08      	ldr	r2, [pc, #32]	; (800149c <HAL_MspInit+0x4c>)
 800147c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001480:	6413      	str	r3, [r2, #64]	; 0x40
 8001482:	4b06      	ldr	r3, [pc, #24]	; (800149c <HAL_MspInit+0x4c>)
 8001484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800148a:	603b      	str	r3, [r7, #0]
 800148c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800148e:	bf00      	nop
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	40023800 	.word	0x40023800

080014a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b08a      	sub	sp, #40	; 0x28
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a8:	f107 0314 	add.w	r3, r7, #20
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	605a      	str	r2, [r3, #4]
 80014b2:	609a      	str	r2, [r3, #8]
 80014b4:	60da      	str	r2, [r3, #12]
 80014b6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a19      	ldr	r2, [pc, #100]	; (8001524 <HAL_I2C_MspInit+0x84>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d12b      	bne.n	800151a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	613b      	str	r3, [r7, #16]
 80014c6:	4b18      	ldr	r3, [pc, #96]	; (8001528 <HAL_I2C_MspInit+0x88>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	4a17      	ldr	r2, [pc, #92]	; (8001528 <HAL_I2C_MspInit+0x88>)
 80014cc:	f043 0302 	orr.w	r3, r3, #2
 80014d0:	6313      	str	r3, [r2, #48]	; 0x30
 80014d2:	4b15      	ldr	r3, [pc, #84]	; (8001528 <HAL_I2C_MspInit+0x88>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	f003 0302 	and.w	r3, r3, #2
 80014da:	613b      	str	r3, [r7, #16]
 80014dc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80014de:	23c0      	movs	r3, #192	; 0xc0
 80014e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014e2:	2312      	movs	r3, #18
 80014e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e6:	2300      	movs	r3, #0
 80014e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ea:	2303      	movs	r3, #3
 80014ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014ee:	2304      	movs	r3, #4
 80014f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f2:	f107 0314 	add.w	r3, r7, #20
 80014f6:	4619      	mov	r1, r3
 80014f8:	480c      	ldr	r0, [pc, #48]	; (800152c <HAL_I2C_MspInit+0x8c>)
 80014fa:	f000 faf9 	bl	8001af0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	60fb      	str	r3, [r7, #12]
 8001502:	4b09      	ldr	r3, [pc, #36]	; (8001528 <HAL_I2C_MspInit+0x88>)
 8001504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001506:	4a08      	ldr	r2, [pc, #32]	; (8001528 <HAL_I2C_MspInit+0x88>)
 8001508:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800150c:	6413      	str	r3, [r2, #64]	; 0x40
 800150e:	4b06      	ldr	r3, [pc, #24]	; (8001528 <HAL_I2C_MspInit+0x88>)
 8001510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001512:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001516:	60fb      	str	r3, [r7, #12]
 8001518:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800151a:	bf00      	nop
 800151c:	3728      	adds	r7, #40	; 0x28
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	40005400 	.word	0x40005400
 8001528:	40023800 	.word	0x40023800
 800152c:	40020400 	.word	0x40020400

08001530 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001534:	f003 faf6 	bl	8004b24 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001538:	e7fe      	b.n	8001538 <NMI_Handler+0x8>

0800153a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800153a:	b480      	push	{r7}
 800153c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800153e:	e7fe      	b.n	800153e <HardFault_Handler+0x4>

08001540 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001544:	e7fe      	b.n	8001544 <MemManage_Handler+0x4>

08001546 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001546:	b480      	push	{r7}
 8001548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800154a:	e7fe      	b.n	800154a <BusFault_Handler+0x4>

0800154c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001550:	e7fe      	b.n	8001550 <UsageFault_Handler+0x4>

08001552 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001552:	b480      	push	{r7}
 8001554:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001556:	bf00      	nop
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001564:	bf00      	nop
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr

0800156e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800156e:	b480      	push	{r7}
 8001570:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001572:	bf00      	nop
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr

0800157c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001580:	f000 f960 	bl	8001844 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001584:	bf00      	nop
 8001586:	bd80      	pop	{r7, pc}

08001588 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800158c:	4802      	ldr	r0, [pc, #8]	; (8001598 <OTG_FS_IRQHandler+0x10>)
 800158e:	f001 fd4c 	bl	800302a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001592:	bf00      	nop
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	20001858 	.word	0x20001858

0800159c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  return 1;
 80015a0:	2301      	movs	r3, #1
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr

080015ac <_kill>:

int _kill(int pid, int sig)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80015b6:	f007 fbf5 	bl	8008da4 <__errno>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2216      	movs	r2, #22
 80015be:	601a      	str	r2, [r3, #0]
  return -1;
 80015c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3708      	adds	r7, #8
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}

080015cc <_exit>:

void _exit (int status)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80015d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f7ff ffe7 	bl	80015ac <_kill>
  while (1) {}    /* Make sure we hang here */
 80015de:	e7fe      	b.n	80015de <_exit+0x12>

080015e0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b086      	sub	sp, #24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	60f8      	str	r0, [r7, #12]
 80015e8:	60b9      	str	r1, [r7, #8]
 80015ea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ec:	2300      	movs	r3, #0
 80015ee:	617b      	str	r3, [r7, #20]
 80015f0:	e00a      	b.n	8001608 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80015f2:	f3af 8000 	nop.w
 80015f6:	4601      	mov	r1, r0
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	1c5a      	adds	r2, r3, #1
 80015fc:	60ba      	str	r2, [r7, #8]
 80015fe:	b2ca      	uxtb	r2, r1
 8001600:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	3301      	adds	r3, #1
 8001606:	617b      	str	r3, [r7, #20]
 8001608:	697a      	ldr	r2, [r7, #20]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	429a      	cmp	r2, r3
 800160e:	dbf0      	blt.n	80015f2 <_read+0x12>
  }

  return len;
 8001610:	687b      	ldr	r3, [r7, #4]
}
 8001612:	4618      	mov	r0, r3
 8001614:	3718      	adds	r7, #24
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}

0800161a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800161a:	b580      	push	{r7, lr}
 800161c:	b086      	sub	sp, #24
 800161e:	af00      	add	r7, sp, #0
 8001620:	60f8      	str	r0, [r7, #12]
 8001622:	60b9      	str	r1, [r7, #8]
 8001624:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001626:	2300      	movs	r3, #0
 8001628:	617b      	str	r3, [r7, #20]
 800162a:	e009      	b.n	8001640 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	1c5a      	adds	r2, r3, #1
 8001630:	60ba      	str	r2, [r7, #8]
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	4618      	mov	r0, r3
 8001636:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	3301      	adds	r3, #1
 800163e:	617b      	str	r3, [r7, #20]
 8001640:	697a      	ldr	r2, [r7, #20]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	429a      	cmp	r2, r3
 8001646:	dbf1      	blt.n	800162c <_write+0x12>
  }
  return len;
 8001648:	687b      	ldr	r3, [r7, #4]
}
 800164a:	4618      	mov	r0, r3
 800164c:	3718      	adds	r7, #24
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}

08001652 <_close>:

int _close(int file)
{
 8001652:	b480      	push	{r7}
 8001654:	b083      	sub	sp, #12
 8001656:	af00      	add	r7, sp, #0
 8001658:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800165a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800165e:	4618      	mov	r0, r3
 8001660:	370c      	adds	r7, #12
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr

0800166a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800166a:	b480      	push	{r7}
 800166c:	b083      	sub	sp, #12
 800166e:	af00      	add	r7, sp, #0
 8001670:	6078      	str	r0, [r7, #4]
 8001672:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800167a:	605a      	str	r2, [r3, #4]
  return 0;
 800167c:	2300      	movs	r3, #0
}
 800167e:	4618      	mov	r0, r3
 8001680:	370c      	adds	r7, #12
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr

0800168a <_isatty>:

int _isatty(int file)
{
 800168a:	b480      	push	{r7}
 800168c:	b083      	sub	sp, #12
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001692:	2301      	movs	r3, #1
}
 8001694:	4618      	mov	r0, r3
 8001696:	370c      	adds	r7, #12
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b085      	sub	sp, #20
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	60f8      	str	r0, [r7, #12]
 80016a8:	60b9      	str	r1, [r7, #8]
 80016aa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80016ac:	2300      	movs	r3, #0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3714      	adds	r7, #20
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
	...

080016bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b086      	sub	sp, #24
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016c4:	4a14      	ldr	r2, [pc, #80]	; (8001718 <_sbrk+0x5c>)
 80016c6:	4b15      	ldr	r3, [pc, #84]	; (800171c <_sbrk+0x60>)
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016d0:	4b13      	ldr	r3, [pc, #76]	; (8001720 <_sbrk+0x64>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d102      	bne.n	80016de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016d8:	4b11      	ldr	r3, [pc, #68]	; (8001720 <_sbrk+0x64>)
 80016da:	4a12      	ldr	r2, [pc, #72]	; (8001724 <_sbrk+0x68>)
 80016dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016de:	4b10      	ldr	r3, [pc, #64]	; (8001720 <_sbrk+0x64>)
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4413      	add	r3, r2
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d207      	bcs.n	80016fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016ec:	f007 fb5a 	bl	8008da4 <__errno>
 80016f0:	4603      	mov	r3, r0
 80016f2:	220c      	movs	r2, #12
 80016f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016fa:	e009      	b.n	8001710 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016fc:	4b08      	ldr	r3, [pc, #32]	; (8001720 <_sbrk+0x64>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001702:	4b07      	ldr	r3, [pc, #28]	; (8001720 <_sbrk+0x64>)
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4413      	add	r3, r2
 800170a:	4a05      	ldr	r2, [pc, #20]	; (8001720 <_sbrk+0x64>)
 800170c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800170e:	68fb      	ldr	r3, [r7, #12]
}
 8001710:	4618      	mov	r0, r3
 8001712:	3718      	adds	r7, #24
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	20020000 	.word	0x20020000
 800171c:	00000400 	.word	0x00000400
 8001720:	20000370 	.word	0x20000370
 8001724:	20001f98 	.word	0x20001f98

08001728 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800172c:	4b06      	ldr	r3, [pc, #24]	; (8001748 <SystemInit+0x20>)
 800172e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001732:	4a05      	ldr	r2, [pc, #20]	; (8001748 <SystemInit+0x20>)
 8001734:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001738:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800173c:	bf00      	nop
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	e000ed00 	.word	0xe000ed00

0800174c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800174c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001784 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001750:	480d      	ldr	r0, [pc, #52]	; (8001788 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001752:	490e      	ldr	r1, [pc, #56]	; (800178c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001754:	4a0e      	ldr	r2, [pc, #56]	; (8001790 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001756:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001758:	e002      	b.n	8001760 <LoopCopyDataInit>

0800175a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800175a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800175c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800175e:	3304      	adds	r3, #4

08001760 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001760:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001762:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001764:	d3f9      	bcc.n	800175a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001766:	4a0b      	ldr	r2, [pc, #44]	; (8001794 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001768:	4c0b      	ldr	r4, [pc, #44]	; (8001798 <LoopFillZerobss+0x26>)
  movs r3, #0
 800176a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800176c:	e001      	b.n	8001772 <LoopFillZerobss>

0800176e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800176e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001770:	3204      	adds	r2, #4

08001772 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001772:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001774:	d3fb      	bcc.n	800176e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001776:	f7ff ffd7 	bl	8001728 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800177a:	f007 fb19 	bl	8008db0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800177e:	f7ff fd13 	bl	80011a8 <main>
  bx  lr    
 8001782:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001784:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001788:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800178c:	200002d0 	.word	0x200002d0
  ldr r2, =_sidata
 8001790:	0800c85c 	.word	0x0800c85c
  ldr r2, =_sbss
 8001794:	200002d0 	.word	0x200002d0
  ldr r4, =_ebss
 8001798:	20001f94 	.word	0x20001f94

0800179c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800179c:	e7fe      	b.n	800179c <ADC_IRQHandler>
	...

080017a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017a4:	4b0e      	ldr	r3, [pc, #56]	; (80017e0 <HAL_Init+0x40>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a0d      	ldr	r2, [pc, #52]	; (80017e0 <HAL_Init+0x40>)
 80017aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017b0:	4b0b      	ldr	r3, [pc, #44]	; (80017e0 <HAL_Init+0x40>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a0a      	ldr	r2, [pc, #40]	; (80017e0 <HAL_Init+0x40>)
 80017b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017bc:	4b08      	ldr	r3, [pc, #32]	; (80017e0 <HAL_Init+0x40>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a07      	ldr	r2, [pc, #28]	; (80017e0 <HAL_Init+0x40>)
 80017c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017c8:	2003      	movs	r0, #3
 80017ca:	f000 f94f 	bl	8001a6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017ce:	200f      	movs	r0, #15
 80017d0:	f000 f808 	bl	80017e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017d4:	f7ff fe3c 	bl	8001450 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017d8:	2300      	movs	r3, #0
}
 80017da:	4618      	mov	r0, r3
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	40023c00 	.word	0x40023c00

080017e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017ec:	4b12      	ldr	r3, [pc, #72]	; (8001838 <HAL_InitTick+0x54>)
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	4b12      	ldr	r3, [pc, #72]	; (800183c <HAL_InitTick+0x58>)
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	4619      	mov	r1, r3
 80017f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80017fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001802:	4618      	mov	r0, r3
 8001804:	f000 f967 	bl	8001ad6 <HAL_SYSTICK_Config>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e00e      	b.n	8001830 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2b0f      	cmp	r3, #15
 8001816:	d80a      	bhi.n	800182e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001818:	2200      	movs	r2, #0
 800181a:	6879      	ldr	r1, [r7, #4]
 800181c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001820:	f000 f92f 	bl	8001a82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001824:	4a06      	ldr	r2, [pc, #24]	; (8001840 <HAL_InitTick+0x5c>)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800182a:	2300      	movs	r3, #0
 800182c:	e000      	b.n	8001830 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
}
 8001830:	4618      	mov	r0, r3
 8001832:	3708      	adds	r7, #8
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	20000004 	.word	0x20000004
 800183c:	2000000c 	.word	0x2000000c
 8001840:	20000008 	.word	0x20000008

08001844 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001848:	4b06      	ldr	r3, [pc, #24]	; (8001864 <HAL_IncTick+0x20>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	461a      	mov	r2, r3
 800184e:	4b06      	ldr	r3, [pc, #24]	; (8001868 <HAL_IncTick+0x24>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4413      	add	r3, r2
 8001854:	4a04      	ldr	r2, [pc, #16]	; (8001868 <HAL_IncTick+0x24>)
 8001856:	6013      	str	r3, [r2, #0]
}
 8001858:	bf00      	nop
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	2000000c 	.word	0x2000000c
 8001868:	20000374 	.word	0x20000374

0800186c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  return uwTick;
 8001870:	4b03      	ldr	r3, [pc, #12]	; (8001880 <HAL_GetTick+0x14>)
 8001872:	681b      	ldr	r3, [r3, #0]
}
 8001874:	4618      	mov	r0, r3
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	20000374 	.word	0x20000374

08001884 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b084      	sub	sp, #16
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800188c:	f7ff ffee 	bl	800186c <HAL_GetTick>
 8001890:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800189c:	d005      	beq.n	80018aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800189e:	4b0a      	ldr	r3, [pc, #40]	; (80018c8 <HAL_Delay+0x44>)
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	461a      	mov	r2, r3
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	4413      	add	r3, r2
 80018a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018aa:	bf00      	nop
 80018ac:	f7ff ffde 	bl	800186c <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	68fa      	ldr	r2, [r7, #12]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d8f7      	bhi.n	80018ac <HAL_Delay+0x28>
  {
  }
}
 80018bc:	bf00      	nop
 80018be:	bf00      	nop
 80018c0:	3710      	adds	r7, #16
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	2000000c 	.word	0x2000000c

080018cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b085      	sub	sp, #20
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	f003 0307 	and.w	r3, r3, #7
 80018da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018dc:	4b0c      	ldr	r3, [pc, #48]	; (8001910 <__NVIC_SetPriorityGrouping+0x44>)
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018e2:	68ba      	ldr	r2, [r7, #8]
 80018e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018e8:	4013      	ands	r3, r2
 80018ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018fe:	4a04      	ldr	r2, [pc, #16]	; (8001910 <__NVIC_SetPriorityGrouping+0x44>)
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	60d3      	str	r3, [r2, #12]
}
 8001904:	bf00      	nop
 8001906:	3714      	adds	r7, #20
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr
 8001910:	e000ed00 	.word	0xe000ed00

08001914 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001918:	4b04      	ldr	r3, [pc, #16]	; (800192c <__NVIC_GetPriorityGrouping+0x18>)
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	0a1b      	lsrs	r3, r3, #8
 800191e:	f003 0307 	and.w	r3, r3, #7
}
 8001922:	4618      	mov	r0, r3
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr
 800192c:	e000ed00 	.word	0xe000ed00

08001930 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	4603      	mov	r3, r0
 8001938:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800193a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193e:	2b00      	cmp	r3, #0
 8001940:	db0b      	blt.n	800195a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001942:	79fb      	ldrb	r3, [r7, #7]
 8001944:	f003 021f 	and.w	r2, r3, #31
 8001948:	4907      	ldr	r1, [pc, #28]	; (8001968 <__NVIC_EnableIRQ+0x38>)
 800194a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800194e:	095b      	lsrs	r3, r3, #5
 8001950:	2001      	movs	r0, #1
 8001952:	fa00 f202 	lsl.w	r2, r0, r2
 8001956:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800195a:	bf00      	nop
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	e000e100 	.word	0xe000e100

0800196c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	4603      	mov	r3, r0
 8001974:	6039      	str	r1, [r7, #0]
 8001976:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001978:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197c:	2b00      	cmp	r3, #0
 800197e:	db0a      	blt.n	8001996 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	b2da      	uxtb	r2, r3
 8001984:	490c      	ldr	r1, [pc, #48]	; (80019b8 <__NVIC_SetPriority+0x4c>)
 8001986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198a:	0112      	lsls	r2, r2, #4
 800198c:	b2d2      	uxtb	r2, r2
 800198e:	440b      	add	r3, r1
 8001990:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001994:	e00a      	b.n	80019ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	b2da      	uxtb	r2, r3
 800199a:	4908      	ldr	r1, [pc, #32]	; (80019bc <__NVIC_SetPriority+0x50>)
 800199c:	79fb      	ldrb	r3, [r7, #7]
 800199e:	f003 030f 	and.w	r3, r3, #15
 80019a2:	3b04      	subs	r3, #4
 80019a4:	0112      	lsls	r2, r2, #4
 80019a6:	b2d2      	uxtb	r2, r2
 80019a8:	440b      	add	r3, r1
 80019aa:	761a      	strb	r2, [r3, #24]
}
 80019ac:	bf00      	nop
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr
 80019b8:	e000e100 	.word	0xe000e100
 80019bc:	e000ed00 	.word	0xe000ed00

080019c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b089      	sub	sp, #36	; 0x24
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	60b9      	str	r1, [r7, #8]
 80019ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	f003 0307 	and.w	r3, r3, #7
 80019d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	f1c3 0307 	rsb	r3, r3, #7
 80019da:	2b04      	cmp	r3, #4
 80019dc:	bf28      	it	cs
 80019de:	2304      	movcs	r3, #4
 80019e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	3304      	adds	r3, #4
 80019e6:	2b06      	cmp	r3, #6
 80019e8:	d902      	bls.n	80019f0 <NVIC_EncodePriority+0x30>
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	3b03      	subs	r3, #3
 80019ee:	e000      	b.n	80019f2 <NVIC_EncodePriority+0x32>
 80019f0:	2300      	movs	r3, #0
 80019f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80019f8:	69bb      	ldr	r3, [r7, #24]
 80019fa:	fa02 f303 	lsl.w	r3, r2, r3
 80019fe:	43da      	mvns	r2, r3
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	401a      	ands	r2, r3
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a08:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a12:	43d9      	mvns	r1, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a18:	4313      	orrs	r3, r2
         );
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3724      	adds	r7, #36	; 0x24
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
	...

08001a28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	3b01      	subs	r3, #1
 8001a34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a38:	d301      	bcc.n	8001a3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e00f      	b.n	8001a5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a3e:	4a0a      	ldr	r2, [pc, #40]	; (8001a68 <SysTick_Config+0x40>)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	3b01      	subs	r3, #1
 8001a44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a46:	210f      	movs	r1, #15
 8001a48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a4c:	f7ff ff8e 	bl	800196c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a50:	4b05      	ldr	r3, [pc, #20]	; (8001a68 <SysTick_Config+0x40>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a56:	4b04      	ldr	r3, [pc, #16]	; (8001a68 <SysTick_Config+0x40>)
 8001a58:	2207      	movs	r2, #7
 8001a5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a5c:	2300      	movs	r3, #0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3708      	adds	r7, #8
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	e000e010 	.word	0xe000e010

08001a6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	f7ff ff29 	bl	80018cc <__NVIC_SetPriorityGrouping>
}
 8001a7a:	bf00      	nop
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}

08001a82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a82:	b580      	push	{r7, lr}
 8001a84:	b086      	sub	sp, #24
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	4603      	mov	r3, r0
 8001a8a:	60b9      	str	r1, [r7, #8]
 8001a8c:	607a      	str	r2, [r7, #4]
 8001a8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a90:	2300      	movs	r3, #0
 8001a92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a94:	f7ff ff3e 	bl	8001914 <__NVIC_GetPriorityGrouping>
 8001a98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	68b9      	ldr	r1, [r7, #8]
 8001a9e:	6978      	ldr	r0, [r7, #20]
 8001aa0:	f7ff ff8e 	bl	80019c0 <NVIC_EncodePriority>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aaa:	4611      	mov	r1, r2
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7ff ff5d 	bl	800196c <__NVIC_SetPriority>
}
 8001ab2:	bf00      	nop
 8001ab4:	3718      	adds	r7, #24
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b082      	sub	sp, #8
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ac4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7ff ff31 	bl	8001930 <__NVIC_EnableIRQ>
}
 8001ace:	bf00      	nop
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	b082      	sub	sp, #8
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f7ff ffa2 	bl	8001a28 <SysTick_Config>
 8001ae4:	4603      	mov	r3, r0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
	...

08001af0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b089      	sub	sp, #36	; 0x24
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001afa:	2300      	movs	r3, #0
 8001afc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001afe:	2300      	movs	r3, #0
 8001b00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b02:	2300      	movs	r3, #0
 8001b04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b06:	2300      	movs	r3, #0
 8001b08:	61fb      	str	r3, [r7, #28]
 8001b0a:	e159      	b.n	8001dc0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	fa02 f303 	lsl.w	r3, r2, r3
 8001b14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	697a      	ldr	r2, [r7, #20]
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b20:	693a      	ldr	r2, [r7, #16]
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	f040 8148 	bne.w	8001dba <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f003 0303 	and.w	r3, r3, #3
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d005      	beq.n	8001b42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d130      	bne.n	8001ba4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	005b      	lsls	r3, r3, #1
 8001b4c:	2203      	movs	r2, #3
 8001b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b52:	43db      	mvns	r3, r3
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	4013      	ands	r3, r2
 8001b58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	68da      	ldr	r2, [r3, #12]
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	fa02 f303 	lsl.w	r3, r2, r3
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	69ba      	ldr	r2, [r7, #24]
 8001b70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b78:	2201      	movs	r2, #1
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	43db      	mvns	r3, r3
 8001b82:	69ba      	ldr	r2, [r7, #24]
 8001b84:	4013      	ands	r3, r2
 8001b86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	091b      	lsrs	r3, r3, #4
 8001b8e:	f003 0201 	and.w	r2, r3, #1
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f003 0303 	and.w	r3, r3, #3
 8001bac:	2b03      	cmp	r3, #3
 8001bae:	d017      	beq.n	8001be0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	005b      	lsls	r3, r3, #1
 8001bba:	2203      	movs	r2, #3
 8001bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc0:	43db      	mvns	r3, r3
 8001bc2:	69ba      	ldr	r2, [r7, #24]
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	689a      	ldr	r2, [r3, #8]
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f003 0303 	and.w	r3, r3, #3
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d123      	bne.n	8001c34 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	08da      	lsrs	r2, r3, #3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	3208      	adds	r2, #8
 8001bf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	f003 0307 	and.w	r3, r3, #7
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	220f      	movs	r2, #15
 8001c04:	fa02 f303 	lsl.w	r3, r2, r3
 8001c08:	43db      	mvns	r3, r3
 8001c0a:	69ba      	ldr	r2, [r7, #24]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	691a      	ldr	r2, [r3, #16]
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	f003 0307 	and.w	r3, r3, #7
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	08da      	lsrs	r2, r3, #3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	3208      	adds	r2, #8
 8001c2e:	69b9      	ldr	r1, [r7, #24]
 8001c30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	2203      	movs	r2, #3
 8001c40:	fa02 f303 	lsl.w	r3, r2, r3
 8001c44:	43db      	mvns	r3, r3
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f003 0203 	and.w	r2, r3, #3
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	005b      	lsls	r3, r3, #1
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	f000 80a2 	beq.w	8001dba <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c76:	2300      	movs	r3, #0
 8001c78:	60fb      	str	r3, [r7, #12]
 8001c7a:	4b57      	ldr	r3, [pc, #348]	; (8001dd8 <HAL_GPIO_Init+0x2e8>)
 8001c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c7e:	4a56      	ldr	r2, [pc, #344]	; (8001dd8 <HAL_GPIO_Init+0x2e8>)
 8001c80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c84:	6453      	str	r3, [r2, #68]	; 0x44
 8001c86:	4b54      	ldr	r3, [pc, #336]	; (8001dd8 <HAL_GPIO_Init+0x2e8>)
 8001c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c8e:	60fb      	str	r3, [r7, #12]
 8001c90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c92:	4a52      	ldr	r2, [pc, #328]	; (8001ddc <HAL_GPIO_Init+0x2ec>)
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	089b      	lsrs	r3, r3, #2
 8001c98:	3302      	adds	r3, #2
 8001c9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	f003 0303 	and.w	r3, r3, #3
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	220f      	movs	r2, #15
 8001caa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cae:	43db      	mvns	r3, r3
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4a49      	ldr	r2, [pc, #292]	; (8001de0 <HAL_GPIO_Init+0x2f0>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d019      	beq.n	8001cf2 <HAL_GPIO_Init+0x202>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4a48      	ldr	r2, [pc, #288]	; (8001de4 <HAL_GPIO_Init+0x2f4>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d013      	beq.n	8001cee <HAL_GPIO_Init+0x1fe>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4a47      	ldr	r2, [pc, #284]	; (8001de8 <HAL_GPIO_Init+0x2f8>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d00d      	beq.n	8001cea <HAL_GPIO_Init+0x1fa>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a46      	ldr	r2, [pc, #280]	; (8001dec <HAL_GPIO_Init+0x2fc>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d007      	beq.n	8001ce6 <HAL_GPIO_Init+0x1f6>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4a45      	ldr	r2, [pc, #276]	; (8001df0 <HAL_GPIO_Init+0x300>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d101      	bne.n	8001ce2 <HAL_GPIO_Init+0x1f2>
 8001cde:	2304      	movs	r3, #4
 8001ce0:	e008      	b.n	8001cf4 <HAL_GPIO_Init+0x204>
 8001ce2:	2307      	movs	r3, #7
 8001ce4:	e006      	b.n	8001cf4 <HAL_GPIO_Init+0x204>
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e004      	b.n	8001cf4 <HAL_GPIO_Init+0x204>
 8001cea:	2302      	movs	r3, #2
 8001cec:	e002      	b.n	8001cf4 <HAL_GPIO_Init+0x204>
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e000      	b.n	8001cf4 <HAL_GPIO_Init+0x204>
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	69fa      	ldr	r2, [r7, #28]
 8001cf6:	f002 0203 	and.w	r2, r2, #3
 8001cfa:	0092      	lsls	r2, r2, #2
 8001cfc:	4093      	lsls	r3, r2
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d04:	4935      	ldr	r1, [pc, #212]	; (8001ddc <HAL_GPIO_Init+0x2ec>)
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	089b      	lsrs	r3, r3, #2
 8001d0a:	3302      	adds	r3, #2
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d12:	4b38      	ldr	r3, [pc, #224]	; (8001df4 <HAL_GPIO_Init+0x304>)
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	43db      	mvns	r3, r3
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	4013      	ands	r3, r2
 8001d20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d003      	beq.n	8001d36 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001d2e:	69ba      	ldr	r2, [r7, #24]
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d36:	4a2f      	ldr	r2, [pc, #188]	; (8001df4 <HAL_GPIO_Init+0x304>)
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d3c:	4b2d      	ldr	r3, [pc, #180]	; (8001df4 <HAL_GPIO_Init+0x304>)
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	43db      	mvns	r3, r3
 8001d46:	69ba      	ldr	r2, [r7, #24]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d003      	beq.n	8001d60 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d60:	4a24      	ldr	r2, [pc, #144]	; (8001df4 <HAL_GPIO_Init+0x304>)
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d66:	4b23      	ldr	r3, [pc, #140]	; (8001df4 <HAL_GPIO_Init+0x304>)
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	43db      	mvns	r3, r3
 8001d70:	69ba      	ldr	r2, [r7, #24]
 8001d72:	4013      	ands	r3, r2
 8001d74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d003      	beq.n	8001d8a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001d82:	69ba      	ldr	r2, [r7, #24]
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d8a:	4a1a      	ldr	r2, [pc, #104]	; (8001df4 <HAL_GPIO_Init+0x304>)
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d90:	4b18      	ldr	r3, [pc, #96]	; (8001df4 <HAL_GPIO_Init+0x304>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	43db      	mvns	r3, r3
 8001d9a:	69ba      	ldr	r2, [r7, #24]
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d003      	beq.n	8001db4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001dac:	69ba      	ldr	r2, [r7, #24]
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001db4:	4a0f      	ldr	r2, [pc, #60]	; (8001df4 <HAL_GPIO_Init+0x304>)
 8001db6:	69bb      	ldr	r3, [r7, #24]
 8001db8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	61fb      	str	r3, [r7, #28]
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	2b0f      	cmp	r3, #15
 8001dc4:	f67f aea2 	bls.w	8001b0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001dc8:	bf00      	nop
 8001dca:	bf00      	nop
 8001dcc:	3724      	adds	r7, #36	; 0x24
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	40023800 	.word	0x40023800
 8001ddc:	40013800 	.word	0x40013800
 8001de0:	40020000 	.word	0x40020000
 8001de4:	40020400 	.word	0x40020400
 8001de8:	40020800 	.word	0x40020800
 8001dec:	40020c00 	.word	0x40020c00
 8001df0:	40021000 	.word	0x40021000
 8001df4:	40013c00 	.word	0x40013c00

08001df8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	460b      	mov	r3, r1
 8001e02:	807b      	strh	r3, [r7, #2]
 8001e04:	4613      	mov	r3, r2
 8001e06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e08:	787b      	ldrb	r3, [r7, #1]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d003      	beq.n	8001e16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e0e:	887a      	ldrh	r2, [r7, #2]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e14:	e003      	b.n	8001e1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e16:	887b      	ldrh	r3, [r7, #2]
 8001e18:	041a      	lsls	r2, r3, #16
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	619a      	str	r2, [r3, #24]
}
 8001e1e:	bf00      	nop
 8001e20:	370c      	adds	r7, #12
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr

08001e2a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e2a:	b480      	push	{r7}
 8001e2c:	b085      	sub	sp, #20
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	6078      	str	r0, [r7, #4]
 8001e32:	460b      	mov	r3, r1
 8001e34:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	695b      	ldr	r3, [r3, #20]
 8001e3a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e3c:	887a      	ldrh	r2, [r7, #2]
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	4013      	ands	r3, r2
 8001e42:	041a      	lsls	r2, r3, #16
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	43d9      	mvns	r1, r3
 8001e48:	887b      	ldrh	r3, [r7, #2]
 8001e4a:	400b      	ands	r3, r1
 8001e4c:	431a      	orrs	r2, r3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	619a      	str	r2, [r3, #24]
}
 8001e52:	bf00      	nop
 8001e54:	3714      	adds	r7, #20
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
	...

08001e60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d101      	bne.n	8001e72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e12b      	b.n	80020ca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d106      	bne.n	8001e8c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f7ff fb0a 	bl	80014a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2224      	movs	r2, #36	; 0x24
 8001e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f022 0201 	bic.w	r2, r2, #1
 8001ea2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001eb2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ec2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ec4:	f002 fe1a 	bl	8004afc <HAL_RCC_GetPCLK1Freq>
 8001ec8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	4a81      	ldr	r2, [pc, #516]	; (80020d4 <HAL_I2C_Init+0x274>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d807      	bhi.n	8001ee4 <HAL_I2C_Init+0x84>
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	4a80      	ldr	r2, [pc, #512]	; (80020d8 <HAL_I2C_Init+0x278>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	bf94      	ite	ls
 8001edc:	2301      	movls	r3, #1
 8001ede:	2300      	movhi	r3, #0
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	e006      	b.n	8001ef2 <HAL_I2C_Init+0x92>
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	4a7d      	ldr	r2, [pc, #500]	; (80020dc <HAL_I2C_Init+0x27c>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	bf94      	ite	ls
 8001eec:	2301      	movls	r3, #1
 8001eee:	2300      	movhi	r3, #0
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e0e7      	b.n	80020ca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	4a78      	ldr	r2, [pc, #480]	; (80020e0 <HAL_I2C_Init+0x280>)
 8001efe:	fba2 2303 	umull	r2, r3, r2, r3
 8001f02:	0c9b      	lsrs	r3, r3, #18
 8001f04:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	68ba      	ldr	r2, [r7, #8]
 8001f16:	430a      	orrs	r2, r1
 8001f18:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	6a1b      	ldr	r3, [r3, #32]
 8001f20:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	4a6a      	ldr	r2, [pc, #424]	; (80020d4 <HAL_I2C_Init+0x274>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d802      	bhi.n	8001f34 <HAL_I2C_Init+0xd4>
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	3301      	adds	r3, #1
 8001f32:	e009      	b.n	8001f48 <HAL_I2C_Init+0xe8>
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001f3a:	fb02 f303 	mul.w	r3, r2, r3
 8001f3e:	4a69      	ldr	r2, [pc, #420]	; (80020e4 <HAL_I2C_Init+0x284>)
 8001f40:	fba2 2303 	umull	r2, r3, r2, r3
 8001f44:	099b      	lsrs	r3, r3, #6
 8001f46:	3301      	adds	r3, #1
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	6812      	ldr	r2, [r2, #0]
 8001f4c:	430b      	orrs	r3, r1
 8001f4e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	69db      	ldr	r3, [r3, #28]
 8001f56:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001f5a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	495c      	ldr	r1, [pc, #368]	; (80020d4 <HAL_I2C_Init+0x274>)
 8001f64:	428b      	cmp	r3, r1
 8001f66:	d819      	bhi.n	8001f9c <HAL_I2C_Init+0x13c>
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	1e59      	subs	r1, r3, #1
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	005b      	lsls	r3, r3, #1
 8001f72:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f76:	1c59      	adds	r1, r3, #1
 8001f78:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001f7c:	400b      	ands	r3, r1
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d00a      	beq.n	8001f98 <HAL_I2C_Init+0x138>
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	1e59      	subs	r1, r3, #1
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	005b      	lsls	r3, r3, #1
 8001f8c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f90:	3301      	adds	r3, #1
 8001f92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f96:	e051      	b.n	800203c <HAL_I2C_Init+0x1dc>
 8001f98:	2304      	movs	r3, #4
 8001f9a:	e04f      	b.n	800203c <HAL_I2C_Init+0x1dc>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d111      	bne.n	8001fc8 <HAL_I2C_Init+0x168>
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	1e58      	subs	r0, r3, #1
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6859      	ldr	r1, [r3, #4]
 8001fac:	460b      	mov	r3, r1
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	440b      	add	r3, r1
 8001fb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fb6:	3301      	adds	r3, #1
 8001fb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	bf0c      	ite	eq
 8001fc0:	2301      	moveq	r3, #1
 8001fc2:	2300      	movne	r3, #0
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	e012      	b.n	8001fee <HAL_I2C_Init+0x18e>
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	1e58      	subs	r0, r3, #1
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6859      	ldr	r1, [r3, #4]
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	440b      	add	r3, r1
 8001fd6:	0099      	lsls	r1, r3, #2
 8001fd8:	440b      	add	r3, r1
 8001fda:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fde:	3301      	adds	r3, #1
 8001fe0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	bf0c      	ite	eq
 8001fe8:	2301      	moveq	r3, #1
 8001fea:	2300      	movne	r3, #0
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <HAL_I2C_Init+0x196>
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e022      	b.n	800203c <HAL_I2C_Init+0x1dc>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d10e      	bne.n	800201c <HAL_I2C_Init+0x1bc>
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	1e58      	subs	r0, r3, #1
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6859      	ldr	r1, [r3, #4]
 8002006:	460b      	mov	r3, r1
 8002008:	005b      	lsls	r3, r3, #1
 800200a:	440b      	add	r3, r1
 800200c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002010:	3301      	adds	r3, #1
 8002012:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002016:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800201a:	e00f      	b.n	800203c <HAL_I2C_Init+0x1dc>
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	1e58      	subs	r0, r3, #1
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6859      	ldr	r1, [r3, #4]
 8002024:	460b      	mov	r3, r1
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	440b      	add	r3, r1
 800202a:	0099      	lsls	r1, r3, #2
 800202c:	440b      	add	r3, r1
 800202e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002032:	3301      	adds	r3, #1
 8002034:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002038:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800203c:	6879      	ldr	r1, [r7, #4]
 800203e:	6809      	ldr	r1, [r1, #0]
 8002040:	4313      	orrs	r3, r2
 8002042:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	69da      	ldr	r2, [r3, #28]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6a1b      	ldr	r3, [r3, #32]
 8002056:	431a      	orrs	r2, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	430a      	orrs	r2, r1
 800205e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800206a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	6911      	ldr	r1, [r2, #16]
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	68d2      	ldr	r2, [r2, #12]
 8002076:	4311      	orrs	r1, r2
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	6812      	ldr	r2, [r2, #0]
 800207c:	430b      	orrs	r3, r1
 800207e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	68db      	ldr	r3, [r3, #12]
 8002086:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	695a      	ldr	r2, [r3, #20]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	699b      	ldr	r3, [r3, #24]
 8002092:	431a      	orrs	r2, r3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	430a      	orrs	r2, r1
 800209a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f042 0201 	orr.w	r2, r2, #1
 80020aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2200      	movs	r2, #0
 80020b0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2220      	movs	r2, #32
 80020b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80020c8:	2300      	movs	r3, #0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3710      	adds	r7, #16
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	000186a0 	.word	0x000186a0
 80020d8:	001e847f 	.word	0x001e847f
 80020dc:	003d08ff 	.word	0x003d08ff
 80020e0:	431bde83 	.word	0x431bde83
 80020e4:	10624dd3 	.word	0x10624dd3

080020e8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b088      	sub	sp, #32
 80020ec:	af02      	add	r7, sp, #8
 80020ee:	60f8      	str	r0, [r7, #12]
 80020f0:	607a      	str	r2, [r7, #4]
 80020f2:	461a      	mov	r2, r3
 80020f4:	460b      	mov	r3, r1
 80020f6:	817b      	strh	r3, [r7, #10]
 80020f8:	4613      	mov	r3, r2
 80020fa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80020fc:	f7ff fbb6 	bl	800186c <HAL_GetTick>
 8002100:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002108:	b2db      	uxtb	r3, r3
 800210a:	2b20      	cmp	r3, #32
 800210c:	f040 80e0 	bne.w	80022d0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	9300      	str	r3, [sp, #0]
 8002114:	2319      	movs	r3, #25
 8002116:	2201      	movs	r2, #1
 8002118:	4970      	ldr	r1, [pc, #448]	; (80022dc <HAL_I2C_Master_Transmit+0x1f4>)
 800211a:	68f8      	ldr	r0, [r7, #12]
 800211c:	f000 fc58 	bl	80029d0 <I2C_WaitOnFlagUntilTimeout>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002126:	2302      	movs	r3, #2
 8002128:	e0d3      	b.n	80022d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002130:	2b01      	cmp	r3, #1
 8002132:	d101      	bne.n	8002138 <HAL_I2C_Master_Transmit+0x50>
 8002134:	2302      	movs	r3, #2
 8002136:	e0cc      	b.n	80022d2 <HAL_I2C_Master_Transmit+0x1ea>
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2201      	movs	r2, #1
 800213c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0301 	and.w	r3, r3, #1
 800214a:	2b01      	cmp	r3, #1
 800214c:	d007      	beq.n	800215e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f042 0201 	orr.w	r2, r2, #1
 800215c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800216c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2221      	movs	r2, #33	; 0x21
 8002172:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2210      	movs	r2, #16
 800217a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2200      	movs	r2, #0
 8002182:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	893a      	ldrh	r2, [r7, #8]
 800218e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002194:	b29a      	uxth	r2, r3
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	4a50      	ldr	r2, [pc, #320]	; (80022e0 <HAL_I2C_Master_Transmit+0x1f8>)
 800219e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80021a0:	8979      	ldrh	r1, [r7, #10]
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	6a3a      	ldr	r2, [r7, #32]
 80021a6:	68f8      	ldr	r0, [r7, #12]
 80021a8:	f000 fac2 	bl	8002730 <I2C_MasterRequestWrite>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d001      	beq.n	80021b6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e08d      	b.n	80022d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021b6:	2300      	movs	r3, #0
 80021b8:	613b      	str	r3, [r7, #16]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	695b      	ldr	r3, [r3, #20]
 80021c0:	613b      	str	r3, [r7, #16]
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	699b      	ldr	r3, [r3, #24]
 80021c8:	613b      	str	r3, [r7, #16]
 80021ca:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80021cc:	e066      	b.n	800229c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021ce:	697a      	ldr	r2, [r7, #20]
 80021d0:	6a39      	ldr	r1, [r7, #32]
 80021d2:	68f8      	ldr	r0, [r7, #12]
 80021d4:	f000 fcd2 	bl	8002b7c <I2C_WaitOnTXEFlagUntilTimeout>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d00d      	beq.n	80021fa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e2:	2b04      	cmp	r3, #4
 80021e4:	d107      	bne.n	80021f6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e06b      	b.n	80022d2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fe:	781a      	ldrb	r2, [r3, #0]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220a:	1c5a      	adds	r2, r3, #1
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002214:	b29b      	uxth	r3, r3
 8002216:	3b01      	subs	r3, #1
 8002218:	b29a      	uxth	r2, r3
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002222:	3b01      	subs	r3, #1
 8002224:	b29a      	uxth	r2, r3
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	695b      	ldr	r3, [r3, #20]
 8002230:	f003 0304 	and.w	r3, r3, #4
 8002234:	2b04      	cmp	r3, #4
 8002236:	d11b      	bne.n	8002270 <HAL_I2C_Master_Transmit+0x188>
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800223c:	2b00      	cmp	r3, #0
 800223e:	d017      	beq.n	8002270 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002244:	781a      	ldrb	r2, [r3, #0]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002250:	1c5a      	adds	r2, r3, #1
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800225a:	b29b      	uxth	r3, r3
 800225c:	3b01      	subs	r3, #1
 800225e:	b29a      	uxth	r2, r3
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002268:	3b01      	subs	r3, #1
 800226a:	b29a      	uxth	r2, r3
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002270:	697a      	ldr	r2, [r7, #20]
 8002272:	6a39      	ldr	r1, [r7, #32]
 8002274:	68f8      	ldr	r0, [r7, #12]
 8002276:	f000 fcc2 	bl	8002bfe <I2C_WaitOnBTFFlagUntilTimeout>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d00d      	beq.n	800229c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002284:	2b04      	cmp	r3, #4
 8002286:	d107      	bne.n	8002298 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002296:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e01a      	b.n	80022d2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d194      	bne.n	80021ce <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2220      	movs	r2, #32
 80022b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2200      	movs	r2, #0
 80022c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2200      	movs	r2, #0
 80022c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80022cc:	2300      	movs	r3, #0
 80022ce:	e000      	b.n	80022d2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80022d0:	2302      	movs	r3, #2
  }
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3718      	adds	r7, #24
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	00100002 	.word	0x00100002
 80022e0:	ffff0000 	.word	0xffff0000

080022e4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b08c      	sub	sp, #48	; 0x30
 80022e8:	af02      	add	r7, sp, #8
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	607a      	str	r2, [r7, #4]
 80022ee:	461a      	mov	r2, r3
 80022f0:	460b      	mov	r3, r1
 80022f2:	817b      	strh	r3, [r7, #10]
 80022f4:	4613      	mov	r3, r2
 80022f6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80022f8:	f7ff fab8 	bl	800186c <HAL_GetTick>
 80022fc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002304:	b2db      	uxtb	r3, r3
 8002306:	2b20      	cmp	r3, #32
 8002308:	f040 820b 	bne.w	8002722 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800230c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230e:	9300      	str	r3, [sp, #0]
 8002310:	2319      	movs	r3, #25
 8002312:	2201      	movs	r2, #1
 8002314:	497c      	ldr	r1, [pc, #496]	; (8002508 <HAL_I2C_Master_Receive+0x224>)
 8002316:	68f8      	ldr	r0, [r7, #12]
 8002318:	f000 fb5a 	bl	80029d0 <I2C_WaitOnFlagUntilTimeout>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d001      	beq.n	8002326 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002322:	2302      	movs	r3, #2
 8002324:	e1fe      	b.n	8002724 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800232c:	2b01      	cmp	r3, #1
 800232e:	d101      	bne.n	8002334 <HAL_I2C_Master_Receive+0x50>
 8002330:	2302      	movs	r3, #2
 8002332:	e1f7      	b.n	8002724 <HAL_I2C_Master_Receive+0x440>
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2201      	movs	r2, #1
 8002338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0301 	and.w	r3, r3, #1
 8002346:	2b01      	cmp	r3, #1
 8002348:	d007      	beq.n	800235a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f042 0201 	orr.w	r2, r2, #1
 8002358:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002368:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2222      	movs	r2, #34	; 0x22
 800236e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2210      	movs	r2, #16
 8002376:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2200      	movs	r2, #0
 800237e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	893a      	ldrh	r2, [r7, #8]
 800238a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002390:	b29a      	uxth	r2, r3
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	4a5c      	ldr	r2, [pc, #368]	; (800250c <HAL_I2C_Master_Receive+0x228>)
 800239a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800239c:	8979      	ldrh	r1, [r7, #10]
 800239e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023a2:	68f8      	ldr	r0, [r7, #12]
 80023a4:	f000 fa46 	bl	8002834 <I2C_MasterRequestRead>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e1b8      	b.n	8002724 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d113      	bne.n	80023e2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023ba:	2300      	movs	r3, #0
 80023bc:	623b      	str	r3, [r7, #32]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	695b      	ldr	r3, [r3, #20]
 80023c4:	623b      	str	r3, [r7, #32]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	699b      	ldr	r3, [r3, #24]
 80023cc:	623b      	str	r3, [r7, #32]
 80023ce:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023de:	601a      	str	r2, [r3, #0]
 80023e0:	e18c      	b.n	80026fc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d11b      	bne.n	8002422 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023fa:	2300      	movs	r3, #0
 80023fc:	61fb      	str	r3, [r7, #28]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	695b      	ldr	r3, [r3, #20]
 8002404:	61fb      	str	r3, [r7, #28]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	699b      	ldr	r3, [r3, #24]
 800240c:	61fb      	str	r3, [r7, #28]
 800240e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800241e:	601a      	str	r2, [r3, #0]
 8002420:	e16c      	b.n	80026fc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002426:	2b02      	cmp	r3, #2
 8002428:	d11b      	bne.n	8002462 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002438:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002448:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800244a:	2300      	movs	r3, #0
 800244c:	61bb      	str	r3, [r7, #24]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	695b      	ldr	r3, [r3, #20]
 8002454:	61bb      	str	r3, [r7, #24]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	699b      	ldr	r3, [r3, #24]
 800245c:	61bb      	str	r3, [r7, #24]
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	e14c      	b.n	80026fc <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002470:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002472:	2300      	movs	r3, #0
 8002474:	617b      	str	r3, [r7, #20]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	695b      	ldr	r3, [r3, #20]
 800247c:	617b      	str	r3, [r7, #20]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	699b      	ldr	r3, [r3, #24]
 8002484:	617b      	str	r3, [r7, #20]
 8002486:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002488:	e138      	b.n	80026fc <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800248e:	2b03      	cmp	r3, #3
 8002490:	f200 80f1 	bhi.w	8002676 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002498:	2b01      	cmp	r3, #1
 800249a:	d123      	bne.n	80024e4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800249c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800249e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80024a0:	68f8      	ldr	r0, [r7, #12]
 80024a2:	f000 fbed 	bl	8002c80 <I2C_WaitOnRXNEFlagUntilTimeout>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d001      	beq.n	80024b0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e139      	b.n	8002724 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	691a      	ldr	r2, [r3, #16]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ba:	b2d2      	uxtb	r2, r2
 80024bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c2:	1c5a      	adds	r2, r3, #1
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024cc:	3b01      	subs	r3, #1
 80024ce:	b29a      	uxth	r2, r3
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024d8:	b29b      	uxth	r3, r3
 80024da:	3b01      	subs	r3, #1
 80024dc:	b29a      	uxth	r2, r3
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80024e2:	e10b      	b.n	80026fc <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d14e      	bne.n	800258a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80024ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ee:	9300      	str	r3, [sp, #0]
 80024f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024f2:	2200      	movs	r2, #0
 80024f4:	4906      	ldr	r1, [pc, #24]	; (8002510 <HAL_I2C_Master_Receive+0x22c>)
 80024f6:	68f8      	ldr	r0, [r7, #12]
 80024f8:	f000 fa6a 	bl	80029d0 <I2C_WaitOnFlagUntilTimeout>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d008      	beq.n	8002514 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e10e      	b.n	8002724 <HAL_I2C_Master_Receive+0x440>
 8002506:	bf00      	nop
 8002508:	00100002 	.word	0x00100002
 800250c:	ffff0000 	.word	0xffff0000
 8002510:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002522:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	691a      	ldr	r2, [r3, #16]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252e:	b2d2      	uxtb	r2, r2
 8002530:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002536:	1c5a      	adds	r2, r3, #1
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002540:	3b01      	subs	r3, #1
 8002542:	b29a      	uxth	r2, r3
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800254c:	b29b      	uxth	r3, r3
 800254e:	3b01      	subs	r3, #1
 8002550:	b29a      	uxth	r2, r3
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	691a      	ldr	r2, [r3, #16]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002560:	b2d2      	uxtb	r2, r2
 8002562:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002568:	1c5a      	adds	r2, r3, #1
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002572:	3b01      	subs	r3, #1
 8002574:	b29a      	uxth	r2, r3
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800257e:	b29b      	uxth	r3, r3
 8002580:	3b01      	subs	r3, #1
 8002582:	b29a      	uxth	r2, r3
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002588:	e0b8      	b.n	80026fc <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800258a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258c:	9300      	str	r3, [sp, #0]
 800258e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002590:	2200      	movs	r2, #0
 8002592:	4966      	ldr	r1, [pc, #408]	; (800272c <HAL_I2C_Master_Receive+0x448>)
 8002594:	68f8      	ldr	r0, [r7, #12]
 8002596:	f000 fa1b 	bl	80029d0 <I2C_WaitOnFlagUntilTimeout>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d001      	beq.n	80025a4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e0bf      	b.n	8002724 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	691a      	ldr	r2, [r3, #16]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025be:	b2d2      	uxtb	r2, r2
 80025c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c6:	1c5a      	adds	r2, r3, #1
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025d0:	3b01      	subs	r3, #1
 80025d2:	b29a      	uxth	r2, r3
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025dc:	b29b      	uxth	r3, r3
 80025de:	3b01      	subs	r3, #1
 80025e0:	b29a      	uxth	r2, r3
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80025e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e8:	9300      	str	r3, [sp, #0]
 80025ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ec:	2200      	movs	r2, #0
 80025ee:	494f      	ldr	r1, [pc, #316]	; (800272c <HAL_I2C_Master_Receive+0x448>)
 80025f0:	68f8      	ldr	r0, [r7, #12]
 80025f2:	f000 f9ed 	bl	80029d0 <I2C_WaitOnFlagUntilTimeout>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d001      	beq.n	8002600 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e091      	b.n	8002724 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800260e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	691a      	ldr	r2, [r3, #16]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261a:	b2d2      	uxtb	r2, r2
 800261c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002622:	1c5a      	adds	r2, r3, #1
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800262c:	3b01      	subs	r3, #1
 800262e:	b29a      	uxth	r2, r3
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002638:	b29b      	uxth	r3, r3
 800263a:	3b01      	subs	r3, #1
 800263c:	b29a      	uxth	r2, r3
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	691a      	ldr	r2, [r3, #16]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264c:	b2d2      	uxtb	r2, r2
 800264e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002654:	1c5a      	adds	r2, r3, #1
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800265e:	3b01      	subs	r3, #1
 8002660:	b29a      	uxth	r2, r3
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800266a:	b29b      	uxth	r3, r3
 800266c:	3b01      	subs	r3, #1
 800266e:	b29a      	uxth	r2, r3
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002674:	e042      	b.n	80026fc <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002676:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002678:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800267a:	68f8      	ldr	r0, [r7, #12]
 800267c:	f000 fb00 	bl	8002c80 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d001      	beq.n	800268a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e04c      	b.n	8002724 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	691a      	ldr	r2, [r3, #16]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002694:	b2d2      	uxtb	r2, r2
 8002696:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269c:	1c5a      	adds	r2, r3, #1
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026a6:	3b01      	subs	r3, #1
 80026a8:	b29a      	uxth	r2, r3
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	3b01      	subs	r3, #1
 80026b6:	b29a      	uxth	r2, r3
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	695b      	ldr	r3, [r3, #20]
 80026c2:	f003 0304 	and.w	r3, r3, #4
 80026c6:	2b04      	cmp	r3, #4
 80026c8:	d118      	bne.n	80026fc <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	691a      	ldr	r2, [r3, #16]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d4:	b2d2      	uxtb	r2, r2
 80026d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026dc:	1c5a      	adds	r2, r3, #1
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026e6:	3b01      	subs	r3, #1
 80026e8:	b29a      	uxth	r2, r3
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026f2:	b29b      	uxth	r3, r3
 80026f4:	3b01      	subs	r3, #1
 80026f6:	b29a      	uxth	r2, r3
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002700:	2b00      	cmp	r3, #0
 8002702:	f47f aec2 	bne.w	800248a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2220      	movs	r2, #32
 800270a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2200      	movs	r2, #0
 8002712:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2200      	movs	r2, #0
 800271a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800271e:	2300      	movs	r3, #0
 8002720:	e000      	b.n	8002724 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002722:	2302      	movs	r3, #2
  }
}
 8002724:	4618      	mov	r0, r3
 8002726:	3728      	adds	r7, #40	; 0x28
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	00010004 	.word	0x00010004

08002730 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b088      	sub	sp, #32
 8002734:	af02      	add	r7, sp, #8
 8002736:	60f8      	str	r0, [r7, #12]
 8002738:	607a      	str	r2, [r7, #4]
 800273a:	603b      	str	r3, [r7, #0]
 800273c:	460b      	mov	r3, r1
 800273e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002744:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	2b08      	cmp	r3, #8
 800274a:	d006      	beq.n	800275a <I2C_MasterRequestWrite+0x2a>
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	2b01      	cmp	r3, #1
 8002750:	d003      	beq.n	800275a <I2C_MasterRequestWrite+0x2a>
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002758:	d108      	bne.n	800276c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002768:	601a      	str	r2, [r3, #0]
 800276a:	e00b      	b.n	8002784 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002770:	2b12      	cmp	r3, #18
 8002772:	d107      	bne.n	8002784 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002782:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	9300      	str	r3, [sp, #0]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002790:	68f8      	ldr	r0, [r7, #12]
 8002792:	f000 f91d 	bl	80029d0 <I2C_WaitOnFlagUntilTimeout>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d00d      	beq.n	80027b8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027aa:	d103      	bne.n	80027b4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80027b4:	2303      	movs	r3, #3
 80027b6:	e035      	b.n	8002824 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	691b      	ldr	r3, [r3, #16]
 80027bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80027c0:	d108      	bne.n	80027d4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80027c2:	897b      	ldrh	r3, [r7, #10]
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	461a      	mov	r2, r3
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80027d0:	611a      	str	r2, [r3, #16]
 80027d2:	e01b      	b.n	800280c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80027d4:	897b      	ldrh	r3, [r7, #10]
 80027d6:	11db      	asrs	r3, r3, #7
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	f003 0306 	and.w	r3, r3, #6
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	f063 030f 	orn	r3, r3, #15
 80027e4:	b2da      	uxtb	r2, r3
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	490e      	ldr	r1, [pc, #56]	; (800282c <I2C_MasterRequestWrite+0xfc>)
 80027f2:	68f8      	ldr	r0, [r7, #12]
 80027f4:	f000 f943 	bl	8002a7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d001      	beq.n	8002802 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e010      	b.n	8002824 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002802:	897b      	ldrh	r3, [r7, #10]
 8002804:	b2da      	uxtb	r2, r3
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	4907      	ldr	r1, [pc, #28]	; (8002830 <I2C_MasterRequestWrite+0x100>)
 8002812:	68f8      	ldr	r0, [r7, #12]
 8002814:	f000 f933 	bl	8002a7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d001      	beq.n	8002822 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e000      	b.n	8002824 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002822:	2300      	movs	r3, #0
}
 8002824:	4618      	mov	r0, r3
 8002826:	3718      	adds	r7, #24
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}
 800282c:	00010008 	.word	0x00010008
 8002830:	00010002 	.word	0x00010002

08002834 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b088      	sub	sp, #32
 8002838:	af02      	add	r7, sp, #8
 800283a:	60f8      	str	r0, [r7, #12]
 800283c:	607a      	str	r2, [r7, #4]
 800283e:	603b      	str	r3, [r7, #0]
 8002840:	460b      	mov	r3, r1
 8002842:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002848:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002858:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	2b08      	cmp	r3, #8
 800285e:	d006      	beq.n	800286e <I2C_MasterRequestRead+0x3a>
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	2b01      	cmp	r3, #1
 8002864:	d003      	beq.n	800286e <I2C_MasterRequestRead+0x3a>
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800286c:	d108      	bne.n	8002880 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800287c:	601a      	str	r2, [r3, #0]
 800287e:	e00b      	b.n	8002898 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002884:	2b11      	cmp	r3, #17
 8002886:	d107      	bne.n	8002898 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002896:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	9300      	str	r3, [sp, #0]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80028a4:	68f8      	ldr	r0, [r7, #12]
 80028a6:	f000 f893 	bl	80029d0 <I2C_WaitOnFlagUntilTimeout>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d00d      	beq.n	80028cc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028be:	d103      	bne.n	80028c8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80028c8:	2303      	movs	r3, #3
 80028ca:	e079      	b.n	80029c0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	691b      	ldr	r3, [r3, #16]
 80028d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80028d4:	d108      	bne.n	80028e8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80028d6:	897b      	ldrh	r3, [r7, #10]
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	f043 0301 	orr.w	r3, r3, #1
 80028de:	b2da      	uxtb	r2, r3
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	611a      	str	r2, [r3, #16]
 80028e6:	e05f      	b.n	80029a8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80028e8:	897b      	ldrh	r3, [r7, #10]
 80028ea:	11db      	asrs	r3, r3, #7
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	f003 0306 	and.w	r3, r3, #6
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	f063 030f 	orn	r3, r3, #15
 80028f8:	b2da      	uxtb	r2, r3
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	4930      	ldr	r1, [pc, #192]	; (80029c8 <I2C_MasterRequestRead+0x194>)
 8002906:	68f8      	ldr	r0, [r7, #12]
 8002908:	f000 f8b9 	bl	8002a7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d001      	beq.n	8002916 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e054      	b.n	80029c0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002916:	897b      	ldrh	r3, [r7, #10]
 8002918:	b2da      	uxtb	r2, r3
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	4929      	ldr	r1, [pc, #164]	; (80029cc <I2C_MasterRequestRead+0x198>)
 8002926:	68f8      	ldr	r0, [r7, #12]
 8002928:	f000 f8a9 	bl	8002a7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d001      	beq.n	8002936 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e044      	b.n	80029c0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002936:	2300      	movs	r3, #0
 8002938:	613b      	str	r3, [r7, #16]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	695b      	ldr	r3, [r3, #20]
 8002940:	613b      	str	r3, [r7, #16]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	699b      	ldr	r3, [r3, #24]
 8002948:	613b      	str	r3, [r7, #16]
 800294a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800295a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	9300      	str	r3, [sp, #0]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002968:	68f8      	ldr	r0, [r7, #12]
 800296a:	f000 f831 	bl	80029d0 <I2C_WaitOnFlagUntilTimeout>
 800296e:	4603      	mov	r3, r0
 8002970:	2b00      	cmp	r3, #0
 8002972:	d00d      	beq.n	8002990 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800297e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002982:	d103      	bne.n	800298c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	f44f 7200 	mov.w	r2, #512	; 0x200
 800298a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	e017      	b.n	80029c0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002990:	897b      	ldrh	r3, [r7, #10]
 8002992:	11db      	asrs	r3, r3, #7
 8002994:	b2db      	uxtb	r3, r3
 8002996:	f003 0306 	and.w	r3, r3, #6
 800299a:	b2db      	uxtb	r3, r3
 800299c:	f063 030e 	orn	r3, r3, #14
 80029a0:	b2da      	uxtb	r2, r3
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	4907      	ldr	r1, [pc, #28]	; (80029cc <I2C_MasterRequestRead+0x198>)
 80029ae:	68f8      	ldr	r0, [r7, #12]
 80029b0:	f000 f865 	bl	8002a7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d001      	beq.n	80029be <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e000      	b.n	80029c0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80029be:	2300      	movs	r3, #0
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3718      	adds	r7, #24
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	00010008 	.word	0x00010008
 80029cc:	00010002 	.word	0x00010002

080029d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b084      	sub	sp, #16
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	60b9      	str	r1, [r7, #8]
 80029da:	603b      	str	r3, [r7, #0]
 80029dc:	4613      	mov	r3, r2
 80029de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029e0:	e025      	b.n	8002a2e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029e8:	d021      	beq.n	8002a2e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029ea:	f7fe ff3f 	bl	800186c <HAL_GetTick>
 80029ee:	4602      	mov	r2, r0
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	683a      	ldr	r2, [r7, #0]
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d302      	bcc.n	8002a00 <I2C_WaitOnFlagUntilTimeout+0x30>
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d116      	bne.n	8002a2e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2200      	movs	r2, #0
 8002a04:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2220      	movs	r2, #32
 8002a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2200      	movs	r2, #0
 8002a12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1a:	f043 0220 	orr.w	r2, r3, #32
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e023      	b.n	8002a76 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	0c1b      	lsrs	r3, r3, #16
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d10d      	bne.n	8002a54 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	695b      	ldr	r3, [r3, #20]
 8002a3e:	43da      	mvns	r2, r3
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	4013      	ands	r3, r2
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	bf0c      	ite	eq
 8002a4a:	2301      	moveq	r3, #1
 8002a4c:	2300      	movne	r3, #0
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	461a      	mov	r2, r3
 8002a52:	e00c      	b.n	8002a6e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	699b      	ldr	r3, [r3, #24]
 8002a5a:	43da      	mvns	r2, r3
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	4013      	ands	r3, r2
 8002a60:	b29b      	uxth	r3, r3
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	bf0c      	ite	eq
 8002a66:	2301      	moveq	r3, #1
 8002a68:	2300      	movne	r3, #0
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	79fb      	ldrb	r3, [r7, #7]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d0b6      	beq.n	80029e2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3710      	adds	r7, #16
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}

08002a7e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002a7e:	b580      	push	{r7, lr}
 8002a80:	b084      	sub	sp, #16
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	60f8      	str	r0, [r7, #12]
 8002a86:	60b9      	str	r1, [r7, #8]
 8002a88:	607a      	str	r2, [r7, #4]
 8002a8a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a8c:	e051      	b.n	8002b32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	695b      	ldr	r3, [r3, #20]
 8002a94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a9c:	d123      	bne.n	8002ae6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002aac:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ab6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2200      	movs	r2, #0
 8002abc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2220      	movs	r2, #32
 8002ac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad2:	f043 0204 	orr.w	r2, r3, #4
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e046      	b.n	8002b74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002aec:	d021      	beq.n	8002b32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002aee:	f7fe febd 	bl	800186c <HAL_GetTick>
 8002af2:	4602      	mov	r2, r0
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	1ad3      	subs	r3, r2, r3
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d302      	bcc.n	8002b04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d116      	bne.n	8002b32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2200      	movs	r2, #0
 8002b08:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2220      	movs	r2, #32
 8002b0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2200      	movs	r2, #0
 8002b16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1e:	f043 0220 	orr.w	r2, r3, #32
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e020      	b.n	8002b74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	0c1b      	lsrs	r3, r3, #16
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d10c      	bne.n	8002b56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	695b      	ldr	r3, [r3, #20]
 8002b42:	43da      	mvns	r2, r3
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	4013      	ands	r3, r2
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	bf14      	ite	ne
 8002b4e:	2301      	movne	r3, #1
 8002b50:	2300      	moveq	r3, #0
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	e00b      	b.n	8002b6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	699b      	ldr	r3, [r3, #24]
 8002b5c:	43da      	mvns	r2, r3
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	4013      	ands	r3, r2
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	bf14      	ite	ne
 8002b68:	2301      	movne	r3, #1
 8002b6a:	2300      	moveq	r3, #0
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d18d      	bne.n	8002a8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002b72:	2300      	movs	r3, #0
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3710      	adds	r7, #16
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	60b9      	str	r1, [r7, #8]
 8002b86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b88:	e02d      	b.n	8002be6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b8a:	68f8      	ldr	r0, [r7, #12]
 8002b8c:	f000 f8ce 	bl	8002d2c <I2C_IsAcknowledgeFailed>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d001      	beq.n	8002b9a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e02d      	b.n	8002bf6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ba0:	d021      	beq.n	8002be6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ba2:	f7fe fe63 	bl	800186c <HAL_GetTick>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	68ba      	ldr	r2, [r7, #8]
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d302      	bcc.n	8002bb8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d116      	bne.n	8002be6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2220      	movs	r2, #32
 8002bc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd2:	f043 0220 	orr.w	r2, r3, #32
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e007      	b.n	8002bf6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	695b      	ldr	r3, [r3, #20]
 8002bec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bf0:	2b80      	cmp	r3, #128	; 0x80
 8002bf2:	d1ca      	bne.n	8002b8a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3710      	adds	r7, #16
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	b084      	sub	sp, #16
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	60f8      	str	r0, [r7, #12]
 8002c06:	60b9      	str	r1, [r7, #8]
 8002c08:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c0a:	e02d      	b.n	8002c68 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c0c:	68f8      	ldr	r0, [r7, #12]
 8002c0e:	f000 f88d 	bl	8002d2c <I2C_IsAcknowledgeFailed>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d001      	beq.n	8002c1c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e02d      	b.n	8002c78 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c22:	d021      	beq.n	8002c68 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c24:	f7fe fe22 	bl	800186c <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	68ba      	ldr	r2, [r7, #8]
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d302      	bcc.n	8002c3a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d116      	bne.n	8002c68 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2220      	movs	r2, #32
 8002c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c54:	f043 0220 	orr.w	r2, r3, #32
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e007      	b.n	8002c78 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	695b      	ldr	r3, [r3, #20]
 8002c6e:	f003 0304 	and.w	r3, r3, #4
 8002c72:	2b04      	cmp	r3, #4
 8002c74:	d1ca      	bne.n	8002c0c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c76:	2300      	movs	r3, #0
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3710      	adds	r7, #16
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b084      	sub	sp, #16
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	60f8      	str	r0, [r7, #12]
 8002c88:	60b9      	str	r1, [r7, #8]
 8002c8a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c8c:	e042      	b.n	8002d14 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	695b      	ldr	r3, [r3, #20]
 8002c94:	f003 0310 	and.w	r3, r3, #16
 8002c98:	2b10      	cmp	r3, #16
 8002c9a:	d119      	bne.n	8002cd0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f06f 0210 	mvn.w	r2, #16
 8002ca4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2220      	movs	r2, #32
 8002cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e029      	b.n	8002d24 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cd0:	f7fe fdcc 	bl	800186c <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	68ba      	ldr	r2, [r7, #8]
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d302      	bcc.n	8002ce6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d116      	bne.n	8002d14 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2220      	movs	r2, #32
 8002cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d00:	f043 0220 	orr.w	r2, r3, #32
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e007      	b.n	8002d24 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	695b      	ldr	r3, [r3, #20]
 8002d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d1e:	2b40      	cmp	r3, #64	; 0x40
 8002d20:	d1b5      	bne.n	8002c8e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002d22:	2300      	movs	r3, #0
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3710      	adds	r7, #16
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	695b      	ldr	r3, [r3, #20]
 8002d3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d42:	d11b      	bne.n	8002d7c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d4c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2220      	movs	r2, #32
 8002d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d68:	f043 0204 	orr.w	r2, r3, #4
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e000      	b.n	8002d7e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	370c      	adds	r7, #12
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr

08002d8a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002d8a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d8c:	b08f      	sub	sp, #60	; 0x3c
 8002d8e:	af0a      	add	r7, sp, #40	; 0x28
 8002d90:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d101      	bne.n	8002d9c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e10f      	b.n	8002fbc <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d106      	bne.n	8002dbc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f005 fcea 	bl	8008790 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2203      	movs	r2, #3
 8002dc0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d102      	bne.n	8002dd6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f001 ffd1 	bl	8004d82 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	603b      	str	r3, [r7, #0]
 8002de6:	687e      	ldr	r6, [r7, #4]
 8002de8:	466d      	mov	r5, sp
 8002dea:	f106 0410 	add.w	r4, r6, #16
 8002dee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002df0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002df2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002df4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002df6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002dfa:	e885 0003 	stmia.w	r5, {r0, r1}
 8002dfe:	1d33      	adds	r3, r6, #4
 8002e00:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e02:	6838      	ldr	r0, [r7, #0]
 8002e04:	f001 fea9 	bl	8004b5a <USB_CoreInit>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d005      	beq.n	8002e1a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2202      	movs	r2, #2
 8002e12:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e0d0      	b.n	8002fbc <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	2100      	movs	r1, #0
 8002e20:	4618      	mov	r0, r3
 8002e22:	f001 ffbf 	bl	8004da4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e26:	2300      	movs	r3, #0
 8002e28:	73fb      	strb	r3, [r7, #15]
 8002e2a:	e04a      	b.n	8002ec2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002e2c:	7bfa      	ldrb	r2, [r7, #15]
 8002e2e:	6879      	ldr	r1, [r7, #4]
 8002e30:	4613      	mov	r3, r2
 8002e32:	00db      	lsls	r3, r3, #3
 8002e34:	4413      	add	r3, r2
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	440b      	add	r3, r1
 8002e3a:	333d      	adds	r3, #61	; 0x3d
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002e40:	7bfa      	ldrb	r2, [r7, #15]
 8002e42:	6879      	ldr	r1, [r7, #4]
 8002e44:	4613      	mov	r3, r2
 8002e46:	00db      	lsls	r3, r3, #3
 8002e48:	4413      	add	r3, r2
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	440b      	add	r3, r1
 8002e4e:	333c      	adds	r3, #60	; 0x3c
 8002e50:	7bfa      	ldrb	r2, [r7, #15]
 8002e52:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002e54:	7bfa      	ldrb	r2, [r7, #15]
 8002e56:	7bfb      	ldrb	r3, [r7, #15]
 8002e58:	b298      	uxth	r0, r3
 8002e5a:	6879      	ldr	r1, [r7, #4]
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	00db      	lsls	r3, r3, #3
 8002e60:	4413      	add	r3, r2
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	440b      	add	r3, r1
 8002e66:	3344      	adds	r3, #68	; 0x44
 8002e68:	4602      	mov	r2, r0
 8002e6a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002e6c:	7bfa      	ldrb	r2, [r7, #15]
 8002e6e:	6879      	ldr	r1, [r7, #4]
 8002e70:	4613      	mov	r3, r2
 8002e72:	00db      	lsls	r3, r3, #3
 8002e74:	4413      	add	r3, r2
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	440b      	add	r3, r1
 8002e7a:	3340      	adds	r3, #64	; 0x40
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002e80:	7bfa      	ldrb	r2, [r7, #15]
 8002e82:	6879      	ldr	r1, [r7, #4]
 8002e84:	4613      	mov	r3, r2
 8002e86:	00db      	lsls	r3, r3, #3
 8002e88:	4413      	add	r3, r2
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	440b      	add	r3, r1
 8002e8e:	3348      	adds	r3, #72	; 0x48
 8002e90:	2200      	movs	r2, #0
 8002e92:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002e94:	7bfa      	ldrb	r2, [r7, #15]
 8002e96:	6879      	ldr	r1, [r7, #4]
 8002e98:	4613      	mov	r3, r2
 8002e9a:	00db      	lsls	r3, r3, #3
 8002e9c:	4413      	add	r3, r2
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	440b      	add	r3, r1
 8002ea2:	334c      	adds	r3, #76	; 0x4c
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002ea8:	7bfa      	ldrb	r2, [r7, #15]
 8002eaa:	6879      	ldr	r1, [r7, #4]
 8002eac:	4613      	mov	r3, r2
 8002eae:	00db      	lsls	r3, r3, #3
 8002eb0:	4413      	add	r3, r2
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	440b      	add	r3, r1
 8002eb6:	3354      	adds	r3, #84	; 0x54
 8002eb8:	2200      	movs	r2, #0
 8002eba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ebc:	7bfb      	ldrb	r3, [r7, #15]
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	73fb      	strb	r3, [r7, #15]
 8002ec2:	7bfa      	ldrb	r2, [r7, #15]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d3af      	bcc.n	8002e2c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ecc:	2300      	movs	r3, #0
 8002ece:	73fb      	strb	r3, [r7, #15]
 8002ed0:	e044      	b.n	8002f5c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002ed2:	7bfa      	ldrb	r2, [r7, #15]
 8002ed4:	6879      	ldr	r1, [r7, #4]
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	00db      	lsls	r3, r3, #3
 8002eda:	4413      	add	r3, r2
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	440b      	add	r3, r1
 8002ee0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002ee8:	7bfa      	ldrb	r2, [r7, #15]
 8002eea:	6879      	ldr	r1, [r7, #4]
 8002eec:	4613      	mov	r3, r2
 8002eee:	00db      	lsls	r3, r3, #3
 8002ef0:	4413      	add	r3, r2
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	440b      	add	r3, r1
 8002ef6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002efa:	7bfa      	ldrb	r2, [r7, #15]
 8002efc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002efe:	7bfa      	ldrb	r2, [r7, #15]
 8002f00:	6879      	ldr	r1, [r7, #4]
 8002f02:	4613      	mov	r3, r2
 8002f04:	00db      	lsls	r3, r3, #3
 8002f06:	4413      	add	r3, r2
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	440b      	add	r3, r1
 8002f0c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002f10:	2200      	movs	r2, #0
 8002f12:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002f14:	7bfa      	ldrb	r2, [r7, #15]
 8002f16:	6879      	ldr	r1, [r7, #4]
 8002f18:	4613      	mov	r3, r2
 8002f1a:	00db      	lsls	r3, r3, #3
 8002f1c:	4413      	add	r3, r2
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	440b      	add	r3, r1
 8002f22:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002f26:	2200      	movs	r2, #0
 8002f28:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002f2a:	7bfa      	ldrb	r2, [r7, #15]
 8002f2c:	6879      	ldr	r1, [r7, #4]
 8002f2e:	4613      	mov	r3, r2
 8002f30:	00db      	lsls	r3, r3, #3
 8002f32:	4413      	add	r3, r2
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	440b      	add	r3, r1
 8002f38:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002f40:	7bfa      	ldrb	r2, [r7, #15]
 8002f42:	6879      	ldr	r1, [r7, #4]
 8002f44:	4613      	mov	r3, r2
 8002f46:	00db      	lsls	r3, r3, #3
 8002f48:	4413      	add	r3, r2
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	440b      	add	r3, r1
 8002f4e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002f52:	2200      	movs	r2, #0
 8002f54:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f56:	7bfb      	ldrb	r3, [r7, #15]
 8002f58:	3301      	adds	r3, #1
 8002f5a:	73fb      	strb	r3, [r7, #15]
 8002f5c:	7bfa      	ldrb	r2, [r7, #15]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d3b5      	bcc.n	8002ed2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	603b      	str	r3, [r7, #0]
 8002f6c:	687e      	ldr	r6, [r7, #4]
 8002f6e:	466d      	mov	r5, sp
 8002f70:	f106 0410 	add.w	r4, r6, #16
 8002f74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f7c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002f80:	e885 0003 	stmia.w	r5, {r0, r1}
 8002f84:	1d33      	adds	r3, r6, #4
 8002f86:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f88:	6838      	ldr	r0, [r7, #0]
 8002f8a:	f001 ff57 	bl	8004e3c <USB_DevInit>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d005      	beq.n	8002fa0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2202      	movs	r2, #2
 8002f98:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e00d      	b.n	8002fbc <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2201      	movs	r2, #1
 8002fac:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f003 f8a6 	bl	8006106 <USB_DevDisconnect>

  return HAL_OK;
 8002fba:	2300      	movs	r3, #0
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3714      	adds	r7, #20
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002fc4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d101      	bne.n	8002fe0 <HAL_PCD_Start+0x1c>
 8002fdc:	2302      	movs	r3, #2
 8002fde:	e020      	b.n	8003022 <HAL_PCD_Start+0x5e>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d109      	bne.n	8003004 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d005      	beq.n	8003004 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ffc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4618      	mov	r0, r3
 800300a:	f001 fea9 	bl	8004d60 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4618      	mov	r0, r3
 8003014:	f003 f856 	bl	80060c4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003020:	2300      	movs	r3, #0
}
 8003022:	4618      	mov	r0, r3
 8003024:	3710      	adds	r7, #16
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}

0800302a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800302a:	b590      	push	{r4, r7, lr}
 800302c:	b08d      	sub	sp, #52	; 0x34
 800302e:	af00      	add	r7, sp, #0
 8003030:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003038:	6a3b      	ldr	r3, [r7, #32]
 800303a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4618      	mov	r0, r3
 8003042:	f003 f914 	bl	800626e <USB_GetMode>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	f040 848a 	bne.w	8003962 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4618      	mov	r0, r3
 8003054:	f003 f878 	bl	8006148 <USB_ReadInterrupts>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	f000 8480 	beq.w	8003960 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	0a1b      	lsrs	r3, r3, #8
 800306a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4618      	mov	r0, r3
 800307a:	f003 f865 	bl	8006148 <USB_ReadInterrupts>
 800307e:	4603      	mov	r3, r0
 8003080:	f003 0302 	and.w	r3, r3, #2
 8003084:	2b02      	cmp	r3, #2
 8003086:	d107      	bne.n	8003098 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	695a      	ldr	r2, [r3, #20]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f002 0202 	and.w	r2, r2, #2
 8003096:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4618      	mov	r0, r3
 800309e:	f003 f853 	bl	8006148 <USB_ReadInterrupts>
 80030a2:	4603      	mov	r3, r0
 80030a4:	f003 0310 	and.w	r3, r3, #16
 80030a8:	2b10      	cmp	r3, #16
 80030aa:	d161      	bne.n	8003170 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	699a      	ldr	r2, [r3, #24]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f022 0210 	bic.w	r2, r2, #16
 80030ba:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80030bc:	6a3b      	ldr	r3, [r7, #32]
 80030be:	6a1b      	ldr	r3, [r3, #32]
 80030c0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80030c2:	69bb      	ldr	r3, [r7, #24]
 80030c4:	f003 020f 	and.w	r2, r3, #15
 80030c8:	4613      	mov	r3, r2
 80030ca:	00db      	lsls	r3, r3, #3
 80030cc:	4413      	add	r3, r2
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	4413      	add	r3, r2
 80030d8:	3304      	adds	r3, #4
 80030da:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80030dc:	69bb      	ldr	r3, [r7, #24]
 80030de:	0c5b      	lsrs	r3, r3, #17
 80030e0:	f003 030f 	and.w	r3, r3, #15
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	d124      	bne.n	8003132 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80030e8:	69ba      	ldr	r2, [r7, #24]
 80030ea:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80030ee:	4013      	ands	r3, r2
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d035      	beq.n	8003160 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80030f8:	69bb      	ldr	r3, [r7, #24]
 80030fa:	091b      	lsrs	r3, r3, #4
 80030fc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80030fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003102:	b29b      	uxth	r3, r3
 8003104:	461a      	mov	r2, r3
 8003106:	6a38      	ldr	r0, [r7, #32]
 8003108:	f002 fe8a 	bl	8005e20 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	691a      	ldr	r2, [r3, #16]
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	091b      	lsrs	r3, r3, #4
 8003114:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003118:	441a      	add	r2, r3
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	6a1a      	ldr	r2, [r3, #32]
 8003122:	69bb      	ldr	r3, [r7, #24]
 8003124:	091b      	lsrs	r3, r3, #4
 8003126:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800312a:	441a      	add	r2, r3
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	621a      	str	r2, [r3, #32]
 8003130:	e016      	b.n	8003160 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	0c5b      	lsrs	r3, r3, #17
 8003136:	f003 030f 	and.w	r3, r3, #15
 800313a:	2b06      	cmp	r3, #6
 800313c:	d110      	bne.n	8003160 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003144:	2208      	movs	r2, #8
 8003146:	4619      	mov	r1, r3
 8003148:	6a38      	ldr	r0, [r7, #32]
 800314a:	f002 fe69 	bl	8005e20 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	6a1a      	ldr	r2, [r3, #32]
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	091b      	lsrs	r3, r3, #4
 8003156:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800315a:	441a      	add	r2, r3
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	699a      	ldr	r2, [r3, #24]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f042 0210 	orr.w	r2, r2, #16
 800316e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4618      	mov	r0, r3
 8003176:	f002 ffe7 	bl	8006148 <USB_ReadInterrupts>
 800317a:	4603      	mov	r3, r0
 800317c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003180:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003184:	f040 80a7 	bne.w	80032d6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003188:	2300      	movs	r3, #0
 800318a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4618      	mov	r0, r3
 8003192:	f002 ffec 	bl	800616e <USB_ReadDevAllOutEpInterrupt>
 8003196:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003198:	e099      	b.n	80032ce <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800319a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800319c:	f003 0301 	and.w	r3, r3, #1
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	f000 808e 	beq.w	80032c2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031ac:	b2d2      	uxtb	r2, r2
 80031ae:	4611      	mov	r1, r2
 80031b0:	4618      	mov	r0, r3
 80031b2:	f003 f810 	bl	80061d6 <USB_ReadDevOutEPInterrupt>
 80031b6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	f003 0301 	and.w	r3, r3, #1
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d00c      	beq.n	80031dc <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80031c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c4:	015a      	lsls	r2, r3, #5
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	4413      	add	r3, r2
 80031ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031ce:	461a      	mov	r2, r3
 80031d0:	2301      	movs	r3, #1
 80031d2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80031d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f000 fec2 	bl	8003f60 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	f003 0308 	and.w	r3, r3, #8
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d00c      	beq.n	8003200 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80031e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e8:	015a      	lsls	r2, r3, #5
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	4413      	add	r3, r2
 80031ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031f2:	461a      	mov	r2, r3
 80031f4:	2308      	movs	r3, #8
 80031f6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80031f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f000 ff98 	bl	8004130 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	f003 0310 	and.w	r3, r3, #16
 8003206:	2b00      	cmp	r3, #0
 8003208:	d008      	beq.n	800321c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800320a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320c:	015a      	lsls	r2, r3, #5
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	4413      	add	r3, r2
 8003212:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003216:	461a      	mov	r2, r3
 8003218:	2310      	movs	r3, #16
 800321a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	f003 0302 	and.w	r3, r3, #2
 8003222:	2b00      	cmp	r3, #0
 8003224:	d030      	beq.n	8003288 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003226:	6a3b      	ldr	r3, [r7, #32]
 8003228:	695b      	ldr	r3, [r3, #20]
 800322a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800322e:	2b80      	cmp	r3, #128	; 0x80
 8003230:	d109      	bne.n	8003246 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	69fa      	ldr	r2, [r7, #28]
 800323c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003240:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003244:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003246:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003248:	4613      	mov	r3, r2
 800324a:	00db      	lsls	r3, r3, #3
 800324c:	4413      	add	r3, r2
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003254:	687a      	ldr	r2, [r7, #4]
 8003256:	4413      	add	r3, r2
 8003258:	3304      	adds	r3, #4
 800325a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	78db      	ldrb	r3, [r3, #3]
 8003260:	2b01      	cmp	r3, #1
 8003262:	d108      	bne.n	8003276 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	2200      	movs	r2, #0
 8003268:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800326a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326c:	b2db      	uxtb	r3, r3
 800326e:	4619      	mov	r1, r3
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f005 fb89 	bl	8008988 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003278:	015a      	lsls	r2, r3, #5
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	4413      	add	r3, r2
 800327e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003282:	461a      	mov	r2, r3
 8003284:	2302      	movs	r3, #2
 8003286:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	f003 0320 	and.w	r3, r3, #32
 800328e:	2b00      	cmp	r3, #0
 8003290:	d008      	beq.n	80032a4 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003294:	015a      	lsls	r2, r3, #5
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	4413      	add	r3, r2
 800329a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800329e:	461a      	mov	r2, r3
 80032a0:	2320      	movs	r3, #32
 80032a2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d009      	beq.n	80032c2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80032ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b0:	015a      	lsls	r2, r3, #5
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	4413      	add	r3, r2
 80032b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032ba:	461a      	mov	r2, r3
 80032bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80032c0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80032c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c4:	3301      	adds	r3, #1
 80032c6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80032c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ca:	085b      	lsrs	r3, r3, #1
 80032cc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80032ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	f47f af62 	bne.w	800319a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4618      	mov	r0, r3
 80032dc:	f002 ff34 	bl	8006148 <USB_ReadInterrupts>
 80032e0:	4603      	mov	r3, r0
 80032e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032e6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80032ea:	f040 80db 	bne.w	80034a4 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4618      	mov	r0, r3
 80032f4:	f002 ff55 	bl	80061a2 <USB_ReadDevAllInEpInterrupt>
 80032f8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80032fa:	2300      	movs	r3, #0
 80032fc:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80032fe:	e0cd      	b.n	800349c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003302:	f003 0301 	and.w	r3, r3, #1
 8003306:	2b00      	cmp	r3, #0
 8003308:	f000 80c2 	beq.w	8003490 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003312:	b2d2      	uxtb	r2, r2
 8003314:	4611      	mov	r1, r2
 8003316:	4618      	mov	r0, r3
 8003318:	f002 ff7b 	bl	8006212 <USB_ReadDevInEPInterrupt>
 800331c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	f003 0301 	and.w	r3, r3, #1
 8003324:	2b00      	cmp	r3, #0
 8003326:	d057      	beq.n	80033d8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332a:	f003 030f 	and.w	r3, r3, #15
 800332e:	2201      	movs	r2, #1
 8003330:	fa02 f303 	lsl.w	r3, r2, r3
 8003334:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800333c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	43db      	mvns	r3, r3
 8003342:	69f9      	ldr	r1, [r7, #28]
 8003344:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003348:	4013      	ands	r3, r2
 800334a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800334c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334e:	015a      	lsls	r2, r3, #5
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	4413      	add	r3, r2
 8003354:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003358:	461a      	mov	r2, r3
 800335a:	2301      	movs	r3, #1
 800335c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	691b      	ldr	r3, [r3, #16]
 8003362:	2b01      	cmp	r3, #1
 8003364:	d132      	bne.n	80033cc <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003366:	6879      	ldr	r1, [r7, #4]
 8003368:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800336a:	4613      	mov	r3, r2
 800336c:	00db      	lsls	r3, r3, #3
 800336e:	4413      	add	r3, r2
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	440b      	add	r3, r1
 8003374:	334c      	adds	r3, #76	; 0x4c
 8003376:	6819      	ldr	r1, [r3, #0]
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800337c:	4613      	mov	r3, r2
 800337e:	00db      	lsls	r3, r3, #3
 8003380:	4413      	add	r3, r2
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	4403      	add	r3, r0
 8003386:	3348      	adds	r3, #72	; 0x48
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4419      	add	r1, r3
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003390:	4613      	mov	r3, r2
 8003392:	00db      	lsls	r3, r3, #3
 8003394:	4413      	add	r3, r2
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	4403      	add	r3, r0
 800339a:	334c      	adds	r3, #76	; 0x4c
 800339c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800339e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d113      	bne.n	80033cc <HAL_PCD_IRQHandler+0x3a2>
 80033a4:	6879      	ldr	r1, [r7, #4]
 80033a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033a8:	4613      	mov	r3, r2
 80033aa:	00db      	lsls	r3, r3, #3
 80033ac:	4413      	add	r3, r2
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	440b      	add	r3, r1
 80033b2:	3354      	adds	r3, #84	; 0x54
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d108      	bne.n	80033cc <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6818      	ldr	r0, [r3, #0]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80033c4:	461a      	mov	r2, r3
 80033c6:	2101      	movs	r1, #1
 80033c8:	f002 ff82 	bl	80062d0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80033cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	4619      	mov	r1, r3
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f005 fa5d 	bl	8008892 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	f003 0308 	and.w	r3, r3, #8
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d008      	beq.n	80033f4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80033e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e4:	015a      	lsls	r2, r3, #5
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	4413      	add	r3, r2
 80033ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033ee:	461a      	mov	r2, r3
 80033f0:	2308      	movs	r3, #8
 80033f2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	f003 0310 	and.w	r3, r3, #16
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d008      	beq.n	8003410 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80033fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003400:	015a      	lsls	r2, r3, #5
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	4413      	add	r3, r2
 8003406:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800340a:	461a      	mov	r2, r3
 800340c:	2310      	movs	r3, #16
 800340e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003416:	2b00      	cmp	r3, #0
 8003418:	d008      	beq.n	800342c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800341a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341c:	015a      	lsls	r2, r3, #5
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	4413      	add	r3, r2
 8003422:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003426:	461a      	mov	r2, r3
 8003428:	2340      	movs	r3, #64	; 0x40
 800342a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	f003 0302 	and.w	r3, r3, #2
 8003432:	2b00      	cmp	r3, #0
 8003434:	d023      	beq.n	800347e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003436:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003438:	6a38      	ldr	r0, [r7, #32]
 800343a:	f001 fe63 	bl	8005104 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800343e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003440:	4613      	mov	r3, r2
 8003442:	00db      	lsls	r3, r3, #3
 8003444:	4413      	add	r3, r2
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	3338      	adds	r3, #56	; 0x38
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	4413      	add	r3, r2
 800344e:	3304      	adds	r3, #4
 8003450:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	78db      	ldrb	r3, [r3, #3]
 8003456:	2b01      	cmp	r3, #1
 8003458:	d108      	bne.n	800346c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	2200      	movs	r2, #0
 800345e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003462:	b2db      	uxtb	r3, r3
 8003464:	4619      	mov	r1, r3
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f005 faa0 	bl	80089ac <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800346c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346e:	015a      	lsls	r2, r3, #5
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	4413      	add	r3, r2
 8003474:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003478:	461a      	mov	r2, r3
 800347a:	2302      	movs	r3, #2
 800347c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003484:	2b00      	cmp	r3, #0
 8003486:	d003      	beq.n	8003490 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003488:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f000 fcdb 	bl	8003e46 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003492:	3301      	adds	r3, #1
 8003494:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003498:	085b      	lsrs	r3, r3, #1
 800349a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800349c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800349e:	2b00      	cmp	r3, #0
 80034a0:	f47f af2e 	bne.w	8003300 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4618      	mov	r0, r3
 80034aa:	f002 fe4d 	bl	8006148 <USB_ReadInterrupts>
 80034ae:	4603      	mov	r3, r0
 80034b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80034b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80034b8:	d122      	bne.n	8003500 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	69fa      	ldr	r2, [r7, #28]
 80034c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034c8:	f023 0301 	bic.w	r3, r3, #1
 80034cc:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d108      	bne.n	80034ea <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80034e0:	2100      	movs	r1, #0
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f000 fec2 	bl	800426c <HAL_PCDEx_LPM_Callback>
 80034e8:	e002      	b.n	80034f0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f005 fa3e 	bl	800896c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	695a      	ldr	r2, [r3, #20]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80034fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4618      	mov	r0, r3
 8003506:	f002 fe1f 	bl	8006148 <USB_ReadInterrupts>
 800350a:	4603      	mov	r3, r0
 800350c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003510:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003514:	d112      	bne.n	800353c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	f003 0301 	and.w	r3, r3, #1
 8003522:	2b01      	cmp	r3, #1
 8003524:	d102      	bne.n	800352c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f005 f9fa 	bl	8008920 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	695a      	ldr	r2, [r3, #20]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800353a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4618      	mov	r0, r3
 8003542:	f002 fe01 	bl	8006148 <USB_ReadInterrupts>
 8003546:	4603      	mov	r3, r0
 8003548:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800354c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003550:	f040 80b7 	bne.w	80036c2 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	69fa      	ldr	r2, [r7, #28]
 800355e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003562:	f023 0301 	bic.w	r3, r3, #1
 8003566:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	2110      	movs	r1, #16
 800356e:	4618      	mov	r0, r3
 8003570:	f001 fdc8 	bl	8005104 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003574:	2300      	movs	r3, #0
 8003576:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003578:	e046      	b.n	8003608 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800357a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800357c:	015a      	lsls	r2, r3, #5
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	4413      	add	r3, r2
 8003582:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003586:	461a      	mov	r2, r3
 8003588:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800358c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800358e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003590:	015a      	lsls	r2, r3, #5
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	4413      	add	r3, r2
 8003596:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800359e:	0151      	lsls	r1, r2, #5
 80035a0:	69fa      	ldr	r2, [r7, #28]
 80035a2:	440a      	add	r2, r1
 80035a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035a8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80035ac:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80035ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035b0:	015a      	lsls	r2, r3, #5
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	4413      	add	r3, r2
 80035b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035ba:	461a      	mov	r2, r3
 80035bc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80035c0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80035c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035c4:	015a      	lsls	r2, r3, #5
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	4413      	add	r3, r2
 80035ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035d2:	0151      	lsls	r1, r2, #5
 80035d4:	69fa      	ldr	r2, [r7, #28]
 80035d6:	440a      	add	r2, r1
 80035d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80035dc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80035e0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80035e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035e4:	015a      	lsls	r2, r3, #5
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	4413      	add	r3, r2
 80035ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035f2:	0151      	lsls	r1, r2, #5
 80035f4:	69fa      	ldr	r2, [r7, #28]
 80035f6:	440a      	add	r2, r1
 80035f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80035fc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003600:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003604:	3301      	adds	r3, #1
 8003606:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800360e:	429a      	cmp	r2, r3
 8003610:	d3b3      	bcc.n	800357a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003618:	69db      	ldr	r3, [r3, #28]
 800361a:	69fa      	ldr	r2, [r7, #28]
 800361c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003620:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003624:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362a:	2b00      	cmp	r3, #0
 800362c:	d016      	beq.n	800365c <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003634:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003638:	69fa      	ldr	r2, [r7, #28]
 800363a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800363e:	f043 030b 	orr.w	r3, r3, #11
 8003642:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800364c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800364e:	69fa      	ldr	r2, [r7, #28]
 8003650:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003654:	f043 030b 	orr.w	r3, r3, #11
 8003658:	6453      	str	r3, [r2, #68]	; 0x44
 800365a:	e015      	b.n	8003688 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003662:	695b      	ldr	r3, [r3, #20]
 8003664:	69fa      	ldr	r2, [r7, #28]
 8003666:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800366a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800366e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003672:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003674:	69fb      	ldr	r3, [r7, #28]
 8003676:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800367a:	691b      	ldr	r3, [r3, #16]
 800367c:	69fa      	ldr	r2, [r7, #28]
 800367e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003682:	f043 030b 	orr.w	r3, r3, #11
 8003686:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	69fa      	ldr	r2, [r7, #28]
 8003692:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003696:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800369a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6818      	ldr	r0, [r3, #0]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	691b      	ldr	r3, [r3, #16]
 80036a4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80036ac:	461a      	mov	r2, r3
 80036ae:	f002 fe0f 	bl	80062d0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	695a      	ldr	r2, [r3, #20]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80036c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4618      	mov	r0, r3
 80036c8:	f002 fd3e 	bl	8006148 <USB_ReadInterrupts>
 80036cc:	4603      	mov	r3, r0
 80036ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036d6:	d124      	bne.n	8003722 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4618      	mov	r0, r3
 80036de:	f002 fdd4 	bl	800628a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4618      	mov	r0, r3
 80036e8:	f001 fd89 	bl	80051fe <USB_GetDevSpeed>
 80036ec:	4603      	mov	r3, r0
 80036ee:	461a      	mov	r2, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681c      	ldr	r4, [r3, #0]
 80036f8:	f001 f9f4 	bl	8004ae4 <HAL_RCC_GetHCLKFreq>
 80036fc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003702:	b2db      	uxtb	r3, r3
 8003704:	461a      	mov	r2, r3
 8003706:	4620      	mov	r0, r4
 8003708:	f001 fa88 	bl	8004c1c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f005 f8e8 	bl	80088e2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	695a      	ldr	r2, [r3, #20]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003720:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4618      	mov	r0, r3
 8003728:	f002 fd0e 	bl	8006148 <USB_ReadInterrupts>
 800372c:	4603      	mov	r3, r0
 800372e:	f003 0308 	and.w	r3, r3, #8
 8003732:	2b08      	cmp	r3, #8
 8003734:	d10a      	bne.n	800374c <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f005 f8c5 	bl	80088c6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	695a      	ldr	r2, [r3, #20]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f002 0208 	and.w	r2, r2, #8
 800374a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4618      	mov	r0, r3
 8003752:	f002 fcf9 	bl	8006148 <USB_ReadInterrupts>
 8003756:	4603      	mov	r3, r0
 8003758:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800375c:	2b80      	cmp	r3, #128	; 0x80
 800375e:	d122      	bne.n	80037a6 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003760:	6a3b      	ldr	r3, [r7, #32]
 8003762:	699b      	ldr	r3, [r3, #24]
 8003764:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003768:	6a3b      	ldr	r3, [r7, #32]
 800376a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800376c:	2301      	movs	r3, #1
 800376e:	627b      	str	r3, [r7, #36]	; 0x24
 8003770:	e014      	b.n	800379c <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003772:	6879      	ldr	r1, [r7, #4]
 8003774:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003776:	4613      	mov	r3, r2
 8003778:	00db      	lsls	r3, r3, #3
 800377a:	4413      	add	r3, r2
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	440b      	add	r3, r1
 8003780:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	2b01      	cmp	r3, #1
 8003788:	d105      	bne.n	8003796 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800378a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378c:	b2db      	uxtb	r3, r3
 800378e:	4619      	mov	r1, r3
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f000 fb27 	bl	8003de4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003798:	3301      	adds	r3, #1
 800379a:	627b      	str	r3, [r7, #36]	; 0x24
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d3e5      	bcc.n	8003772 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4618      	mov	r0, r3
 80037ac:	f002 fccc 	bl	8006148 <USB_ReadInterrupts>
 80037b0:	4603      	mov	r3, r0
 80037b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037ba:	d13b      	bne.n	8003834 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80037bc:	2301      	movs	r3, #1
 80037be:	627b      	str	r3, [r7, #36]	; 0x24
 80037c0:	e02b      	b.n	800381a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80037c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c4:	015a      	lsls	r2, r3, #5
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	4413      	add	r3, r2
 80037ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80037d2:	6879      	ldr	r1, [r7, #4]
 80037d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037d6:	4613      	mov	r3, r2
 80037d8:	00db      	lsls	r3, r3, #3
 80037da:	4413      	add	r3, r2
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	440b      	add	r3, r1
 80037e0:	3340      	adds	r3, #64	; 0x40
 80037e2:	781b      	ldrb	r3, [r3, #0]
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d115      	bne.n	8003814 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80037e8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	da12      	bge.n	8003814 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80037ee:	6879      	ldr	r1, [r7, #4]
 80037f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037f2:	4613      	mov	r3, r2
 80037f4:	00db      	lsls	r3, r3, #3
 80037f6:	4413      	add	r3, r2
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	440b      	add	r3, r1
 80037fc:	333f      	adds	r3, #63	; 0x3f
 80037fe:	2201      	movs	r2, #1
 8003800:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003804:	b2db      	uxtb	r3, r3
 8003806:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800380a:	b2db      	uxtb	r3, r3
 800380c:	4619      	mov	r1, r3
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f000 fae8 	bl	8003de4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003816:	3301      	adds	r3, #1
 8003818:	627b      	str	r3, [r7, #36]	; 0x24
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003820:	429a      	cmp	r2, r3
 8003822:	d3ce      	bcc.n	80037c2 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	695a      	ldr	r2, [r3, #20]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003832:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4618      	mov	r0, r3
 800383a:	f002 fc85 	bl	8006148 <USB_ReadInterrupts>
 800383e:	4603      	mov	r3, r0
 8003840:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003844:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003848:	d155      	bne.n	80038f6 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800384a:	2301      	movs	r3, #1
 800384c:	627b      	str	r3, [r7, #36]	; 0x24
 800384e:	e045      	b.n	80038dc <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003852:	015a      	lsls	r2, r3, #5
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	4413      	add	r3, r2
 8003858:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003860:	6879      	ldr	r1, [r7, #4]
 8003862:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003864:	4613      	mov	r3, r2
 8003866:	00db      	lsls	r3, r3, #3
 8003868:	4413      	add	r3, r2
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	440b      	add	r3, r1
 800386e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003872:	781b      	ldrb	r3, [r3, #0]
 8003874:	2b01      	cmp	r3, #1
 8003876:	d12e      	bne.n	80038d6 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003878:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800387a:	2b00      	cmp	r3, #0
 800387c:	da2b      	bge.n	80038d6 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800387e:	69bb      	ldr	r3, [r7, #24]
 8003880:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800388a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800388e:	429a      	cmp	r2, r3
 8003890:	d121      	bne.n	80038d6 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003892:	6879      	ldr	r1, [r7, #4]
 8003894:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003896:	4613      	mov	r3, r2
 8003898:	00db      	lsls	r3, r3, #3
 800389a:	4413      	add	r3, r2
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	440b      	add	r3, r1
 80038a0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80038a4:	2201      	movs	r2, #1
 80038a6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80038a8:	6a3b      	ldr	r3, [r7, #32]
 80038aa:	699b      	ldr	r3, [r3, #24]
 80038ac:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80038b0:	6a3b      	ldr	r3, [r7, #32]
 80038b2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80038b4:	6a3b      	ldr	r3, [r7, #32]
 80038b6:	695b      	ldr	r3, [r3, #20]
 80038b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d10a      	bne.n	80038d6 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	69fa      	ldr	r2, [r7, #28]
 80038ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038d2:	6053      	str	r3, [r2, #4]
            break;
 80038d4:	e007      	b.n	80038e6 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80038d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d8:	3301      	adds	r3, #1
 80038da:	627b      	str	r3, [r7, #36]	; 0x24
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d3b4      	bcc.n	8003850 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	695a      	ldr	r2, [r3, #20]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80038f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4618      	mov	r0, r3
 80038fc:	f002 fc24 	bl	8006148 <USB_ReadInterrupts>
 8003900:	4603      	mov	r3, r0
 8003902:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003906:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800390a:	d10a      	bne.n	8003922 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f005 f85f 	bl	80089d0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	695a      	ldr	r2, [r3, #20]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003920:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4618      	mov	r0, r3
 8003928:	f002 fc0e 	bl	8006148 <USB_ReadInterrupts>
 800392c:	4603      	mov	r3, r0
 800392e:	f003 0304 	and.w	r3, r3, #4
 8003932:	2b04      	cmp	r3, #4
 8003934:	d115      	bne.n	8003962 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	f003 0304 	and.w	r3, r3, #4
 8003944:	2b00      	cmp	r3, #0
 8003946:	d002      	beq.n	800394e <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f005 f84f 	bl	80089ec <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	6859      	ldr	r1, [r3, #4]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	69ba      	ldr	r2, [r7, #24]
 800395a:	430a      	orrs	r2, r1
 800395c:	605a      	str	r2, [r3, #4]
 800395e:	e000      	b.n	8003962 <HAL_PCD_IRQHandler+0x938>
      return;
 8003960:	bf00      	nop
    }
  }
}
 8003962:	3734      	adds	r7, #52	; 0x34
 8003964:	46bd      	mov	sp, r7
 8003966:	bd90      	pop	{r4, r7, pc}

08003968 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b082      	sub	sp, #8
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
 8003970:	460b      	mov	r3, r1
 8003972:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800397a:	2b01      	cmp	r3, #1
 800397c:	d101      	bne.n	8003982 <HAL_PCD_SetAddress+0x1a>
 800397e:	2302      	movs	r3, #2
 8003980:	e013      	b.n	80039aa <HAL_PCD_SetAddress+0x42>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2201      	movs	r2, #1
 8003986:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	78fa      	ldrb	r2, [r7, #3]
 800398e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	78fa      	ldrb	r2, [r7, #3]
 8003998:	4611      	mov	r1, r2
 800399a:	4618      	mov	r0, r3
 800399c:	f002 fb6c 	bl	8006078 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80039a8:	2300      	movs	r3, #0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3708      	adds	r7, #8
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}

080039b2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80039b2:	b580      	push	{r7, lr}
 80039b4:	b084      	sub	sp, #16
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
 80039ba:	4608      	mov	r0, r1
 80039bc:	4611      	mov	r1, r2
 80039be:	461a      	mov	r2, r3
 80039c0:	4603      	mov	r3, r0
 80039c2:	70fb      	strb	r3, [r7, #3]
 80039c4:	460b      	mov	r3, r1
 80039c6:	803b      	strh	r3, [r7, #0]
 80039c8:	4613      	mov	r3, r2
 80039ca:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80039cc:	2300      	movs	r3, #0
 80039ce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80039d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	da0f      	bge.n	80039f8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039d8:	78fb      	ldrb	r3, [r7, #3]
 80039da:	f003 020f 	and.w	r2, r3, #15
 80039de:	4613      	mov	r3, r2
 80039e0:	00db      	lsls	r3, r3, #3
 80039e2:	4413      	add	r3, r2
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	3338      	adds	r3, #56	; 0x38
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	4413      	add	r3, r2
 80039ec:	3304      	adds	r3, #4
 80039ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2201      	movs	r2, #1
 80039f4:	705a      	strb	r2, [r3, #1]
 80039f6:	e00f      	b.n	8003a18 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80039f8:	78fb      	ldrb	r3, [r7, #3]
 80039fa:	f003 020f 	and.w	r2, r3, #15
 80039fe:	4613      	mov	r3, r2
 8003a00:	00db      	lsls	r3, r3, #3
 8003a02:	4413      	add	r3, r2
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	4413      	add	r3, r2
 8003a0e:	3304      	adds	r3, #4
 8003a10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2200      	movs	r2, #0
 8003a16:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003a18:	78fb      	ldrb	r3, [r7, #3]
 8003a1a:	f003 030f 	and.w	r3, r3, #15
 8003a1e:	b2da      	uxtb	r2, r3
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003a24:	883a      	ldrh	r2, [r7, #0]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	78ba      	ldrb	r2, [r7, #2]
 8003a2e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	785b      	ldrb	r3, [r3, #1]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d004      	beq.n	8003a42 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	b29a      	uxth	r2, r3
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003a42:	78bb      	ldrb	r3, [r7, #2]
 8003a44:	2b02      	cmp	r3, #2
 8003a46:	d102      	bne.n	8003a4e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d101      	bne.n	8003a5c <HAL_PCD_EP_Open+0xaa>
 8003a58:	2302      	movs	r3, #2
 8003a5a:	e00e      	b.n	8003a7a <HAL_PCD_EP_Open+0xc8>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	68f9      	ldr	r1, [r7, #12]
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f001 fbec 	bl	8005248 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003a78:	7afb      	ldrb	r3, [r7, #11]
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3710      	adds	r7, #16
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}

08003a82 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a82:	b580      	push	{r7, lr}
 8003a84:	b084      	sub	sp, #16
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	6078      	str	r0, [r7, #4]
 8003a8a:	460b      	mov	r3, r1
 8003a8c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003a8e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	da0f      	bge.n	8003ab6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a96:	78fb      	ldrb	r3, [r7, #3]
 8003a98:	f003 020f 	and.w	r2, r3, #15
 8003a9c:	4613      	mov	r3, r2
 8003a9e:	00db      	lsls	r3, r3, #3
 8003aa0:	4413      	add	r3, r2
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	3338      	adds	r3, #56	; 0x38
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	4413      	add	r3, r2
 8003aaa:	3304      	adds	r3, #4
 8003aac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	705a      	strb	r2, [r3, #1]
 8003ab4:	e00f      	b.n	8003ad6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ab6:	78fb      	ldrb	r3, [r7, #3]
 8003ab8:	f003 020f 	and.w	r2, r3, #15
 8003abc:	4613      	mov	r3, r2
 8003abe:	00db      	lsls	r3, r3, #3
 8003ac0:	4413      	add	r3, r2
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	4413      	add	r3, r2
 8003acc:	3304      	adds	r3, #4
 8003ace:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003ad6:	78fb      	ldrb	r3, [r7, #3]
 8003ad8:	f003 030f 	and.w	r3, r3, #15
 8003adc:	b2da      	uxtb	r2, r3
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d101      	bne.n	8003af0 <HAL_PCD_EP_Close+0x6e>
 8003aec:	2302      	movs	r3, #2
 8003aee:	e00e      	b.n	8003b0e <HAL_PCD_EP_Close+0x8c>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	68f9      	ldr	r1, [r7, #12]
 8003afe:	4618      	mov	r0, r3
 8003b00:	f001 fc2a 	bl	8005358 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2200      	movs	r2, #0
 8003b08:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003b0c:	2300      	movs	r3, #0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3710      	adds	r7, #16
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}

08003b16 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003b16:	b580      	push	{r7, lr}
 8003b18:	b086      	sub	sp, #24
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	60f8      	str	r0, [r7, #12]
 8003b1e:	607a      	str	r2, [r7, #4]
 8003b20:	603b      	str	r3, [r7, #0]
 8003b22:	460b      	mov	r3, r1
 8003b24:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b26:	7afb      	ldrb	r3, [r7, #11]
 8003b28:	f003 020f 	and.w	r2, r3, #15
 8003b2c:	4613      	mov	r3, r2
 8003b2e:	00db      	lsls	r3, r3, #3
 8003b30:	4413      	add	r3, r2
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003b38:	68fa      	ldr	r2, [r7, #12]
 8003b3a:	4413      	add	r3, r2
 8003b3c:	3304      	adds	r3, #4
 8003b3e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	683a      	ldr	r2, [r7, #0]
 8003b4a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	2200      	movs	r2, #0
 8003b56:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b58:	7afb      	ldrb	r3, [r7, #11]
 8003b5a:	f003 030f 	and.w	r3, r3, #15
 8003b5e:	b2da      	uxtb	r2, r3
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	691b      	ldr	r3, [r3, #16]
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d102      	bne.n	8003b72 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003b72:	7afb      	ldrb	r3, [r7, #11]
 8003b74:	f003 030f 	and.w	r3, r3, #15
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d109      	bne.n	8003b90 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6818      	ldr	r0, [r3, #0]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	691b      	ldr	r3, [r3, #16]
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	461a      	mov	r2, r3
 8003b88:	6979      	ldr	r1, [r7, #20]
 8003b8a:	f001 ff09 	bl	80059a0 <USB_EP0StartXfer>
 8003b8e:	e008      	b.n	8003ba2 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6818      	ldr	r0, [r3, #0]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	691b      	ldr	r3, [r3, #16]
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	6979      	ldr	r1, [r7, #20]
 8003b9e:	f001 fcb7 	bl	8005510 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003ba2:	2300      	movs	r3, #0
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3718      	adds	r7, #24
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}

08003bac <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	460b      	mov	r3, r1
 8003bb6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003bb8:	78fb      	ldrb	r3, [r7, #3]
 8003bba:	f003 020f 	and.w	r2, r3, #15
 8003bbe:	6879      	ldr	r1, [r7, #4]
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	00db      	lsls	r3, r3, #3
 8003bc4:	4413      	add	r3, r2
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	440b      	add	r3, r1
 8003bca:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003bce:	681b      	ldr	r3, [r3, #0]
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	370c      	adds	r7, #12
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr

08003bdc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b086      	sub	sp, #24
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	607a      	str	r2, [r7, #4]
 8003be6:	603b      	str	r3, [r7, #0]
 8003be8:	460b      	mov	r3, r1
 8003bea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bec:	7afb      	ldrb	r3, [r7, #11]
 8003bee:	f003 020f 	and.w	r2, r3, #15
 8003bf2:	4613      	mov	r3, r2
 8003bf4:	00db      	lsls	r3, r3, #3
 8003bf6:	4413      	add	r3, r2
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	3338      	adds	r3, #56	; 0x38
 8003bfc:	68fa      	ldr	r2, [r7, #12]
 8003bfe:	4413      	add	r3, r2
 8003c00:	3304      	adds	r3, #4
 8003c02:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	683a      	ldr	r2, [r7, #0]
 8003c0e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	2200      	movs	r2, #0
 8003c14:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	2201      	movs	r2, #1
 8003c1a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c1c:	7afb      	ldrb	r3, [r7, #11]
 8003c1e:	f003 030f 	and.w	r3, r3, #15
 8003c22:	b2da      	uxtb	r2, r3
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	691b      	ldr	r3, [r3, #16]
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d102      	bne.n	8003c36 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003c36:	7afb      	ldrb	r3, [r7, #11]
 8003c38:	f003 030f 	and.w	r3, r3, #15
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d109      	bne.n	8003c54 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6818      	ldr	r0, [r3, #0]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	691b      	ldr	r3, [r3, #16]
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	6979      	ldr	r1, [r7, #20]
 8003c4e:	f001 fea7 	bl	80059a0 <USB_EP0StartXfer>
 8003c52:	e008      	b.n	8003c66 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6818      	ldr	r0, [r3, #0]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	691b      	ldr	r3, [r3, #16]
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	461a      	mov	r2, r3
 8003c60:	6979      	ldr	r1, [r7, #20]
 8003c62:	f001 fc55 	bl	8005510 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003c66:	2300      	movs	r3, #0
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3718      	adds	r7, #24
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}

08003c70 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b084      	sub	sp, #16
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	460b      	mov	r3, r1
 8003c7a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003c7c:	78fb      	ldrb	r3, [r7, #3]
 8003c7e:	f003 020f 	and.w	r2, r3, #15
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d901      	bls.n	8003c8e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e050      	b.n	8003d30 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003c8e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	da0f      	bge.n	8003cb6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c96:	78fb      	ldrb	r3, [r7, #3]
 8003c98:	f003 020f 	and.w	r2, r3, #15
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	00db      	lsls	r3, r3, #3
 8003ca0:	4413      	add	r3, r2
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	3338      	adds	r3, #56	; 0x38
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	4413      	add	r3, r2
 8003caa:	3304      	adds	r3, #4
 8003cac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	705a      	strb	r2, [r3, #1]
 8003cb4:	e00d      	b.n	8003cd2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003cb6:	78fa      	ldrb	r2, [r7, #3]
 8003cb8:	4613      	mov	r3, r2
 8003cba:	00db      	lsls	r3, r3, #3
 8003cbc:	4413      	add	r3, r2
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	4413      	add	r3, r2
 8003cc8:	3304      	adds	r3, #4
 8003cca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003cd8:	78fb      	ldrb	r3, [r7, #3]
 8003cda:	f003 030f 	and.w	r3, r3, #15
 8003cde:	b2da      	uxtb	r2, r3
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d101      	bne.n	8003cf2 <HAL_PCD_EP_SetStall+0x82>
 8003cee:	2302      	movs	r3, #2
 8003cf0:	e01e      	b.n	8003d30 <HAL_PCD_EP_SetStall+0xc0>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	68f9      	ldr	r1, [r7, #12]
 8003d00:	4618      	mov	r0, r3
 8003d02:	f002 f8e5 	bl	8005ed0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003d06:	78fb      	ldrb	r3, [r7, #3]
 8003d08:	f003 030f 	and.w	r3, r3, #15
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d10a      	bne.n	8003d26 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6818      	ldr	r0, [r3, #0]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	691b      	ldr	r3, [r3, #16]
 8003d18:	b2d9      	uxtb	r1, r3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003d20:	461a      	mov	r2, r3
 8003d22:	f002 fad5 	bl	80062d0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003d2e:	2300      	movs	r3, #0
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3710      	adds	r7, #16
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	460b      	mov	r3, r1
 8003d42:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003d44:	78fb      	ldrb	r3, [r7, #3]
 8003d46:	f003 020f 	and.w	r2, r3, #15
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d901      	bls.n	8003d56 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e042      	b.n	8003ddc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003d56:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	da0f      	bge.n	8003d7e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d5e:	78fb      	ldrb	r3, [r7, #3]
 8003d60:	f003 020f 	and.w	r2, r3, #15
 8003d64:	4613      	mov	r3, r2
 8003d66:	00db      	lsls	r3, r3, #3
 8003d68:	4413      	add	r3, r2
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	3338      	adds	r3, #56	; 0x38
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	4413      	add	r3, r2
 8003d72:	3304      	adds	r3, #4
 8003d74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2201      	movs	r2, #1
 8003d7a:	705a      	strb	r2, [r3, #1]
 8003d7c:	e00f      	b.n	8003d9e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d7e:	78fb      	ldrb	r3, [r7, #3]
 8003d80:	f003 020f 	and.w	r2, r3, #15
 8003d84:	4613      	mov	r3, r2
 8003d86:	00db      	lsls	r3, r3, #3
 8003d88:	4413      	add	r3, r2
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	4413      	add	r3, r2
 8003d94:	3304      	adds	r3, #4
 8003d96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2200      	movs	r2, #0
 8003da2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003da4:	78fb      	ldrb	r3, [r7, #3]
 8003da6:	f003 030f 	and.w	r3, r3, #15
 8003daa:	b2da      	uxtb	r2, r3
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d101      	bne.n	8003dbe <HAL_PCD_EP_ClrStall+0x86>
 8003dba:	2302      	movs	r3, #2
 8003dbc:	e00e      	b.n	8003ddc <HAL_PCD_EP_ClrStall+0xa4>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	68f9      	ldr	r1, [r7, #12]
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f002 f8ed 	bl	8005fac <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003dda:	2300      	movs	r3, #0
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3710      	adds	r7, #16
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}

08003de4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b084      	sub	sp, #16
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	460b      	mov	r3, r1
 8003dee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003df0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	da0c      	bge.n	8003e12 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003df8:	78fb      	ldrb	r3, [r7, #3]
 8003dfa:	f003 020f 	and.w	r2, r3, #15
 8003dfe:	4613      	mov	r3, r2
 8003e00:	00db      	lsls	r3, r3, #3
 8003e02:	4413      	add	r3, r2
 8003e04:	009b      	lsls	r3, r3, #2
 8003e06:	3338      	adds	r3, #56	; 0x38
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	4413      	add	r3, r2
 8003e0c:	3304      	adds	r3, #4
 8003e0e:	60fb      	str	r3, [r7, #12]
 8003e10:	e00c      	b.n	8003e2c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e12:	78fb      	ldrb	r3, [r7, #3]
 8003e14:	f003 020f 	and.w	r2, r3, #15
 8003e18:	4613      	mov	r3, r2
 8003e1a:	00db      	lsls	r3, r3, #3
 8003e1c:	4413      	add	r3, r2
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003e24:	687a      	ldr	r2, [r7, #4]
 8003e26:	4413      	add	r3, r2
 8003e28:	3304      	adds	r3, #4
 8003e2a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	68f9      	ldr	r1, [r7, #12]
 8003e32:	4618      	mov	r0, r3
 8003e34:	f001 ff0c 	bl	8005c50 <USB_EPStopXfer>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003e3c:	7afb      	ldrb	r3, [r7, #11]
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3710      	adds	r7, #16
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}

08003e46 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003e46:	b580      	push	{r7, lr}
 8003e48:	b08a      	sub	sp, #40	; 0x28
 8003e4a:	af02      	add	r7, sp, #8
 8003e4c:	6078      	str	r0, [r7, #4]
 8003e4e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003e5a:	683a      	ldr	r2, [r7, #0]
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	00db      	lsls	r3, r3, #3
 8003e60:	4413      	add	r3, r2
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	3338      	adds	r3, #56	; 0x38
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	4413      	add	r3, r2
 8003e6a:	3304      	adds	r3, #4
 8003e6c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	6a1a      	ldr	r2, [r3, #32]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	699b      	ldr	r3, [r3, #24]
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d901      	bls.n	8003e7e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e06c      	b.n	8003f58 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	699a      	ldr	r2, [r3, #24]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	6a1b      	ldr	r3, [r3, #32]
 8003e86:	1ad3      	subs	r3, r2, r3
 8003e88:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	68db      	ldr	r3, [r3, #12]
 8003e8e:	69fa      	ldr	r2, [r7, #28]
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d902      	bls.n	8003e9a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	3303      	adds	r3, #3
 8003e9e:	089b      	lsrs	r3, r3, #2
 8003ea0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003ea2:	e02b      	b.n	8003efc <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	699a      	ldr	r2, [r3, #24]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	6a1b      	ldr	r3, [r3, #32]
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	69fa      	ldr	r2, [r7, #28]
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d902      	bls.n	8003ec0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003ec0:	69fb      	ldr	r3, [r7, #28]
 8003ec2:	3303      	adds	r3, #3
 8003ec4:	089b      	lsrs	r3, r3, #2
 8003ec6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6919      	ldr	r1, [r3, #16]
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	b2da      	uxtb	r2, r3
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	9300      	str	r3, [sp, #0]
 8003edc:	4603      	mov	r3, r0
 8003ede:	6978      	ldr	r0, [r7, #20]
 8003ee0:	f001 ff60 	bl	8005da4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	691a      	ldr	r2, [r3, #16]
 8003ee8:	69fb      	ldr	r3, [r7, #28]
 8003eea:	441a      	add	r2, r3
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	6a1a      	ldr	r2, [r3, #32]
 8003ef4:	69fb      	ldr	r3, [r7, #28]
 8003ef6:	441a      	add	r2, r3
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	015a      	lsls	r2, r3, #5
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	4413      	add	r3, r2
 8003f04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f08:	699b      	ldr	r3, [r3, #24]
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	69ba      	ldr	r2, [r7, #24]
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d809      	bhi.n	8003f26 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6a1a      	ldr	r2, [r3, #32]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d203      	bcs.n	8003f26 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	699b      	ldr	r3, [r3, #24]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d1be      	bne.n	8003ea4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	699a      	ldr	r2, [r3, #24]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6a1b      	ldr	r3, [r3, #32]
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d811      	bhi.n	8003f56 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	f003 030f 	and.w	r3, r3, #15
 8003f38:	2201      	movs	r2, #1
 8003f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	43db      	mvns	r3, r3
 8003f4c:	6939      	ldr	r1, [r7, #16]
 8003f4e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f52:	4013      	ands	r3, r2
 8003f54:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003f56:	2300      	movs	r3, #0
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3720      	adds	r7, #32
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}

08003f60 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b088      	sub	sp, #32
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	333c      	adds	r3, #60	; 0x3c
 8003f78:	3304      	adds	r3, #4
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	015a      	lsls	r2, r3, #5
 8003f82:	69bb      	ldr	r3, [r7, #24]
 8003f84:	4413      	add	r3, r2
 8003f86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	691b      	ldr	r3, [r3, #16]
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d17b      	bne.n	800408e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	f003 0308 	and.w	r3, r3, #8
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d015      	beq.n	8003fcc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	4a61      	ldr	r2, [pc, #388]	; (8004128 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	f240 80b9 	bls.w	800411c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	f000 80b3 	beq.w	800411c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	015a      	lsls	r2, r3, #5
 8003fba:	69bb      	ldr	r3, [r7, #24]
 8003fbc:	4413      	add	r3, r2
 8003fbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fc8:	6093      	str	r3, [r2, #8]
 8003fca:	e0a7      	b.n	800411c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	f003 0320 	and.w	r3, r3, #32
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d009      	beq.n	8003fea <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	015a      	lsls	r2, r3, #5
 8003fda:	69bb      	ldr	r3, [r7, #24]
 8003fdc:	4413      	add	r3, r2
 8003fde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	2320      	movs	r3, #32
 8003fe6:	6093      	str	r3, [r2, #8]
 8003fe8:	e098      	b.n	800411c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	f040 8093 	bne.w	800411c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	4a4b      	ldr	r2, [pc, #300]	; (8004128 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d90f      	bls.n	800401e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004004:	2b00      	cmp	r3, #0
 8004006:	d00a      	beq.n	800401e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	015a      	lsls	r2, r3, #5
 800400c:	69bb      	ldr	r3, [r7, #24]
 800400e:	4413      	add	r3, r2
 8004010:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004014:	461a      	mov	r2, r3
 8004016:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800401a:	6093      	str	r3, [r2, #8]
 800401c:	e07e      	b.n	800411c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800401e:	683a      	ldr	r2, [r7, #0]
 8004020:	4613      	mov	r3, r2
 8004022:	00db      	lsls	r3, r3, #3
 8004024:	4413      	add	r3, r2
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	4413      	add	r3, r2
 8004030:	3304      	adds	r3, #4
 8004032:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	69da      	ldr	r2, [r3, #28]
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	0159      	lsls	r1, r3, #5
 800403c:	69bb      	ldr	r3, [r7, #24]
 800403e:	440b      	add	r3, r1
 8004040:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004044:	691b      	ldr	r3, [r3, #16]
 8004046:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800404a:	1ad2      	subs	r2, r2, r3
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d114      	bne.n	8004080 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	699b      	ldr	r3, [r3, #24]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d109      	bne.n	8004072 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6818      	ldr	r0, [r3, #0]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004068:	461a      	mov	r2, r3
 800406a:	2101      	movs	r1, #1
 800406c:	f002 f930 	bl	80062d0 <USB_EP0_OutStart>
 8004070:	e006      	b.n	8004080 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	691a      	ldr	r2, [r3, #16]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	6a1b      	ldr	r3, [r3, #32]
 800407a:	441a      	add	r2, r3
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	b2db      	uxtb	r3, r3
 8004084:	4619      	mov	r1, r3
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f004 fbe8 	bl	800885c <HAL_PCD_DataOutStageCallback>
 800408c:	e046      	b.n	800411c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	4a26      	ldr	r2, [pc, #152]	; (800412c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d124      	bne.n	80040e0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800409c:	2b00      	cmp	r3, #0
 800409e:	d00a      	beq.n	80040b6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	015a      	lsls	r2, r3, #5
 80040a4:	69bb      	ldr	r3, [r7, #24]
 80040a6:	4413      	add	r3, r2
 80040a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040ac:	461a      	mov	r2, r3
 80040ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040b2:	6093      	str	r3, [r2, #8]
 80040b4:	e032      	b.n	800411c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	f003 0320 	and.w	r3, r3, #32
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d008      	beq.n	80040d2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	015a      	lsls	r2, r3, #5
 80040c4:	69bb      	ldr	r3, [r7, #24]
 80040c6:	4413      	add	r3, r2
 80040c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040cc:	461a      	mov	r2, r3
 80040ce:	2320      	movs	r3, #32
 80040d0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	4619      	mov	r1, r3
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f004 fbbf 	bl	800885c <HAL_PCD_DataOutStageCallback>
 80040de:	e01d      	b.n	800411c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d114      	bne.n	8004110 <PCD_EP_OutXfrComplete_int+0x1b0>
 80040e6:	6879      	ldr	r1, [r7, #4]
 80040e8:	683a      	ldr	r2, [r7, #0]
 80040ea:	4613      	mov	r3, r2
 80040ec:	00db      	lsls	r3, r3, #3
 80040ee:	4413      	add	r3, r2
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	440b      	add	r3, r1
 80040f4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d108      	bne.n	8004110 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6818      	ldr	r0, [r3, #0]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004108:	461a      	mov	r2, r3
 800410a:	2100      	movs	r1, #0
 800410c:	f002 f8e0 	bl	80062d0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	b2db      	uxtb	r3, r3
 8004114:	4619      	mov	r1, r3
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f004 fba0 	bl	800885c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800411c:	2300      	movs	r3, #0
}
 800411e:	4618      	mov	r0, r3
 8004120:	3720      	adds	r7, #32
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	4f54300a 	.word	0x4f54300a
 800412c:	4f54310a 	.word	0x4f54310a

08004130 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b086      	sub	sp, #24
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	333c      	adds	r3, #60	; 0x3c
 8004148:	3304      	adds	r3, #4
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	015a      	lsls	r2, r3, #5
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	4413      	add	r3, r2
 8004156:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	4a15      	ldr	r2, [pc, #84]	; (80041b8 <PCD_EP_OutSetupPacket_int+0x88>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d90e      	bls.n	8004184 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800416c:	2b00      	cmp	r3, #0
 800416e:	d009      	beq.n	8004184 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	015a      	lsls	r2, r3, #5
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	4413      	add	r3, r2
 8004178:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800417c:	461a      	mov	r2, r3
 800417e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004182:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	f004 fb57 	bl	8008838 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	4a0a      	ldr	r2, [pc, #40]	; (80041b8 <PCD_EP_OutSetupPacket_int+0x88>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d90c      	bls.n	80041ac <PCD_EP_OutSetupPacket_int+0x7c>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	691b      	ldr	r3, [r3, #16]
 8004196:	2b01      	cmp	r3, #1
 8004198:	d108      	bne.n	80041ac <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6818      	ldr	r0, [r3, #0]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80041a4:	461a      	mov	r2, r3
 80041a6:	2101      	movs	r1, #1
 80041a8:	f002 f892 	bl	80062d0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80041ac:	2300      	movs	r3, #0
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3718      	adds	r7, #24
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	4f54300a 	.word	0x4f54300a

080041bc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80041bc:	b480      	push	{r7}
 80041be:	b085      	sub	sp, #20
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	460b      	mov	r3, r1
 80041c6:	70fb      	strb	r3, [r7, #3]
 80041c8:	4613      	mov	r3, r2
 80041ca:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80041d4:	78fb      	ldrb	r3, [r7, #3]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d107      	bne.n	80041ea <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80041da:	883b      	ldrh	r3, [r7, #0]
 80041dc:	0419      	lsls	r1, r3, #16
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	68ba      	ldr	r2, [r7, #8]
 80041e4:	430a      	orrs	r2, r1
 80041e6:	629a      	str	r2, [r3, #40]	; 0x28
 80041e8:	e028      	b.n	800423c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f0:	0c1b      	lsrs	r3, r3, #16
 80041f2:	68ba      	ldr	r2, [r7, #8]
 80041f4:	4413      	add	r3, r2
 80041f6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80041f8:	2300      	movs	r3, #0
 80041fa:	73fb      	strb	r3, [r7, #15]
 80041fc:	e00d      	b.n	800421a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	7bfb      	ldrb	r3, [r7, #15]
 8004204:	3340      	adds	r3, #64	; 0x40
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	4413      	add	r3, r2
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	0c1b      	lsrs	r3, r3, #16
 800420e:	68ba      	ldr	r2, [r7, #8]
 8004210:	4413      	add	r3, r2
 8004212:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004214:	7bfb      	ldrb	r3, [r7, #15]
 8004216:	3301      	adds	r3, #1
 8004218:	73fb      	strb	r3, [r7, #15]
 800421a:	7bfa      	ldrb	r2, [r7, #15]
 800421c:	78fb      	ldrb	r3, [r7, #3]
 800421e:	3b01      	subs	r3, #1
 8004220:	429a      	cmp	r2, r3
 8004222:	d3ec      	bcc.n	80041fe <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004224:	883b      	ldrh	r3, [r7, #0]
 8004226:	0418      	lsls	r0, r3, #16
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6819      	ldr	r1, [r3, #0]
 800422c:	78fb      	ldrb	r3, [r7, #3]
 800422e:	3b01      	subs	r3, #1
 8004230:	68ba      	ldr	r2, [r7, #8]
 8004232:	4302      	orrs	r2, r0
 8004234:	3340      	adds	r3, #64	; 0x40
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	440b      	add	r3, r1
 800423a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800423c:	2300      	movs	r3, #0
}
 800423e:	4618      	mov	r0, r3
 8004240:	3714      	adds	r7, #20
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr

0800424a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800424a:	b480      	push	{r7}
 800424c:	b083      	sub	sp, #12
 800424e:	af00      	add	r7, sp, #0
 8004250:	6078      	str	r0, [r7, #4]
 8004252:	460b      	mov	r3, r1
 8004254:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	887a      	ldrh	r2, [r7, #2]
 800425c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800425e:	2300      	movs	r3, #0
}
 8004260:	4618      	mov	r0, r3
 8004262:	370c      	adds	r7, #12
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr

0800426c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	460b      	mov	r3, r1
 8004276:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004278:	bf00      	nop
 800427a:	370c      	adds	r7, #12
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr

08004284 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b086      	sub	sp, #24
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d101      	bne.n	8004296 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e267      	b.n	8004766 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 0301 	and.w	r3, r3, #1
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d075      	beq.n	800438e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042a2:	4b88      	ldr	r3, [pc, #544]	; (80044c4 <HAL_RCC_OscConfig+0x240>)
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	f003 030c 	and.w	r3, r3, #12
 80042aa:	2b04      	cmp	r3, #4
 80042ac:	d00c      	beq.n	80042c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042ae:	4b85      	ldr	r3, [pc, #532]	; (80044c4 <HAL_RCC_OscConfig+0x240>)
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042b6:	2b08      	cmp	r3, #8
 80042b8:	d112      	bne.n	80042e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042ba:	4b82      	ldr	r3, [pc, #520]	; (80044c4 <HAL_RCC_OscConfig+0x240>)
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042c6:	d10b      	bne.n	80042e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042c8:	4b7e      	ldr	r3, [pc, #504]	; (80044c4 <HAL_RCC_OscConfig+0x240>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d05b      	beq.n	800438c <HAL_RCC_OscConfig+0x108>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d157      	bne.n	800438c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e242      	b.n	8004766 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042e8:	d106      	bne.n	80042f8 <HAL_RCC_OscConfig+0x74>
 80042ea:	4b76      	ldr	r3, [pc, #472]	; (80044c4 <HAL_RCC_OscConfig+0x240>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a75      	ldr	r2, [pc, #468]	; (80044c4 <HAL_RCC_OscConfig+0x240>)
 80042f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042f4:	6013      	str	r3, [r2, #0]
 80042f6:	e01d      	b.n	8004334 <HAL_RCC_OscConfig+0xb0>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004300:	d10c      	bne.n	800431c <HAL_RCC_OscConfig+0x98>
 8004302:	4b70      	ldr	r3, [pc, #448]	; (80044c4 <HAL_RCC_OscConfig+0x240>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a6f      	ldr	r2, [pc, #444]	; (80044c4 <HAL_RCC_OscConfig+0x240>)
 8004308:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800430c:	6013      	str	r3, [r2, #0]
 800430e:	4b6d      	ldr	r3, [pc, #436]	; (80044c4 <HAL_RCC_OscConfig+0x240>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a6c      	ldr	r2, [pc, #432]	; (80044c4 <HAL_RCC_OscConfig+0x240>)
 8004314:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004318:	6013      	str	r3, [r2, #0]
 800431a:	e00b      	b.n	8004334 <HAL_RCC_OscConfig+0xb0>
 800431c:	4b69      	ldr	r3, [pc, #420]	; (80044c4 <HAL_RCC_OscConfig+0x240>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a68      	ldr	r2, [pc, #416]	; (80044c4 <HAL_RCC_OscConfig+0x240>)
 8004322:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004326:	6013      	str	r3, [r2, #0]
 8004328:	4b66      	ldr	r3, [pc, #408]	; (80044c4 <HAL_RCC_OscConfig+0x240>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a65      	ldr	r2, [pc, #404]	; (80044c4 <HAL_RCC_OscConfig+0x240>)
 800432e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004332:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d013      	beq.n	8004364 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800433c:	f7fd fa96 	bl	800186c <HAL_GetTick>
 8004340:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004342:	e008      	b.n	8004356 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004344:	f7fd fa92 	bl	800186c <HAL_GetTick>
 8004348:	4602      	mov	r2, r0
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	2b64      	cmp	r3, #100	; 0x64
 8004350:	d901      	bls.n	8004356 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004352:	2303      	movs	r3, #3
 8004354:	e207      	b.n	8004766 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004356:	4b5b      	ldr	r3, [pc, #364]	; (80044c4 <HAL_RCC_OscConfig+0x240>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d0f0      	beq.n	8004344 <HAL_RCC_OscConfig+0xc0>
 8004362:	e014      	b.n	800438e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004364:	f7fd fa82 	bl	800186c <HAL_GetTick>
 8004368:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800436a:	e008      	b.n	800437e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800436c:	f7fd fa7e 	bl	800186c <HAL_GetTick>
 8004370:	4602      	mov	r2, r0
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	1ad3      	subs	r3, r2, r3
 8004376:	2b64      	cmp	r3, #100	; 0x64
 8004378:	d901      	bls.n	800437e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800437a:	2303      	movs	r3, #3
 800437c:	e1f3      	b.n	8004766 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800437e:	4b51      	ldr	r3, [pc, #324]	; (80044c4 <HAL_RCC_OscConfig+0x240>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004386:	2b00      	cmp	r3, #0
 8004388:	d1f0      	bne.n	800436c <HAL_RCC_OscConfig+0xe8>
 800438a:	e000      	b.n	800438e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800438c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 0302 	and.w	r3, r3, #2
 8004396:	2b00      	cmp	r3, #0
 8004398:	d063      	beq.n	8004462 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800439a:	4b4a      	ldr	r3, [pc, #296]	; (80044c4 <HAL_RCC_OscConfig+0x240>)
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	f003 030c 	and.w	r3, r3, #12
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d00b      	beq.n	80043be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043a6:	4b47      	ldr	r3, [pc, #284]	; (80044c4 <HAL_RCC_OscConfig+0x240>)
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043ae:	2b08      	cmp	r3, #8
 80043b0:	d11c      	bne.n	80043ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043b2:	4b44      	ldr	r3, [pc, #272]	; (80044c4 <HAL_RCC_OscConfig+0x240>)
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d116      	bne.n	80043ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043be:	4b41      	ldr	r3, [pc, #260]	; (80044c4 <HAL_RCC_OscConfig+0x240>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 0302 	and.w	r3, r3, #2
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d005      	beq.n	80043d6 <HAL_RCC_OscConfig+0x152>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	68db      	ldr	r3, [r3, #12]
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d001      	beq.n	80043d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e1c7      	b.n	8004766 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043d6:	4b3b      	ldr	r3, [pc, #236]	; (80044c4 <HAL_RCC_OscConfig+0x240>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	691b      	ldr	r3, [r3, #16]
 80043e2:	00db      	lsls	r3, r3, #3
 80043e4:	4937      	ldr	r1, [pc, #220]	; (80044c4 <HAL_RCC_OscConfig+0x240>)
 80043e6:	4313      	orrs	r3, r2
 80043e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043ea:	e03a      	b.n	8004462 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d020      	beq.n	8004436 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043f4:	4b34      	ldr	r3, [pc, #208]	; (80044c8 <HAL_RCC_OscConfig+0x244>)
 80043f6:	2201      	movs	r2, #1
 80043f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043fa:	f7fd fa37 	bl	800186c <HAL_GetTick>
 80043fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004400:	e008      	b.n	8004414 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004402:	f7fd fa33 	bl	800186c <HAL_GetTick>
 8004406:	4602      	mov	r2, r0
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	1ad3      	subs	r3, r2, r3
 800440c:	2b02      	cmp	r3, #2
 800440e:	d901      	bls.n	8004414 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004410:	2303      	movs	r3, #3
 8004412:	e1a8      	b.n	8004766 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004414:	4b2b      	ldr	r3, [pc, #172]	; (80044c4 <HAL_RCC_OscConfig+0x240>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 0302 	and.w	r3, r3, #2
 800441c:	2b00      	cmp	r3, #0
 800441e:	d0f0      	beq.n	8004402 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004420:	4b28      	ldr	r3, [pc, #160]	; (80044c4 <HAL_RCC_OscConfig+0x240>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	691b      	ldr	r3, [r3, #16]
 800442c:	00db      	lsls	r3, r3, #3
 800442e:	4925      	ldr	r1, [pc, #148]	; (80044c4 <HAL_RCC_OscConfig+0x240>)
 8004430:	4313      	orrs	r3, r2
 8004432:	600b      	str	r3, [r1, #0]
 8004434:	e015      	b.n	8004462 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004436:	4b24      	ldr	r3, [pc, #144]	; (80044c8 <HAL_RCC_OscConfig+0x244>)
 8004438:	2200      	movs	r2, #0
 800443a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800443c:	f7fd fa16 	bl	800186c <HAL_GetTick>
 8004440:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004442:	e008      	b.n	8004456 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004444:	f7fd fa12 	bl	800186c <HAL_GetTick>
 8004448:	4602      	mov	r2, r0
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	1ad3      	subs	r3, r2, r3
 800444e:	2b02      	cmp	r3, #2
 8004450:	d901      	bls.n	8004456 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	e187      	b.n	8004766 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004456:	4b1b      	ldr	r3, [pc, #108]	; (80044c4 <HAL_RCC_OscConfig+0x240>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 0302 	and.w	r3, r3, #2
 800445e:	2b00      	cmp	r3, #0
 8004460:	d1f0      	bne.n	8004444 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 0308 	and.w	r3, r3, #8
 800446a:	2b00      	cmp	r3, #0
 800446c:	d036      	beq.n	80044dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	695b      	ldr	r3, [r3, #20]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d016      	beq.n	80044a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004476:	4b15      	ldr	r3, [pc, #84]	; (80044cc <HAL_RCC_OscConfig+0x248>)
 8004478:	2201      	movs	r2, #1
 800447a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800447c:	f7fd f9f6 	bl	800186c <HAL_GetTick>
 8004480:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004482:	e008      	b.n	8004496 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004484:	f7fd f9f2 	bl	800186c <HAL_GetTick>
 8004488:	4602      	mov	r2, r0
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	2b02      	cmp	r3, #2
 8004490:	d901      	bls.n	8004496 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	e167      	b.n	8004766 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004496:	4b0b      	ldr	r3, [pc, #44]	; (80044c4 <HAL_RCC_OscConfig+0x240>)
 8004498:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800449a:	f003 0302 	and.w	r3, r3, #2
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d0f0      	beq.n	8004484 <HAL_RCC_OscConfig+0x200>
 80044a2:	e01b      	b.n	80044dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044a4:	4b09      	ldr	r3, [pc, #36]	; (80044cc <HAL_RCC_OscConfig+0x248>)
 80044a6:	2200      	movs	r2, #0
 80044a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044aa:	f7fd f9df 	bl	800186c <HAL_GetTick>
 80044ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044b0:	e00e      	b.n	80044d0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044b2:	f7fd f9db 	bl	800186c <HAL_GetTick>
 80044b6:	4602      	mov	r2, r0
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	1ad3      	subs	r3, r2, r3
 80044bc:	2b02      	cmp	r3, #2
 80044be:	d907      	bls.n	80044d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80044c0:	2303      	movs	r3, #3
 80044c2:	e150      	b.n	8004766 <HAL_RCC_OscConfig+0x4e2>
 80044c4:	40023800 	.word	0x40023800
 80044c8:	42470000 	.word	0x42470000
 80044cc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044d0:	4b88      	ldr	r3, [pc, #544]	; (80046f4 <HAL_RCC_OscConfig+0x470>)
 80044d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044d4:	f003 0302 	and.w	r3, r3, #2
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d1ea      	bne.n	80044b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 0304 	and.w	r3, r3, #4
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	f000 8097 	beq.w	8004618 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044ea:	2300      	movs	r3, #0
 80044ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044ee:	4b81      	ldr	r3, [pc, #516]	; (80046f4 <HAL_RCC_OscConfig+0x470>)
 80044f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d10f      	bne.n	800451a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044fa:	2300      	movs	r3, #0
 80044fc:	60bb      	str	r3, [r7, #8]
 80044fe:	4b7d      	ldr	r3, [pc, #500]	; (80046f4 <HAL_RCC_OscConfig+0x470>)
 8004500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004502:	4a7c      	ldr	r2, [pc, #496]	; (80046f4 <HAL_RCC_OscConfig+0x470>)
 8004504:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004508:	6413      	str	r3, [r2, #64]	; 0x40
 800450a:	4b7a      	ldr	r3, [pc, #488]	; (80046f4 <HAL_RCC_OscConfig+0x470>)
 800450c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004512:	60bb      	str	r3, [r7, #8]
 8004514:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004516:	2301      	movs	r3, #1
 8004518:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800451a:	4b77      	ldr	r3, [pc, #476]	; (80046f8 <HAL_RCC_OscConfig+0x474>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004522:	2b00      	cmp	r3, #0
 8004524:	d118      	bne.n	8004558 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004526:	4b74      	ldr	r3, [pc, #464]	; (80046f8 <HAL_RCC_OscConfig+0x474>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a73      	ldr	r2, [pc, #460]	; (80046f8 <HAL_RCC_OscConfig+0x474>)
 800452c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004530:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004532:	f7fd f99b 	bl	800186c <HAL_GetTick>
 8004536:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004538:	e008      	b.n	800454c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800453a:	f7fd f997 	bl	800186c <HAL_GetTick>
 800453e:	4602      	mov	r2, r0
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	2b02      	cmp	r3, #2
 8004546:	d901      	bls.n	800454c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004548:	2303      	movs	r3, #3
 800454a:	e10c      	b.n	8004766 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800454c:	4b6a      	ldr	r3, [pc, #424]	; (80046f8 <HAL_RCC_OscConfig+0x474>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004554:	2b00      	cmp	r3, #0
 8004556:	d0f0      	beq.n	800453a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	2b01      	cmp	r3, #1
 800455e:	d106      	bne.n	800456e <HAL_RCC_OscConfig+0x2ea>
 8004560:	4b64      	ldr	r3, [pc, #400]	; (80046f4 <HAL_RCC_OscConfig+0x470>)
 8004562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004564:	4a63      	ldr	r2, [pc, #396]	; (80046f4 <HAL_RCC_OscConfig+0x470>)
 8004566:	f043 0301 	orr.w	r3, r3, #1
 800456a:	6713      	str	r3, [r2, #112]	; 0x70
 800456c:	e01c      	b.n	80045a8 <HAL_RCC_OscConfig+0x324>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	2b05      	cmp	r3, #5
 8004574:	d10c      	bne.n	8004590 <HAL_RCC_OscConfig+0x30c>
 8004576:	4b5f      	ldr	r3, [pc, #380]	; (80046f4 <HAL_RCC_OscConfig+0x470>)
 8004578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800457a:	4a5e      	ldr	r2, [pc, #376]	; (80046f4 <HAL_RCC_OscConfig+0x470>)
 800457c:	f043 0304 	orr.w	r3, r3, #4
 8004580:	6713      	str	r3, [r2, #112]	; 0x70
 8004582:	4b5c      	ldr	r3, [pc, #368]	; (80046f4 <HAL_RCC_OscConfig+0x470>)
 8004584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004586:	4a5b      	ldr	r2, [pc, #364]	; (80046f4 <HAL_RCC_OscConfig+0x470>)
 8004588:	f043 0301 	orr.w	r3, r3, #1
 800458c:	6713      	str	r3, [r2, #112]	; 0x70
 800458e:	e00b      	b.n	80045a8 <HAL_RCC_OscConfig+0x324>
 8004590:	4b58      	ldr	r3, [pc, #352]	; (80046f4 <HAL_RCC_OscConfig+0x470>)
 8004592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004594:	4a57      	ldr	r2, [pc, #348]	; (80046f4 <HAL_RCC_OscConfig+0x470>)
 8004596:	f023 0301 	bic.w	r3, r3, #1
 800459a:	6713      	str	r3, [r2, #112]	; 0x70
 800459c:	4b55      	ldr	r3, [pc, #340]	; (80046f4 <HAL_RCC_OscConfig+0x470>)
 800459e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045a0:	4a54      	ldr	r2, [pc, #336]	; (80046f4 <HAL_RCC_OscConfig+0x470>)
 80045a2:	f023 0304 	bic.w	r3, r3, #4
 80045a6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d015      	beq.n	80045dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045b0:	f7fd f95c 	bl	800186c <HAL_GetTick>
 80045b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045b6:	e00a      	b.n	80045ce <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045b8:	f7fd f958 	bl	800186c <HAL_GetTick>
 80045bc:	4602      	mov	r2, r0
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	1ad3      	subs	r3, r2, r3
 80045c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d901      	bls.n	80045ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80045ca:	2303      	movs	r3, #3
 80045cc:	e0cb      	b.n	8004766 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045ce:	4b49      	ldr	r3, [pc, #292]	; (80046f4 <HAL_RCC_OscConfig+0x470>)
 80045d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045d2:	f003 0302 	and.w	r3, r3, #2
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d0ee      	beq.n	80045b8 <HAL_RCC_OscConfig+0x334>
 80045da:	e014      	b.n	8004606 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045dc:	f7fd f946 	bl	800186c <HAL_GetTick>
 80045e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045e2:	e00a      	b.n	80045fa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045e4:	f7fd f942 	bl	800186c <HAL_GetTick>
 80045e8:	4602      	mov	r2, r0
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d901      	bls.n	80045fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80045f6:	2303      	movs	r3, #3
 80045f8:	e0b5      	b.n	8004766 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045fa:	4b3e      	ldr	r3, [pc, #248]	; (80046f4 <HAL_RCC_OscConfig+0x470>)
 80045fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045fe:	f003 0302 	and.w	r3, r3, #2
 8004602:	2b00      	cmp	r3, #0
 8004604:	d1ee      	bne.n	80045e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004606:	7dfb      	ldrb	r3, [r7, #23]
 8004608:	2b01      	cmp	r3, #1
 800460a:	d105      	bne.n	8004618 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800460c:	4b39      	ldr	r3, [pc, #228]	; (80046f4 <HAL_RCC_OscConfig+0x470>)
 800460e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004610:	4a38      	ldr	r2, [pc, #224]	; (80046f4 <HAL_RCC_OscConfig+0x470>)
 8004612:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004616:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	699b      	ldr	r3, [r3, #24]
 800461c:	2b00      	cmp	r3, #0
 800461e:	f000 80a1 	beq.w	8004764 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004622:	4b34      	ldr	r3, [pc, #208]	; (80046f4 <HAL_RCC_OscConfig+0x470>)
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	f003 030c 	and.w	r3, r3, #12
 800462a:	2b08      	cmp	r3, #8
 800462c:	d05c      	beq.n	80046e8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	699b      	ldr	r3, [r3, #24]
 8004632:	2b02      	cmp	r3, #2
 8004634:	d141      	bne.n	80046ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004636:	4b31      	ldr	r3, [pc, #196]	; (80046fc <HAL_RCC_OscConfig+0x478>)
 8004638:	2200      	movs	r2, #0
 800463a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800463c:	f7fd f916 	bl	800186c <HAL_GetTick>
 8004640:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004642:	e008      	b.n	8004656 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004644:	f7fd f912 	bl	800186c <HAL_GetTick>
 8004648:	4602      	mov	r2, r0
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	2b02      	cmp	r3, #2
 8004650:	d901      	bls.n	8004656 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004652:	2303      	movs	r3, #3
 8004654:	e087      	b.n	8004766 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004656:	4b27      	ldr	r3, [pc, #156]	; (80046f4 <HAL_RCC_OscConfig+0x470>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800465e:	2b00      	cmp	r3, #0
 8004660:	d1f0      	bne.n	8004644 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	69da      	ldr	r2, [r3, #28]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6a1b      	ldr	r3, [r3, #32]
 800466a:	431a      	orrs	r2, r3
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004670:	019b      	lsls	r3, r3, #6
 8004672:	431a      	orrs	r2, r3
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004678:	085b      	lsrs	r3, r3, #1
 800467a:	3b01      	subs	r3, #1
 800467c:	041b      	lsls	r3, r3, #16
 800467e:	431a      	orrs	r2, r3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004684:	061b      	lsls	r3, r3, #24
 8004686:	491b      	ldr	r1, [pc, #108]	; (80046f4 <HAL_RCC_OscConfig+0x470>)
 8004688:	4313      	orrs	r3, r2
 800468a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800468c:	4b1b      	ldr	r3, [pc, #108]	; (80046fc <HAL_RCC_OscConfig+0x478>)
 800468e:	2201      	movs	r2, #1
 8004690:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004692:	f7fd f8eb 	bl	800186c <HAL_GetTick>
 8004696:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004698:	e008      	b.n	80046ac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800469a:	f7fd f8e7 	bl	800186c <HAL_GetTick>
 800469e:	4602      	mov	r2, r0
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	2b02      	cmp	r3, #2
 80046a6:	d901      	bls.n	80046ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80046a8:	2303      	movs	r3, #3
 80046aa:	e05c      	b.n	8004766 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046ac:	4b11      	ldr	r3, [pc, #68]	; (80046f4 <HAL_RCC_OscConfig+0x470>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d0f0      	beq.n	800469a <HAL_RCC_OscConfig+0x416>
 80046b8:	e054      	b.n	8004764 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046ba:	4b10      	ldr	r3, [pc, #64]	; (80046fc <HAL_RCC_OscConfig+0x478>)
 80046bc:	2200      	movs	r2, #0
 80046be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046c0:	f7fd f8d4 	bl	800186c <HAL_GetTick>
 80046c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046c6:	e008      	b.n	80046da <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046c8:	f7fd f8d0 	bl	800186c <HAL_GetTick>
 80046cc:	4602      	mov	r2, r0
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	2b02      	cmp	r3, #2
 80046d4:	d901      	bls.n	80046da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80046d6:	2303      	movs	r3, #3
 80046d8:	e045      	b.n	8004766 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046da:	4b06      	ldr	r3, [pc, #24]	; (80046f4 <HAL_RCC_OscConfig+0x470>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d1f0      	bne.n	80046c8 <HAL_RCC_OscConfig+0x444>
 80046e6:	e03d      	b.n	8004764 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	699b      	ldr	r3, [r3, #24]
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d107      	bne.n	8004700 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	e038      	b.n	8004766 <HAL_RCC_OscConfig+0x4e2>
 80046f4:	40023800 	.word	0x40023800
 80046f8:	40007000 	.word	0x40007000
 80046fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004700:	4b1b      	ldr	r3, [pc, #108]	; (8004770 <HAL_RCC_OscConfig+0x4ec>)
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	699b      	ldr	r3, [r3, #24]
 800470a:	2b01      	cmp	r3, #1
 800470c:	d028      	beq.n	8004760 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004718:	429a      	cmp	r2, r3
 800471a:	d121      	bne.n	8004760 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004726:	429a      	cmp	r2, r3
 8004728:	d11a      	bne.n	8004760 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800472a:	68fa      	ldr	r2, [r7, #12]
 800472c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004730:	4013      	ands	r3, r2
 8004732:	687a      	ldr	r2, [r7, #4]
 8004734:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004736:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004738:	4293      	cmp	r3, r2
 800473a:	d111      	bne.n	8004760 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004746:	085b      	lsrs	r3, r3, #1
 8004748:	3b01      	subs	r3, #1
 800474a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800474c:	429a      	cmp	r2, r3
 800474e:	d107      	bne.n	8004760 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800475a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800475c:	429a      	cmp	r2, r3
 800475e:	d001      	beq.n	8004764 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	e000      	b.n	8004766 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004764:	2300      	movs	r3, #0
}
 8004766:	4618      	mov	r0, r3
 8004768:	3718      	adds	r7, #24
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}
 800476e:	bf00      	nop
 8004770:	40023800 	.word	0x40023800

08004774 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b084      	sub	sp, #16
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d101      	bne.n	8004788 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	e0cc      	b.n	8004922 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004788:	4b68      	ldr	r3, [pc, #416]	; (800492c <HAL_RCC_ClockConfig+0x1b8>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 0307 	and.w	r3, r3, #7
 8004790:	683a      	ldr	r2, [r7, #0]
 8004792:	429a      	cmp	r2, r3
 8004794:	d90c      	bls.n	80047b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004796:	4b65      	ldr	r3, [pc, #404]	; (800492c <HAL_RCC_ClockConfig+0x1b8>)
 8004798:	683a      	ldr	r2, [r7, #0]
 800479a:	b2d2      	uxtb	r2, r2
 800479c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800479e:	4b63      	ldr	r3, [pc, #396]	; (800492c <HAL_RCC_ClockConfig+0x1b8>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 0307 	and.w	r3, r3, #7
 80047a6:	683a      	ldr	r2, [r7, #0]
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d001      	beq.n	80047b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80047ac:	2301      	movs	r3, #1
 80047ae:	e0b8      	b.n	8004922 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 0302 	and.w	r3, r3, #2
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d020      	beq.n	80047fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 0304 	and.w	r3, r3, #4
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d005      	beq.n	80047d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047c8:	4b59      	ldr	r3, [pc, #356]	; (8004930 <HAL_RCC_ClockConfig+0x1bc>)
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	4a58      	ldr	r2, [pc, #352]	; (8004930 <HAL_RCC_ClockConfig+0x1bc>)
 80047ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80047d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0308 	and.w	r3, r3, #8
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d005      	beq.n	80047ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047e0:	4b53      	ldr	r3, [pc, #332]	; (8004930 <HAL_RCC_ClockConfig+0x1bc>)
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	4a52      	ldr	r2, [pc, #328]	; (8004930 <HAL_RCC_ClockConfig+0x1bc>)
 80047e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80047ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047ec:	4b50      	ldr	r3, [pc, #320]	; (8004930 <HAL_RCC_ClockConfig+0x1bc>)
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	494d      	ldr	r1, [pc, #308]	; (8004930 <HAL_RCC_ClockConfig+0x1bc>)
 80047fa:	4313      	orrs	r3, r2
 80047fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 0301 	and.w	r3, r3, #1
 8004806:	2b00      	cmp	r3, #0
 8004808:	d044      	beq.n	8004894 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	2b01      	cmp	r3, #1
 8004810:	d107      	bne.n	8004822 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004812:	4b47      	ldr	r3, [pc, #284]	; (8004930 <HAL_RCC_ClockConfig+0x1bc>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800481a:	2b00      	cmp	r3, #0
 800481c:	d119      	bne.n	8004852 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e07f      	b.n	8004922 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	2b02      	cmp	r3, #2
 8004828:	d003      	beq.n	8004832 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800482e:	2b03      	cmp	r3, #3
 8004830:	d107      	bne.n	8004842 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004832:	4b3f      	ldr	r3, [pc, #252]	; (8004930 <HAL_RCC_ClockConfig+0x1bc>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800483a:	2b00      	cmp	r3, #0
 800483c:	d109      	bne.n	8004852 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e06f      	b.n	8004922 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004842:	4b3b      	ldr	r3, [pc, #236]	; (8004930 <HAL_RCC_ClockConfig+0x1bc>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 0302 	and.w	r3, r3, #2
 800484a:	2b00      	cmp	r3, #0
 800484c:	d101      	bne.n	8004852 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e067      	b.n	8004922 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004852:	4b37      	ldr	r3, [pc, #220]	; (8004930 <HAL_RCC_ClockConfig+0x1bc>)
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	f023 0203 	bic.w	r2, r3, #3
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	4934      	ldr	r1, [pc, #208]	; (8004930 <HAL_RCC_ClockConfig+0x1bc>)
 8004860:	4313      	orrs	r3, r2
 8004862:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004864:	f7fd f802 	bl	800186c <HAL_GetTick>
 8004868:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800486a:	e00a      	b.n	8004882 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800486c:	f7fc fffe 	bl	800186c <HAL_GetTick>
 8004870:	4602      	mov	r2, r0
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	f241 3288 	movw	r2, #5000	; 0x1388
 800487a:	4293      	cmp	r3, r2
 800487c:	d901      	bls.n	8004882 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	e04f      	b.n	8004922 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004882:	4b2b      	ldr	r3, [pc, #172]	; (8004930 <HAL_RCC_ClockConfig+0x1bc>)
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	f003 020c 	and.w	r2, r3, #12
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	429a      	cmp	r2, r3
 8004892:	d1eb      	bne.n	800486c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004894:	4b25      	ldr	r3, [pc, #148]	; (800492c <HAL_RCC_ClockConfig+0x1b8>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 0307 	and.w	r3, r3, #7
 800489c:	683a      	ldr	r2, [r7, #0]
 800489e:	429a      	cmp	r2, r3
 80048a0:	d20c      	bcs.n	80048bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048a2:	4b22      	ldr	r3, [pc, #136]	; (800492c <HAL_RCC_ClockConfig+0x1b8>)
 80048a4:	683a      	ldr	r2, [r7, #0]
 80048a6:	b2d2      	uxtb	r2, r2
 80048a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048aa:	4b20      	ldr	r3, [pc, #128]	; (800492c <HAL_RCC_ClockConfig+0x1b8>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 0307 	and.w	r3, r3, #7
 80048b2:	683a      	ldr	r2, [r7, #0]
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d001      	beq.n	80048bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	e032      	b.n	8004922 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 0304 	and.w	r3, r3, #4
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d008      	beq.n	80048da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048c8:	4b19      	ldr	r3, [pc, #100]	; (8004930 <HAL_RCC_ClockConfig+0x1bc>)
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	4916      	ldr	r1, [pc, #88]	; (8004930 <HAL_RCC_ClockConfig+0x1bc>)
 80048d6:	4313      	orrs	r3, r2
 80048d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 0308 	and.w	r3, r3, #8
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d009      	beq.n	80048fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048e6:	4b12      	ldr	r3, [pc, #72]	; (8004930 <HAL_RCC_ClockConfig+0x1bc>)
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	691b      	ldr	r3, [r3, #16]
 80048f2:	00db      	lsls	r3, r3, #3
 80048f4:	490e      	ldr	r1, [pc, #56]	; (8004930 <HAL_RCC_ClockConfig+0x1bc>)
 80048f6:	4313      	orrs	r3, r2
 80048f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80048fa:	f000 f82d 	bl	8004958 <HAL_RCC_GetSysClockFreq>
 80048fe:	4602      	mov	r2, r0
 8004900:	4b0b      	ldr	r3, [pc, #44]	; (8004930 <HAL_RCC_ClockConfig+0x1bc>)
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	091b      	lsrs	r3, r3, #4
 8004906:	f003 030f 	and.w	r3, r3, #15
 800490a:	490a      	ldr	r1, [pc, #40]	; (8004934 <HAL_RCC_ClockConfig+0x1c0>)
 800490c:	5ccb      	ldrb	r3, [r1, r3]
 800490e:	fa22 f303 	lsr.w	r3, r2, r3
 8004912:	4a09      	ldr	r2, [pc, #36]	; (8004938 <HAL_RCC_ClockConfig+0x1c4>)
 8004914:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004916:	4b09      	ldr	r3, [pc, #36]	; (800493c <HAL_RCC_ClockConfig+0x1c8>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4618      	mov	r0, r3
 800491c:	f7fc ff62 	bl	80017e4 <HAL_InitTick>

  return HAL_OK;
 8004920:	2300      	movs	r3, #0
}
 8004922:	4618      	mov	r0, r3
 8004924:	3710      	adds	r7, #16
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}
 800492a:	bf00      	nop
 800492c:	40023c00 	.word	0x40023c00
 8004930:	40023800 	.word	0x40023800
 8004934:	0800c440 	.word	0x0800c440
 8004938:	20000004 	.word	0x20000004
 800493c:	20000008 	.word	0x20000008

08004940 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8004940:	b480      	push	{r7}
 8004942:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8004944:	4b03      	ldr	r3, [pc, #12]	; (8004954 <HAL_RCC_EnableCSS+0x14>)
 8004946:	2201      	movs	r2, #1
 8004948:	601a      	str	r2, [r3, #0]
}
 800494a:	bf00      	nop
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr
 8004954:	4247004c 	.word	0x4247004c

08004958 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004958:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800495c:	b090      	sub	sp, #64	; 0x40
 800495e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004960:	2300      	movs	r3, #0
 8004962:	637b      	str	r3, [r7, #52]	; 0x34
 8004964:	2300      	movs	r3, #0
 8004966:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004968:	2300      	movs	r3, #0
 800496a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800496c:	2300      	movs	r3, #0
 800496e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004970:	4b59      	ldr	r3, [pc, #356]	; (8004ad8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	f003 030c 	and.w	r3, r3, #12
 8004978:	2b08      	cmp	r3, #8
 800497a:	d00d      	beq.n	8004998 <HAL_RCC_GetSysClockFreq+0x40>
 800497c:	2b08      	cmp	r3, #8
 800497e:	f200 80a1 	bhi.w	8004ac4 <HAL_RCC_GetSysClockFreq+0x16c>
 8004982:	2b00      	cmp	r3, #0
 8004984:	d002      	beq.n	800498c <HAL_RCC_GetSysClockFreq+0x34>
 8004986:	2b04      	cmp	r3, #4
 8004988:	d003      	beq.n	8004992 <HAL_RCC_GetSysClockFreq+0x3a>
 800498a:	e09b      	b.n	8004ac4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800498c:	4b53      	ldr	r3, [pc, #332]	; (8004adc <HAL_RCC_GetSysClockFreq+0x184>)
 800498e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004990:	e09b      	b.n	8004aca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004992:	4b53      	ldr	r3, [pc, #332]	; (8004ae0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004994:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004996:	e098      	b.n	8004aca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004998:	4b4f      	ldr	r3, [pc, #316]	; (8004ad8 <HAL_RCC_GetSysClockFreq+0x180>)
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049a0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80049a2:	4b4d      	ldr	r3, [pc, #308]	; (8004ad8 <HAL_RCC_GetSysClockFreq+0x180>)
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d028      	beq.n	8004a00 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049ae:	4b4a      	ldr	r3, [pc, #296]	; (8004ad8 <HAL_RCC_GetSysClockFreq+0x180>)
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	099b      	lsrs	r3, r3, #6
 80049b4:	2200      	movs	r2, #0
 80049b6:	623b      	str	r3, [r7, #32]
 80049b8:	627a      	str	r2, [r7, #36]	; 0x24
 80049ba:	6a3b      	ldr	r3, [r7, #32]
 80049bc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80049c0:	2100      	movs	r1, #0
 80049c2:	4b47      	ldr	r3, [pc, #284]	; (8004ae0 <HAL_RCC_GetSysClockFreq+0x188>)
 80049c4:	fb03 f201 	mul.w	r2, r3, r1
 80049c8:	2300      	movs	r3, #0
 80049ca:	fb00 f303 	mul.w	r3, r0, r3
 80049ce:	4413      	add	r3, r2
 80049d0:	4a43      	ldr	r2, [pc, #268]	; (8004ae0 <HAL_RCC_GetSysClockFreq+0x188>)
 80049d2:	fba0 1202 	umull	r1, r2, r0, r2
 80049d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80049d8:	460a      	mov	r2, r1
 80049da:	62ba      	str	r2, [r7, #40]	; 0x28
 80049dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049de:	4413      	add	r3, r2
 80049e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049e4:	2200      	movs	r2, #0
 80049e6:	61bb      	str	r3, [r7, #24]
 80049e8:	61fa      	str	r2, [r7, #28]
 80049ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80049ee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80049f2:	f7fc f8e1 	bl	8000bb8 <__aeabi_uldivmod>
 80049f6:	4602      	mov	r2, r0
 80049f8:	460b      	mov	r3, r1
 80049fa:	4613      	mov	r3, r2
 80049fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049fe:	e053      	b.n	8004aa8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a00:	4b35      	ldr	r3, [pc, #212]	; (8004ad8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	099b      	lsrs	r3, r3, #6
 8004a06:	2200      	movs	r2, #0
 8004a08:	613b      	str	r3, [r7, #16]
 8004a0a:	617a      	str	r2, [r7, #20]
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004a12:	f04f 0b00 	mov.w	fp, #0
 8004a16:	4652      	mov	r2, sl
 8004a18:	465b      	mov	r3, fp
 8004a1a:	f04f 0000 	mov.w	r0, #0
 8004a1e:	f04f 0100 	mov.w	r1, #0
 8004a22:	0159      	lsls	r1, r3, #5
 8004a24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a28:	0150      	lsls	r0, r2, #5
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	460b      	mov	r3, r1
 8004a2e:	ebb2 080a 	subs.w	r8, r2, sl
 8004a32:	eb63 090b 	sbc.w	r9, r3, fp
 8004a36:	f04f 0200 	mov.w	r2, #0
 8004a3a:	f04f 0300 	mov.w	r3, #0
 8004a3e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004a42:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004a46:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004a4a:	ebb2 0408 	subs.w	r4, r2, r8
 8004a4e:	eb63 0509 	sbc.w	r5, r3, r9
 8004a52:	f04f 0200 	mov.w	r2, #0
 8004a56:	f04f 0300 	mov.w	r3, #0
 8004a5a:	00eb      	lsls	r3, r5, #3
 8004a5c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a60:	00e2      	lsls	r2, r4, #3
 8004a62:	4614      	mov	r4, r2
 8004a64:	461d      	mov	r5, r3
 8004a66:	eb14 030a 	adds.w	r3, r4, sl
 8004a6a:	603b      	str	r3, [r7, #0]
 8004a6c:	eb45 030b 	adc.w	r3, r5, fp
 8004a70:	607b      	str	r3, [r7, #4]
 8004a72:	f04f 0200 	mov.w	r2, #0
 8004a76:	f04f 0300 	mov.w	r3, #0
 8004a7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004a7e:	4629      	mov	r1, r5
 8004a80:	028b      	lsls	r3, r1, #10
 8004a82:	4621      	mov	r1, r4
 8004a84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a88:	4621      	mov	r1, r4
 8004a8a:	028a      	lsls	r2, r1, #10
 8004a8c:	4610      	mov	r0, r2
 8004a8e:	4619      	mov	r1, r3
 8004a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a92:	2200      	movs	r2, #0
 8004a94:	60bb      	str	r3, [r7, #8]
 8004a96:	60fa      	str	r2, [r7, #12]
 8004a98:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a9c:	f7fc f88c 	bl	8000bb8 <__aeabi_uldivmod>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	460b      	mov	r3, r1
 8004aa4:	4613      	mov	r3, r2
 8004aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004aa8:	4b0b      	ldr	r3, [pc, #44]	; (8004ad8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	0c1b      	lsrs	r3, r3, #16
 8004aae:	f003 0303 	and.w	r3, r3, #3
 8004ab2:	3301      	adds	r3, #1
 8004ab4:	005b      	lsls	r3, r3, #1
 8004ab6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004ab8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004abc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ac0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004ac2:	e002      	b.n	8004aca <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ac4:	4b05      	ldr	r3, [pc, #20]	; (8004adc <HAL_RCC_GetSysClockFreq+0x184>)
 8004ac6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004ac8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3740      	adds	r7, #64	; 0x40
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ad6:	bf00      	nop
 8004ad8:	40023800 	.word	0x40023800
 8004adc:	00f42400 	.word	0x00f42400
 8004ae0:	017d7840 	.word	0x017d7840

08004ae4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ae8:	4b03      	ldr	r3, [pc, #12]	; (8004af8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004aea:	681b      	ldr	r3, [r3, #0]
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr
 8004af6:	bf00      	nop
 8004af8:	20000004 	.word	0x20000004

08004afc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004b00:	f7ff fff0 	bl	8004ae4 <HAL_RCC_GetHCLKFreq>
 8004b04:	4602      	mov	r2, r0
 8004b06:	4b05      	ldr	r3, [pc, #20]	; (8004b1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	0a9b      	lsrs	r3, r3, #10
 8004b0c:	f003 0307 	and.w	r3, r3, #7
 8004b10:	4903      	ldr	r1, [pc, #12]	; (8004b20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b12:	5ccb      	ldrb	r3, [r1, r3]
 8004b14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	bd80      	pop	{r7, pc}
 8004b1c:	40023800 	.word	0x40023800
 8004b20:	0800c450 	.word	0x0800c450

08004b24 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8004b28:	4b06      	ldr	r3, [pc, #24]	; (8004b44 <HAL_RCC_NMI_IRQHandler+0x20>)
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b30:	2b80      	cmp	r3, #128	; 0x80
 8004b32:	d104      	bne.n	8004b3e <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8004b34:	f000 f80a 	bl	8004b4c <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8004b38:	4b03      	ldr	r3, [pc, #12]	; (8004b48 <HAL_RCC_NMI_IRQHandler+0x24>)
 8004b3a:	2280      	movs	r2, #128	; 0x80
 8004b3c:	701a      	strb	r2, [r3, #0]
  }
}
 8004b3e:	bf00      	nop
 8004b40:	bd80      	pop	{r7, pc}
 8004b42:	bf00      	nop
 8004b44:	40023800 	.word	0x40023800
 8004b48:	4002380e 	.word	0x4002380e

08004b4c <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8004b50:	bf00      	nop
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr

08004b5a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004b5a:	b084      	sub	sp, #16
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b084      	sub	sp, #16
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	f107 001c 	add.w	r0, r7, #28
 8004b68:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d122      	bne.n	8004bb8 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b76:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004b86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	68db      	ldr	r3, [r3, #12]
 8004b92:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004b9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d105      	bne.n	8004bac <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f001 fbed 	bl	800638c <USB_CoreReset>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	73fb      	strb	r3, [r7, #15]
 8004bb6:	e01a      	b.n	8004bee <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f001 fbe1 	bl	800638c <USB_CoreReset>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004bce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d106      	bne.n	8004be2 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	639a      	str	r2, [r3, #56]	; 0x38
 8004be0:	e005      	b.n	8004bee <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d10b      	bne.n	8004c0c <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	f043 0206 	orr.w	r2, r3, #6
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	f043 0220 	orr.w	r2, r3, #32
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3710      	adds	r7, #16
 8004c12:	46bd      	mov	sp, r7
 8004c14:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c18:	b004      	add	sp, #16
 8004c1a:	4770      	bx	lr

08004c1c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b087      	sub	sp, #28
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	60f8      	str	r0, [r7, #12]
 8004c24:	60b9      	str	r1, [r7, #8]
 8004c26:	4613      	mov	r3, r2
 8004c28:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004c2a:	79fb      	ldrb	r3, [r7, #7]
 8004c2c:	2b02      	cmp	r3, #2
 8004c2e:	d165      	bne.n	8004cfc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	4a41      	ldr	r2, [pc, #260]	; (8004d38 <USB_SetTurnaroundTime+0x11c>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d906      	bls.n	8004c46 <USB_SetTurnaroundTime+0x2a>
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	4a40      	ldr	r2, [pc, #256]	; (8004d3c <USB_SetTurnaroundTime+0x120>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d202      	bcs.n	8004c46 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004c40:	230f      	movs	r3, #15
 8004c42:	617b      	str	r3, [r7, #20]
 8004c44:	e062      	b.n	8004d0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	4a3c      	ldr	r2, [pc, #240]	; (8004d3c <USB_SetTurnaroundTime+0x120>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d306      	bcc.n	8004c5c <USB_SetTurnaroundTime+0x40>
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	4a3b      	ldr	r2, [pc, #236]	; (8004d40 <USB_SetTurnaroundTime+0x124>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d202      	bcs.n	8004c5c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004c56:	230e      	movs	r3, #14
 8004c58:	617b      	str	r3, [r7, #20]
 8004c5a:	e057      	b.n	8004d0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	4a38      	ldr	r2, [pc, #224]	; (8004d40 <USB_SetTurnaroundTime+0x124>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d306      	bcc.n	8004c72 <USB_SetTurnaroundTime+0x56>
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	4a37      	ldr	r2, [pc, #220]	; (8004d44 <USB_SetTurnaroundTime+0x128>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d202      	bcs.n	8004c72 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004c6c:	230d      	movs	r3, #13
 8004c6e:	617b      	str	r3, [r7, #20]
 8004c70:	e04c      	b.n	8004d0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	4a33      	ldr	r2, [pc, #204]	; (8004d44 <USB_SetTurnaroundTime+0x128>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d306      	bcc.n	8004c88 <USB_SetTurnaroundTime+0x6c>
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	4a32      	ldr	r2, [pc, #200]	; (8004d48 <USB_SetTurnaroundTime+0x12c>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d802      	bhi.n	8004c88 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004c82:	230c      	movs	r3, #12
 8004c84:	617b      	str	r3, [r7, #20]
 8004c86:	e041      	b.n	8004d0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	4a2f      	ldr	r2, [pc, #188]	; (8004d48 <USB_SetTurnaroundTime+0x12c>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d906      	bls.n	8004c9e <USB_SetTurnaroundTime+0x82>
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	4a2e      	ldr	r2, [pc, #184]	; (8004d4c <USB_SetTurnaroundTime+0x130>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d802      	bhi.n	8004c9e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004c98:	230b      	movs	r3, #11
 8004c9a:	617b      	str	r3, [r7, #20]
 8004c9c:	e036      	b.n	8004d0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	4a2a      	ldr	r2, [pc, #168]	; (8004d4c <USB_SetTurnaroundTime+0x130>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d906      	bls.n	8004cb4 <USB_SetTurnaroundTime+0x98>
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	4a29      	ldr	r2, [pc, #164]	; (8004d50 <USB_SetTurnaroundTime+0x134>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d802      	bhi.n	8004cb4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004cae:	230a      	movs	r3, #10
 8004cb0:	617b      	str	r3, [r7, #20]
 8004cb2:	e02b      	b.n	8004d0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	4a26      	ldr	r2, [pc, #152]	; (8004d50 <USB_SetTurnaroundTime+0x134>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d906      	bls.n	8004cca <USB_SetTurnaroundTime+0xae>
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	4a25      	ldr	r2, [pc, #148]	; (8004d54 <USB_SetTurnaroundTime+0x138>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d202      	bcs.n	8004cca <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004cc4:	2309      	movs	r3, #9
 8004cc6:	617b      	str	r3, [r7, #20]
 8004cc8:	e020      	b.n	8004d0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	4a21      	ldr	r2, [pc, #132]	; (8004d54 <USB_SetTurnaroundTime+0x138>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d306      	bcc.n	8004ce0 <USB_SetTurnaroundTime+0xc4>
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	4a20      	ldr	r2, [pc, #128]	; (8004d58 <USB_SetTurnaroundTime+0x13c>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d802      	bhi.n	8004ce0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004cda:	2308      	movs	r3, #8
 8004cdc:	617b      	str	r3, [r7, #20]
 8004cde:	e015      	b.n	8004d0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	4a1d      	ldr	r2, [pc, #116]	; (8004d58 <USB_SetTurnaroundTime+0x13c>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d906      	bls.n	8004cf6 <USB_SetTurnaroundTime+0xda>
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	4a1c      	ldr	r2, [pc, #112]	; (8004d5c <USB_SetTurnaroundTime+0x140>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d202      	bcs.n	8004cf6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004cf0:	2307      	movs	r3, #7
 8004cf2:	617b      	str	r3, [r7, #20]
 8004cf4:	e00a      	b.n	8004d0c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004cf6:	2306      	movs	r3, #6
 8004cf8:	617b      	str	r3, [r7, #20]
 8004cfa:	e007      	b.n	8004d0c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004cfc:	79fb      	ldrb	r3, [r7, #7]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d102      	bne.n	8004d08 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004d02:	2309      	movs	r3, #9
 8004d04:	617b      	str	r3, [r7, #20]
 8004d06:	e001      	b.n	8004d0c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004d08:	2309      	movs	r3, #9
 8004d0a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	68da      	ldr	r2, [r3, #12]
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	029b      	lsls	r3, r3, #10
 8004d20:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004d24:	431a      	orrs	r2, r3
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004d2a:	2300      	movs	r3, #0
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	371c      	adds	r7, #28
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr
 8004d38:	00d8acbf 	.word	0x00d8acbf
 8004d3c:	00e4e1c0 	.word	0x00e4e1c0
 8004d40:	00f42400 	.word	0x00f42400
 8004d44:	01067380 	.word	0x01067380
 8004d48:	011a499f 	.word	0x011a499f
 8004d4c:	01312cff 	.word	0x01312cff
 8004d50:	014ca43f 	.word	0x014ca43f
 8004d54:	016e3600 	.word	0x016e3600
 8004d58:	01a6ab1f 	.word	0x01a6ab1f
 8004d5c:	01e84800 	.word	0x01e84800

08004d60 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b083      	sub	sp, #12
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	f043 0201 	orr.w	r2, r3, #1
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004d74:	2300      	movs	r3, #0
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	370c      	adds	r7, #12
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr

08004d82 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004d82:	b480      	push	{r7}
 8004d84:	b083      	sub	sp, #12
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	f023 0201 	bic.w	r2, r3, #1
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004d96:	2300      	movs	r3, #0
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	370c      	adds	r7, #12
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr

08004da4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b084      	sub	sp, #16
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	460b      	mov	r3, r1
 8004dae:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004db0:	2300      	movs	r3, #0
 8004db2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004dc0:	78fb      	ldrb	r3, [r7, #3]
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d115      	bne.n	8004df2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004dd2:	2001      	movs	r0, #1
 8004dd4:	f7fc fd56 	bl	8001884 <HAL_Delay>
      ms++;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	3301      	adds	r3, #1
 8004ddc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f001 fa45 	bl	800626e <USB_GetMode>
 8004de4:	4603      	mov	r3, r0
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d01e      	beq.n	8004e28 <USB_SetCurrentMode+0x84>
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2b31      	cmp	r3, #49	; 0x31
 8004dee:	d9f0      	bls.n	8004dd2 <USB_SetCurrentMode+0x2e>
 8004df0:	e01a      	b.n	8004e28 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004df2:	78fb      	ldrb	r3, [r7, #3]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d115      	bne.n	8004e24 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004e04:	2001      	movs	r0, #1
 8004e06:	f7fc fd3d 	bl	8001884 <HAL_Delay>
      ms++;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	3301      	adds	r3, #1
 8004e0e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f001 fa2c 	bl	800626e <USB_GetMode>
 8004e16:	4603      	mov	r3, r0
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d005      	beq.n	8004e28 <USB_SetCurrentMode+0x84>
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2b31      	cmp	r3, #49	; 0x31
 8004e20:	d9f0      	bls.n	8004e04 <USB_SetCurrentMode+0x60>
 8004e22:	e001      	b.n	8004e28 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	e005      	b.n	8004e34 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2b32      	cmp	r3, #50	; 0x32
 8004e2c:	d101      	bne.n	8004e32 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e000      	b.n	8004e34 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004e32:	2300      	movs	r3, #0
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3710      	adds	r7, #16
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}

08004e3c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004e3c:	b084      	sub	sp, #16
 8004e3e:	b580      	push	{r7, lr}
 8004e40:	b086      	sub	sp, #24
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	6078      	str	r0, [r7, #4]
 8004e46:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004e4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004e56:	2300      	movs	r3, #0
 8004e58:	613b      	str	r3, [r7, #16]
 8004e5a:	e009      	b.n	8004e70 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004e5c:	687a      	ldr	r2, [r7, #4]
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	3340      	adds	r3, #64	; 0x40
 8004e62:	009b      	lsls	r3, r3, #2
 8004e64:	4413      	add	r3, r2
 8004e66:	2200      	movs	r2, #0
 8004e68:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	3301      	adds	r3, #1
 8004e6e:	613b      	str	r3, [r7, #16]
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	2b0e      	cmp	r3, #14
 8004e74:	d9f2      	bls.n	8004e5c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004e76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d11c      	bne.n	8004eb6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	68fa      	ldr	r2, [r7, #12]
 8004e86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e8a:	f043 0302 	orr.w	r3, r3, #2
 8004e8e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e94:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ea0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eac:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	639a      	str	r2, [r3, #56]	; 0x38
 8004eb4:	e00b      	b.n	8004ece <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eba:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ec6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004ed4:	461a      	mov	r2, r3
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ee0:	4619      	mov	r1, r3
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ee8:	461a      	mov	r2, r3
 8004eea:	680b      	ldr	r3, [r1, #0]
 8004eec:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d10c      	bne.n	8004f0e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d104      	bne.n	8004f04 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004efa:	2100      	movs	r1, #0
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f000 f965 	bl	80051cc <USB_SetDevSpeed>
 8004f02:	e008      	b.n	8004f16 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004f04:	2101      	movs	r1, #1
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f000 f960 	bl	80051cc <USB_SetDevSpeed>
 8004f0c:	e003      	b.n	8004f16 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004f0e:	2103      	movs	r1, #3
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f000 f95b 	bl	80051cc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004f16:	2110      	movs	r1, #16
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f000 f8f3 	bl	8005104 <USB_FlushTxFifo>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d001      	beq.n	8004f28 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	f000 f91f 	bl	800516c <USB_FlushRxFifo>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d001      	beq.n	8004f38 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004f34:	2301      	movs	r3, #1
 8004f36:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f3e:	461a      	mov	r2, r3
 8004f40:	2300      	movs	r3, #0
 8004f42:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f56:	461a      	mov	r2, r3
 8004f58:	2300      	movs	r3, #0
 8004f5a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	613b      	str	r3, [r7, #16]
 8004f60:	e043      	b.n	8004fea <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	015a      	lsls	r2, r3, #5
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	4413      	add	r3, r2
 8004f6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f78:	d118      	bne.n	8004fac <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d10a      	bne.n	8004f96 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	015a      	lsls	r2, r3, #5
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	4413      	add	r3, r2
 8004f88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f8c:	461a      	mov	r2, r3
 8004f8e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004f92:	6013      	str	r3, [r2, #0]
 8004f94:	e013      	b.n	8004fbe <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	015a      	lsls	r2, r3, #5
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	4413      	add	r3, r2
 8004f9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004fa8:	6013      	str	r3, [r2, #0]
 8004faa:	e008      	b.n	8004fbe <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	015a      	lsls	r2, r3, #5
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	4413      	add	r3, r2
 8004fb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fb8:	461a      	mov	r2, r3
 8004fba:	2300      	movs	r3, #0
 8004fbc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	015a      	lsls	r2, r3, #5
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	4413      	add	r3, r2
 8004fc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fca:	461a      	mov	r2, r3
 8004fcc:	2300      	movs	r3, #0
 8004fce:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	015a      	lsls	r2, r3, #5
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	4413      	add	r3, r2
 8004fd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fdc:	461a      	mov	r2, r3
 8004fde:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004fe2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	3301      	adds	r3, #1
 8004fe8:	613b      	str	r3, [r7, #16]
 8004fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fec:	693a      	ldr	r2, [r7, #16]
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d3b7      	bcc.n	8004f62 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	613b      	str	r3, [r7, #16]
 8004ff6:	e043      	b.n	8005080 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	015a      	lsls	r2, r3, #5
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	4413      	add	r3, r2
 8005000:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800500a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800500e:	d118      	bne.n	8005042 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d10a      	bne.n	800502c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	015a      	lsls	r2, r3, #5
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	4413      	add	r3, r2
 800501e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005022:	461a      	mov	r2, r3
 8005024:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005028:	6013      	str	r3, [r2, #0]
 800502a:	e013      	b.n	8005054 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	015a      	lsls	r2, r3, #5
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	4413      	add	r3, r2
 8005034:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005038:	461a      	mov	r2, r3
 800503a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800503e:	6013      	str	r3, [r2, #0]
 8005040:	e008      	b.n	8005054 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	015a      	lsls	r2, r3, #5
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	4413      	add	r3, r2
 800504a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800504e:	461a      	mov	r2, r3
 8005050:	2300      	movs	r3, #0
 8005052:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	015a      	lsls	r2, r3, #5
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	4413      	add	r3, r2
 800505c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005060:	461a      	mov	r2, r3
 8005062:	2300      	movs	r3, #0
 8005064:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	015a      	lsls	r2, r3, #5
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	4413      	add	r3, r2
 800506e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005072:	461a      	mov	r2, r3
 8005074:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005078:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	3301      	adds	r3, #1
 800507e:	613b      	str	r3, [r7, #16]
 8005080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005082:	693a      	ldr	r2, [r7, #16]
 8005084:	429a      	cmp	r2, r3
 8005086:	d3b7      	bcc.n	8004ff8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800508e:	691b      	ldr	r3, [r3, #16]
 8005090:	68fa      	ldr	r2, [r7, #12]
 8005092:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005096:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800509a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2200      	movs	r2, #0
 80050a0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80050a8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80050aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d105      	bne.n	80050bc <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	699b      	ldr	r3, [r3, #24]
 80050b4:	f043 0210 	orr.w	r2, r3, #16
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	699a      	ldr	r2, [r3, #24]
 80050c0:	4b0f      	ldr	r3, [pc, #60]	; (8005100 <USB_DevInit+0x2c4>)
 80050c2:	4313      	orrs	r3, r2
 80050c4:	687a      	ldr	r2, [r7, #4]
 80050c6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80050c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d005      	beq.n	80050da <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	699b      	ldr	r3, [r3, #24]
 80050d2:	f043 0208 	orr.w	r2, r3, #8
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80050da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d107      	bne.n	80050f0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	699b      	ldr	r3, [r3, #24]
 80050e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80050e8:	f043 0304 	orr.w	r3, r3, #4
 80050ec:	687a      	ldr	r2, [r7, #4]
 80050ee:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80050f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3718      	adds	r7, #24
 80050f6:	46bd      	mov	sp, r7
 80050f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80050fc:	b004      	add	sp, #16
 80050fe:	4770      	bx	lr
 8005100:	803c3800 	.word	0x803c3800

08005104 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005104:	b480      	push	{r7}
 8005106:	b085      	sub	sp, #20
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800510e:	2300      	movs	r3, #0
 8005110:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	3301      	adds	r3, #1
 8005116:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	4a13      	ldr	r2, [pc, #76]	; (8005168 <USB_FlushTxFifo+0x64>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d901      	bls.n	8005124 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005120:	2303      	movs	r3, #3
 8005122:	e01b      	b.n	800515c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	691b      	ldr	r3, [r3, #16]
 8005128:	2b00      	cmp	r3, #0
 800512a:	daf2      	bge.n	8005112 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800512c:	2300      	movs	r3, #0
 800512e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	019b      	lsls	r3, r3, #6
 8005134:	f043 0220 	orr.w	r2, r3, #32
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	3301      	adds	r3, #1
 8005140:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	4a08      	ldr	r2, [pc, #32]	; (8005168 <USB_FlushTxFifo+0x64>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d901      	bls.n	800514e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800514a:	2303      	movs	r3, #3
 800514c:	e006      	b.n	800515c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	691b      	ldr	r3, [r3, #16]
 8005152:	f003 0320 	and.w	r3, r3, #32
 8005156:	2b20      	cmp	r3, #32
 8005158:	d0f0      	beq.n	800513c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800515a:	2300      	movs	r3, #0
}
 800515c:	4618      	mov	r0, r3
 800515e:	3714      	adds	r7, #20
 8005160:	46bd      	mov	sp, r7
 8005162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005166:	4770      	bx	lr
 8005168:	00030d40 	.word	0x00030d40

0800516c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800516c:	b480      	push	{r7}
 800516e:	b085      	sub	sp, #20
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005174:	2300      	movs	r3, #0
 8005176:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	3301      	adds	r3, #1
 800517c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	4a11      	ldr	r2, [pc, #68]	; (80051c8 <USB_FlushRxFifo+0x5c>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d901      	bls.n	800518a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005186:	2303      	movs	r3, #3
 8005188:	e018      	b.n	80051bc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	691b      	ldr	r3, [r3, #16]
 800518e:	2b00      	cmp	r3, #0
 8005190:	daf2      	bge.n	8005178 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005192:	2300      	movs	r3, #0
 8005194:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2210      	movs	r2, #16
 800519a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	3301      	adds	r3, #1
 80051a0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	4a08      	ldr	r2, [pc, #32]	; (80051c8 <USB_FlushRxFifo+0x5c>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d901      	bls.n	80051ae <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80051aa:	2303      	movs	r3, #3
 80051ac:	e006      	b.n	80051bc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	f003 0310 	and.w	r3, r3, #16
 80051b6:	2b10      	cmp	r3, #16
 80051b8:	d0f0      	beq.n	800519c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80051ba:	2300      	movs	r3, #0
}
 80051bc:	4618      	mov	r0, r3
 80051be:	3714      	adds	r7, #20
 80051c0:	46bd      	mov	sp, r7
 80051c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c6:	4770      	bx	lr
 80051c8:	00030d40 	.word	0x00030d40

080051cc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b085      	sub	sp, #20
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
 80051d4:	460b      	mov	r3, r1
 80051d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	78fb      	ldrb	r3, [r7, #3]
 80051e6:	68f9      	ldr	r1, [r7, #12]
 80051e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80051ec:	4313      	orrs	r3, r2
 80051ee:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80051f0:	2300      	movs	r3, #0
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3714      	adds	r7, #20
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr

080051fe <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80051fe:	b480      	push	{r7}
 8005200:	b087      	sub	sp, #28
 8005202:	af00      	add	r7, sp, #0
 8005204:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	f003 0306 	and.w	r3, r3, #6
 8005216:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d102      	bne.n	8005224 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800521e:	2300      	movs	r3, #0
 8005220:	75fb      	strb	r3, [r7, #23]
 8005222:	e00a      	b.n	800523a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2b02      	cmp	r3, #2
 8005228:	d002      	beq.n	8005230 <USB_GetDevSpeed+0x32>
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2b06      	cmp	r3, #6
 800522e:	d102      	bne.n	8005236 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005230:	2302      	movs	r3, #2
 8005232:	75fb      	strb	r3, [r7, #23]
 8005234:	e001      	b.n	800523a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005236:	230f      	movs	r3, #15
 8005238:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800523a:	7dfb      	ldrb	r3, [r7, #23]
}
 800523c:	4618      	mov	r0, r3
 800523e:	371c      	adds	r7, #28
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr

08005248 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005248:	b480      	push	{r7}
 800524a:	b085      	sub	sp, #20
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	781b      	ldrb	r3, [r3, #0]
 800525a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	785b      	ldrb	r3, [r3, #1]
 8005260:	2b01      	cmp	r3, #1
 8005262:	d13a      	bne.n	80052da <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800526a:	69da      	ldr	r2, [r3, #28]
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	781b      	ldrb	r3, [r3, #0]
 8005270:	f003 030f 	and.w	r3, r3, #15
 8005274:	2101      	movs	r1, #1
 8005276:	fa01 f303 	lsl.w	r3, r1, r3
 800527a:	b29b      	uxth	r3, r3
 800527c:	68f9      	ldr	r1, [r7, #12]
 800527e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005282:	4313      	orrs	r3, r2
 8005284:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	015a      	lsls	r2, r3, #5
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	4413      	add	r3, r2
 800528e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005298:	2b00      	cmp	r3, #0
 800529a:	d155      	bne.n	8005348 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	015a      	lsls	r2, r3, #5
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	4413      	add	r3, r2
 80052a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	68db      	ldr	r3, [r3, #12]
 80052ae:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	791b      	ldrb	r3, [r3, #4]
 80052b6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80052b8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	059b      	lsls	r3, r3, #22
 80052be:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80052c0:	4313      	orrs	r3, r2
 80052c2:	68ba      	ldr	r2, [r7, #8]
 80052c4:	0151      	lsls	r1, r2, #5
 80052c6:	68fa      	ldr	r2, [r7, #12]
 80052c8:	440a      	add	r2, r1
 80052ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052d6:	6013      	str	r3, [r2, #0]
 80052d8:	e036      	b.n	8005348 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052e0:	69da      	ldr	r2, [r3, #28]
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	781b      	ldrb	r3, [r3, #0]
 80052e6:	f003 030f 	and.w	r3, r3, #15
 80052ea:	2101      	movs	r1, #1
 80052ec:	fa01 f303 	lsl.w	r3, r1, r3
 80052f0:	041b      	lsls	r3, r3, #16
 80052f2:	68f9      	ldr	r1, [r7, #12]
 80052f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80052f8:	4313      	orrs	r3, r2
 80052fa:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	015a      	lsls	r2, r3, #5
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	4413      	add	r3, r2
 8005304:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800530e:	2b00      	cmp	r3, #0
 8005310:	d11a      	bne.n	8005348 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	015a      	lsls	r2, r3, #5
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	4413      	add	r3, r2
 800531a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	68db      	ldr	r3, [r3, #12]
 8005324:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	791b      	ldrb	r3, [r3, #4]
 800532c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800532e:	430b      	orrs	r3, r1
 8005330:	4313      	orrs	r3, r2
 8005332:	68ba      	ldr	r2, [r7, #8]
 8005334:	0151      	lsls	r1, r2, #5
 8005336:	68fa      	ldr	r2, [r7, #12]
 8005338:	440a      	add	r2, r1
 800533a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800533e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005342:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005346:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005348:	2300      	movs	r3, #0
}
 800534a:	4618      	mov	r0, r3
 800534c:	3714      	adds	r7, #20
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr
	...

08005358 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005358:	b480      	push	{r7}
 800535a:	b085      	sub	sp, #20
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	781b      	ldrb	r3, [r3, #0]
 800536a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	785b      	ldrb	r3, [r3, #1]
 8005370:	2b01      	cmp	r3, #1
 8005372:	d161      	bne.n	8005438 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	015a      	lsls	r2, r3, #5
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	4413      	add	r3, r2
 800537c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005386:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800538a:	d11f      	bne.n	80053cc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	015a      	lsls	r2, r3, #5
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	4413      	add	r3, r2
 8005394:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	68ba      	ldr	r2, [r7, #8]
 800539c:	0151      	lsls	r1, r2, #5
 800539e:	68fa      	ldr	r2, [r7, #12]
 80053a0:	440a      	add	r2, r1
 80053a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053a6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80053aa:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	015a      	lsls	r2, r3, #5
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	4413      	add	r3, r2
 80053b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	68ba      	ldr	r2, [r7, #8]
 80053bc:	0151      	lsls	r1, r2, #5
 80053be:	68fa      	ldr	r2, [r7, #12]
 80053c0:	440a      	add	r2, r1
 80053c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053c6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80053ca:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	781b      	ldrb	r3, [r3, #0]
 80053d8:	f003 030f 	and.w	r3, r3, #15
 80053dc:	2101      	movs	r1, #1
 80053de:	fa01 f303 	lsl.w	r3, r1, r3
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	43db      	mvns	r3, r3
 80053e6:	68f9      	ldr	r1, [r7, #12]
 80053e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053ec:	4013      	ands	r3, r2
 80053ee:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053f6:	69da      	ldr	r2, [r3, #28]
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	781b      	ldrb	r3, [r3, #0]
 80053fc:	f003 030f 	and.w	r3, r3, #15
 8005400:	2101      	movs	r1, #1
 8005402:	fa01 f303 	lsl.w	r3, r1, r3
 8005406:	b29b      	uxth	r3, r3
 8005408:	43db      	mvns	r3, r3
 800540a:	68f9      	ldr	r1, [r7, #12]
 800540c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005410:	4013      	ands	r3, r2
 8005412:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	015a      	lsls	r2, r3, #5
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	4413      	add	r3, r2
 800541c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	0159      	lsls	r1, r3, #5
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	440b      	add	r3, r1
 800542a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800542e:	4619      	mov	r1, r3
 8005430:	4b35      	ldr	r3, [pc, #212]	; (8005508 <USB_DeactivateEndpoint+0x1b0>)
 8005432:	4013      	ands	r3, r2
 8005434:	600b      	str	r3, [r1, #0]
 8005436:	e060      	b.n	80054fa <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	015a      	lsls	r2, r3, #5
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	4413      	add	r3, r2
 8005440:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800544a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800544e:	d11f      	bne.n	8005490 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	015a      	lsls	r2, r3, #5
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	4413      	add	r3, r2
 8005458:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	68ba      	ldr	r2, [r7, #8]
 8005460:	0151      	lsls	r1, r2, #5
 8005462:	68fa      	ldr	r2, [r7, #12]
 8005464:	440a      	add	r2, r1
 8005466:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800546a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800546e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	015a      	lsls	r2, r3, #5
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	4413      	add	r3, r2
 8005478:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	68ba      	ldr	r2, [r7, #8]
 8005480:	0151      	lsls	r1, r2, #5
 8005482:	68fa      	ldr	r2, [r7, #12]
 8005484:	440a      	add	r2, r1
 8005486:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800548a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800548e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005496:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	781b      	ldrb	r3, [r3, #0]
 800549c:	f003 030f 	and.w	r3, r3, #15
 80054a0:	2101      	movs	r1, #1
 80054a2:	fa01 f303 	lsl.w	r3, r1, r3
 80054a6:	041b      	lsls	r3, r3, #16
 80054a8:	43db      	mvns	r3, r3
 80054aa:	68f9      	ldr	r1, [r7, #12]
 80054ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054b0:	4013      	ands	r3, r2
 80054b2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054ba:	69da      	ldr	r2, [r3, #28]
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	781b      	ldrb	r3, [r3, #0]
 80054c0:	f003 030f 	and.w	r3, r3, #15
 80054c4:	2101      	movs	r1, #1
 80054c6:	fa01 f303 	lsl.w	r3, r1, r3
 80054ca:	041b      	lsls	r3, r3, #16
 80054cc:	43db      	mvns	r3, r3
 80054ce:	68f9      	ldr	r1, [r7, #12]
 80054d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054d4:	4013      	ands	r3, r2
 80054d6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	015a      	lsls	r2, r3, #5
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	4413      	add	r3, r2
 80054e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	0159      	lsls	r1, r3, #5
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	440b      	add	r3, r1
 80054ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054f2:	4619      	mov	r1, r3
 80054f4:	4b05      	ldr	r3, [pc, #20]	; (800550c <USB_DeactivateEndpoint+0x1b4>)
 80054f6:	4013      	ands	r3, r2
 80054f8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80054fa:	2300      	movs	r3, #0
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3714      	adds	r7, #20
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr
 8005508:	ec337800 	.word	0xec337800
 800550c:	eff37800 	.word	0xeff37800

08005510 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b08a      	sub	sp, #40	; 0x28
 8005514:	af02      	add	r7, sp, #8
 8005516:	60f8      	str	r0, [r7, #12]
 8005518:	60b9      	str	r1, [r7, #8]
 800551a:	4613      	mov	r3, r2
 800551c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	781b      	ldrb	r3, [r3, #0]
 8005526:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	785b      	ldrb	r3, [r3, #1]
 800552c:	2b01      	cmp	r3, #1
 800552e:	f040 815c 	bne.w	80057ea <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	699b      	ldr	r3, [r3, #24]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d132      	bne.n	80055a0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800553a:	69bb      	ldr	r3, [r7, #24]
 800553c:	015a      	lsls	r2, r3, #5
 800553e:	69fb      	ldr	r3, [r7, #28]
 8005540:	4413      	add	r3, r2
 8005542:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005546:	691b      	ldr	r3, [r3, #16]
 8005548:	69ba      	ldr	r2, [r7, #24]
 800554a:	0151      	lsls	r1, r2, #5
 800554c:	69fa      	ldr	r2, [r7, #28]
 800554e:	440a      	add	r2, r1
 8005550:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005554:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005558:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800555c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800555e:	69bb      	ldr	r3, [r7, #24]
 8005560:	015a      	lsls	r2, r3, #5
 8005562:	69fb      	ldr	r3, [r7, #28]
 8005564:	4413      	add	r3, r2
 8005566:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800556a:	691b      	ldr	r3, [r3, #16]
 800556c:	69ba      	ldr	r2, [r7, #24]
 800556e:	0151      	lsls	r1, r2, #5
 8005570:	69fa      	ldr	r2, [r7, #28]
 8005572:	440a      	add	r2, r1
 8005574:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005578:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800557c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800557e:	69bb      	ldr	r3, [r7, #24]
 8005580:	015a      	lsls	r2, r3, #5
 8005582:	69fb      	ldr	r3, [r7, #28]
 8005584:	4413      	add	r3, r2
 8005586:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800558a:	691b      	ldr	r3, [r3, #16]
 800558c:	69ba      	ldr	r2, [r7, #24]
 800558e:	0151      	lsls	r1, r2, #5
 8005590:	69fa      	ldr	r2, [r7, #28]
 8005592:	440a      	add	r2, r1
 8005594:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005598:	0cdb      	lsrs	r3, r3, #19
 800559a:	04db      	lsls	r3, r3, #19
 800559c:	6113      	str	r3, [r2, #16]
 800559e:	e074      	b.n	800568a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80055a0:	69bb      	ldr	r3, [r7, #24]
 80055a2:	015a      	lsls	r2, r3, #5
 80055a4:	69fb      	ldr	r3, [r7, #28]
 80055a6:	4413      	add	r3, r2
 80055a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055ac:	691b      	ldr	r3, [r3, #16]
 80055ae:	69ba      	ldr	r2, [r7, #24]
 80055b0:	0151      	lsls	r1, r2, #5
 80055b2:	69fa      	ldr	r2, [r7, #28]
 80055b4:	440a      	add	r2, r1
 80055b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055ba:	0cdb      	lsrs	r3, r3, #19
 80055bc:	04db      	lsls	r3, r3, #19
 80055be:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80055c0:	69bb      	ldr	r3, [r7, #24]
 80055c2:	015a      	lsls	r2, r3, #5
 80055c4:	69fb      	ldr	r3, [r7, #28]
 80055c6:	4413      	add	r3, r2
 80055c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055cc:	691b      	ldr	r3, [r3, #16]
 80055ce:	69ba      	ldr	r2, [r7, #24]
 80055d0:	0151      	lsls	r1, r2, #5
 80055d2:	69fa      	ldr	r2, [r7, #28]
 80055d4:	440a      	add	r2, r1
 80055d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055da:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80055de:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80055e2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80055e4:	69bb      	ldr	r3, [r7, #24]
 80055e6:	015a      	lsls	r2, r3, #5
 80055e8:	69fb      	ldr	r3, [r7, #28]
 80055ea:	4413      	add	r3, r2
 80055ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055f0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	6999      	ldr	r1, [r3, #24]
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	68db      	ldr	r3, [r3, #12]
 80055fa:	440b      	add	r3, r1
 80055fc:	1e59      	subs	r1, r3, #1
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	68db      	ldr	r3, [r3, #12]
 8005602:	fbb1 f3f3 	udiv	r3, r1, r3
 8005606:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005608:	4b9d      	ldr	r3, [pc, #628]	; (8005880 <USB_EPStartXfer+0x370>)
 800560a:	400b      	ands	r3, r1
 800560c:	69b9      	ldr	r1, [r7, #24]
 800560e:	0148      	lsls	r0, r1, #5
 8005610:	69f9      	ldr	r1, [r7, #28]
 8005612:	4401      	add	r1, r0
 8005614:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005618:	4313      	orrs	r3, r2
 800561a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800561c:	69bb      	ldr	r3, [r7, #24]
 800561e:	015a      	lsls	r2, r3, #5
 8005620:	69fb      	ldr	r3, [r7, #28]
 8005622:	4413      	add	r3, r2
 8005624:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005628:	691a      	ldr	r2, [r3, #16]
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	699b      	ldr	r3, [r3, #24]
 800562e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005632:	69b9      	ldr	r1, [r7, #24]
 8005634:	0148      	lsls	r0, r1, #5
 8005636:	69f9      	ldr	r1, [r7, #28]
 8005638:	4401      	add	r1, r0
 800563a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800563e:	4313      	orrs	r3, r2
 8005640:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	791b      	ldrb	r3, [r3, #4]
 8005646:	2b01      	cmp	r3, #1
 8005648:	d11f      	bne.n	800568a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800564a:	69bb      	ldr	r3, [r7, #24]
 800564c:	015a      	lsls	r2, r3, #5
 800564e:	69fb      	ldr	r3, [r7, #28]
 8005650:	4413      	add	r3, r2
 8005652:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005656:	691b      	ldr	r3, [r3, #16]
 8005658:	69ba      	ldr	r2, [r7, #24]
 800565a:	0151      	lsls	r1, r2, #5
 800565c:	69fa      	ldr	r2, [r7, #28]
 800565e:	440a      	add	r2, r1
 8005660:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005664:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005668:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800566a:	69bb      	ldr	r3, [r7, #24]
 800566c:	015a      	lsls	r2, r3, #5
 800566e:	69fb      	ldr	r3, [r7, #28]
 8005670:	4413      	add	r3, r2
 8005672:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005676:	691b      	ldr	r3, [r3, #16]
 8005678:	69ba      	ldr	r2, [r7, #24]
 800567a:	0151      	lsls	r1, r2, #5
 800567c:	69fa      	ldr	r2, [r7, #28]
 800567e:	440a      	add	r2, r1
 8005680:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005684:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005688:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800568a:	79fb      	ldrb	r3, [r7, #7]
 800568c:	2b01      	cmp	r3, #1
 800568e:	d14b      	bne.n	8005728 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	695b      	ldr	r3, [r3, #20]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d009      	beq.n	80056ac <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005698:	69bb      	ldr	r3, [r7, #24]
 800569a:	015a      	lsls	r2, r3, #5
 800569c:	69fb      	ldr	r3, [r7, #28]
 800569e:	4413      	add	r3, r2
 80056a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056a4:	461a      	mov	r2, r3
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	695b      	ldr	r3, [r3, #20]
 80056aa:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	791b      	ldrb	r3, [r3, #4]
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d128      	bne.n	8005706 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80056b4:	69fb      	ldr	r3, [r7, #28]
 80056b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d110      	bne.n	80056e6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80056c4:	69bb      	ldr	r3, [r7, #24]
 80056c6:	015a      	lsls	r2, r3, #5
 80056c8:	69fb      	ldr	r3, [r7, #28]
 80056ca:	4413      	add	r3, r2
 80056cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	69ba      	ldr	r2, [r7, #24]
 80056d4:	0151      	lsls	r1, r2, #5
 80056d6:	69fa      	ldr	r2, [r7, #28]
 80056d8:	440a      	add	r2, r1
 80056da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056de:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80056e2:	6013      	str	r3, [r2, #0]
 80056e4:	e00f      	b.n	8005706 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80056e6:	69bb      	ldr	r3, [r7, #24]
 80056e8:	015a      	lsls	r2, r3, #5
 80056ea:	69fb      	ldr	r3, [r7, #28]
 80056ec:	4413      	add	r3, r2
 80056ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	69ba      	ldr	r2, [r7, #24]
 80056f6:	0151      	lsls	r1, r2, #5
 80056f8:	69fa      	ldr	r2, [r7, #28]
 80056fa:	440a      	add	r2, r1
 80056fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005700:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005704:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005706:	69bb      	ldr	r3, [r7, #24]
 8005708:	015a      	lsls	r2, r3, #5
 800570a:	69fb      	ldr	r3, [r7, #28]
 800570c:	4413      	add	r3, r2
 800570e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	69ba      	ldr	r2, [r7, #24]
 8005716:	0151      	lsls	r1, r2, #5
 8005718:	69fa      	ldr	r2, [r7, #28]
 800571a:	440a      	add	r2, r1
 800571c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005720:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005724:	6013      	str	r3, [r2, #0]
 8005726:	e133      	b.n	8005990 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005728:	69bb      	ldr	r3, [r7, #24]
 800572a:	015a      	lsls	r2, r3, #5
 800572c:	69fb      	ldr	r3, [r7, #28]
 800572e:	4413      	add	r3, r2
 8005730:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	69ba      	ldr	r2, [r7, #24]
 8005738:	0151      	lsls	r1, r2, #5
 800573a:	69fa      	ldr	r2, [r7, #28]
 800573c:	440a      	add	r2, r1
 800573e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005742:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005746:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	791b      	ldrb	r3, [r3, #4]
 800574c:	2b01      	cmp	r3, #1
 800574e:	d015      	beq.n	800577c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	699b      	ldr	r3, [r3, #24]
 8005754:	2b00      	cmp	r3, #0
 8005756:	f000 811b 	beq.w	8005990 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800575a:	69fb      	ldr	r3, [r7, #28]
 800575c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005760:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	781b      	ldrb	r3, [r3, #0]
 8005766:	f003 030f 	and.w	r3, r3, #15
 800576a:	2101      	movs	r1, #1
 800576c:	fa01 f303 	lsl.w	r3, r1, r3
 8005770:	69f9      	ldr	r1, [r7, #28]
 8005772:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005776:	4313      	orrs	r3, r2
 8005778:	634b      	str	r3, [r1, #52]	; 0x34
 800577a:	e109      	b.n	8005990 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800577c:	69fb      	ldr	r3, [r7, #28]
 800577e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005788:	2b00      	cmp	r3, #0
 800578a:	d110      	bne.n	80057ae <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800578c:	69bb      	ldr	r3, [r7, #24]
 800578e:	015a      	lsls	r2, r3, #5
 8005790:	69fb      	ldr	r3, [r7, #28]
 8005792:	4413      	add	r3, r2
 8005794:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	69ba      	ldr	r2, [r7, #24]
 800579c:	0151      	lsls	r1, r2, #5
 800579e:	69fa      	ldr	r2, [r7, #28]
 80057a0:	440a      	add	r2, r1
 80057a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80057aa:	6013      	str	r3, [r2, #0]
 80057ac:	e00f      	b.n	80057ce <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80057ae:	69bb      	ldr	r3, [r7, #24]
 80057b0:	015a      	lsls	r2, r3, #5
 80057b2:	69fb      	ldr	r3, [r7, #28]
 80057b4:	4413      	add	r3, r2
 80057b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	69ba      	ldr	r2, [r7, #24]
 80057be:	0151      	lsls	r1, r2, #5
 80057c0:	69fa      	ldr	r2, [r7, #28]
 80057c2:	440a      	add	r2, r1
 80057c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057cc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	6919      	ldr	r1, [r3, #16]
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	781a      	ldrb	r2, [r3, #0]
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	699b      	ldr	r3, [r3, #24]
 80057da:	b298      	uxth	r0, r3
 80057dc:	79fb      	ldrb	r3, [r7, #7]
 80057de:	9300      	str	r3, [sp, #0]
 80057e0:	4603      	mov	r3, r0
 80057e2:	68f8      	ldr	r0, [r7, #12]
 80057e4:	f000 fade 	bl	8005da4 <USB_WritePacket>
 80057e8:	e0d2      	b.n	8005990 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80057ea:	69bb      	ldr	r3, [r7, #24]
 80057ec:	015a      	lsls	r2, r3, #5
 80057ee:	69fb      	ldr	r3, [r7, #28]
 80057f0:	4413      	add	r3, r2
 80057f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057f6:	691b      	ldr	r3, [r3, #16]
 80057f8:	69ba      	ldr	r2, [r7, #24]
 80057fa:	0151      	lsls	r1, r2, #5
 80057fc:	69fa      	ldr	r2, [r7, #28]
 80057fe:	440a      	add	r2, r1
 8005800:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005804:	0cdb      	lsrs	r3, r3, #19
 8005806:	04db      	lsls	r3, r3, #19
 8005808:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800580a:	69bb      	ldr	r3, [r7, #24]
 800580c:	015a      	lsls	r2, r3, #5
 800580e:	69fb      	ldr	r3, [r7, #28]
 8005810:	4413      	add	r3, r2
 8005812:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005816:	691b      	ldr	r3, [r3, #16]
 8005818:	69ba      	ldr	r2, [r7, #24]
 800581a:	0151      	lsls	r1, r2, #5
 800581c:	69fa      	ldr	r2, [r7, #28]
 800581e:	440a      	add	r2, r1
 8005820:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005824:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005828:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800582c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	699b      	ldr	r3, [r3, #24]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d126      	bne.n	8005884 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005836:	69bb      	ldr	r3, [r7, #24]
 8005838:	015a      	lsls	r2, r3, #5
 800583a:	69fb      	ldr	r3, [r7, #28]
 800583c:	4413      	add	r3, r2
 800583e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005842:	691a      	ldr	r2, [r3, #16]
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	68db      	ldr	r3, [r3, #12]
 8005848:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800584c:	69b9      	ldr	r1, [r7, #24]
 800584e:	0148      	lsls	r0, r1, #5
 8005850:	69f9      	ldr	r1, [r7, #28]
 8005852:	4401      	add	r1, r0
 8005854:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005858:	4313      	orrs	r3, r2
 800585a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800585c:	69bb      	ldr	r3, [r7, #24]
 800585e:	015a      	lsls	r2, r3, #5
 8005860:	69fb      	ldr	r3, [r7, #28]
 8005862:	4413      	add	r3, r2
 8005864:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005868:	691b      	ldr	r3, [r3, #16]
 800586a:	69ba      	ldr	r2, [r7, #24]
 800586c:	0151      	lsls	r1, r2, #5
 800586e:	69fa      	ldr	r2, [r7, #28]
 8005870:	440a      	add	r2, r1
 8005872:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005876:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800587a:	6113      	str	r3, [r2, #16]
 800587c:	e03a      	b.n	80058f4 <USB_EPStartXfer+0x3e4>
 800587e:	bf00      	nop
 8005880:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	699a      	ldr	r2, [r3, #24]
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	68db      	ldr	r3, [r3, #12]
 800588c:	4413      	add	r3, r2
 800588e:	1e5a      	subs	r2, r3, #1
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	68db      	ldr	r3, [r3, #12]
 8005894:	fbb2 f3f3 	udiv	r3, r2, r3
 8005898:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	68db      	ldr	r3, [r3, #12]
 800589e:	8afa      	ldrh	r2, [r7, #22]
 80058a0:	fb03 f202 	mul.w	r2, r3, r2
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80058a8:	69bb      	ldr	r3, [r7, #24]
 80058aa:	015a      	lsls	r2, r3, #5
 80058ac:	69fb      	ldr	r3, [r7, #28]
 80058ae:	4413      	add	r3, r2
 80058b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058b4:	691a      	ldr	r2, [r3, #16]
 80058b6:	8afb      	ldrh	r3, [r7, #22]
 80058b8:	04d9      	lsls	r1, r3, #19
 80058ba:	4b38      	ldr	r3, [pc, #224]	; (800599c <USB_EPStartXfer+0x48c>)
 80058bc:	400b      	ands	r3, r1
 80058be:	69b9      	ldr	r1, [r7, #24]
 80058c0:	0148      	lsls	r0, r1, #5
 80058c2:	69f9      	ldr	r1, [r7, #28]
 80058c4:	4401      	add	r1, r0
 80058c6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80058ca:	4313      	orrs	r3, r2
 80058cc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80058ce:	69bb      	ldr	r3, [r7, #24]
 80058d0:	015a      	lsls	r2, r3, #5
 80058d2:	69fb      	ldr	r3, [r7, #28]
 80058d4:	4413      	add	r3, r2
 80058d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058da:	691a      	ldr	r2, [r3, #16]
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	69db      	ldr	r3, [r3, #28]
 80058e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058e4:	69b9      	ldr	r1, [r7, #24]
 80058e6:	0148      	lsls	r0, r1, #5
 80058e8:	69f9      	ldr	r1, [r7, #28]
 80058ea:	4401      	add	r1, r0
 80058ec:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80058f0:	4313      	orrs	r3, r2
 80058f2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80058f4:	79fb      	ldrb	r3, [r7, #7]
 80058f6:	2b01      	cmp	r3, #1
 80058f8:	d10d      	bne.n	8005916 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	691b      	ldr	r3, [r3, #16]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d009      	beq.n	8005916 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	6919      	ldr	r1, [r3, #16]
 8005906:	69bb      	ldr	r3, [r7, #24]
 8005908:	015a      	lsls	r2, r3, #5
 800590a:	69fb      	ldr	r3, [r7, #28]
 800590c:	4413      	add	r3, r2
 800590e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005912:	460a      	mov	r2, r1
 8005914:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	791b      	ldrb	r3, [r3, #4]
 800591a:	2b01      	cmp	r3, #1
 800591c:	d128      	bne.n	8005970 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800591e:	69fb      	ldr	r3, [r7, #28]
 8005920:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005924:	689b      	ldr	r3, [r3, #8]
 8005926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800592a:	2b00      	cmp	r3, #0
 800592c:	d110      	bne.n	8005950 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800592e:	69bb      	ldr	r3, [r7, #24]
 8005930:	015a      	lsls	r2, r3, #5
 8005932:	69fb      	ldr	r3, [r7, #28]
 8005934:	4413      	add	r3, r2
 8005936:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	69ba      	ldr	r2, [r7, #24]
 800593e:	0151      	lsls	r1, r2, #5
 8005940:	69fa      	ldr	r2, [r7, #28]
 8005942:	440a      	add	r2, r1
 8005944:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005948:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800594c:	6013      	str	r3, [r2, #0]
 800594e:	e00f      	b.n	8005970 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005950:	69bb      	ldr	r3, [r7, #24]
 8005952:	015a      	lsls	r2, r3, #5
 8005954:	69fb      	ldr	r3, [r7, #28]
 8005956:	4413      	add	r3, r2
 8005958:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	69ba      	ldr	r2, [r7, #24]
 8005960:	0151      	lsls	r1, r2, #5
 8005962:	69fa      	ldr	r2, [r7, #28]
 8005964:	440a      	add	r2, r1
 8005966:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800596a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800596e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005970:	69bb      	ldr	r3, [r7, #24]
 8005972:	015a      	lsls	r2, r3, #5
 8005974:	69fb      	ldr	r3, [r7, #28]
 8005976:	4413      	add	r3, r2
 8005978:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	69ba      	ldr	r2, [r7, #24]
 8005980:	0151      	lsls	r1, r2, #5
 8005982:	69fa      	ldr	r2, [r7, #28]
 8005984:	440a      	add	r2, r1
 8005986:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800598a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800598e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005990:	2300      	movs	r3, #0
}
 8005992:	4618      	mov	r0, r3
 8005994:	3720      	adds	r7, #32
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}
 800599a:	bf00      	nop
 800599c:	1ff80000 	.word	0x1ff80000

080059a0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b087      	sub	sp, #28
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	60f8      	str	r0, [r7, #12]
 80059a8:	60b9      	str	r1, [r7, #8]
 80059aa:	4613      	mov	r3, r2
 80059ac:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	781b      	ldrb	r3, [r3, #0]
 80059b6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	785b      	ldrb	r3, [r3, #1]
 80059bc:	2b01      	cmp	r3, #1
 80059be:	f040 80ce 	bne.w	8005b5e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	699b      	ldr	r3, [r3, #24]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d132      	bne.n	8005a30 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	015a      	lsls	r2, r3, #5
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	4413      	add	r3, r2
 80059d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059d6:	691b      	ldr	r3, [r3, #16]
 80059d8:	693a      	ldr	r2, [r7, #16]
 80059da:	0151      	lsls	r1, r2, #5
 80059dc:	697a      	ldr	r2, [r7, #20]
 80059de:	440a      	add	r2, r1
 80059e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059e4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80059e8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80059ec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	015a      	lsls	r2, r3, #5
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	4413      	add	r3, r2
 80059f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059fa:	691b      	ldr	r3, [r3, #16]
 80059fc:	693a      	ldr	r2, [r7, #16]
 80059fe:	0151      	lsls	r1, r2, #5
 8005a00:	697a      	ldr	r2, [r7, #20]
 8005a02:	440a      	add	r2, r1
 8005a04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a08:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a0c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	015a      	lsls	r2, r3, #5
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	4413      	add	r3, r2
 8005a16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a1a:	691b      	ldr	r3, [r3, #16]
 8005a1c:	693a      	ldr	r2, [r7, #16]
 8005a1e:	0151      	lsls	r1, r2, #5
 8005a20:	697a      	ldr	r2, [r7, #20]
 8005a22:	440a      	add	r2, r1
 8005a24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a28:	0cdb      	lsrs	r3, r3, #19
 8005a2a:	04db      	lsls	r3, r3, #19
 8005a2c:	6113      	str	r3, [r2, #16]
 8005a2e:	e04e      	b.n	8005ace <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	015a      	lsls	r2, r3, #5
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	4413      	add	r3, r2
 8005a38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a3c:	691b      	ldr	r3, [r3, #16]
 8005a3e:	693a      	ldr	r2, [r7, #16]
 8005a40:	0151      	lsls	r1, r2, #5
 8005a42:	697a      	ldr	r2, [r7, #20]
 8005a44:	440a      	add	r2, r1
 8005a46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a4a:	0cdb      	lsrs	r3, r3, #19
 8005a4c:	04db      	lsls	r3, r3, #19
 8005a4e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	015a      	lsls	r2, r3, #5
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	4413      	add	r3, r2
 8005a58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a5c:	691b      	ldr	r3, [r3, #16]
 8005a5e:	693a      	ldr	r2, [r7, #16]
 8005a60:	0151      	lsls	r1, r2, #5
 8005a62:	697a      	ldr	r2, [r7, #20]
 8005a64:	440a      	add	r2, r1
 8005a66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a6a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005a6e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005a72:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	699a      	ldr	r2, [r3, #24]
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	68db      	ldr	r3, [r3, #12]
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d903      	bls.n	8005a88 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	68da      	ldr	r2, [r3, #12]
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	015a      	lsls	r2, r3, #5
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	4413      	add	r3, r2
 8005a90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a94:	691b      	ldr	r3, [r3, #16]
 8005a96:	693a      	ldr	r2, [r7, #16]
 8005a98:	0151      	lsls	r1, r2, #5
 8005a9a:	697a      	ldr	r2, [r7, #20]
 8005a9c:	440a      	add	r2, r1
 8005a9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005aa2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005aa6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	015a      	lsls	r2, r3, #5
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	4413      	add	r3, r2
 8005ab0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ab4:	691a      	ldr	r2, [r3, #16]
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	699b      	ldr	r3, [r3, #24]
 8005aba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005abe:	6939      	ldr	r1, [r7, #16]
 8005ac0:	0148      	lsls	r0, r1, #5
 8005ac2:	6979      	ldr	r1, [r7, #20]
 8005ac4:	4401      	add	r1, r0
 8005ac6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005aca:	4313      	orrs	r3, r2
 8005acc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005ace:	79fb      	ldrb	r3, [r7, #7]
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d11e      	bne.n	8005b12 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	695b      	ldr	r3, [r3, #20]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d009      	beq.n	8005af0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	015a      	lsls	r2, r3, #5
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	4413      	add	r3, r2
 8005ae4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ae8:	461a      	mov	r2, r3
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	695b      	ldr	r3, [r3, #20]
 8005aee:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	015a      	lsls	r2, r3, #5
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	4413      	add	r3, r2
 8005af8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	693a      	ldr	r2, [r7, #16]
 8005b00:	0151      	lsls	r1, r2, #5
 8005b02:	697a      	ldr	r2, [r7, #20]
 8005b04:	440a      	add	r2, r1
 8005b06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b0a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005b0e:	6013      	str	r3, [r2, #0]
 8005b10:	e097      	b.n	8005c42 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	015a      	lsls	r2, r3, #5
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	4413      	add	r3, r2
 8005b1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	693a      	ldr	r2, [r7, #16]
 8005b22:	0151      	lsls	r1, r2, #5
 8005b24:	697a      	ldr	r2, [r7, #20]
 8005b26:	440a      	add	r2, r1
 8005b28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b2c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005b30:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	699b      	ldr	r3, [r3, #24]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	f000 8083 	beq.w	8005c42 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	781b      	ldrb	r3, [r3, #0]
 8005b48:	f003 030f 	and.w	r3, r3, #15
 8005b4c:	2101      	movs	r1, #1
 8005b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8005b52:	6979      	ldr	r1, [r7, #20]
 8005b54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	634b      	str	r3, [r1, #52]	; 0x34
 8005b5c:	e071      	b.n	8005c42 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	015a      	lsls	r2, r3, #5
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	4413      	add	r3, r2
 8005b66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b6a:	691b      	ldr	r3, [r3, #16]
 8005b6c:	693a      	ldr	r2, [r7, #16]
 8005b6e:	0151      	lsls	r1, r2, #5
 8005b70:	697a      	ldr	r2, [r7, #20]
 8005b72:	440a      	add	r2, r1
 8005b74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b78:	0cdb      	lsrs	r3, r3, #19
 8005b7a:	04db      	lsls	r3, r3, #19
 8005b7c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	015a      	lsls	r2, r3, #5
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	4413      	add	r3, r2
 8005b86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b8a:	691b      	ldr	r3, [r3, #16]
 8005b8c:	693a      	ldr	r2, [r7, #16]
 8005b8e:	0151      	lsls	r1, r2, #5
 8005b90:	697a      	ldr	r2, [r7, #20]
 8005b92:	440a      	add	r2, r1
 8005b94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b98:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005b9c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005ba0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	699b      	ldr	r3, [r3, #24]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d003      	beq.n	8005bb2 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	68da      	ldr	r2, [r3, #12]
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	68da      	ldr	r2, [r3, #12]
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	015a      	lsls	r2, r3, #5
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	4413      	add	r3, r2
 8005bc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bc6:	691b      	ldr	r3, [r3, #16]
 8005bc8:	693a      	ldr	r2, [r7, #16]
 8005bca:	0151      	lsls	r1, r2, #5
 8005bcc:	697a      	ldr	r2, [r7, #20]
 8005bce:	440a      	add	r2, r1
 8005bd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bd4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005bd8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	015a      	lsls	r2, r3, #5
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	4413      	add	r3, r2
 8005be2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005be6:	691a      	ldr	r2, [r3, #16]
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	69db      	ldr	r3, [r3, #28]
 8005bec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005bf0:	6939      	ldr	r1, [r7, #16]
 8005bf2:	0148      	lsls	r0, r1, #5
 8005bf4:	6979      	ldr	r1, [r7, #20]
 8005bf6:	4401      	add	r1, r0
 8005bf8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005c00:	79fb      	ldrb	r3, [r7, #7]
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d10d      	bne.n	8005c22 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	691b      	ldr	r3, [r3, #16]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d009      	beq.n	8005c22 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	6919      	ldr	r1, [r3, #16]
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	015a      	lsls	r2, r3, #5
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	4413      	add	r3, r2
 8005c1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c1e:	460a      	mov	r2, r1
 8005c20:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	015a      	lsls	r2, r3, #5
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	4413      	add	r3, r2
 8005c2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	693a      	ldr	r2, [r7, #16]
 8005c32:	0151      	lsls	r1, r2, #5
 8005c34:	697a      	ldr	r2, [r7, #20]
 8005c36:	440a      	add	r2, r1
 8005c38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c3c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005c40:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005c42:	2300      	movs	r3, #0
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	371c      	adds	r7, #28
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4e:	4770      	bx	lr

08005c50 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b087      	sub	sp, #28
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
 8005c58:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	785b      	ldrb	r3, [r3, #1]
 8005c6a:	2b01      	cmp	r3, #1
 8005c6c:	d14a      	bne.n	8005d04 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	781b      	ldrb	r3, [r3, #0]
 8005c72:	015a      	lsls	r2, r3, #5
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	4413      	add	r3, r2
 8005c78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c86:	f040 8086 	bne.w	8005d96 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	781b      	ldrb	r3, [r3, #0]
 8005c8e:	015a      	lsls	r2, r3, #5
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	4413      	add	r3, r2
 8005c94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	683a      	ldr	r2, [r7, #0]
 8005c9c:	7812      	ldrb	r2, [r2, #0]
 8005c9e:	0151      	lsls	r1, r2, #5
 8005ca0:	693a      	ldr	r2, [r7, #16]
 8005ca2:	440a      	add	r2, r1
 8005ca4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ca8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005cac:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	781b      	ldrb	r3, [r3, #0]
 8005cb2:	015a      	lsls	r2, r3, #5
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	4413      	add	r3, r2
 8005cb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	683a      	ldr	r2, [r7, #0]
 8005cc0:	7812      	ldrb	r2, [r2, #0]
 8005cc2:	0151      	lsls	r1, r2, #5
 8005cc4:	693a      	ldr	r2, [r7, #16]
 8005cc6:	440a      	add	r2, r1
 8005cc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ccc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005cd0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	3301      	adds	r3, #1
 8005cd6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f242 7210 	movw	r2, #10000	; 0x2710
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d902      	bls.n	8005ce8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	75fb      	strb	r3, [r7, #23]
          break;
 8005ce6:	e056      	b.n	8005d96 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	781b      	ldrb	r3, [r3, #0]
 8005cec:	015a      	lsls	r2, r3, #5
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	4413      	add	r3, r2
 8005cf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005cfc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d00:	d0e7      	beq.n	8005cd2 <USB_EPStopXfer+0x82>
 8005d02:	e048      	b.n	8005d96 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	781b      	ldrb	r3, [r3, #0]
 8005d08:	015a      	lsls	r2, r3, #5
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	4413      	add	r3, r2
 8005d0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d1c:	d13b      	bne.n	8005d96 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	781b      	ldrb	r3, [r3, #0]
 8005d22:	015a      	lsls	r2, r3, #5
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	4413      	add	r3, r2
 8005d28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	683a      	ldr	r2, [r7, #0]
 8005d30:	7812      	ldrb	r2, [r2, #0]
 8005d32:	0151      	lsls	r1, r2, #5
 8005d34:	693a      	ldr	r2, [r7, #16]
 8005d36:	440a      	add	r2, r1
 8005d38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d3c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005d40:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	781b      	ldrb	r3, [r3, #0]
 8005d46:	015a      	lsls	r2, r3, #5
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	4413      	add	r3, r2
 8005d4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	683a      	ldr	r2, [r7, #0]
 8005d54:	7812      	ldrb	r2, [r2, #0]
 8005d56:	0151      	lsls	r1, r2, #5
 8005d58:	693a      	ldr	r2, [r7, #16]
 8005d5a:	440a      	add	r2, r1
 8005d5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d60:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d64:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	3301      	adds	r3, #1
 8005d6a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f242 7210 	movw	r2, #10000	; 0x2710
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d902      	bls.n	8005d7c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005d76:	2301      	movs	r3, #1
 8005d78:	75fb      	strb	r3, [r7, #23]
          break;
 8005d7a:	e00c      	b.n	8005d96 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	781b      	ldrb	r3, [r3, #0]
 8005d80:	015a      	lsls	r2, r3, #5
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	4413      	add	r3, r2
 8005d86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d94:	d0e7      	beq.n	8005d66 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005d96:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	371c      	adds	r7, #28
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da2:	4770      	bx	lr

08005da4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b089      	sub	sp, #36	; 0x24
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	60f8      	str	r0, [r7, #12]
 8005dac:	60b9      	str	r1, [r7, #8]
 8005dae:	4611      	mov	r1, r2
 8005db0:	461a      	mov	r2, r3
 8005db2:	460b      	mov	r3, r1
 8005db4:	71fb      	strb	r3, [r7, #7]
 8005db6:	4613      	mov	r3, r2
 8005db8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005dc2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d123      	bne.n	8005e12 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005dca:	88bb      	ldrh	r3, [r7, #4]
 8005dcc:	3303      	adds	r3, #3
 8005dce:	089b      	lsrs	r3, r3, #2
 8005dd0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	61bb      	str	r3, [r7, #24]
 8005dd6:	e018      	b.n	8005e0a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005dd8:	79fb      	ldrb	r3, [r7, #7]
 8005dda:	031a      	lsls	r2, r3, #12
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	4413      	add	r3, r2
 8005de0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005de4:	461a      	mov	r2, r3
 8005de6:	69fb      	ldr	r3, [r7, #28]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005dec:	69fb      	ldr	r3, [r7, #28]
 8005dee:	3301      	adds	r3, #1
 8005df0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005df2:	69fb      	ldr	r3, [r7, #28]
 8005df4:	3301      	adds	r3, #1
 8005df6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005df8:	69fb      	ldr	r3, [r7, #28]
 8005dfa:	3301      	adds	r3, #1
 8005dfc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005dfe:	69fb      	ldr	r3, [r7, #28]
 8005e00:	3301      	adds	r3, #1
 8005e02:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005e04:	69bb      	ldr	r3, [r7, #24]
 8005e06:	3301      	adds	r3, #1
 8005e08:	61bb      	str	r3, [r7, #24]
 8005e0a:	69ba      	ldr	r2, [r7, #24]
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d3e2      	bcc.n	8005dd8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005e12:	2300      	movs	r3, #0
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3724      	adds	r7, #36	; 0x24
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr

08005e20 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b08b      	sub	sp, #44	; 0x2c
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	60f8      	str	r0, [r7, #12]
 8005e28:	60b9      	str	r1, [r7, #8]
 8005e2a:	4613      	mov	r3, r2
 8005e2c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005e36:	88fb      	ldrh	r3, [r7, #6]
 8005e38:	089b      	lsrs	r3, r3, #2
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005e3e:	88fb      	ldrh	r3, [r7, #6]
 8005e40:	f003 0303 	and.w	r3, r3, #3
 8005e44:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005e46:	2300      	movs	r3, #0
 8005e48:	623b      	str	r3, [r7, #32]
 8005e4a:	e014      	b.n	8005e76 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005e4c:	69bb      	ldr	r3, [r7, #24]
 8005e4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e56:	601a      	str	r2, [r3, #0]
    pDest++;
 8005e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e5a:	3301      	adds	r3, #1
 8005e5c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e60:	3301      	adds	r3, #1
 8005e62:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e66:	3301      	adds	r3, #1
 8005e68:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e6c:	3301      	adds	r3, #1
 8005e6e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005e70:	6a3b      	ldr	r3, [r7, #32]
 8005e72:	3301      	adds	r3, #1
 8005e74:	623b      	str	r3, [r7, #32]
 8005e76:	6a3a      	ldr	r2, [r7, #32]
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	d3e6      	bcc.n	8005e4c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005e7e:	8bfb      	ldrh	r3, [r7, #30]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d01e      	beq.n	8005ec2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005e84:	2300      	movs	r3, #0
 8005e86:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005e88:	69bb      	ldr	r3, [r7, #24]
 8005e8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e8e:	461a      	mov	r2, r3
 8005e90:	f107 0310 	add.w	r3, r7, #16
 8005e94:	6812      	ldr	r2, [r2, #0]
 8005e96:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005e98:	693a      	ldr	r2, [r7, #16]
 8005e9a:	6a3b      	ldr	r3, [r7, #32]
 8005e9c:	b2db      	uxtb	r3, r3
 8005e9e:	00db      	lsls	r3, r3, #3
 8005ea0:	fa22 f303 	lsr.w	r3, r2, r3
 8005ea4:	b2da      	uxtb	r2, r3
 8005ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea8:	701a      	strb	r2, [r3, #0]
      i++;
 8005eaa:	6a3b      	ldr	r3, [r7, #32]
 8005eac:	3301      	adds	r3, #1
 8005eae:	623b      	str	r3, [r7, #32]
      pDest++;
 8005eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb2:	3301      	adds	r3, #1
 8005eb4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005eb6:	8bfb      	ldrh	r3, [r7, #30]
 8005eb8:	3b01      	subs	r3, #1
 8005eba:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005ebc:	8bfb      	ldrh	r3, [r7, #30]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d1ea      	bne.n	8005e98 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	372c      	adds	r7, #44	; 0x2c
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ece:	4770      	bx	lr

08005ed0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b085      	sub	sp, #20
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	781b      	ldrb	r3, [r3, #0]
 8005ee2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	785b      	ldrb	r3, [r3, #1]
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d12c      	bne.n	8005f46 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	015a      	lsls	r2, r3, #5
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	4413      	add	r3, r2
 8005ef4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	db12      	blt.n	8005f24 <USB_EPSetStall+0x54>
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d00f      	beq.n	8005f24 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	015a      	lsls	r2, r3, #5
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	4413      	add	r3, r2
 8005f0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	68ba      	ldr	r2, [r7, #8]
 8005f14:	0151      	lsls	r1, r2, #5
 8005f16:	68fa      	ldr	r2, [r7, #12]
 8005f18:	440a      	add	r2, r1
 8005f1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f1e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005f22:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	015a      	lsls	r2, r3, #5
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	4413      	add	r3, r2
 8005f2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	68ba      	ldr	r2, [r7, #8]
 8005f34:	0151      	lsls	r1, r2, #5
 8005f36:	68fa      	ldr	r2, [r7, #12]
 8005f38:	440a      	add	r2, r1
 8005f3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f3e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005f42:	6013      	str	r3, [r2, #0]
 8005f44:	e02b      	b.n	8005f9e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	015a      	lsls	r2, r3, #5
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	4413      	add	r3, r2
 8005f4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	db12      	blt.n	8005f7e <USB_EPSetStall+0xae>
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d00f      	beq.n	8005f7e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	015a      	lsls	r2, r3, #5
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	4413      	add	r3, r2
 8005f66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	68ba      	ldr	r2, [r7, #8]
 8005f6e:	0151      	lsls	r1, r2, #5
 8005f70:	68fa      	ldr	r2, [r7, #12]
 8005f72:	440a      	add	r2, r1
 8005f74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f78:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005f7c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	015a      	lsls	r2, r3, #5
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	4413      	add	r3, r2
 8005f86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	68ba      	ldr	r2, [r7, #8]
 8005f8e:	0151      	lsls	r1, r2, #5
 8005f90:	68fa      	ldr	r2, [r7, #12]
 8005f92:	440a      	add	r2, r1
 8005f94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f98:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005f9c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005f9e:	2300      	movs	r3, #0
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3714      	adds	r7, #20
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr

08005fac <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b085      	sub	sp, #20
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
 8005fb4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	781b      	ldrb	r3, [r3, #0]
 8005fbe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	785b      	ldrb	r3, [r3, #1]
 8005fc4:	2b01      	cmp	r3, #1
 8005fc6:	d128      	bne.n	800601a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	015a      	lsls	r2, r3, #5
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	4413      	add	r3, r2
 8005fd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	68ba      	ldr	r2, [r7, #8]
 8005fd8:	0151      	lsls	r1, r2, #5
 8005fda:	68fa      	ldr	r2, [r7, #12]
 8005fdc:	440a      	add	r2, r1
 8005fde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fe2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005fe6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	791b      	ldrb	r3, [r3, #4]
 8005fec:	2b03      	cmp	r3, #3
 8005fee:	d003      	beq.n	8005ff8 <USB_EPClearStall+0x4c>
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	791b      	ldrb	r3, [r3, #4]
 8005ff4:	2b02      	cmp	r3, #2
 8005ff6:	d138      	bne.n	800606a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	015a      	lsls	r2, r3, #5
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	4413      	add	r3, r2
 8006000:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	68ba      	ldr	r2, [r7, #8]
 8006008:	0151      	lsls	r1, r2, #5
 800600a:	68fa      	ldr	r2, [r7, #12]
 800600c:	440a      	add	r2, r1
 800600e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006012:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006016:	6013      	str	r3, [r2, #0]
 8006018:	e027      	b.n	800606a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	015a      	lsls	r2, r3, #5
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	4413      	add	r3, r2
 8006022:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	68ba      	ldr	r2, [r7, #8]
 800602a:	0151      	lsls	r1, r2, #5
 800602c:	68fa      	ldr	r2, [r7, #12]
 800602e:	440a      	add	r2, r1
 8006030:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006034:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006038:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	791b      	ldrb	r3, [r3, #4]
 800603e:	2b03      	cmp	r3, #3
 8006040:	d003      	beq.n	800604a <USB_EPClearStall+0x9e>
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	791b      	ldrb	r3, [r3, #4]
 8006046:	2b02      	cmp	r3, #2
 8006048:	d10f      	bne.n	800606a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	015a      	lsls	r2, r3, #5
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	4413      	add	r3, r2
 8006052:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	68ba      	ldr	r2, [r7, #8]
 800605a:	0151      	lsls	r1, r2, #5
 800605c:	68fa      	ldr	r2, [r7, #12]
 800605e:	440a      	add	r2, r1
 8006060:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006064:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006068:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800606a:	2300      	movs	r3, #0
}
 800606c:	4618      	mov	r0, r3
 800606e:	3714      	adds	r7, #20
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr

08006078 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006078:	b480      	push	{r7}
 800607a:	b085      	sub	sp, #20
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
 8006080:	460b      	mov	r3, r1
 8006082:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	68fa      	ldr	r2, [r7, #12]
 8006092:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006096:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800609a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060a2:	681a      	ldr	r2, [r3, #0]
 80060a4:	78fb      	ldrb	r3, [r7, #3]
 80060a6:	011b      	lsls	r3, r3, #4
 80060a8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80060ac:	68f9      	ldr	r1, [r7, #12]
 80060ae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80060b2:	4313      	orrs	r3, r2
 80060b4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80060b6:	2300      	movs	r3, #0
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3714      	adds	r7, #20
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr

080060c4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b085      	sub	sp, #20
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	68fa      	ldr	r2, [r7, #12]
 80060da:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80060de:	f023 0303 	bic.w	r3, r3, #3
 80060e2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	68fa      	ldr	r2, [r7, #12]
 80060ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060f2:	f023 0302 	bic.w	r3, r3, #2
 80060f6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80060f8:	2300      	movs	r3, #0
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3714      	adds	r7, #20
 80060fe:	46bd      	mov	sp, r7
 8006100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006104:	4770      	bx	lr

08006106 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006106:	b480      	push	{r7}
 8006108:	b085      	sub	sp, #20
 800610a:	af00      	add	r7, sp, #0
 800610c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	68fa      	ldr	r2, [r7, #12]
 800611c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006120:	f023 0303 	bic.w	r3, r3, #3
 8006124:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	68fa      	ldr	r2, [r7, #12]
 8006130:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006134:	f043 0302 	orr.w	r3, r3, #2
 8006138:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800613a:	2300      	movs	r3, #0
}
 800613c:	4618      	mov	r0, r3
 800613e:	3714      	adds	r7, #20
 8006140:	46bd      	mov	sp, r7
 8006142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006146:	4770      	bx	lr

08006148 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006148:	b480      	push	{r7}
 800614a:	b085      	sub	sp, #20
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	695b      	ldr	r3, [r3, #20]
 8006154:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	699b      	ldr	r3, [r3, #24]
 800615a:	68fa      	ldr	r2, [r7, #12]
 800615c:	4013      	ands	r3, r2
 800615e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006160:	68fb      	ldr	r3, [r7, #12]
}
 8006162:	4618      	mov	r0, r3
 8006164:	3714      	adds	r7, #20
 8006166:	46bd      	mov	sp, r7
 8006168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616c:	4770      	bx	lr

0800616e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800616e:	b480      	push	{r7}
 8006170:	b085      	sub	sp, #20
 8006172:	af00      	add	r7, sp, #0
 8006174:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006180:	699b      	ldr	r3, [r3, #24]
 8006182:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800618a:	69db      	ldr	r3, [r3, #28]
 800618c:	68ba      	ldr	r2, [r7, #8]
 800618e:	4013      	ands	r3, r2
 8006190:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	0c1b      	lsrs	r3, r3, #16
}
 8006196:	4618      	mov	r0, r3
 8006198:	3714      	adds	r7, #20
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr

080061a2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80061a2:	b480      	push	{r7}
 80061a4:	b085      	sub	sp, #20
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061b4:	699b      	ldr	r3, [r3, #24]
 80061b6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061be:	69db      	ldr	r3, [r3, #28]
 80061c0:	68ba      	ldr	r2, [r7, #8]
 80061c2:	4013      	ands	r3, r2
 80061c4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	b29b      	uxth	r3, r3
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3714      	adds	r7, #20
 80061ce:	46bd      	mov	sp, r7
 80061d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d4:	4770      	bx	lr

080061d6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80061d6:	b480      	push	{r7}
 80061d8:	b085      	sub	sp, #20
 80061da:	af00      	add	r7, sp, #0
 80061dc:	6078      	str	r0, [r7, #4]
 80061de:	460b      	mov	r3, r1
 80061e0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80061e6:	78fb      	ldrb	r3, [r7, #3]
 80061e8:	015a      	lsls	r2, r3, #5
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	4413      	add	r3, r2
 80061ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061fc:	695b      	ldr	r3, [r3, #20]
 80061fe:	68ba      	ldr	r2, [r7, #8]
 8006200:	4013      	ands	r3, r2
 8006202:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006204:	68bb      	ldr	r3, [r7, #8]
}
 8006206:	4618      	mov	r0, r3
 8006208:	3714      	adds	r7, #20
 800620a:	46bd      	mov	sp, r7
 800620c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006210:	4770      	bx	lr

08006212 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006212:	b480      	push	{r7}
 8006214:	b087      	sub	sp, #28
 8006216:	af00      	add	r7, sp, #0
 8006218:	6078      	str	r0, [r7, #4]
 800621a:	460b      	mov	r3, r1
 800621c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006228:	691b      	ldr	r3, [r3, #16]
 800622a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006234:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006236:	78fb      	ldrb	r3, [r7, #3]
 8006238:	f003 030f 	and.w	r3, r3, #15
 800623c:	68fa      	ldr	r2, [r7, #12]
 800623e:	fa22 f303 	lsr.w	r3, r2, r3
 8006242:	01db      	lsls	r3, r3, #7
 8006244:	b2db      	uxtb	r3, r3
 8006246:	693a      	ldr	r2, [r7, #16]
 8006248:	4313      	orrs	r3, r2
 800624a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800624c:	78fb      	ldrb	r3, [r7, #3]
 800624e:	015a      	lsls	r2, r3, #5
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	4413      	add	r3, r2
 8006254:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006258:	689b      	ldr	r3, [r3, #8]
 800625a:	693a      	ldr	r2, [r7, #16]
 800625c:	4013      	ands	r3, r2
 800625e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006260:	68bb      	ldr	r3, [r7, #8]
}
 8006262:	4618      	mov	r0, r3
 8006264:	371c      	adds	r7, #28
 8006266:	46bd      	mov	sp, r7
 8006268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626c:	4770      	bx	lr

0800626e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800626e:	b480      	push	{r7}
 8006270:	b083      	sub	sp, #12
 8006272:	af00      	add	r7, sp, #0
 8006274:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	695b      	ldr	r3, [r3, #20]
 800627a:	f003 0301 	and.w	r3, r3, #1
}
 800627e:	4618      	mov	r0, r3
 8006280:	370c      	adds	r7, #12
 8006282:	46bd      	mov	sp, r7
 8006284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006288:	4770      	bx	lr

0800628a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800628a:	b480      	push	{r7}
 800628c:	b085      	sub	sp, #20
 800628e:	af00      	add	r7, sp, #0
 8006290:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	68fa      	ldr	r2, [r7, #12]
 80062a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062a4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80062a8:	f023 0307 	bic.w	r3, r3, #7
 80062ac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	68fa      	ldr	r2, [r7, #12]
 80062b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80062bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062c0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80062c2:	2300      	movs	r3, #0
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3714      	adds	r7, #20
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr

080062d0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b087      	sub	sp, #28
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	60f8      	str	r0, [r7, #12]
 80062d8:	460b      	mov	r3, r1
 80062da:	607a      	str	r2, [r7, #4]
 80062dc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	333c      	adds	r3, #60	; 0x3c
 80062e6:	3304      	adds	r3, #4
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	4a26      	ldr	r2, [pc, #152]	; (8006388 <USB_EP0_OutStart+0xb8>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d90a      	bls.n	800630a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006300:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006304:	d101      	bne.n	800630a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006306:	2300      	movs	r3, #0
 8006308:	e037      	b.n	800637a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006310:	461a      	mov	r2, r3
 8006312:	2300      	movs	r3, #0
 8006314:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800631c:	691b      	ldr	r3, [r3, #16]
 800631e:	697a      	ldr	r2, [r7, #20]
 8006320:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006324:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006328:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006330:	691b      	ldr	r3, [r3, #16]
 8006332:	697a      	ldr	r2, [r7, #20]
 8006334:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006338:	f043 0318 	orr.w	r3, r3, #24
 800633c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006344:	691b      	ldr	r3, [r3, #16]
 8006346:	697a      	ldr	r2, [r7, #20]
 8006348:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800634c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006350:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006352:	7afb      	ldrb	r3, [r7, #11]
 8006354:	2b01      	cmp	r3, #1
 8006356:	d10f      	bne.n	8006378 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800635e:	461a      	mov	r2, r3
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	697a      	ldr	r2, [r7, #20]
 800636e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006372:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006376:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006378:	2300      	movs	r3, #0
}
 800637a:	4618      	mov	r0, r3
 800637c:	371c      	adds	r7, #28
 800637e:	46bd      	mov	sp, r7
 8006380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006384:	4770      	bx	lr
 8006386:	bf00      	nop
 8006388:	4f54300a 	.word	0x4f54300a

0800638c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800638c:	b480      	push	{r7}
 800638e:	b085      	sub	sp, #20
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006394:	2300      	movs	r3, #0
 8006396:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	3301      	adds	r3, #1
 800639c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	4a13      	ldr	r2, [pc, #76]	; (80063f0 <USB_CoreReset+0x64>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d901      	bls.n	80063aa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80063a6:	2303      	movs	r3, #3
 80063a8:	e01b      	b.n	80063e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	691b      	ldr	r3, [r3, #16]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	daf2      	bge.n	8006398 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80063b2:	2300      	movs	r3, #0
 80063b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	691b      	ldr	r3, [r3, #16]
 80063ba:	f043 0201 	orr.w	r2, r3, #1
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	3301      	adds	r3, #1
 80063c6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	4a09      	ldr	r2, [pc, #36]	; (80063f0 <USB_CoreReset+0x64>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d901      	bls.n	80063d4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80063d0:	2303      	movs	r3, #3
 80063d2:	e006      	b.n	80063e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	691b      	ldr	r3, [r3, #16]
 80063d8:	f003 0301 	and.w	r3, r3, #1
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d0f0      	beq.n	80063c2 <USB_CoreReset+0x36>

  return HAL_OK;
 80063e0:	2300      	movs	r3, #0
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	3714      	adds	r7, #20
 80063e6:	46bd      	mov	sp, r7
 80063e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ec:	4770      	bx	lr
 80063ee:	bf00      	nop
 80063f0:	00030d40 	.word	0x00030d40

080063f4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b084      	sub	sp, #16
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
 80063fc:	460b      	mov	r3, r1
 80063fe:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006400:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006404:	f002 fc8a 	bl	8008d1c <USBD_static_malloc>
 8006408:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d109      	bne.n	8006424 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	32b0      	adds	r2, #176	; 0xb0
 800641a:	2100      	movs	r1, #0
 800641c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006420:	2302      	movs	r3, #2
 8006422:	e0d4      	b.n	80065ce <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006424:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006428:	2100      	movs	r1, #0
 800642a:	68f8      	ldr	r0, [r7, #12]
 800642c:	f002 fce4 	bl	8008df8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	32b0      	adds	r2, #176	; 0xb0
 800643a:	68f9      	ldr	r1, [r7, #12]
 800643c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	32b0      	adds	r2, #176	; 0xb0
 800644a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	7c1b      	ldrb	r3, [r3, #16]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d138      	bne.n	80064ce <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800645c:	4b5e      	ldr	r3, [pc, #376]	; (80065d8 <USBD_CDC_Init+0x1e4>)
 800645e:	7819      	ldrb	r1, [r3, #0]
 8006460:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006464:	2202      	movs	r2, #2
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f002 fb35 	bl	8008ad6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800646c:	4b5a      	ldr	r3, [pc, #360]	; (80065d8 <USBD_CDC_Init+0x1e4>)
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	f003 020f 	and.w	r2, r3, #15
 8006474:	6879      	ldr	r1, [r7, #4]
 8006476:	4613      	mov	r3, r2
 8006478:	009b      	lsls	r3, r3, #2
 800647a:	4413      	add	r3, r2
 800647c:	009b      	lsls	r3, r3, #2
 800647e:	440b      	add	r3, r1
 8006480:	3324      	adds	r3, #36	; 0x24
 8006482:	2201      	movs	r2, #1
 8006484:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006486:	4b55      	ldr	r3, [pc, #340]	; (80065dc <USBD_CDC_Init+0x1e8>)
 8006488:	7819      	ldrb	r1, [r3, #0]
 800648a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800648e:	2202      	movs	r2, #2
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f002 fb20 	bl	8008ad6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006496:	4b51      	ldr	r3, [pc, #324]	; (80065dc <USBD_CDC_Init+0x1e8>)
 8006498:	781b      	ldrb	r3, [r3, #0]
 800649a:	f003 020f 	and.w	r2, r3, #15
 800649e:	6879      	ldr	r1, [r7, #4]
 80064a0:	4613      	mov	r3, r2
 80064a2:	009b      	lsls	r3, r3, #2
 80064a4:	4413      	add	r3, r2
 80064a6:	009b      	lsls	r3, r3, #2
 80064a8:	440b      	add	r3, r1
 80064aa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80064ae:	2201      	movs	r2, #1
 80064b0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80064b2:	4b4b      	ldr	r3, [pc, #300]	; (80065e0 <USBD_CDC_Init+0x1ec>)
 80064b4:	781b      	ldrb	r3, [r3, #0]
 80064b6:	f003 020f 	and.w	r2, r3, #15
 80064ba:	6879      	ldr	r1, [r7, #4]
 80064bc:	4613      	mov	r3, r2
 80064be:	009b      	lsls	r3, r3, #2
 80064c0:	4413      	add	r3, r2
 80064c2:	009b      	lsls	r3, r3, #2
 80064c4:	440b      	add	r3, r1
 80064c6:	3326      	adds	r3, #38	; 0x26
 80064c8:	2210      	movs	r2, #16
 80064ca:	801a      	strh	r2, [r3, #0]
 80064cc:	e035      	b.n	800653a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80064ce:	4b42      	ldr	r3, [pc, #264]	; (80065d8 <USBD_CDC_Init+0x1e4>)
 80064d0:	7819      	ldrb	r1, [r3, #0]
 80064d2:	2340      	movs	r3, #64	; 0x40
 80064d4:	2202      	movs	r2, #2
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f002 fafd 	bl	8008ad6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80064dc:	4b3e      	ldr	r3, [pc, #248]	; (80065d8 <USBD_CDC_Init+0x1e4>)
 80064de:	781b      	ldrb	r3, [r3, #0]
 80064e0:	f003 020f 	and.w	r2, r3, #15
 80064e4:	6879      	ldr	r1, [r7, #4]
 80064e6:	4613      	mov	r3, r2
 80064e8:	009b      	lsls	r3, r3, #2
 80064ea:	4413      	add	r3, r2
 80064ec:	009b      	lsls	r3, r3, #2
 80064ee:	440b      	add	r3, r1
 80064f0:	3324      	adds	r3, #36	; 0x24
 80064f2:	2201      	movs	r2, #1
 80064f4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80064f6:	4b39      	ldr	r3, [pc, #228]	; (80065dc <USBD_CDC_Init+0x1e8>)
 80064f8:	7819      	ldrb	r1, [r3, #0]
 80064fa:	2340      	movs	r3, #64	; 0x40
 80064fc:	2202      	movs	r2, #2
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f002 fae9 	bl	8008ad6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006504:	4b35      	ldr	r3, [pc, #212]	; (80065dc <USBD_CDC_Init+0x1e8>)
 8006506:	781b      	ldrb	r3, [r3, #0]
 8006508:	f003 020f 	and.w	r2, r3, #15
 800650c:	6879      	ldr	r1, [r7, #4]
 800650e:	4613      	mov	r3, r2
 8006510:	009b      	lsls	r3, r3, #2
 8006512:	4413      	add	r3, r2
 8006514:	009b      	lsls	r3, r3, #2
 8006516:	440b      	add	r3, r1
 8006518:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800651c:	2201      	movs	r2, #1
 800651e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006520:	4b2f      	ldr	r3, [pc, #188]	; (80065e0 <USBD_CDC_Init+0x1ec>)
 8006522:	781b      	ldrb	r3, [r3, #0]
 8006524:	f003 020f 	and.w	r2, r3, #15
 8006528:	6879      	ldr	r1, [r7, #4]
 800652a:	4613      	mov	r3, r2
 800652c:	009b      	lsls	r3, r3, #2
 800652e:	4413      	add	r3, r2
 8006530:	009b      	lsls	r3, r3, #2
 8006532:	440b      	add	r3, r1
 8006534:	3326      	adds	r3, #38	; 0x26
 8006536:	2210      	movs	r2, #16
 8006538:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800653a:	4b29      	ldr	r3, [pc, #164]	; (80065e0 <USBD_CDC_Init+0x1ec>)
 800653c:	7819      	ldrb	r1, [r3, #0]
 800653e:	2308      	movs	r3, #8
 8006540:	2203      	movs	r2, #3
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f002 fac7 	bl	8008ad6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006548:	4b25      	ldr	r3, [pc, #148]	; (80065e0 <USBD_CDC_Init+0x1ec>)
 800654a:	781b      	ldrb	r3, [r3, #0]
 800654c:	f003 020f 	and.w	r2, r3, #15
 8006550:	6879      	ldr	r1, [r7, #4]
 8006552:	4613      	mov	r3, r2
 8006554:	009b      	lsls	r3, r3, #2
 8006556:	4413      	add	r3, r2
 8006558:	009b      	lsls	r3, r3, #2
 800655a:	440b      	add	r3, r1
 800655c:	3324      	adds	r3, #36	; 0x24
 800655e:	2201      	movs	r2, #1
 8006560:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2200      	movs	r2, #0
 8006566:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006570:	687a      	ldr	r2, [r7, #4]
 8006572:	33b0      	adds	r3, #176	; 0xb0
 8006574:	009b      	lsls	r3, r3, #2
 8006576:	4413      	add	r3, r2
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	2200      	movs	r2, #0
 8006582:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2200      	movs	r2, #0
 800658a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006594:	2b00      	cmp	r3, #0
 8006596:	d101      	bne.n	800659c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006598:	2302      	movs	r3, #2
 800659a:	e018      	b.n	80065ce <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	7c1b      	ldrb	r3, [r3, #16]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d10a      	bne.n	80065ba <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80065a4:	4b0d      	ldr	r3, [pc, #52]	; (80065dc <USBD_CDC_Init+0x1e8>)
 80065a6:	7819      	ldrb	r1, [r3, #0]
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80065ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f002 fb7e 	bl	8008cb4 <USBD_LL_PrepareReceive>
 80065b8:	e008      	b.n	80065cc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80065ba:	4b08      	ldr	r3, [pc, #32]	; (80065dc <USBD_CDC_Init+0x1e8>)
 80065bc:	7819      	ldrb	r1, [r3, #0]
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80065c4:	2340      	movs	r3, #64	; 0x40
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f002 fb74 	bl	8008cb4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80065cc:	2300      	movs	r3, #0
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3710      	adds	r7, #16
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}
 80065d6:	bf00      	nop
 80065d8:	20000097 	.word	0x20000097
 80065dc:	20000098 	.word	0x20000098
 80065e0:	20000099 	.word	0x20000099

080065e4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b082      	sub	sp, #8
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
 80065ec:	460b      	mov	r3, r1
 80065ee:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80065f0:	4b3a      	ldr	r3, [pc, #232]	; (80066dc <USBD_CDC_DeInit+0xf8>)
 80065f2:	781b      	ldrb	r3, [r3, #0]
 80065f4:	4619      	mov	r1, r3
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f002 fa93 	bl	8008b22 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80065fc:	4b37      	ldr	r3, [pc, #220]	; (80066dc <USBD_CDC_DeInit+0xf8>)
 80065fe:	781b      	ldrb	r3, [r3, #0]
 8006600:	f003 020f 	and.w	r2, r3, #15
 8006604:	6879      	ldr	r1, [r7, #4]
 8006606:	4613      	mov	r3, r2
 8006608:	009b      	lsls	r3, r3, #2
 800660a:	4413      	add	r3, r2
 800660c:	009b      	lsls	r3, r3, #2
 800660e:	440b      	add	r3, r1
 8006610:	3324      	adds	r3, #36	; 0x24
 8006612:	2200      	movs	r2, #0
 8006614:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006616:	4b32      	ldr	r3, [pc, #200]	; (80066e0 <USBD_CDC_DeInit+0xfc>)
 8006618:	781b      	ldrb	r3, [r3, #0]
 800661a:	4619      	mov	r1, r3
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f002 fa80 	bl	8008b22 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006622:	4b2f      	ldr	r3, [pc, #188]	; (80066e0 <USBD_CDC_DeInit+0xfc>)
 8006624:	781b      	ldrb	r3, [r3, #0]
 8006626:	f003 020f 	and.w	r2, r3, #15
 800662a:	6879      	ldr	r1, [r7, #4]
 800662c:	4613      	mov	r3, r2
 800662e:	009b      	lsls	r3, r3, #2
 8006630:	4413      	add	r3, r2
 8006632:	009b      	lsls	r3, r3, #2
 8006634:	440b      	add	r3, r1
 8006636:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800663a:	2200      	movs	r2, #0
 800663c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800663e:	4b29      	ldr	r3, [pc, #164]	; (80066e4 <USBD_CDC_DeInit+0x100>)
 8006640:	781b      	ldrb	r3, [r3, #0]
 8006642:	4619      	mov	r1, r3
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f002 fa6c 	bl	8008b22 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800664a:	4b26      	ldr	r3, [pc, #152]	; (80066e4 <USBD_CDC_DeInit+0x100>)
 800664c:	781b      	ldrb	r3, [r3, #0]
 800664e:	f003 020f 	and.w	r2, r3, #15
 8006652:	6879      	ldr	r1, [r7, #4]
 8006654:	4613      	mov	r3, r2
 8006656:	009b      	lsls	r3, r3, #2
 8006658:	4413      	add	r3, r2
 800665a:	009b      	lsls	r3, r3, #2
 800665c:	440b      	add	r3, r1
 800665e:	3324      	adds	r3, #36	; 0x24
 8006660:	2200      	movs	r2, #0
 8006662:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006664:	4b1f      	ldr	r3, [pc, #124]	; (80066e4 <USBD_CDC_DeInit+0x100>)
 8006666:	781b      	ldrb	r3, [r3, #0]
 8006668:	f003 020f 	and.w	r2, r3, #15
 800666c:	6879      	ldr	r1, [r7, #4]
 800666e:	4613      	mov	r3, r2
 8006670:	009b      	lsls	r3, r3, #2
 8006672:	4413      	add	r3, r2
 8006674:	009b      	lsls	r3, r3, #2
 8006676:	440b      	add	r3, r1
 8006678:	3326      	adds	r3, #38	; 0x26
 800667a:	2200      	movs	r2, #0
 800667c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	32b0      	adds	r2, #176	; 0xb0
 8006688:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d01f      	beq.n	80066d0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006696:	687a      	ldr	r2, [r7, #4]
 8006698:	33b0      	adds	r3, #176	; 0xb0
 800669a:	009b      	lsls	r3, r3, #2
 800669c:	4413      	add	r3, r2
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	685b      	ldr	r3, [r3, #4]
 80066a2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	32b0      	adds	r2, #176	; 0xb0
 80066ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066b2:	4618      	mov	r0, r3
 80066b4:	f002 fb40 	bl	8008d38 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	32b0      	adds	r2, #176	; 0xb0
 80066c2:	2100      	movs	r1, #0
 80066c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2200      	movs	r2, #0
 80066cc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80066d0:	2300      	movs	r3, #0
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3708      	adds	r7, #8
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}
 80066da:	bf00      	nop
 80066dc:	20000097 	.word	0x20000097
 80066e0:	20000098 	.word	0x20000098
 80066e4:	20000099 	.word	0x20000099

080066e8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b086      	sub	sp, #24
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
 80066f0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	32b0      	adds	r2, #176	; 0xb0
 80066fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006700:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006702:	2300      	movs	r3, #0
 8006704:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006706:	2300      	movs	r3, #0
 8006708:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800670a:	2300      	movs	r3, #0
 800670c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d101      	bne.n	8006718 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006714:	2303      	movs	r3, #3
 8006716:	e0bf      	b.n	8006898 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	781b      	ldrb	r3, [r3, #0]
 800671c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006720:	2b00      	cmp	r3, #0
 8006722:	d050      	beq.n	80067c6 <USBD_CDC_Setup+0xde>
 8006724:	2b20      	cmp	r3, #32
 8006726:	f040 80af 	bne.w	8006888 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	88db      	ldrh	r3, [r3, #6]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d03a      	beq.n	80067a8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	781b      	ldrb	r3, [r3, #0]
 8006736:	b25b      	sxtb	r3, r3
 8006738:	2b00      	cmp	r3, #0
 800673a:	da1b      	bge.n	8006774 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006742:	687a      	ldr	r2, [r7, #4]
 8006744:	33b0      	adds	r3, #176	; 0xb0
 8006746:	009b      	lsls	r3, r3, #2
 8006748:	4413      	add	r3, r2
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	689b      	ldr	r3, [r3, #8]
 800674e:	683a      	ldr	r2, [r7, #0]
 8006750:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006752:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006754:	683a      	ldr	r2, [r7, #0]
 8006756:	88d2      	ldrh	r2, [r2, #6]
 8006758:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	88db      	ldrh	r3, [r3, #6]
 800675e:	2b07      	cmp	r3, #7
 8006760:	bf28      	it	cs
 8006762:	2307      	movcs	r3, #7
 8006764:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	89fa      	ldrh	r2, [r7, #14]
 800676a:	4619      	mov	r1, r3
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f001 fd89 	bl	8008284 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006772:	e090      	b.n	8006896 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	785a      	ldrb	r2, [r3, #1]
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	88db      	ldrh	r3, [r3, #6]
 8006782:	2b3f      	cmp	r3, #63	; 0x3f
 8006784:	d803      	bhi.n	800678e <USBD_CDC_Setup+0xa6>
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	88db      	ldrh	r3, [r3, #6]
 800678a:	b2da      	uxtb	r2, r3
 800678c:	e000      	b.n	8006790 <USBD_CDC_Setup+0xa8>
 800678e:	2240      	movs	r2, #64	; 0x40
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006796:	6939      	ldr	r1, [r7, #16]
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800679e:	461a      	mov	r2, r3
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f001 fd9b 	bl	80082dc <USBD_CtlPrepareRx>
      break;
 80067a6:	e076      	b.n	8006896 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80067ae:	687a      	ldr	r2, [r7, #4]
 80067b0:	33b0      	adds	r3, #176	; 0xb0
 80067b2:	009b      	lsls	r3, r3, #2
 80067b4:	4413      	add	r3, r2
 80067b6:	685b      	ldr	r3, [r3, #4]
 80067b8:	689b      	ldr	r3, [r3, #8]
 80067ba:	683a      	ldr	r2, [r7, #0]
 80067bc:	7850      	ldrb	r0, [r2, #1]
 80067be:	2200      	movs	r2, #0
 80067c0:	6839      	ldr	r1, [r7, #0]
 80067c2:	4798      	blx	r3
      break;
 80067c4:	e067      	b.n	8006896 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	785b      	ldrb	r3, [r3, #1]
 80067ca:	2b0b      	cmp	r3, #11
 80067cc:	d851      	bhi.n	8006872 <USBD_CDC_Setup+0x18a>
 80067ce:	a201      	add	r2, pc, #4	; (adr r2, 80067d4 <USBD_CDC_Setup+0xec>)
 80067d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067d4:	08006805 	.word	0x08006805
 80067d8:	08006881 	.word	0x08006881
 80067dc:	08006873 	.word	0x08006873
 80067e0:	08006873 	.word	0x08006873
 80067e4:	08006873 	.word	0x08006873
 80067e8:	08006873 	.word	0x08006873
 80067ec:	08006873 	.word	0x08006873
 80067f0:	08006873 	.word	0x08006873
 80067f4:	08006873 	.word	0x08006873
 80067f8:	08006873 	.word	0x08006873
 80067fc:	0800682f 	.word	0x0800682f
 8006800:	08006859 	.word	0x08006859
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800680a:	b2db      	uxtb	r3, r3
 800680c:	2b03      	cmp	r3, #3
 800680e:	d107      	bne.n	8006820 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006810:	f107 030a 	add.w	r3, r7, #10
 8006814:	2202      	movs	r2, #2
 8006816:	4619      	mov	r1, r3
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f001 fd33 	bl	8008284 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800681e:	e032      	b.n	8006886 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006820:	6839      	ldr	r1, [r7, #0]
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f001 fcbd 	bl	80081a2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006828:	2303      	movs	r3, #3
 800682a:	75fb      	strb	r3, [r7, #23]
          break;
 800682c:	e02b      	b.n	8006886 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006834:	b2db      	uxtb	r3, r3
 8006836:	2b03      	cmp	r3, #3
 8006838:	d107      	bne.n	800684a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800683a:	f107 030d 	add.w	r3, r7, #13
 800683e:	2201      	movs	r2, #1
 8006840:	4619      	mov	r1, r3
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f001 fd1e 	bl	8008284 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006848:	e01d      	b.n	8006886 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800684a:	6839      	ldr	r1, [r7, #0]
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f001 fca8 	bl	80081a2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006852:	2303      	movs	r3, #3
 8006854:	75fb      	strb	r3, [r7, #23]
          break;
 8006856:	e016      	b.n	8006886 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800685e:	b2db      	uxtb	r3, r3
 8006860:	2b03      	cmp	r3, #3
 8006862:	d00f      	beq.n	8006884 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006864:	6839      	ldr	r1, [r7, #0]
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f001 fc9b 	bl	80081a2 <USBD_CtlError>
            ret = USBD_FAIL;
 800686c:	2303      	movs	r3, #3
 800686e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006870:	e008      	b.n	8006884 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006872:	6839      	ldr	r1, [r7, #0]
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	f001 fc94 	bl	80081a2 <USBD_CtlError>
          ret = USBD_FAIL;
 800687a:	2303      	movs	r3, #3
 800687c:	75fb      	strb	r3, [r7, #23]
          break;
 800687e:	e002      	b.n	8006886 <USBD_CDC_Setup+0x19e>
          break;
 8006880:	bf00      	nop
 8006882:	e008      	b.n	8006896 <USBD_CDC_Setup+0x1ae>
          break;
 8006884:	bf00      	nop
      }
      break;
 8006886:	e006      	b.n	8006896 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006888:	6839      	ldr	r1, [r7, #0]
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f001 fc89 	bl	80081a2 <USBD_CtlError>
      ret = USBD_FAIL;
 8006890:	2303      	movs	r3, #3
 8006892:	75fb      	strb	r3, [r7, #23]
      break;
 8006894:	bf00      	nop
  }

  return (uint8_t)ret;
 8006896:	7dfb      	ldrb	r3, [r7, #23]
}
 8006898:	4618      	mov	r0, r3
 800689a:	3718      	adds	r7, #24
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}

080068a0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b084      	sub	sp, #16
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
 80068a8:	460b      	mov	r3, r1
 80068aa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80068b2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	32b0      	adds	r2, #176	; 0xb0
 80068be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d101      	bne.n	80068ca <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80068c6:	2303      	movs	r3, #3
 80068c8:	e065      	b.n	8006996 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	32b0      	adds	r2, #176	; 0xb0
 80068d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068d8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80068da:	78fb      	ldrb	r3, [r7, #3]
 80068dc:	f003 020f 	and.w	r2, r3, #15
 80068e0:	6879      	ldr	r1, [r7, #4]
 80068e2:	4613      	mov	r3, r2
 80068e4:	009b      	lsls	r3, r3, #2
 80068e6:	4413      	add	r3, r2
 80068e8:	009b      	lsls	r3, r3, #2
 80068ea:	440b      	add	r3, r1
 80068ec:	3318      	adds	r3, #24
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d02f      	beq.n	8006954 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80068f4:	78fb      	ldrb	r3, [r7, #3]
 80068f6:	f003 020f 	and.w	r2, r3, #15
 80068fa:	6879      	ldr	r1, [r7, #4]
 80068fc:	4613      	mov	r3, r2
 80068fe:	009b      	lsls	r3, r3, #2
 8006900:	4413      	add	r3, r2
 8006902:	009b      	lsls	r3, r3, #2
 8006904:	440b      	add	r3, r1
 8006906:	3318      	adds	r3, #24
 8006908:	681a      	ldr	r2, [r3, #0]
 800690a:	78fb      	ldrb	r3, [r7, #3]
 800690c:	f003 010f 	and.w	r1, r3, #15
 8006910:	68f8      	ldr	r0, [r7, #12]
 8006912:	460b      	mov	r3, r1
 8006914:	00db      	lsls	r3, r3, #3
 8006916:	440b      	add	r3, r1
 8006918:	009b      	lsls	r3, r3, #2
 800691a:	4403      	add	r3, r0
 800691c:	3348      	adds	r3, #72	; 0x48
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	fbb2 f1f3 	udiv	r1, r2, r3
 8006924:	fb01 f303 	mul.w	r3, r1, r3
 8006928:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800692a:	2b00      	cmp	r3, #0
 800692c:	d112      	bne.n	8006954 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800692e:	78fb      	ldrb	r3, [r7, #3]
 8006930:	f003 020f 	and.w	r2, r3, #15
 8006934:	6879      	ldr	r1, [r7, #4]
 8006936:	4613      	mov	r3, r2
 8006938:	009b      	lsls	r3, r3, #2
 800693a:	4413      	add	r3, r2
 800693c:	009b      	lsls	r3, r3, #2
 800693e:	440b      	add	r3, r1
 8006940:	3318      	adds	r3, #24
 8006942:	2200      	movs	r2, #0
 8006944:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006946:	78f9      	ldrb	r1, [r7, #3]
 8006948:	2300      	movs	r3, #0
 800694a:	2200      	movs	r2, #0
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f002 f990 	bl	8008c72 <USBD_LL_Transmit>
 8006952:	e01f      	b.n	8006994 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	2200      	movs	r2, #0
 8006958:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006962:	687a      	ldr	r2, [r7, #4]
 8006964:	33b0      	adds	r3, #176	; 0xb0
 8006966:	009b      	lsls	r3, r3, #2
 8006968:	4413      	add	r3, r2
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	691b      	ldr	r3, [r3, #16]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d010      	beq.n	8006994 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006978:	687a      	ldr	r2, [r7, #4]
 800697a:	33b0      	adds	r3, #176	; 0xb0
 800697c:	009b      	lsls	r3, r3, #2
 800697e:	4413      	add	r3, r2
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	691b      	ldr	r3, [r3, #16]
 8006984:	68ba      	ldr	r2, [r7, #8]
 8006986:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800698a:	68ba      	ldr	r2, [r7, #8]
 800698c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006990:	78fa      	ldrb	r2, [r7, #3]
 8006992:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006994:	2300      	movs	r3, #0
}
 8006996:	4618      	mov	r0, r3
 8006998:	3710      	adds	r7, #16
 800699a:	46bd      	mov	sp, r7
 800699c:	bd80      	pop	{r7, pc}

0800699e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800699e:	b580      	push	{r7, lr}
 80069a0:	b084      	sub	sp, #16
 80069a2:	af00      	add	r7, sp, #0
 80069a4:	6078      	str	r0, [r7, #4]
 80069a6:	460b      	mov	r3, r1
 80069a8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	32b0      	adds	r2, #176	; 0xb0
 80069b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069b8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	32b0      	adds	r2, #176	; 0xb0
 80069c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d101      	bne.n	80069d0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80069cc:	2303      	movs	r3, #3
 80069ce:	e01a      	b.n	8006a06 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80069d0:	78fb      	ldrb	r3, [r7, #3]
 80069d2:	4619      	mov	r1, r3
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f002 f98e 	bl	8008cf6 <USBD_LL_GetRxDataSize>
 80069da:	4602      	mov	r2, r0
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80069e8:	687a      	ldr	r2, [r7, #4]
 80069ea:	33b0      	adds	r3, #176	; 0xb0
 80069ec:	009b      	lsls	r3, r3, #2
 80069ee:	4413      	add	r3, r2
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	68db      	ldr	r3, [r3, #12]
 80069f4:	68fa      	ldr	r2, [r7, #12]
 80069f6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80069fa:	68fa      	ldr	r2, [r7, #12]
 80069fc:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006a00:	4611      	mov	r1, r2
 8006a02:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006a04:	2300      	movs	r3, #0
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	3710      	adds	r7, #16
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}

08006a0e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006a0e:	b580      	push	{r7, lr}
 8006a10:	b084      	sub	sp, #16
 8006a12:	af00      	add	r7, sp, #0
 8006a14:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	32b0      	adds	r2, #176	; 0xb0
 8006a20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a24:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d101      	bne.n	8006a30 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006a2c:	2303      	movs	r3, #3
 8006a2e:	e025      	b.n	8006a7c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006a36:	687a      	ldr	r2, [r7, #4]
 8006a38:	33b0      	adds	r3, #176	; 0xb0
 8006a3a:	009b      	lsls	r3, r3, #2
 8006a3c:	4413      	add	r3, r2
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d01a      	beq.n	8006a7a <USBD_CDC_EP0_RxReady+0x6c>
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006a4a:	2bff      	cmp	r3, #255	; 0xff
 8006a4c:	d015      	beq.n	8006a7a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006a54:	687a      	ldr	r2, [r7, #4]
 8006a56:	33b0      	adds	r3, #176	; 0xb0
 8006a58:	009b      	lsls	r3, r3, #2
 8006a5a:	4413      	add	r3, r2
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	689b      	ldr	r3, [r3, #8]
 8006a60:	68fa      	ldr	r2, [r7, #12]
 8006a62:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8006a66:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006a68:	68fa      	ldr	r2, [r7, #12]
 8006a6a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006a6e:	b292      	uxth	r2, r2
 8006a70:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	22ff      	movs	r2, #255	; 0xff
 8006a76:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006a7a:	2300      	movs	r3, #0
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	3710      	adds	r7, #16
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}

08006a84 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b086      	sub	sp, #24
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006a8c:	2182      	movs	r1, #130	; 0x82
 8006a8e:	4818      	ldr	r0, [pc, #96]	; (8006af0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006a90:	f000 fd4f 	bl	8007532 <USBD_GetEpDesc>
 8006a94:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006a96:	2101      	movs	r1, #1
 8006a98:	4815      	ldr	r0, [pc, #84]	; (8006af0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006a9a:	f000 fd4a 	bl	8007532 <USBD_GetEpDesc>
 8006a9e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006aa0:	2181      	movs	r1, #129	; 0x81
 8006aa2:	4813      	ldr	r0, [pc, #76]	; (8006af0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006aa4:	f000 fd45 	bl	8007532 <USBD_GetEpDesc>
 8006aa8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d002      	beq.n	8006ab6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	2210      	movs	r2, #16
 8006ab4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d006      	beq.n	8006aca <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006abc:	693b      	ldr	r3, [r7, #16]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ac4:	711a      	strb	r2, [r3, #4]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d006      	beq.n	8006ade <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ad8:	711a      	strb	r2, [r3, #4]
 8006ada:	2200      	movs	r2, #0
 8006adc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2243      	movs	r2, #67	; 0x43
 8006ae2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006ae4:	4b02      	ldr	r3, [pc, #8]	; (8006af0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	3718      	adds	r7, #24
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}
 8006aee:	bf00      	nop
 8006af0:	20000054 	.word	0x20000054

08006af4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b086      	sub	sp, #24
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006afc:	2182      	movs	r1, #130	; 0x82
 8006afe:	4818      	ldr	r0, [pc, #96]	; (8006b60 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006b00:	f000 fd17 	bl	8007532 <USBD_GetEpDesc>
 8006b04:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006b06:	2101      	movs	r1, #1
 8006b08:	4815      	ldr	r0, [pc, #84]	; (8006b60 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006b0a:	f000 fd12 	bl	8007532 <USBD_GetEpDesc>
 8006b0e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006b10:	2181      	movs	r1, #129	; 0x81
 8006b12:	4813      	ldr	r0, [pc, #76]	; (8006b60 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006b14:	f000 fd0d 	bl	8007532 <USBD_GetEpDesc>
 8006b18:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d002      	beq.n	8006b26 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	2210      	movs	r2, #16
 8006b24:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d006      	beq.n	8006b3a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	711a      	strb	r2, [r3, #4]
 8006b32:	2200      	movs	r2, #0
 8006b34:	f042 0202 	orr.w	r2, r2, #2
 8006b38:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d006      	beq.n	8006b4e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2200      	movs	r2, #0
 8006b44:	711a      	strb	r2, [r3, #4]
 8006b46:	2200      	movs	r2, #0
 8006b48:	f042 0202 	orr.w	r2, r2, #2
 8006b4c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2243      	movs	r2, #67	; 0x43
 8006b52:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006b54:	4b02      	ldr	r3, [pc, #8]	; (8006b60 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	3718      	adds	r7, #24
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}
 8006b5e:	bf00      	nop
 8006b60:	20000054 	.word	0x20000054

08006b64 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b086      	sub	sp, #24
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006b6c:	2182      	movs	r1, #130	; 0x82
 8006b6e:	4818      	ldr	r0, [pc, #96]	; (8006bd0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006b70:	f000 fcdf 	bl	8007532 <USBD_GetEpDesc>
 8006b74:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006b76:	2101      	movs	r1, #1
 8006b78:	4815      	ldr	r0, [pc, #84]	; (8006bd0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006b7a:	f000 fcda 	bl	8007532 <USBD_GetEpDesc>
 8006b7e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006b80:	2181      	movs	r1, #129	; 0x81
 8006b82:	4813      	ldr	r0, [pc, #76]	; (8006bd0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006b84:	f000 fcd5 	bl	8007532 <USBD_GetEpDesc>
 8006b88:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d002      	beq.n	8006b96 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	2210      	movs	r2, #16
 8006b94:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006b96:	693b      	ldr	r3, [r7, #16]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d006      	beq.n	8006baa <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ba4:	711a      	strb	r2, [r3, #4]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d006      	beq.n	8006bbe <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006bb8:	711a      	strb	r2, [r3, #4]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2243      	movs	r2, #67	; 0x43
 8006bc2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006bc4:	4b02      	ldr	r3, [pc, #8]	; (8006bd0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3718      	adds	r7, #24
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}
 8006bce:	bf00      	nop
 8006bd0:	20000054 	.word	0x20000054

08006bd4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b083      	sub	sp, #12
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	220a      	movs	r2, #10
 8006be0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006be2:	4b03      	ldr	r3, [pc, #12]	; (8006bf0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	370c      	adds	r7, #12
 8006be8:	46bd      	mov	sp, r7
 8006bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bee:	4770      	bx	lr
 8006bf0:	20000010 	.word	0x20000010

08006bf4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b083      	sub	sp, #12
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
 8006bfc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d101      	bne.n	8006c08 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006c04:	2303      	movs	r3, #3
 8006c06:	e009      	b.n	8006c1c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006c0e:	687a      	ldr	r2, [r7, #4]
 8006c10:	33b0      	adds	r3, #176	; 0xb0
 8006c12:	009b      	lsls	r3, r3, #2
 8006c14:	4413      	add	r3, r2
 8006c16:	683a      	ldr	r2, [r7, #0]
 8006c18:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006c1a:	2300      	movs	r3, #0
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	370c      	adds	r7, #12
 8006c20:	46bd      	mov	sp, r7
 8006c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c26:	4770      	bx	lr

08006c28 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b087      	sub	sp, #28
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	60f8      	str	r0, [r7, #12]
 8006c30:	60b9      	str	r1, [r7, #8]
 8006c32:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	32b0      	adds	r2, #176	; 0xb0
 8006c3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c42:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d101      	bne.n	8006c4e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006c4a:	2303      	movs	r3, #3
 8006c4c:	e008      	b.n	8006c60 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	68ba      	ldr	r2, [r7, #8]
 8006c52:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	687a      	ldr	r2, [r7, #4]
 8006c5a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006c5e:	2300      	movs	r3, #0
}
 8006c60:	4618      	mov	r0, r3
 8006c62:	371c      	adds	r7, #28
 8006c64:	46bd      	mov	sp, r7
 8006c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6a:	4770      	bx	lr

08006c6c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b085      	sub	sp, #20
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
 8006c74:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	32b0      	adds	r2, #176	; 0xb0
 8006c80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c84:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d101      	bne.n	8006c90 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006c8c:	2303      	movs	r3, #3
 8006c8e:	e004      	b.n	8006c9a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	683a      	ldr	r2, [r7, #0]
 8006c94:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006c98:	2300      	movs	r3, #0
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3714      	adds	r7, #20
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca4:	4770      	bx	lr
	...

08006ca8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b084      	sub	sp, #16
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	32b0      	adds	r2, #176	; 0xb0
 8006cba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cbe:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	32b0      	adds	r2, #176	; 0xb0
 8006cce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d101      	bne.n	8006cda <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006cd6:	2303      	movs	r3, #3
 8006cd8:	e025      	b.n	8006d26 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d11f      	bne.n	8006d24 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006cec:	4b10      	ldr	r3, [pc, #64]	; (8006d30 <USBD_CDC_TransmitPacket+0x88>)
 8006cee:	781b      	ldrb	r3, [r3, #0]
 8006cf0:	f003 020f 	and.w	r2, r3, #15
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	4613      	mov	r3, r2
 8006cfe:	009b      	lsls	r3, r3, #2
 8006d00:	4413      	add	r3, r2
 8006d02:	009b      	lsls	r3, r3, #2
 8006d04:	4403      	add	r3, r0
 8006d06:	3318      	adds	r3, #24
 8006d08:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006d0a:	4b09      	ldr	r3, [pc, #36]	; (8006d30 <USBD_CDC_TransmitPacket+0x88>)
 8006d0c:	7819      	ldrb	r1, [r3, #0]
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f001 ffa9 	bl	8008c72 <USBD_LL_Transmit>

    ret = USBD_OK;
 8006d20:	2300      	movs	r3, #0
 8006d22:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006d24:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3710      	adds	r7, #16
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}
 8006d2e:	bf00      	nop
 8006d30:	20000097 	.word	0x20000097

08006d34 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b084      	sub	sp, #16
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	32b0      	adds	r2, #176	; 0xb0
 8006d46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d4a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	32b0      	adds	r2, #176	; 0xb0
 8006d56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d101      	bne.n	8006d62 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006d5e:	2303      	movs	r3, #3
 8006d60:	e018      	b.n	8006d94 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	7c1b      	ldrb	r3, [r3, #16]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d10a      	bne.n	8006d80 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006d6a:	4b0c      	ldr	r3, [pc, #48]	; (8006d9c <USBD_CDC_ReceivePacket+0x68>)
 8006d6c:	7819      	ldrb	r1, [r3, #0]
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006d74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f001 ff9b 	bl	8008cb4 <USBD_LL_PrepareReceive>
 8006d7e:	e008      	b.n	8006d92 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006d80:	4b06      	ldr	r3, [pc, #24]	; (8006d9c <USBD_CDC_ReceivePacket+0x68>)
 8006d82:	7819      	ldrb	r1, [r3, #0]
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006d8a:	2340      	movs	r3, #64	; 0x40
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f001 ff91 	bl	8008cb4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006d92:	2300      	movs	r3, #0
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	3710      	adds	r7, #16
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bd80      	pop	{r7, pc}
 8006d9c:	20000098 	.word	0x20000098

08006da0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b086      	sub	sp, #24
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	60f8      	str	r0, [r7, #12]
 8006da8:	60b9      	str	r1, [r7, #8]
 8006daa:	4613      	mov	r3, r2
 8006dac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d101      	bne.n	8006db8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006db4:	2303      	movs	r3, #3
 8006db6:	e01f      	b.n	8006df8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d003      	beq.n	8006dde <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	68ba      	ldr	r2, [r7, #8]
 8006dda:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	2201      	movs	r2, #1
 8006de2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	79fa      	ldrb	r2, [r7, #7]
 8006dea:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006dec:	68f8      	ldr	r0, [r7, #12]
 8006dee:	f001 fe0b 	bl	8008a08 <USBD_LL_Init>
 8006df2:	4603      	mov	r3, r0
 8006df4:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006df6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3718      	adds	r7, #24
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}

08006e00 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b084      	sub	sp, #16
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d101      	bne.n	8006e18 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006e14:	2303      	movs	r3, #3
 8006e16:	e025      	b.n	8006e64 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	683a      	ldr	r2, [r7, #0]
 8006e1c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	32ae      	adds	r2, #174	; 0xae
 8006e2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d00f      	beq.n	8006e54 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	32ae      	adds	r2, #174	; 0xae
 8006e3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e44:	f107 020e 	add.w	r2, r7, #14
 8006e48:	4610      	mov	r0, r2
 8006e4a:	4798      	blx	r3
 8006e4c:	4602      	mov	r2, r0
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006e5a:	1c5a      	adds	r2, r3, #1
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006e62:	2300      	movs	r3, #0
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	3710      	adds	r7, #16
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}

08006e6c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b082      	sub	sp, #8
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f001 fe13 	bl	8008aa0 <USBD_LL_Start>
 8006e7a:	4603      	mov	r3, r0
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3708      	adds	r7, #8
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}

08006e84 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006e84:	b480      	push	{r7}
 8006e86:	b083      	sub	sp, #12
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006e8c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	370c      	adds	r7, #12
 8006e92:	46bd      	mov	sp, r7
 8006e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e98:	4770      	bx	lr

08006e9a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006e9a:	b580      	push	{r7, lr}
 8006e9c:	b084      	sub	sp, #16
 8006e9e:	af00      	add	r7, sp, #0
 8006ea0:	6078      	str	r0, [r7, #4]
 8006ea2:	460b      	mov	r3, r1
 8006ea4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d009      	beq.n	8006ec8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	78fa      	ldrb	r2, [r7, #3]
 8006ebe:	4611      	mov	r1, r2
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	4798      	blx	r3
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	3710      	adds	r7, #16
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bd80      	pop	{r7, pc}

08006ed2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006ed2:	b580      	push	{r7, lr}
 8006ed4:	b084      	sub	sp, #16
 8006ed6:	af00      	add	r7, sp, #0
 8006ed8:	6078      	str	r0, [r7, #4]
 8006eda:	460b      	mov	r3, r1
 8006edc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	78fa      	ldrb	r2, [r7, #3]
 8006eec:	4611      	mov	r1, r2
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	4798      	blx	r3
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d001      	beq.n	8006efc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006ef8:	2303      	movs	r3, #3
 8006efa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	3710      	adds	r7, #16
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}

08006f06 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006f06:	b580      	push	{r7, lr}
 8006f08:	b084      	sub	sp, #16
 8006f0a:	af00      	add	r7, sp, #0
 8006f0c:	6078      	str	r0, [r7, #4]
 8006f0e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006f16:	6839      	ldr	r1, [r7, #0]
 8006f18:	4618      	mov	r0, r3
 8006f1a:	f001 f908 	bl	800812e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2201      	movs	r2, #1
 8006f22:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006f2c:	461a      	mov	r2, r3
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006f3a:	f003 031f 	and.w	r3, r3, #31
 8006f3e:	2b02      	cmp	r3, #2
 8006f40:	d01a      	beq.n	8006f78 <USBD_LL_SetupStage+0x72>
 8006f42:	2b02      	cmp	r3, #2
 8006f44:	d822      	bhi.n	8006f8c <USBD_LL_SetupStage+0x86>
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d002      	beq.n	8006f50 <USBD_LL_SetupStage+0x4a>
 8006f4a:	2b01      	cmp	r3, #1
 8006f4c:	d00a      	beq.n	8006f64 <USBD_LL_SetupStage+0x5e>
 8006f4e:	e01d      	b.n	8006f8c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006f56:	4619      	mov	r1, r3
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	f000 fb5f 	bl	800761c <USBD_StdDevReq>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	73fb      	strb	r3, [r7, #15]
      break;
 8006f62:	e020      	b.n	8006fa6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006f6a:	4619      	mov	r1, r3
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f000 fbc7 	bl	8007700 <USBD_StdItfReq>
 8006f72:	4603      	mov	r3, r0
 8006f74:	73fb      	strb	r3, [r7, #15]
      break;
 8006f76:	e016      	b.n	8006fa6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006f7e:	4619      	mov	r1, r3
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f000 fc29 	bl	80077d8 <USBD_StdEPReq>
 8006f86:	4603      	mov	r3, r0
 8006f88:	73fb      	strb	r3, [r7, #15]
      break;
 8006f8a:	e00c      	b.n	8006fa6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006f92:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006f96:	b2db      	uxtb	r3, r3
 8006f98:	4619      	mov	r1, r3
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f001 fde0 	bl	8008b60 <USBD_LL_StallEP>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	73fb      	strb	r3, [r7, #15]
      break;
 8006fa4:	bf00      	nop
  }

  return ret;
 8006fa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	3710      	adds	r7, #16
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}

08006fb0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b086      	sub	sp, #24
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	60f8      	str	r0, [r7, #12]
 8006fb8:	460b      	mov	r3, r1
 8006fba:	607a      	str	r2, [r7, #4]
 8006fbc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006fc2:	7afb      	ldrb	r3, [r7, #11]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d16e      	bne.n	80070a6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006fce:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006fd6:	2b03      	cmp	r3, #3
 8006fd8:	f040 8098 	bne.w	800710c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	689a      	ldr	r2, [r3, #8]
 8006fe0:	693b      	ldr	r3, [r7, #16]
 8006fe2:	68db      	ldr	r3, [r3, #12]
 8006fe4:	429a      	cmp	r2, r3
 8006fe6:	d913      	bls.n	8007010 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	689a      	ldr	r2, [r3, #8]
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	68db      	ldr	r3, [r3, #12]
 8006ff0:	1ad2      	subs	r2, r2, r3
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	68da      	ldr	r2, [r3, #12]
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	689b      	ldr	r3, [r3, #8]
 8006ffe:	4293      	cmp	r3, r2
 8007000:	bf28      	it	cs
 8007002:	4613      	movcs	r3, r2
 8007004:	461a      	mov	r2, r3
 8007006:	6879      	ldr	r1, [r7, #4]
 8007008:	68f8      	ldr	r0, [r7, #12]
 800700a:	f001 f984 	bl	8008316 <USBD_CtlContinueRx>
 800700e:	e07d      	b.n	800710c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007016:	f003 031f 	and.w	r3, r3, #31
 800701a:	2b02      	cmp	r3, #2
 800701c:	d014      	beq.n	8007048 <USBD_LL_DataOutStage+0x98>
 800701e:	2b02      	cmp	r3, #2
 8007020:	d81d      	bhi.n	800705e <USBD_LL_DataOutStage+0xae>
 8007022:	2b00      	cmp	r3, #0
 8007024:	d002      	beq.n	800702c <USBD_LL_DataOutStage+0x7c>
 8007026:	2b01      	cmp	r3, #1
 8007028:	d003      	beq.n	8007032 <USBD_LL_DataOutStage+0x82>
 800702a:	e018      	b.n	800705e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800702c:	2300      	movs	r3, #0
 800702e:	75bb      	strb	r3, [r7, #22]
            break;
 8007030:	e018      	b.n	8007064 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007038:	b2db      	uxtb	r3, r3
 800703a:	4619      	mov	r1, r3
 800703c:	68f8      	ldr	r0, [r7, #12]
 800703e:	f000 fa5e 	bl	80074fe <USBD_CoreFindIF>
 8007042:	4603      	mov	r3, r0
 8007044:	75bb      	strb	r3, [r7, #22]
            break;
 8007046:	e00d      	b.n	8007064 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800704e:	b2db      	uxtb	r3, r3
 8007050:	4619      	mov	r1, r3
 8007052:	68f8      	ldr	r0, [r7, #12]
 8007054:	f000 fa60 	bl	8007518 <USBD_CoreFindEP>
 8007058:	4603      	mov	r3, r0
 800705a:	75bb      	strb	r3, [r7, #22]
            break;
 800705c:	e002      	b.n	8007064 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800705e:	2300      	movs	r3, #0
 8007060:	75bb      	strb	r3, [r7, #22]
            break;
 8007062:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007064:	7dbb      	ldrb	r3, [r7, #22]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d119      	bne.n	800709e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007070:	b2db      	uxtb	r3, r3
 8007072:	2b03      	cmp	r3, #3
 8007074:	d113      	bne.n	800709e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007076:	7dba      	ldrb	r2, [r7, #22]
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	32ae      	adds	r2, #174	; 0xae
 800707c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007080:	691b      	ldr	r3, [r3, #16]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d00b      	beq.n	800709e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007086:	7dba      	ldrb	r2, [r7, #22]
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800708e:	7dba      	ldrb	r2, [r7, #22]
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	32ae      	adds	r2, #174	; 0xae
 8007094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007098:	691b      	ldr	r3, [r3, #16]
 800709a:	68f8      	ldr	r0, [r7, #12]
 800709c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800709e:	68f8      	ldr	r0, [r7, #12]
 80070a0:	f001 f94a 	bl	8008338 <USBD_CtlSendStatus>
 80070a4:	e032      	b.n	800710c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80070a6:	7afb      	ldrb	r3, [r7, #11]
 80070a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070ac:	b2db      	uxtb	r3, r3
 80070ae:	4619      	mov	r1, r3
 80070b0:	68f8      	ldr	r0, [r7, #12]
 80070b2:	f000 fa31 	bl	8007518 <USBD_CoreFindEP>
 80070b6:	4603      	mov	r3, r0
 80070b8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80070ba:	7dbb      	ldrb	r3, [r7, #22]
 80070bc:	2bff      	cmp	r3, #255	; 0xff
 80070be:	d025      	beq.n	800710c <USBD_LL_DataOutStage+0x15c>
 80070c0:	7dbb      	ldrb	r3, [r7, #22]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d122      	bne.n	800710c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070cc:	b2db      	uxtb	r3, r3
 80070ce:	2b03      	cmp	r3, #3
 80070d0:	d117      	bne.n	8007102 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80070d2:	7dba      	ldrb	r2, [r7, #22]
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	32ae      	adds	r2, #174	; 0xae
 80070d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070dc:	699b      	ldr	r3, [r3, #24]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d00f      	beq.n	8007102 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80070e2:	7dba      	ldrb	r2, [r7, #22]
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80070ea:	7dba      	ldrb	r2, [r7, #22]
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	32ae      	adds	r2, #174	; 0xae
 80070f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070f4:	699b      	ldr	r3, [r3, #24]
 80070f6:	7afa      	ldrb	r2, [r7, #11]
 80070f8:	4611      	mov	r1, r2
 80070fa:	68f8      	ldr	r0, [r7, #12]
 80070fc:	4798      	blx	r3
 80070fe:	4603      	mov	r3, r0
 8007100:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007102:	7dfb      	ldrb	r3, [r7, #23]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d001      	beq.n	800710c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007108:	7dfb      	ldrb	r3, [r7, #23]
 800710a:	e000      	b.n	800710e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800710c:	2300      	movs	r3, #0
}
 800710e:	4618      	mov	r0, r3
 8007110:	3718      	adds	r7, #24
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}

08007116 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007116:	b580      	push	{r7, lr}
 8007118:	b086      	sub	sp, #24
 800711a:	af00      	add	r7, sp, #0
 800711c:	60f8      	str	r0, [r7, #12]
 800711e:	460b      	mov	r3, r1
 8007120:	607a      	str	r2, [r7, #4]
 8007122:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007124:	7afb      	ldrb	r3, [r7, #11]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d16f      	bne.n	800720a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	3314      	adds	r3, #20
 800712e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007136:	2b02      	cmp	r3, #2
 8007138:	d15a      	bne.n	80071f0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	689a      	ldr	r2, [r3, #8]
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	68db      	ldr	r3, [r3, #12]
 8007142:	429a      	cmp	r2, r3
 8007144:	d914      	bls.n	8007170 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007146:	693b      	ldr	r3, [r7, #16]
 8007148:	689a      	ldr	r2, [r3, #8]
 800714a:	693b      	ldr	r3, [r7, #16]
 800714c:	68db      	ldr	r3, [r3, #12]
 800714e:	1ad2      	subs	r2, r2, r3
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	689b      	ldr	r3, [r3, #8]
 8007158:	461a      	mov	r2, r3
 800715a:	6879      	ldr	r1, [r7, #4]
 800715c:	68f8      	ldr	r0, [r7, #12]
 800715e:	f001 f8ac 	bl	80082ba <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007162:	2300      	movs	r3, #0
 8007164:	2200      	movs	r2, #0
 8007166:	2100      	movs	r1, #0
 8007168:	68f8      	ldr	r0, [r7, #12]
 800716a:	f001 fda3 	bl	8008cb4 <USBD_LL_PrepareReceive>
 800716e:	e03f      	b.n	80071f0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	68da      	ldr	r2, [r3, #12]
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	689b      	ldr	r3, [r3, #8]
 8007178:	429a      	cmp	r2, r3
 800717a:	d11c      	bne.n	80071b6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800717c:	693b      	ldr	r3, [r7, #16]
 800717e:	685a      	ldr	r2, [r3, #4]
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007184:	429a      	cmp	r2, r3
 8007186:	d316      	bcc.n	80071b6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	685a      	ldr	r2, [r3, #4]
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007192:	429a      	cmp	r2, r3
 8007194:	d20f      	bcs.n	80071b6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007196:	2200      	movs	r2, #0
 8007198:	2100      	movs	r1, #0
 800719a:	68f8      	ldr	r0, [r7, #12]
 800719c:	f001 f88d 	bl	80082ba <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	2200      	movs	r2, #0
 80071a4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80071a8:	2300      	movs	r3, #0
 80071aa:	2200      	movs	r2, #0
 80071ac:	2100      	movs	r1, #0
 80071ae:	68f8      	ldr	r0, [r7, #12]
 80071b0:	f001 fd80 	bl	8008cb4 <USBD_LL_PrepareReceive>
 80071b4:	e01c      	b.n	80071f0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071bc:	b2db      	uxtb	r3, r3
 80071be:	2b03      	cmp	r3, #3
 80071c0:	d10f      	bne.n	80071e2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071c8:	68db      	ldr	r3, [r3, #12]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d009      	beq.n	80071e2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	2200      	movs	r2, #0
 80071d2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071dc:	68db      	ldr	r3, [r3, #12]
 80071de:	68f8      	ldr	r0, [r7, #12]
 80071e0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80071e2:	2180      	movs	r1, #128	; 0x80
 80071e4:	68f8      	ldr	r0, [r7, #12]
 80071e6:	f001 fcbb 	bl	8008b60 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80071ea:	68f8      	ldr	r0, [r7, #12]
 80071ec:	f001 f8b7 	bl	800835e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d03a      	beq.n	8007270 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80071fa:	68f8      	ldr	r0, [r7, #12]
 80071fc:	f7ff fe42 	bl	8006e84 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	2200      	movs	r2, #0
 8007204:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007208:	e032      	b.n	8007270 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800720a:	7afb      	ldrb	r3, [r7, #11]
 800720c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007210:	b2db      	uxtb	r3, r3
 8007212:	4619      	mov	r1, r3
 8007214:	68f8      	ldr	r0, [r7, #12]
 8007216:	f000 f97f 	bl	8007518 <USBD_CoreFindEP>
 800721a:	4603      	mov	r3, r0
 800721c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800721e:	7dfb      	ldrb	r3, [r7, #23]
 8007220:	2bff      	cmp	r3, #255	; 0xff
 8007222:	d025      	beq.n	8007270 <USBD_LL_DataInStage+0x15a>
 8007224:	7dfb      	ldrb	r3, [r7, #23]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d122      	bne.n	8007270 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007230:	b2db      	uxtb	r3, r3
 8007232:	2b03      	cmp	r3, #3
 8007234:	d11c      	bne.n	8007270 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007236:	7dfa      	ldrb	r2, [r7, #23]
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	32ae      	adds	r2, #174	; 0xae
 800723c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007240:	695b      	ldr	r3, [r3, #20]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d014      	beq.n	8007270 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007246:	7dfa      	ldrb	r2, [r7, #23]
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800724e:	7dfa      	ldrb	r2, [r7, #23]
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	32ae      	adds	r2, #174	; 0xae
 8007254:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007258:	695b      	ldr	r3, [r3, #20]
 800725a:	7afa      	ldrb	r2, [r7, #11]
 800725c:	4611      	mov	r1, r2
 800725e:	68f8      	ldr	r0, [r7, #12]
 8007260:	4798      	blx	r3
 8007262:	4603      	mov	r3, r0
 8007264:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007266:	7dbb      	ldrb	r3, [r7, #22]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d001      	beq.n	8007270 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800726c:	7dbb      	ldrb	r3, [r7, #22]
 800726e:	e000      	b.n	8007272 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007270:	2300      	movs	r3, #0
}
 8007272:	4618      	mov	r0, r3
 8007274:	3718      	adds	r7, #24
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}

0800727a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800727a:	b580      	push	{r7, lr}
 800727c:	b084      	sub	sp, #16
 800727e:	af00      	add	r7, sp, #0
 8007280:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007282:	2300      	movs	r3, #0
 8007284:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2201      	movs	r2, #1
 800728a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2200      	movs	r2, #0
 8007292:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2200      	movs	r2, #0
 800729a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2200      	movs	r2, #0
 80072a0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2200      	movs	r2, #0
 80072a8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d014      	beq.n	80072e0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072bc:	685b      	ldr	r3, [r3, #4]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d00e      	beq.n	80072e0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072c8:	685b      	ldr	r3, [r3, #4]
 80072ca:	687a      	ldr	r2, [r7, #4]
 80072cc:	6852      	ldr	r2, [r2, #4]
 80072ce:	b2d2      	uxtb	r2, r2
 80072d0:	4611      	mov	r1, r2
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	4798      	blx	r3
 80072d6:	4603      	mov	r3, r0
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d001      	beq.n	80072e0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80072dc:	2303      	movs	r3, #3
 80072de:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80072e0:	2340      	movs	r3, #64	; 0x40
 80072e2:	2200      	movs	r2, #0
 80072e4:	2100      	movs	r1, #0
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f001 fbf5 	bl	8008ad6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2201      	movs	r2, #1
 80072f0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2240      	movs	r2, #64	; 0x40
 80072f8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80072fc:	2340      	movs	r3, #64	; 0x40
 80072fe:	2200      	movs	r2, #0
 8007300:	2180      	movs	r1, #128	; 0x80
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f001 fbe7 	bl	8008ad6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2201      	movs	r2, #1
 800730c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2240      	movs	r2, #64	; 0x40
 8007312:	621a      	str	r2, [r3, #32]

  return ret;
 8007314:	7bfb      	ldrb	r3, [r7, #15]
}
 8007316:	4618      	mov	r0, r3
 8007318:	3710      	adds	r7, #16
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}

0800731e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800731e:	b480      	push	{r7}
 8007320:	b083      	sub	sp, #12
 8007322:	af00      	add	r7, sp, #0
 8007324:	6078      	str	r0, [r7, #4]
 8007326:	460b      	mov	r3, r1
 8007328:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	78fa      	ldrb	r2, [r7, #3]
 800732e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007330:	2300      	movs	r3, #0
}
 8007332:	4618      	mov	r0, r3
 8007334:	370c      	adds	r7, #12
 8007336:	46bd      	mov	sp, r7
 8007338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733c:	4770      	bx	lr

0800733e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800733e:	b480      	push	{r7}
 8007340:	b083      	sub	sp, #12
 8007342:	af00      	add	r7, sp, #0
 8007344:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800734c:	b2da      	uxtb	r2, r3
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2204      	movs	r2, #4
 8007358:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800735c:	2300      	movs	r3, #0
}
 800735e:	4618      	mov	r0, r3
 8007360:	370c      	adds	r7, #12
 8007362:	46bd      	mov	sp, r7
 8007364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007368:	4770      	bx	lr

0800736a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800736a:	b480      	push	{r7}
 800736c:	b083      	sub	sp, #12
 800736e:	af00      	add	r7, sp, #0
 8007370:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007378:	b2db      	uxtb	r3, r3
 800737a:	2b04      	cmp	r3, #4
 800737c:	d106      	bne.n	800738c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007384:	b2da      	uxtb	r2, r3
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800738c:	2300      	movs	r3, #0
}
 800738e:	4618      	mov	r0, r3
 8007390:	370c      	adds	r7, #12
 8007392:	46bd      	mov	sp, r7
 8007394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007398:	4770      	bx	lr

0800739a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800739a:	b580      	push	{r7, lr}
 800739c:	b082      	sub	sp, #8
 800739e:	af00      	add	r7, sp, #0
 80073a0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073a8:	b2db      	uxtb	r3, r3
 80073aa:	2b03      	cmp	r3, #3
 80073ac:	d110      	bne.n	80073d0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d00b      	beq.n	80073d0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073be:	69db      	ldr	r3, [r3, #28]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d005      	beq.n	80073d0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073ca:	69db      	ldr	r3, [r3, #28]
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80073d0:	2300      	movs	r3, #0
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	3708      	adds	r7, #8
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}

080073da <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80073da:	b580      	push	{r7, lr}
 80073dc:	b082      	sub	sp, #8
 80073de:	af00      	add	r7, sp, #0
 80073e0:	6078      	str	r0, [r7, #4]
 80073e2:	460b      	mov	r3, r1
 80073e4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	32ae      	adds	r2, #174	; 0xae
 80073f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d101      	bne.n	80073fc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80073f8:	2303      	movs	r3, #3
 80073fa:	e01c      	b.n	8007436 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007402:	b2db      	uxtb	r3, r3
 8007404:	2b03      	cmp	r3, #3
 8007406:	d115      	bne.n	8007434 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	32ae      	adds	r2, #174	; 0xae
 8007412:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007416:	6a1b      	ldr	r3, [r3, #32]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d00b      	beq.n	8007434 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	32ae      	adds	r2, #174	; 0xae
 8007426:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800742a:	6a1b      	ldr	r3, [r3, #32]
 800742c:	78fa      	ldrb	r2, [r7, #3]
 800742e:	4611      	mov	r1, r2
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007434:	2300      	movs	r3, #0
}
 8007436:	4618      	mov	r0, r3
 8007438:	3708      	adds	r7, #8
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}

0800743e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800743e:	b580      	push	{r7, lr}
 8007440:	b082      	sub	sp, #8
 8007442:	af00      	add	r7, sp, #0
 8007444:	6078      	str	r0, [r7, #4]
 8007446:	460b      	mov	r3, r1
 8007448:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	32ae      	adds	r2, #174	; 0xae
 8007454:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d101      	bne.n	8007460 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800745c:	2303      	movs	r3, #3
 800745e:	e01c      	b.n	800749a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007466:	b2db      	uxtb	r3, r3
 8007468:	2b03      	cmp	r3, #3
 800746a:	d115      	bne.n	8007498 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	32ae      	adds	r2, #174	; 0xae
 8007476:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800747a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800747c:	2b00      	cmp	r3, #0
 800747e:	d00b      	beq.n	8007498 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	32ae      	adds	r2, #174	; 0xae
 800748a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800748e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007490:	78fa      	ldrb	r2, [r7, #3]
 8007492:	4611      	mov	r1, r2
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007498:	2300      	movs	r3, #0
}
 800749a:	4618      	mov	r0, r3
 800749c:	3708      	adds	r7, #8
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}

080074a2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80074a2:	b480      	push	{r7}
 80074a4:	b083      	sub	sp, #12
 80074a6:	af00      	add	r7, sp, #0
 80074a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80074aa:	2300      	movs	r3, #0
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	370c      	adds	r7, #12
 80074b0:	46bd      	mov	sp, r7
 80074b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b6:	4770      	bx	lr

080074b8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b084      	sub	sp, #16
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80074c0:	2300      	movs	r3, #0
 80074c2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2201      	movs	r2, #1
 80074c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d00e      	beq.n	80074f4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074dc:	685b      	ldr	r3, [r3, #4]
 80074de:	687a      	ldr	r2, [r7, #4]
 80074e0:	6852      	ldr	r2, [r2, #4]
 80074e2:	b2d2      	uxtb	r2, r2
 80074e4:	4611      	mov	r1, r2
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	4798      	blx	r3
 80074ea:	4603      	mov	r3, r0
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d001      	beq.n	80074f4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80074f0:	2303      	movs	r3, #3
 80074f2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80074f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	3710      	adds	r7, #16
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}

080074fe <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80074fe:	b480      	push	{r7}
 8007500:	b083      	sub	sp, #12
 8007502:	af00      	add	r7, sp, #0
 8007504:	6078      	str	r0, [r7, #4]
 8007506:	460b      	mov	r3, r1
 8007508:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800750a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800750c:	4618      	mov	r0, r3
 800750e:	370c      	adds	r7, #12
 8007510:	46bd      	mov	sp, r7
 8007512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007516:	4770      	bx	lr

08007518 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007518:	b480      	push	{r7}
 800751a:	b083      	sub	sp, #12
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
 8007520:	460b      	mov	r3, r1
 8007522:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007524:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007526:	4618      	mov	r0, r3
 8007528:	370c      	adds	r7, #12
 800752a:	46bd      	mov	sp, r7
 800752c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007530:	4770      	bx	lr

08007532 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007532:	b580      	push	{r7, lr}
 8007534:	b086      	sub	sp, #24
 8007536:	af00      	add	r7, sp, #0
 8007538:	6078      	str	r0, [r7, #4]
 800753a:	460b      	mov	r3, r1
 800753c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007546:	2300      	movs	r3, #0
 8007548:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	885b      	ldrh	r3, [r3, #2]
 800754e:	b29a      	uxth	r2, r3
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	781b      	ldrb	r3, [r3, #0]
 8007554:	b29b      	uxth	r3, r3
 8007556:	429a      	cmp	r2, r3
 8007558:	d920      	bls.n	800759c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	781b      	ldrb	r3, [r3, #0]
 800755e:	b29b      	uxth	r3, r3
 8007560:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007562:	e013      	b.n	800758c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007564:	f107 030a 	add.w	r3, r7, #10
 8007568:	4619      	mov	r1, r3
 800756a:	6978      	ldr	r0, [r7, #20]
 800756c:	f000 f81b 	bl	80075a6 <USBD_GetNextDesc>
 8007570:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	785b      	ldrb	r3, [r3, #1]
 8007576:	2b05      	cmp	r3, #5
 8007578:	d108      	bne.n	800758c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800757e:	693b      	ldr	r3, [r7, #16]
 8007580:	789b      	ldrb	r3, [r3, #2]
 8007582:	78fa      	ldrb	r2, [r7, #3]
 8007584:	429a      	cmp	r2, r3
 8007586:	d008      	beq.n	800759a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007588:	2300      	movs	r3, #0
 800758a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	885b      	ldrh	r3, [r3, #2]
 8007590:	b29a      	uxth	r2, r3
 8007592:	897b      	ldrh	r3, [r7, #10]
 8007594:	429a      	cmp	r2, r3
 8007596:	d8e5      	bhi.n	8007564 <USBD_GetEpDesc+0x32>
 8007598:	e000      	b.n	800759c <USBD_GetEpDesc+0x6a>
          break;
 800759a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800759c:	693b      	ldr	r3, [r7, #16]
}
 800759e:	4618      	mov	r0, r3
 80075a0:	3718      	adds	r7, #24
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}

080075a6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80075a6:	b480      	push	{r7}
 80075a8:	b085      	sub	sp, #20
 80075aa:	af00      	add	r7, sp, #0
 80075ac:	6078      	str	r0, [r7, #4]
 80075ae:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	881a      	ldrh	r2, [r3, #0]
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	781b      	ldrb	r3, [r3, #0]
 80075bc:	b29b      	uxth	r3, r3
 80075be:	4413      	add	r3, r2
 80075c0:	b29a      	uxth	r2, r3
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	781b      	ldrb	r3, [r3, #0]
 80075ca:	461a      	mov	r2, r3
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	4413      	add	r3, r2
 80075d0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80075d2:	68fb      	ldr	r3, [r7, #12]
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	3714      	adds	r7, #20
 80075d8:	46bd      	mov	sp, r7
 80075da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075de:	4770      	bx	lr

080075e0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80075e0:	b480      	push	{r7}
 80075e2:	b087      	sub	sp, #28
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80075ec:	697b      	ldr	r3, [r7, #20]
 80075ee:	781b      	ldrb	r3, [r3, #0]
 80075f0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	3301      	adds	r3, #1
 80075f6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80075f8:	697b      	ldr	r3, [r7, #20]
 80075fa:	781b      	ldrb	r3, [r3, #0]
 80075fc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80075fe:	8a3b      	ldrh	r3, [r7, #16]
 8007600:	021b      	lsls	r3, r3, #8
 8007602:	b21a      	sxth	r2, r3
 8007604:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007608:	4313      	orrs	r3, r2
 800760a:	b21b      	sxth	r3, r3
 800760c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800760e:	89fb      	ldrh	r3, [r7, #14]
}
 8007610:	4618      	mov	r0, r3
 8007612:	371c      	adds	r7, #28
 8007614:	46bd      	mov	sp, r7
 8007616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761a:	4770      	bx	lr

0800761c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b084      	sub	sp, #16
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007626:	2300      	movs	r3, #0
 8007628:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	781b      	ldrb	r3, [r3, #0]
 800762e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007632:	2b40      	cmp	r3, #64	; 0x40
 8007634:	d005      	beq.n	8007642 <USBD_StdDevReq+0x26>
 8007636:	2b40      	cmp	r3, #64	; 0x40
 8007638:	d857      	bhi.n	80076ea <USBD_StdDevReq+0xce>
 800763a:	2b00      	cmp	r3, #0
 800763c:	d00f      	beq.n	800765e <USBD_StdDevReq+0x42>
 800763e:	2b20      	cmp	r3, #32
 8007640:	d153      	bne.n	80076ea <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	32ae      	adds	r2, #174	; 0xae
 800764c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007650:	689b      	ldr	r3, [r3, #8]
 8007652:	6839      	ldr	r1, [r7, #0]
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	4798      	blx	r3
 8007658:	4603      	mov	r3, r0
 800765a:	73fb      	strb	r3, [r7, #15]
      break;
 800765c:	e04a      	b.n	80076f4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	785b      	ldrb	r3, [r3, #1]
 8007662:	2b09      	cmp	r3, #9
 8007664:	d83b      	bhi.n	80076de <USBD_StdDevReq+0xc2>
 8007666:	a201      	add	r2, pc, #4	; (adr r2, 800766c <USBD_StdDevReq+0x50>)
 8007668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800766c:	080076c1 	.word	0x080076c1
 8007670:	080076d5 	.word	0x080076d5
 8007674:	080076df 	.word	0x080076df
 8007678:	080076cb 	.word	0x080076cb
 800767c:	080076df 	.word	0x080076df
 8007680:	0800769f 	.word	0x0800769f
 8007684:	08007695 	.word	0x08007695
 8007688:	080076df 	.word	0x080076df
 800768c:	080076b7 	.word	0x080076b7
 8007690:	080076a9 	.word	0x080076a9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007694:	6839      	ldr	r1, [r7, #0]
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f000 fa3c 	bl	8007b14 <USBD_GetDescriptor>
          break;
 800769c:	e024      	b.n	80076e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800769e:	6839      	ldr	r1, [r7, #0]
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	f000 fba1 	bl	8007de8 <USBD_SetAddress>
          break;
 80076a6:	e01f      	b.n	80076e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80076a8:	6839      	ldr	r1, [r7, #0]
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f000 fbe0 	bl	8007e70 <USBD_SetConfig>
 80076b0:	4603      	mov	r3, r0
 80076b2:	73fb      	strb	r3, [r7, #15]
          break;
 80076b4:	e018      	b.n	80076e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80076b6:	6839      	ldr	r1, [r7, #0]
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f000 fc83 	bl	8007fc4 <USBD_GetConfig>
          break;
 80076be:	e013      	b.n	80076e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80076c0:	6839      	ldr	r1, [r7, #0]
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f000 fcb4 	bl	8008030 <USBD_GetStatus>
          break;
 80076c8:	e00e      	b.n	80076e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80076ca:	6839      	ldr	r1, [r7, #0]
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	f000 fce3 	bl	8008098 <USBD_SetFeature>
          break;
 80076d2:	e009      	b.n	80076e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80076d4:	6839      	ldr	r1, [r7, #0]
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f000 fd07 	bl	80080ea <USBD_ClrFeature>
          break;
 80076dc:	e004      	b.n	80076e8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80076de:	6839      	ldr	r1, [r7, #0]
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f000 fd5e 	bl	80081a2 <USBD_CtlError>
          break;
 80076e6:	bf00      	nop
      }
      break;
 80076e8:	e004      	b.n	80076f4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80076ea:	6839      	ldr	r1, [r7, #0]
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f000 fd58 	bl	80081a2 <USBD_CtlError>
      break;
 80076f2:	bf00      	nop
  }

  return ret;
 80076f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	3710      	adds	r7, #16
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bd80      	pop	{r7, pc}
 80076fe:	bf00      	nop

08007700 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b084      	sub	sp, #16
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
 8007708:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800770a:	2300      	movs	r3, #0
 800770c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	781b      	ldrb	r3, [r3, #0]
 8007712:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007716:	2b40      	cmp	r3, #64	; 0x40
 8007718:	d005      	beq.n	8007726 <USBD_StdItfReq+0x26>
 800771a:	2b40      	cmp	r3, #64	; 0x40
 800771c:	d852      	bhi.n	80077c4 <USBD_StdItfReq+0xc4>
 800771e:	2b00      	cmp	r3, #0
 8007720:	d001      	beq.n	8007726 <USBD_StdItfReq+0x26>
 8007722:	2b20      	cmp	r3, #32
 8007724:	d14e      	bne.n	80077c4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800772c:	b2db      	uxtb	r3, r3
 800772e:	3b01      	subs	r3, #1
 8007730:	2b02      	cmp	r3, #2
 8007732:	d840      	bhi.n	80077b6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	889b      	ldrh	r3, [r3, #4]
 8007738:	b2db      	uxtb	r3, r3
 800773a:	2b01      	cmp	r3, #1
 800773c:	d836      	bhi.n	80077ac <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	889b      	ldrh	r3, [r3, #4]
 8007742:	b2db      	uxtb	r3, r3
 8007744:	4619      	mov	r1, r3
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f7ff fed9 	bl	80074fe <USBD_CoreFindIF>
 800774c:	4603      	mov	r3, r0
 800774e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007750:	7bbb      	ldrb	r3, [r7, #14]
 8007752:	2bff      	cmp	r3, #255	; 0xff
 8007754:	d01d      	beq.n	8007792 <USBD_StdItfReq+0x92>
 8007756:	7bbb      	ldrb	r3, [r7, #14]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d11a      	bne.n	8007792 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800775c:	7bba      	ldrb	r2, [r7, #14]
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	32ae      	adds	r2, #174	; 0xae
 8007762:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007766:	689b      	ldr	r3, [r3, #8]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d00f      	beq.n	800778c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800776c:	7bba      	ldrb	r2, [r7, #14]
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007774:	7bba      	ldrb	r2, [r7, #14]
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	32ae      	adds	r2, #174	; 0xae
 800777a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800777e:	689b      	ldr	r3, [r3, #8]
 8007780:	6839      	ldr	r1, [r7, #0]
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	4798      	blx	r3
 8007786:	4603      	mov	r3, r0
 8007788:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800778a:	e004      	b.n	8007796 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800778c:	2303      	movs	r3, #3
 800778e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007790:	e001      	b.n	8007796 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007792:	2303      	movs	r3, #3
 8007794:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	88db      	ldrh	r3, [r3, #6]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d110      	bne.n	80077c0 <USBD_StdItfReq+0xc0>
 800779e:	7bfb      	ldrb	r3, [r7, #15]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d10d      	bne.n	80077c0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f000 fdc7 	bl	8008338 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80077aa:	e009      	b.n	80077c0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80077ac:	6839      	ldr	r1, [r7, #0]
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f000 fcf7 	bl	80081a2 <USBD_CtlError>
          break;
 80077b4:	e004      	b.n	80077c0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80077b6:	6839      	ldr	r1, [r7, #0]
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f000 fcf2 	bl	80081a2 <USBD_CtlError>
          break;
 80077be:	e000      	b.n	80077c2 <USBD_StdItfReq+0xc2>
          break;
 80077c0:	bf00      	nop
      }
      break;
 80077c2:	e004      	b.n	80077ce <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80077c4:	6839      	ldr	r1, [r7, #0]
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f000 fceb 	bl	80081a2 <USBD_CtlError>
      break;
 80077cc:	bf00      	nop
  }

  return ret;
 80077ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	3710      	adds	r7, #16
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}

080077d8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b084      	sub	sp, #16
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
 80077e0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80077e2:	2300      	movs	r3, #0
 80077e4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	889b      	ldrh	r3, [r3, #4]
 80077ea:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	781b      	ldrb	r3, [r3, #0]
 80077f0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80077f4:	2b40      	cmp	r3, #64	; 0x40
 80077f6:	d007      	beq.n	8007808 <USBD_StdEPReq+0x30>
 80077f8:	2b40      	cmp	r3, #64	; 0x40
 80077fa:	f200 817f 	bhi.w	8007afc <USBD_StdEPReq+0x324>
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d02a      	beq.n	8007858 <USBD_StdEPReq+0x80>
 8007802:	2b20      	cmp	r3, #32
 8007804:	f040 817a 	bne.w	8007afc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007808:	7bbb      	ldrb	r3, [r7, #14]
 800780a:	4619      	mov	r1, r3
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f7ff fe83 	bl	8007518 <USBD_CoreFindEP>
 8007812:	4603      	mov	r3, r0
 8007814:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007816:	7b7b      	ldrb	r3, [r7, #13]
 8007818:	2bff      	cmp	r3, #255	; 0xff
 800781a:	f000 8174 	beq.w	8007b06 <USBD_StdEPReq+0x32e>
 800781e:	7b7b      	ldrb	r3, [r7, #13]
 8007820:	2b00      	cmp	r3, #0
 8007822:	f040 8170 	bne.w	8007b06 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007826:	7b7a      	ldrb	r2, [r7, #13]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800782e:	7b7a      	ldrb	r2, [r7, #13]
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	32ae      	adds	r2, #174	; 0xae
 8007834:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007838:	689b      	ldr	r3, [r3, #8]
 800783a:	2b00      	cmp	r3, #0
 800783c:	f000 8163 	beq.w	8007b06 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007840:	7b7a      	ldrb	r2, [r7, #13]
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	32ae      	adds	r2, #174	; 0xae
 8007846:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800784a:	689b      	ldr	r3, [r3, #8]
 800784c:	6839      	ldr	r1, [r7, #0]
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	4798      	blx	r3
 8007852:	4603      	mov	r3, r0
 8007854:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007856:	e156      	b.n	8007b06 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	785b      	ldrb	r3, [r3, #1]
 800785c:	2b03      	cmp	r3, #3
 800785e:	d008      	beq.n	8007872 <USBD_StdEPReq+0x9a>
 8007860:	2b03      	cmp	r3, #3
 8007862:	f300 8145 	bgt.w	8007af0 <USBD_StdEPReq+0x318>
 8007866:	2b00      	cmp	r3, #0
 8007868:	f000 809b 	beq.w	80079a2 <USBD_StdEPReq+0x1ca>
 800786c:	2b01      	cmp	r3, #1
 800786e:	d03c      	beq.n	80078ea <USBD_StdEPReq+0x112>
 8007870:	e13e      	b.n	8007af0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007878:	b2db      	uxtb	r3, r3
 800787a:	2b02      	cmp	r3, #2
 800787c:	d002      	beq.n	8007884 <USBD_StdEPReq+0xac>
 800787e:	2b03      	cmp	r3, #3
 8007880:	d016      	beq.n	80078b0 <USBD_StdEPReq+0xd8>
 8007882:	e02c      	b.n	80078de <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007884:	7bbb      	ldrb	r3, [r7, #14]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d00d      	beq.n	80078a6 <USBD_StdEPReq+0xce>
 800788a:	7bbb      	ldrb	r3, [r7, #14]
 800788c:	2b80      	cmp	r3, #128	; 0x80
 800788e:	d00a      	beq.n	80078a6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007890:	7bbb      	ldrb	r3, [r7, #14]
 8007892:	4619      	mov	r1, r3
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f001 f963 	bl	8008b60 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800789a:	2180      	movs	r1, #128	; 0x80
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f001 f95f 	bl	8008b60 <USBD_LL_StallEP>
 80078a2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80078a4:	e020      	b.n	80078e8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80078a6:	6839      	ldr	r1, [r7, #0]
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f000 fc7a 	bl	80081a2 <USBD_CtlError>
              break;
 80078ae:	e01b      	b.n	80078e8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	885b      	ldrh	r3, [r3, #2]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d10e      	bne.n	80078d6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80078b8:	7bbb      	ldrb	r3, [r7, #14]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d00b      	beq.n	80078d6 <USBD_StdEPReq+0xfe>
 80078be:	7bbb      	ldrb	r3, [r7, #14]
 80078c0:	2b80      	cmp	r3, #128	; 0x80
 80078c2:	d008      	beq.n	80078d6 <USBD_StdEPReq+0xfe>
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	88db      	ldrh	r3, [r3, #6]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d104      	bne.n	80078d6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80078cc:	7bbb      	ldrb	r3, [r7, #14]
 80078ce:	4619      	mov	r1, r3
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f001 f945 	bl	8008b60 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f000 fd2e 	bl	8008338 <USBD_CtlSendStatus>

              break;
 80078dc:	e004      	b.n	80078e8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80078de:	6839      	ldr	r1, [r7, #0]
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f000 fc5e 	bl	80081a2 <USBD_CtlError>
              break;
 80078e6:	bf00      	nop
          }
          break;
 80078e8:	e107      	b.n	8007afa <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078f0:	b2db      	uxtb	r3, r3
 80078f2:	2b02      	cmp	r3, #2
 80078f4:	d002      	beq.n	80078fc <USBD_StdEPReq+0x124>
 80078f6:	2b03      	cmp	r3, #3
 80078f8:	d016      	beq.n	8007928 <USBD_StdEPReq+0x150>
 80078fa:	e04b      	b.n	8007994 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80078fc:	7bbb      	ldrb	r3, [r7, #14]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d00d      	beq.n	800791e <USBD_StdEPReq+0x146>
 8007902:	7bbb      	ldrb	r3, [r7, #14]
 8007904:	2b80      	cmp	r3, #128	; 0x80
 8007906:	d00a      	beq.n	800791e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007908:	7bbb      	ldrb	r3, [r7, #14]
 800790a:	4619      	mov	r1, r3
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f001 f927 	bl	8008b60 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007912:	2180      	movs	r1, #128	; 0x80
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f001 f923 	bl	8008b60 <USBD_LL_StallEP>
 800791a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800791c:	e040      	b.n	80079a0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800791e:	6839      	ldr	r1, [r7, #0]
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f000 fc3e 	bl	80081a2 <USBD_CtlError>
              break;
 8007926:	e03b      	b.n	80079a0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	885b      	ldrh	r3, [r3, #2]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d136      	bne.n	800799e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007930:	7bbb      	ldrb	r3, [r7, #14]
 8007932:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007936:	2b00      	cmp	r3, #0
 8007938:	d004      	beq.n	8007944 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800793a:	7bbb      	ldrb	r3, [r7, #14]
 800793c:	4619      	mov	r1, r3
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f001 f92d 	bl	8008b9e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f000 fcf7 	bl	8008338 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800794a:	7bbb      	ldrb	r3, [r7, #14]
 800794c:	4619      	mov	r1, r3
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f7ff fde2 	bl	8007518 <USBD_CoreFindEP>
 8007954:	4603      	mov	r3, r0
 8007956:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007958:	7b7b      	ldrb	r3, [r7, #13]
 800795a:	2bff      	cmp	r3, #255	; 0xff
 800795c:	d01f      	beq.n	800799e <USBD_StdEPReq+0x1c6>
 800795e:	7b7b      	ldrb	r3, [r7, #13]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d11c      	bne.n	800799e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007964:	7b7a      	ldrb	r2, [r7, #13]
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800796c:	7b7a      	ldrb	r2, [r7, #13]
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	32ae      	adds	r2, #174	; 0xae
 8007972:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007976:	689b      	ldr	r3, [r3, #8]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d010      	beq.n	800799e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800797c:	7b7a      	ldrb	r2, [r7, #13]
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	32ae      	adds	r2, #174	; 0xae
 8007982:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007986:	689b      	ldr	r3, [r3, #8]
 8007988:	6839      	ldr	r1, [r7, #0]
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	4798      	blx	r3
 800798e:	4603      	mov	r3, r0
 8007990:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007992:	e004      	b.n	800799e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007994:	6839      	ldr	r1, [r7, #0]
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f000 fc03 	bl	80081a2 <USBD_CtlError>
              break;
 800799c:	e000      	b.n	80079a0 <USBD_StdEPReq+0x1c8>
              break;
 800799e:	bf00      	nop
          }
          break;
 80079a0:	e0ab      	b.n	8007afa <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079a8:	b2db      	uxtb	r3, r3
 80079aa:	2b02      	cmp	r3, #2
 80079ac:	d002      	beq.n	80079b4 <USBD_StdEPReq+0x1dc>
 80079ae:	2b03      	cmp	r3, #3
 80079b0:	d032      	beq.n	8007a18 <USBD_StdEPReq+0x240>
 80079b2:	e097      	b.n	8007ae4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80079b4:	7bbb      	ldrb	r3, [r7, #14]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d007      	beq.n	80079ca <USBD_StdEPReq+0x1f2>
 80079ba:	7bbb      	ldrb	r3, [r7, #14]
 80079bc:	2b80      	cmp	r3, #128	; 0x80
 80079be:	d004      	beq.n	80079ca <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80079c0:	6839      	ldr	r1, [r7, #0]
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f000 fbed 	bl	80081a2 <USBD_CtlError>
                break;
 80079c8:	e091      	b.n	8007aee <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	da0b      	bge.n	80079ea <USBD_StdEPReq+0x212>
 80079d2:	7bbb      	ldrb	r3, [r7, #14]
 80079d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80079d8:	4613      	mov	r3, r2
 80079da:	009b      	lsls	r3, r3, #2
 80079dc:	4413      	add	r3, r2
 80079de:	009b      	lsls	r3, r3, #2
 80079e0:	3310      	adds	r3, #16
 80079e2:	687a      	ldr	r2, [r7, #4]
 80079e4:	4413      	add	r3, r2
 80079e6:	3304      	adds	r3, #4
 80079e8:	e00b      	b.n	8007a02 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80079ea:	7bbb      	ldrb	r3, [r7, #14]
 80079ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079f0:	4613      	mov	r3, r2
 80079f2:	009b      	lsls	r3, r3, #2
 80079f4:	4413      	add	r3, r2
 80079f6:	009b      	lsls	r3, r3, #2
 80079f8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80079fc:	687a      	ldr	r2, [r7, #4]
 80079fe:	4413      	add	r3, r2
 8007a00:	3304      	adds	r3, #4
 8007a02:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	2200      	movs	r2, #0
 8007a08:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	2202      	movs	r2, #2
 8007a0e:	4619      	mov	r1, r3
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f000 fc37 	bl	8008284 <USBD_CtlSendData>
              break;
 8007a16:	e06a      	b.n	8007aee <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007a18:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	da11      	bge.n	8007a44 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007a20:	7bbb      	ldrb	r3, [r7, #14]
 8007a22:	f003 020f 	and.w	r2, r3, #15
 8007a26:	6879      	ldr	r1, [r7, #4]
 8007a28:	4613      	mov	r3, r2
 8007a2a:	009b      	lsls	r3, r3, #2
 8007a2c:	4413      	add	r3, r2
 8007a2e:	009b      	lsls	r3, r3, #2
 8007a30:	440b      	add	r3, r1
 8007a32:	3324      	adds	r3, #36	; 0x24
 8007a34:	881b      	ldrh	r3, [r3, #0]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d117      	bne.n	8007a6a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007a3a:	6839      	ldr	r1, [r7, #0]
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f000 fbb0 	bl	80081a2 <USBD_CtlError>
                  break;
 8007a42:	e054      	b.n	8007aee <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007a44:	7bbb      	ldrb	r3, [r7, #14]
 8007a46:	f003 020f 	and.w	r2, r3, #15
 8007a4a:	6879      	ldr	r1, [r7, #4]
 8007a4c:	4613      	mov	r3, r2
 8007a4e:	009b      	lsls	r3, r3, #2
 8007a50:	4413      	add	r3, r2
 8007a52:	009b      	lsls	r3, r3, #2
 8007a54:	440b      	add	r3, r1
 8007a56:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007a5a:	881b      	ldrh	r3, [r3, #0]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d104      	bne.n	8007a6a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007a60:	6839      	ldr	r1, [r7, #0]
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f000 fb9d 	bl	80081a2 <USBD_CtlError>
                  break;
 8007a68:	e041      	b.n	8007aee <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a6a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	da0b      	bge.n	8007a8a <USBD_StdEPReq+0x2b2>
 8007a72:	7bbb      	ldrb	r3, [r7, #14]
 8007a74:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a78:	4613      	mov	r3, r2
 8007a7a:	009b      	lsls	r3, r3, #2
 8007a7c:	4413      	add	r3, r2
 8007a7e:	009b      	lsls	r3, r3, #2
 8007a80:	3310      	adds	r3, #16
 8007a82:	687a      	ldr	r2, [r7, #4]
 8007a84:	4413      	add	r3, r2
 8007a86:	3304      	adds	r3, #4
 8007a88:	e00b      	b.n	8007aa2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007a8a:	7bbb      	ldrb	r3, [r7, #14]
 8007a8c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a90:	4613      	mov	r3, r2
 8007a92:	009b      	lsls	r3, r3, #2
 8007a94:	4413      	add	r3, r2
 8007a96:	009b      	lsls	r3, r3, #2
 8007a98:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007a9c:	687a      	ldr	r2, [r7, #4]
 8007a9e:	4413      	add	r3, r2
 8007aa0:	3304      	adds	r3, #4
 8007aa2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007aa4:	7bbb      	ldrb	r3, [r7, #14]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d002      	beq.n	8007ab0 <USBD_StdEPReq+0x2d8>
 8007aaa:	7bbb      	ldrb	r3, [r7, #14]
 8007aac:	2b80      	cmp	r3, #128	; 0x80
 8007aae:	d103      	bne.n	8007ab8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	601a      	str	r2, [r3, #0]
 8007ab6:	e00e      	b.n	8007ad6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007ab8:	7bbb      	ldrb	r3, [r7, #14]
 8007aba:	4619      	mov	r1, r3
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f001 f88d 	bl	8008bdc <USBD_LL_IsStallEP>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d003      	beq.n	8007ad0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	2201      	movs	r2, #1
 8007acc:	601a      	str	r2, [r3, #0]
 8007ace:	e002      	b.n	8007ad6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	2202      	movs	r2, #2
 8007ada:	4619      	mov	r1, r3
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f000 fbd1 	bl	8008284 <USBD_CtlSendData>
              break;
 8007ae2:	e004      	b.n	8007aee <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007ae4:	6839      	ldr	r1, [r7, #0]
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f000 fb5b 	bl	80081a2 <USBD_CtlError>
              break;
 8007aec:	bf00      	nop
          }
          break;
 8007aee:	e004      	b.n	8007afa <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007af0:	6839      	ldr	r1, [r7, #0]
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f000 fb55 	bl	80081a2 <USBD_CtlError>
          break;
 8007af8:	bf00      	nop
      }
      break;
 8007afa:	e005      	b.n	8007b08 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007afc:	6839      	ldr	r1, [r7, #0]
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f000 fb4f 	bl	80081a2 <USBD_CtlError>
      break;
 8007b04:	e000      	b.n	8007b08 <USBD_StdEPReq+0x330>
      break;
 8007b06:	bf00      	nop
  }

  return ret;
 8007b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	3710      	adds	r7, #16
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}
	...

08007b14 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b084      	sub	sp, #16
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
 8007b1c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007b1e:	2300      	movs	r3, #0
 8007b20:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007b22:	2300      	movs	r3, #0
 8007b24:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007b26:	2300      	movs	r3, #0
 8007b28:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	885b      	ldrh	r3, [r3, #2]
 8007b2e:	0a1b      	lsrs	r3, r3, #8
 8007b30:	b29b      	uxth	r3, r3
 8007b32:	3b01      	subs	r3, #1
 8007b34:	2b06      	cmp	r3, #6
 8007b36:	f200 8128 	bhi.w	8007d8a <USBD_GetDescriptor+0x276>
 8007b3a:	a201      	add	r2, pc, #4	; (adr r2, 8007b40 <USBD_GetDescriptor+0x2c>)
 8007b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b40:	08007b5d 	.word	0x08007b5d
 8007b44:	08007b75 	.word	0x08007b75
 8007b48:	08007bb5 	.word	0x08007bb5
 8007b4c:	08007d8b 	.word	0x08007d8b
 8007b50:	08007d8b 	.word	0x08007d8b
 8007b54:	08007d2b 	.word	0x08007d2b
 8007b58:	08007d57 	.word	0x08007d57
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	687a      	ldr	r2, [r7, #4]
 8007b66:	7c12      	ldrb	r2, [r2, #16]
 8007b68:	f107 0108 	add.w	r1, r7, #8
 8007b6c:	4610      	mov	r0, r2
 8007b6e:	4798      	blx	r3
 8007b70:	60f8      	str	r0, [r7, #12]
      break;
 8007b72:	e112      	b.n	8007d9a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	7c1b      	ldrb	r3, [r3, #16]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d10d      	bne.n	8007b98 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b84:	f107 0208 	add.w	r2, r7, #8
 8007b88:	4610      	mov	r0, r2
 8007b8a:	4798      	blx	r3
 8007b8c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	3301      	adds	r3, #1
 8007b92:	2202      	movs	r2, #2
 8007b94:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007b96:	e100      	b.n	8007d9a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ba0:	f107 0208 	add.w	r2, r7, #8
 8007ba4:	4610      	mov	r0, r2
 8007ba6:	4798      	blx	r3
 8007ba8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	3301      	adds	r3, #1
 8007bae:	2202      	movs	r2, #2
 8007bb0:	701a      	strb	r2, [r3, #0]
      break;
 8007bb2:	e0f2      	b.n	8007d9a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	885b      	ldrh	r3, [r3, #2]
 8007bb8:	b2db      	uxtb	r3, r3
 8007bba:	2b05      	cmp	r3, #5
 8007bbc:	f200 80ac 	bhi.w	8007d18 <USBD_GetDescriptor+0x204>
 8007bc0:	a201      	add	r2, pc, #4	; (adr r2, 8007bc8 <USBD_GetDescriptor+0xb4>)
 8007bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bc6:	bf00      	nop
 8007bc8:	08007be1 	.word	0x08007be1
 8007bcc:	08007c15 	.word	0x08007c15
 8007bd0:	08007c49 	.word	0x08007c49
 8007bd4:	08007c7d 	.word	0x08007c7d
 8007bd8:	08007cb1 	.word	0x08007cb1
 8007bdc:	08007ce5 	.word	0x08007ce5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007be6:	685b      	ldr	r3, [r3, #4]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d00b      	beq.n	8007c04 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	687a      	ldr	r2, [r7, #4]
 8007bf6:	7c12      	ldrb	r2, [r2, #16]
 8007bf8:	f107 0108 	add.w	r1, r7, #8
 8007bfc:	4610      	mov	r0, r2
 8007bfe:	4798      	blx	r3
 8007c00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c02:	e091      	b.n	8007d28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c04:	6839      	ldr	r1, [r7, #0]
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f000 facb 	bl	80081a2 <USBD_CtlError>
            err++;
 8007c0c:	7afb      	ldrb	r3, [r7, #11]
 8007c0e:	3301      	adds	r3, #1
 8007c10:	72fb      	strb	r3, [r7, #11]
          break;
 8007c12:	e089      	b.n	8007d28 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c1a:	689b      	ldr	r3, [r3, #8]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d00b      	beq.n	8007c38 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c26:	689b      	ldr	r3, [r3, #8]
 8007c28:	687a      	ldr	r2, [r7, #4]
 8007c2a:	7c12      	ldrb	r2, [r2, #16]
 8007c2c:	f107 0108 	add.w	r1, r7, #8
 8007c30:	4610      	mov	r0, r2
 8007c32:	4798      	blx	r3
 8007c34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c36:	e077      	b.n	8007d28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c38:	6839      	ldr	r1, [r7, #0]
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f000 fab1 	bl	80081a2 <USBD_CtlError>
            err++;
 8007c40:	7afb      	ldrb	r3, [r7, #11]
 8007c42:	3301      	adds	r3, #1
 8007c44:	72fb      	strb	r3, [r7, #11]
          break;
 8007c46:	e06f      	b.n	8007d28 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c4e:	68db      	ldr	r3, [r3, #12]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d00b      	beq.n	8007c6c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c5a:	68db      	ldr	r3, [r3, #12]
 8007c5c:	687a      	ldr	r2, [r7, #4]
 8007c5e:	7c12      	ldrb	r2, [r2, #16]
 8007c60:	f107 0108 	add.w	r1, r7, #8
 8007c64:	4610      	mov	r0, r2
 8007c66:	4798      	blx	r3
 8007c68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c6a:	e05d      	b.n	8007d28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c6c:	6839      	ldr	r1, [r7, #0]
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f000 fa97 	bl	80081a2 <USBD_CtlError>
            err++;
 8007c74:	7afb      	ldrb	r3, [r7, #11]
 8007c76:	3301      	adds	r3, #1
 8007c78:	72fb      	strb	r3, [r7, #11]
          break;
 8007c7a:	e055      	b.n	8007d28 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c82:	691b      	ldr	r3, [r3, #16]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d00b      	beq.n	8007ca0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c8e:	691b      	ldr	r3, [r3, #16]
 8007c90:	687a      	ldr	r2, [r7, #4]
 8007c92:	7c12      	ldrb	r2, [r2, #16]
 8007c94:	f107 0108 	add.w	r1, r7, #8
 8007c98:	4610      	mov	r0, r2
 8007c9a:	4798      	blx	r3
 8007c9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c9e:	e043      	b.n	8007d28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ca0:	6839      	ldr	r1, [r7, #0]
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f000 fa7d 	bl	80081a2 <USBD_CtlError>
            err++;
 8007ca8:	7afb      	ldrb	r3, [r7, #11]
 8007caa:	3301      	adds	r3, #1
 8007cac:	72fb      	strb	r3, [r7, #11]
          break;
 8007cae:	e03b      	b.n	8007d28 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cb6:	695b      	ldr	r3, [r3, #20]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d00b      	beq.n	8007cd4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cc2:	695b      	ldr	r3, [r3, #20]
 8007cc4:	687a      	ldr	r2, [r7, #4]
 8007cc6:	7c12      	ldrb	r2, [r2, #16]
 8007cc8:	f107 0108 	add.w	r1, r7, #8
 8007ccc:	4610      	mov	r0, r2
 8007cce:	4798      	blx	r3
 8007cd0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007cd2:	e029      	b.n	8007d28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007cd4:	6839      	ldr	r1, [r7, #0]
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f000 fa63 	bl	80081a2 <USBD_CtlError>
            err++;
 8007cdc:	7afb      	ldrb	r3, [r7, #11]
 8007cde:	3301      	adds	r3, #1
 8007ce0:	72fb      	strb	r3, [r7, #11]
          break;
 8007ce2:	e021      	b.n	8007d28 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cea:	699b      	ldr	r3, [r3, #24]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d00b      	beq.n	8007d08 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cf6:	699b      	ldr	r3, [r3, #24]
 8007cf8:	687a      	ldr	r2, [r7, #4]
 8007cfa:	7c12      	ldrb	r2, [r2, #16]
 8007cfc:	f107 0108 	add.w	r1, r7, #8
 8007d00:	4610      	mov	r0, r2
 8007d02:	4798      	blx	r3
 8007d04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d06:	e00f      	b.n	8007d28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d08:	6839      	ldr	r1, [r7, #0]
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f000 fa49 	bl	80081a2 <USBD_CtlError>
            err++;
 8007d10:	7afb      	ldrb	r3, [r7, #11]
 8007d12:	3301      	adds	r3, #1
 8007d14:	72fb      	strb	r3, [r7, #11]
          break;
 8007d16:	e007      	b.n	8007d28 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007d18:	6839      	ldr	r1, [r7, #0]
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f000 fa41 	bl	80081a2 <USBD_CtlError>
          err++;
 8007d20:	7afb      	ldrb	r3, [r7, #11]
 8007d22:	3301      	adds	r3, #1
 8007d24:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007d26:	bf00      	nop
      }
      break;
 8007d28:	e037      	b.n	8007d9a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	7c1b      	ldrb	r3, [r3, #16]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d109      	bne.n	8007d46 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d3a:	f107 0208 	add.w	r2, r7, #8
 8007d3e:	4610      	mov	r0, r2
 8007d40:	4798      	blx	r3
 8007d42:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d44:	e029      	b.n	8007d9a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007d46:	6839      	ldr	r1, [r7, #0]
 8007d48:	6878      	ldr	r0, [r7, #4]
 8007d4a:	f000 fa2a 	bl	80081a2 <USBD_CtlError>
        err++;
 8007d4e:	7afb      	ldrb	r3, [r7, #11]
 8007d50:	3301      	adds	r3, #1
 8007d52:	72fb      	strb	r3, [r7, #11]
      break;
 8007d54:	e021      	b.n	8007d9a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	7c1b      	ldrb	r3, [r3, #16]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d10d      	bne.n	8007d7a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d66:	f107 0208 	add.w	r2, r7, #8
 8007d6a:	4610      	mov	r0, r2
 8007d6c:	4798      	blx	r3
 8007d6e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	3301      	adds	r3, #1
 8007d74:	2207      	movs	r2, #7
 8007d76:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d78:	e00f      	b.n	8007d9a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007d7a:	6839      	ldr	r1, [r7, #0]
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f000 fa10 	bl	80081a2 <USBD_CtlError>
        err++;
 8007d82:	7afb      	ldrb	r3, [r7, #11]
 8007d84:	3301      	adds	r3, #1
 8007d86:	72fb      	strb	r3, [r7, #11]
      break;
 8007d88:	e007      	b.n	8007d9a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007d8a:	6839      	ldr	r1, [r7, #0]
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f000 fa08 	bl	80081a2 <USBD_CtlError>
      err++;
 8007d92:	7afb      	ldrb	r3, [r7, #11]
 8007d94:	3301      	adds	r3, #1
 8007d96:	72fb      	strb	r3, [r7, #11]
      break;
 8007d98:	bf00      	nop
  }

  if (err != 0U)
 8007d9a:	7afb      	ldrb	r3, [r7, #11]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d11e      	bne.n	8007dde <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	88db      	ldrh	r3, [r3, #6]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d016      	beq.n	8007dd6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007da8:	893b      	ldrh	r3, [r7, #8]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d00e      	beq.n	8007dcc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	88da      	ldrh	r2, [r3, #6]
 8007db2:	893b      	ldrh	r3, [r7, #8]
 8007db4:	4293      	cmp	r3, r2
 8007db6:	bf28      	it	cs
 8007db8:	4613      	movcs	r3, r2
 8007dba:	b29b      	uxth	r3, r3
 8007dbc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007dbe:	893b      	ldrh	r3, [r7, #8]
 8007dc0:	461a      	mov	r2, r3
 8007dc2:	68f9      	ldr	r1, [r7, #12]
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f000 fa5d 	bl	8008284 <USBD_CtlSendData>
 8007dca:	e009      	b.n	8007de0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007dcc:	6839      	ldr	r1, [r7, #0]
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f000 f9e7 	bl	80081a2 <USBD_CtlError>
 8007dd4:	e004      	b.n	8007de0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f000 faae 	bl	8008338 <USBD_CtlSendStatus>
 8007ddc:	e000      	b.n	8007de0 <USBD_GetDescriptor+0x2cc>
    return;
 8007dde:	bf00      	nop
  }
}
 8007de0:	3710      	adds	r7, #16
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bd80      	pop	{r7, pc}
 8007de6:	bf00      	nop

08007de8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b084      	sub	sp, #16
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
 8007df0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	889b      	ldrh	r3, [r3, #4]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d131      	bne.n	8007e5e <USBD_SetAddress+0x76>
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	88db      	ldrh	r3, [r3, #6]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d12d      	bne.n	8007e5e <USBD_SetAddress+0x76>
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	885b      	ldrh	r3, [r3, #2]
 8007e06:	2b7f      	cmp	r3, #127	; 0x7f
 8007e08:	d829      	bhi.n	8007e5e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	885b      	ldrh	r3, [r3, #2]
 8007e0e:	b2db      	uxtb	r3, r3
 8007e10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e14:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e1c:	b2db      	uxtb	r3, r3
 8007e1e:	2b03      	cmp	r3, #3
 8007e20:	d104      	bne.n	8007e2c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007e22:	6839      	ldr	r1, [r7, #0]
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f000 f9bc 	bl	80081a2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e2a:	e01d      	b.n	8007e68 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	7bfa      	ldrb	r2, [r7, #15]
 8007e30:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007e34:	7bfb      	ldrb	r3, [r7, #15]
 8007e36:	4619      	mov	r1, r3
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	f000 fefb 	bl	8008c34 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f000 fa7a 	bl	8008338 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007e44:	7bfb      	ldrb	r3, [r7, #15]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d004      	beq.n	8007e54 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2202      	movs	r2, #2
 8007e4e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e52:	e009      	b.n	8007e68 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2201      	movs	r2, #1
 8007e58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e5c:	e004      	b.n	8007e68 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007e5e:	6839      	ldr	r1, [r7, #0]
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	f000 f99e 	bl	80081a2 <USBD_CtlError>
  }
}
 8007e66:	bf00      	nop
 8007e68:	bf00      	nop
 8007e6a:	3710      	adds	r7, #16
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd80      	pop	{r7, pc}

08007e70 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b084      	sub	sp, #16
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
 8007e78:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	885b      	ldrh	r3, [r3, #2]
 8007e82:	b2da      	uxtb	r2, r3
 8007e84:	4b4e      	ldr	r3, [pc, #312]	; (8007fc0 <USBD_SetConfig+0x150>)
 8007e86:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007e88:	4b4d      	ldr	r3, [pc, #308]	; (8007fc0 <USBD_SetConfig+0x150>)
 8007e8a:	781b      	ldrb	r3, [r3, #0]
 8007e8c:	2b01      	cmp	r3, #1
 8007e8e:	d905      	bls.n	8007e9c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007e90:	6839      	ldr	r1, [r7, #0]
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f000 f985 	bl	80081a2 <USBD_CtlError>
    return USBD_FAIL;
 8007e98:	2303      	movs	r3, #3
 8007e9a:	e08c      	b.n	8007fb6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ea2:	b2db      	uxtb	r3, r3
 8007ea4:	2b02      	cmp	r3, #2
 8007ea6:	d002      	beq.n	8007eae <USBD_SetConfig+0x3e>
 8007ea8:	2b03      	cmp	r3, #3
 8007eaa:	d029      	beq.n	8007f00 <USBD_SetConfig+0x90>
 8007eac:	e075      	b.n	8007f9a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007eae:	4b44      	ldr	r3, [pc, #272]	; (8007fc0 <USBD_SetConfig+0x150>)
 8007eb0:	781b      	ldrb	r3, [r3, #0]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d020      	beq.n	8007ef8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007eb6:	4b42      	ldr	r3, [pc, #264]	; (8007fc0 <USBD_SetConfig+0x150>)
 8007eb8:	781b      	ldrb	r3, [r3, #0]
 8007eba:	461a      	mov	r2, r3
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007ec0:	4b3f      	ldr	r3, [pc, #252]	; (8007fc0 <USBD_SetConfig+0x150>)
 8007ec2:	781b      	ldrb	r3, [r3, #0]
 8007ec4:	4619      	mov	r1, r3
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f7fe ffe7 	bl	8006e9a <USBD_SetClassConfig>
 8007ecc:	4603      	mov	r3, r0
 8007ece:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007ed0:	7bfb      	ldrb	r3, [r7, #15]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d008      	beq.n	8007ee8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007ed6:	6839      	ldr	r1, [r7, #0]
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f000 f962 	bl	80081a2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2202      	movs	r2, #2
 8007ee2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007ee6:	e065      	b.n	8007fb4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f000 fa25 	bl	8008338 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2203      	movs	r2, #3
 8007ef2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007ef6:	e05d      	b.n	8007fb4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f000 fa1d 	bl	8008338 <USBD_CtlSendStatus>
      break;
 8007efe:	e059      	b.n	8007fb4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007f00:	4b2f      	ldr	r3, [pc, #188]	; (8007fc0 <USBD_SetConfig+0x150>)
 8007f02:	781b      	ldrb	r3, [r3, #0]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d112      	bne.n	8007f2e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2202      	movs	r2, #2
 8007f0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007f10:	4b2b      	ldr	r3, [pc, #172]	; (8007fc0 <USBD_SetConfig+0x150>)
 8007f12:	781b      	ldrb	r3, [r3, #0]
 8007f14:	461a      	mov	r2, r3
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007f1a:	4b29      	ldr	r3, [pc, #164]	; (8007fc0 <USBD_SetConfig+0x150>)
 8007f1c:	781b      	ldrb	r3, [r3, #0]
 8007f1e:	4619      	mov	r1, r3
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f7fe ffd6 	bl	8006ed2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f000 fa06 	bl	8008338 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007f2c:	e042      	b.n	8007fb4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007f2e:	4b24      	ldr	r3, [pc, #144]	; (8007fc0 <USBD_SetConfig+0x150>)
 8007f30:	781b      	ldrb	r3, [r3, #0]
 8007f32:	461a      	mov	r2, r3
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	685b      	ldr	r3, [r3, #4]
 8007f38:	429a      	cmp	r2, r3
 8007f3a:	d02a      	beq.n	8007f92 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	685b      	ldr	r3, [r3, #4]
 8007f40:	b2db      	uxtb	r3, r3
 8007f42:	4619      	mov	r1, r3
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f7fe ffc4 	bl	8006ed2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007f4a:	4b1d      	ldr	r3, [pc, #116]	; (8007fc0 <USBD_SetConfig+0x150>)
 8007f4c:	781b      	ldrb	r3, [r3, #0]
 8007f4e:	461a      	mov	r2, r3
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007f54:	4b1a      	ldr	r3, [pc, #104]	; (8007fc0 <USBD_SetConfig+0x150>)
 8007f56:	781b      	ldrb	r3, [r3, #0]
 8007f58:	4619      	mov	r1, r3
 8007f5a:	6878      	ldr	r0, [r7, #4]
 8007f5c:	f7fe ff9d 	bl	8006e9a <USBD_SetClassConfig>
 8007f60:	4603      	mov	r3, r0
 8007f62:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007f64:	7bfb      	ldrb	r3, [r7, #15]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d00f      	beq.n	8007f8a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007f6a:	6839      	ldr	r1, [r7, #0]
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f000 f918 	bl	80081a2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	685b      	ldr	r3, [r3, #4]
 8007f76:	b2db      	uxtb	r3, r3
 8007f78:	4619      	mov	r1, r3
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f7fe ffa9 	bl	8006ed2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2202      	movs	r2, #2
 8007f84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007f88:	e014      	b.n	8007fb4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	f000 f9d4 	bl	8008338 <USBD_CtlSendStatus>
      break;
 8007f90:	e010      	b.n	8007fb4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f000 f9d0 	bl	8008338 <USBD_CtlSendStatus>
      break;
 8007f98:	e00c      	b.n	8007fb4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007f9a:	6839      	ldr	r1, [r7, #0]
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f000 f900 	bl	80081a2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007fa2:	4b07      	ldr	r3, [pc, #28]	; (8007fc0 <USBD_SetConfig+0x150>)
 8007fa4:	781b      	ldrb	r3, [r3, #0]
 8007fa6:	4619      	mov	r1, r3
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f7fe ff92 	bl	8006ed2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007fae:	2303      	movs	r3, #3
 8007fb0:	73fb      	strb	r3, [r7, #15]
      break;
 8007fb2:	bf00      	nop
  }

  return ret;
 8007fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	3710      	adds	r7, #16
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	bd80      	pop	{r7, pc}
 8007fbe:	bf00      	nop
 8007fc0:	20000378 	.word	0x20000378

08007fc4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b082      	sub	sp, #8
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
 8007fcc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	88db      	ldrh	r3, [r3, #6]
 8007fd2:	2b01      	cmp	r3, #1
 8007fd4:	d004      	beq.n	8007fe0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007fd6:	6839      	ldr	r1, [r7, #0]
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	f000 f8e2 	bl	80081a2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007fde:	e023      	b.n	8008028 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fe6:	b2db      	uxtb	r3, r3
 8007fe8:	2b02      	cmp	r3, #2
 8007fea:	dc02      	bgt.n	8007ff2 <USBD_GetConfig+0x2e>
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	dc03      	bgt.n	8007ff8 <USBD_GetConfig+0x34>
 8007ff0:	e015      	b.n	800801e <USBD_GetConfig+0x5a>
 8007ff2:	2b03      	cmp	r3, #3
 8007ff4:	d00b      	beq.n	800800e <USBD_GetConfig+0x4a>
 8007ff6:	e012      	b.n	800801e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	3308      	adds	r3, #8
 8008002:	2201      	movs	r2, #1
 8008004:	4619      	mov	r1, r3
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f000 f93c 	bl	8008284 <USBD_CtlSendData>
        break;
 800800c:	e00c      	b.n	8008028 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	3304      	adds	r3, #4
 8008012:	2201      	movs	r2, #1
 8008014:	4619      	mov	r1, r3
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	f000 f934 	bl	8008284 <USBD_CtlSendData>
        break;
 800801c:	e004      	b.n	8008028 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800801e:	6839      	ldr	r1, [r7, #0]
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	f000 f8be 	bl	80081a2 <USBD_CtlError>
        break;
 8008026:	bf00      	nop
}
 8008028:	bf00      	nop
 800802a:	3708      	adds	r7, #8
 800802c:	46bd      	mov	sp, r7
 800802e:	bd80      	pop	{r7, pc}

08008030 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b082      	sub	sp, #8
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
 8008038:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008040:	b2db      	uxtb	r3, r3
 8008042:	3b01      	subs	r3, #1
 8008044:	2b02      	cmp	r3, #2
 8008046:	d81e      	bhi.n	8008086 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	88db      	ldrh	r3, [r3, #6]
 800804c:	2b02      	cmp	r3, #2
 800804e:	d004      	beq.n	800805a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008050:	6839      	ldr	r1, [r7, #0]
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f000 f8a5 	bl	80081a2 <USBD_CtlError>
        break;
 8008058:	e01a      	b.n	8008090 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2201      	movs	r2, #1
 800805e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008066:	2b00      	cmp	r3, #0
 8008068:	d005      	beq.n	8008076 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	68db      	ldr	r3, [r3, #12]
 800806e:	f043 0202 	orr.w	r2, r3, #2
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	330c      	adds	r3, #12
 800807a:	2202      	movs	r2, #2
 800807c:	4619      	mov	r1, r3
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f000 f900 	bl	8008284 <USBD_CtlSendData>
      break;
 8008084:	e004      	b.n	8008090 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008086:	6839      	ldr	r1, [r7, #0]
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f000 f88a 	bl	80081a2 <USBD_CtlError>
      break;
 800808e:	bf00      	nop
  }
}
 8008090:	bf00      	nop
 8008092:	3708      	adds	r7, #8
 8008094:	46bd      	mov	sp, r7
 8008096:	bd80      	pop	{r7, pc}

08008098 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b082      	sub	sp, #8
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
 80080a0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	885b      	ldrh	r3, [r3, #2]
 80080a6:	2b01      	cmp	r3, #1
 80080a8:	d107      	bne.n	80080ba <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2201      	movs	r2, #1
 80080ae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f000 f940 	bl	8008338 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80080b8:	e013      	b.n	80080e2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	885b      	ldrh	r3, [r3, #2]
 80080be:	2b02      	cmp	r3, #2
 80080c0:	d10b      	bne.n	80080da <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	889b      	ldrh	r3, [r3, #4]
 80080c6:	0a1b      	lsrs	r3, r3, #8
 80080c8:	b29b      	uxth	r3, r3
 80080ca:	b2da      	uxtb	r2, r3
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	f000 f930 	bl	8008338 <USBD_CtlSendStatus>
}
 80080d8:	e003      	b.n	80080e2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80080da:	6839      	ldr	r1, [r7, #0]
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	f000 f860 	bl	80081a2 <USBD_CtlError>
}
 80080e2:	bf00      	nop
 80080e4:	3708      	adds	r7, #8
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}

080080ea <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080ea:	b580      	push	{r7, lr}
 80080ec:	b082      	sub	sp, #8
 80080ee:	af00      	add	r7, sp, #0
 80080f0:	6078      	str	r0, [r7, #4]
 80080f2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080fa:	b2db      	uxtb	r3, r3
 80080fc:	3b01      	subs	r3, #1
 80080fe:	2b02      	cmp	r3, #2
 8008100:	d80b      	bhi.n	800811a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	885b      	ldrh	r3, [r3, #2]
 8008106:	2b01      	cmp	r3, #1
 8008108:	d10c      	bne.n	8008124 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2200      	movs	r2, #0
 800810e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f000 f910 	bl	8008338 <USBD_CtlSendStatus>
      }
      break;
 8008118:	e004      	b.n	8008124 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800811a:	6839      	ldr	r1, [r7, #0]
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	f000 f840 	bl	80081a2 <USBD_CtlError>
      break;
 8008122:	e000      	b.n	8008126 <USBD_ClrFeature+0x3c>
      break;
 8008124:	bf00      	nop
  }
}
 8008126:	bf00      	nop
 8008128:	3708      	adds	r7, #8
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}

0800812e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800812e:	b580      	push	{r7, lr}
 8008130:	b084      	sub	sp, #16
 8008132:	af00      	add	r7, sp, #0
 8008134:	6078      	str	r0, [r7, #4]
 8008136:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	781a      	ldrb	r2, [r3, #0]
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	3301      	adds	r3, #1
 8008148:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	781a      	ldrb	r2, [r3, #0]
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	3301      	adds	r3, #1
 8008156:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008158:	68f8      	ldr	r0, [r7, #12]
 800815a:	f7ff fa41 	bl	80075e0 <SWAPBYTE>
 800815e:	4603      	mov	r3, r0
 8008160:	461a      	mov	r2, r3
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	3301      	adds	r3, #1
 800816a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	3301      	adds	r3, #1
 8008170:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008172:	68f8      	ldr	r0, [r7, #12]
 8008174:	f7ff fa34 	bl	80075e0 <SWAPBYTE>
 8008178:	4603      	mov	r3, r0
 800817a:	461a      	mov	r2, r3
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	3301      	adds	r3, #1
 8008184:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	3301      	adds	r3, #1
 800818a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800818c:	68f8      	ldr	r0, [r7, #12]
 800818e:	f7ff fa27 	bl	80075e0 <SWAPBYTE>
 8008192:	4603      	mov	r3, r0
 8008194:	461a      	mov	r2, r3
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	80da      	strh	r2, [r3, #6]
}
 800819a:	bf00      	nop
 800819c:	3710      	adds	r7, #16
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}

080081a2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081a2:	b580      	push	{r7, lr}
 80081a4:	b082      	sub	sp, #8
 80081a6:	af00      	add	r7, sp, #0
 80081a8:	6078      	str	r0, [r7, #4]
 80081aa:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80081ac:	2180      	movs	r1, #128	; 0x80
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f000 fcd6 	bl	8008b60 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80081b4:	2100      	movs	r1, #0
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f000 fcd2 	bl	8008b60 <USBD_LL_StallEP>
}
 80081bc:	bf00      	nop
 80081be:	3708      	adds	r7, #8
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bd80      	pop	{r7, pc}

080081c4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b086      	sub	sp, #24
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	60f8      	str	r0, [r7, #12]
 80081cc:	60b9      	str	r1, [r7, #8]
 80081ce:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80081d0:	2300      	movs	r3, #0
 80081d2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d036      	beq.n	8008248 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80081de:	6938      	ldr	r0, [r7, #16]
 80081e0:	f000 f836 	bl	8008250 <USBD_GetLen>
 80081e4:	4603      	mov	r3, r0
 80081e6:	3301      	adds	r3, #1
 80081e8:	b29b      	uxth	r3, r3
 80081ea:	005b      	lsls	r3, r3, #1
 80081ec:	b29a      	uxth	r2, r3
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80081f2:	7dfb      	ldrb	r3, [r7, #23]
 80081f4:	68ba      	ldr	r2, [r7, #8]
 80081f6:	4413      	add	r3, r2
 80081f8:	687a      	ldr	r2, [r7, #4]
 80081fa:	7812      	ldrb	r2, [r2, #0]
 80081fc:	701a      	strb	r2, [r3, #0]
  idx++;
 80081fe:	7dfb      	ldrb	r3, [r7, #23]
 8008200:	3301      	adds	r3, #1
 8008202:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008204:	7dfb      	ldrb	r3, [r7, #23]
 8008206:	68ba      	ldr	r2, [r7, #8]
 8008208:	4413      	add	r3, r2
 800820a:	2203      	movs	r2, #3
 800820c:	701a      	strb	r2, [r3, #0]
  idx++;
 800820e:	7dfb      	ldrb	r3, [r7, #23]
 8008210:	3301      	adds	r3, #1
 8008212:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008214:	e013      	b.n	800823e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008216:	7dfb      	ldrb	r3, [r7, #23]
 8008218:	68ba      	ldr	r2, [r7, #8]
 800821a:	4413      	add	r3, r2
 800821c:	693a      	ldr	r2, [r7, #16]
 800821e:	7812      	ldrb	r2, [r2, #0]
 8008220:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008222:	693b      	ldr	r3, [r7, #16]
 8008224:	3301      	adds	r3, #1
 8008226:	613b      	str	r3, [r7, #16]
    idx++;
 8008228:	7dfb      	ldrb	r3, [r7, #23]
 800822a:	3301      	adds	r3, #1
 800822c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800822e:	7dfb      	ldrb	r3, [r7, #23]
 8008230:	68ba      	ldr	r2, [r7, #8]
 8008232:	4413      	add	r3, r2
 8008234:	2200      	movs	r2, #0
 8008236:	701a      	strb	r2, [r3, #0]
    idx++;
 8008238:	7dfb      	ldrb	r3, [r7, #23]
 800823a:	3301      	adds	r3, #1
 800823c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800823e:	693b      	ldr	r3, [r7, #16]
 8008240:	781b      	ldrb	r3, [r3, #0]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d1e7      	bne.n	8008216 <USBD_GetString+0x52>
 8008246:	e000      	b.n	800824a <USBD_GetString+0x86>
    return;
 8008248:	bf00      	nop
  }
}
 800824a:	3718      	adds	r7, #24
 800824c:	46bd      	mov	sp, r7
 800824e:	bd80      	pop	{r7, pc}

08008250 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008250:	b480      	push	{r7}
 8008252:	b085      	sub	sp, #20
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008258:	2300      	movs	r3, #0
 800825a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008260:	e005      	b.n	800826e <USBD_GetLen+0x1e>
  {
    len++;
 8008262:	7bfb      	ldrb	r3, [r7, #15]
 8008264:	3301      	adds	r3, #1
 8008266:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	3301      	adds	r3, #1
 800826c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	781b      	ldrb	r3, [r3, #0]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d1f5      	bne.n	8008262 <USBD_GetLen+0x12>
  }

  return len;
 8008276:	7bfb      	ldrb	r3, [r7, #15]
}
 8008278:	4618      	mov	r0, r3
 800827a:	3714      	adds	r7, #20
 800827c:	46bd      	mov	sp, r7
 800827e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008282:	4770      	bx	lr

08008284 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b084      	sub	sp, #16
 8008288:	af00      	add	r7, sp, #0
 800828a:	60f8      	str	r0, [r7, #12]
 800828c:	60b9      	str	r1, [r7, #8]
 800828e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	2202      	movs	r2, #2
 8008294:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	687a      	ldr	r2, [r7, #4]
 800829c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	687a      	ldr	r2, [r7, #4]
 80082a2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	68ba      	ldr	r2, [r7, #8]
 80082a8:	2100      	movs	r1, #0
 80082aa:	68f8      	ldr	r0, [r7, #12]
 80082ac:	f000 fce1 	bl	8008c72 <USBD_LL_Transmit>

  return USBD_OK;
 80082b0:	2300      	movs	r3, #0
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	3710      	adds	r7, #16
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}

080082ba <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80082ba:	b580      	push	{r7, lr}
 80082bc:	b084      	sub	sp, #16
 80082be:	af00      	add	r7, sp, #0
 80082c0:	60f8      	str	r0, [r7, #12]
 80082c2:	60b9      	str	r1, [r7, #8]
 80082c4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	68ba      	ldr	r2, [r7, #8]
 80082ca:	2100      	movs	r1, #0
 80082cc:	68f8      	ldr	r0, [r7, #12]
 80082ce:	f000 fcd0 	bl	8008c72 <USBD_LL_Transmit>

  return USBD_OK;
 80082d2:	2300      	movs	r3, #0
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	3710      	adds	r7, #16
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}

080082dc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b084      	sub	sp, #16
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	60f8      	str	r0, [r7, #12]
 80082e4:	60b9      	str	r1, [r7, #8]
 80082e6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	2203      	movs	r2, #3
 80082ec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	687a      	ldr	r2, [r7, #4]
 80082f4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	687a      	ldr	r2, [r7, #4]
 80082fc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	68ba      	ldr	r2, [r7, #8]
 8008304:	2100      	movs	r1, #0
 8008306:	68f8      	ldr	r0, [r7, #12]
 8008308:	f000 fcd4 	bl	8008cb4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800830c:	2300      	movs	r3, #0
}
 800830e:	4618      	mov	r0, r3
 8008310:	3710      	adds	r7, #16
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}

08008316 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008316:	b580      	push	{r7, lr}
 8008318:	b084      	sub	sp, #16
 800831a:	af00      	add	r7, sp, #0
 800831c:	60f8      	str	r0, [r7, #12]
 800831e:	60b9      	str	r1, [r7, #8]
 8008320:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	68ba      	ldr	r2, [r7, #8]
 8008326:	2100      	movs	r1, #0
 8008328:	68f8      	ldr	r0, [r7, #12]
 800832a:	f000 fcc3 	bl	8008cb4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800832e:	2300      	movs	r3, #0
}
 8008330:	4618      	mov	r0, r3
 8008332:	3710      	adds	r7, #16
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}

08008338 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b082      	sub	sp, #8
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2204      	movs	r2, #4
 8008344:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008348:	2300      	movs	r3, #0
 800834a:	2200      	movs	r2, #0
 800834c:	2100      	movs	r1, #0
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	f000 fc8f 	bl	8008c72 <USBD_LL_Transmit>

  return USBD_OK;
 8008354:	2300      	movs	r3, #0
}
 8008356:	4618      	mov	r0, r3
 8008358:	3708      	adds	r7, #8
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}

0800835e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800835e:	b580      	push	{r7, lr}
 8008360:	b082      	sub	sp, #8
 8008362:	af00      	add	r7, sp, #0
 8008364:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2205      	movs	r2, #5
 800836a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800836e:	2300      	movs	r3, #0
 8008370:	2200      	movs	r2, #0
 8008372:	2100      	movs	r1, #0
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f000 fc9d 	bl	8008cb4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800837a:	2300      	movs	r3, #0
}
 800837c:	4618      	mov	r0, r3
 800837e:	3708      	adds	r7, #8
 8008380:	46bd      	mov	sp, r7
 8008382:	bd80      	pop	{r7, pc}

08008384 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008388:	2200      	movs	r2, #0
 800838a:	4912      	ldr	r1, [pc, #72]	; (80083d4 <MX_USB_DEVICE_Init+0x50>)
 800838c:	4812      	ldr	r0, [pc, #72]	; (80083d8 <MX_USB_DEVICE_Init+0x54>)
 800838e:	f7fe fd07 	bl	8006da0 <USBD_Init>
 8008392:	4603      	mov	r3, r0
 8008394:	2b00      	cmp	r3, #0
 8008396:	d001      	beq.n	800839c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008398:	f7f9 f854 	bl	8001444 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800839c:	490f      	ldr	r1, [pc, #60]	; (80083dc <MX_USB_DEVICE_Init+0x58>)
 800839e:	480e      	ldr	r0, [pc, #56]	; (80083d8 <MX_USB_DEVICE_Init+0x54>)
 80083a0:	f7fe fd2e 	bl	8006e00 <USBD_RegisterClass>
 80083a4:	4603      	mov	r3, r0
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d001      	beq.n	80083ae <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80083aa:	f7f9 f84b 	bl	8001444 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80083ae:	490c      	ldr	r1, [pc, #48]	; (80083e0 <MX_USB_DEVICE_Init+0x5c>)
 80083b0:	4809      	ldr	r0, [pc, #36]	; (80083d8 <MX_USB_DEVICE_Init+0x54>)
 80083b2:	f7fe fc1f 	bl	8006bf4 <USBD_CDC_RegisterInterface>
 80083b6:	4603      	mov	r3, r0
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d001      	beq.n	80083c0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80083bc:	f7f9 f842 	bl	8001444 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80083c0:	4805      	ldr	r0, [pc, #20]	; (80083d8 <MX_USB_DEVICE_Init+0x54>)
 80083c2:	f7fe fd53 	bl	8006e6c <USBD_Start>
 80083c6:	4603      	mov	r3, r0
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d001      	beq.n	80083d0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80083cc:	f7f9 f83a 	bl	8001444 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80083d0:	bf00      	nop
 80083d2:	bd80      	pop	{r7, pc}
 80083d4:	200000b0 	.word	0x200000b0
 80083d8:	2000037c 	.word	0x2000037c
 80083dc:	2000001c 	.word	0x2000001c
 80083e0:	2000009c 	.word	0x2000009c

080083e4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80083e8:	2200      	movs	r2, #0
 80083ea:	4905      	ldr	r1, [pc, #20]	; (8008400 <CDC_Init_FS+0x1c>)
 80083ec:	4805      	ldr	r0, [pc, #20]	; (8008404 <CDC_Init_FS+0x20>)
 80083ee:	f7fe fc1b 	bl	8006c28 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80083f2:	4905      	ldr	r1, [pc, #20]	; (8008408 <CDC_Init_FS+0x24>)
 80083f4:	4803      	ldr	r0, [pc, #12]	; (8008404 <CDC_Init_FS+0x20>)
 80083f6:	f7fe fc39 	bl	8006c6c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80083fa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80083fc:	4618      	mov	r0, r3
 80083fe:	bd80      	pop	{r7, pc}
 8008400:	20000e58 	.word	0x20000e58
 8008404:	2000037c 	.word	0x2000037c
 8008408:	20000658 	.word	0x20000658

0800840c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800840c:	b480      	push	{r7}
 800840e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008410:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008412:	4618      	mov	r0, r3
 8008414:	46bd      	mov	sp, r7
 8008416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841a:	4770      	bx	lr

0800841c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800841c:	b480      	push	{r7}
 800841e:	b083      	sub	sp, #12
 8008420:	af00      	add	r7, sp, #0
 8008422:	4603      	mov	r3, r0
 8008424:	6039      	str	r1, [r7, #0]
 8008426:	71fb      	strb	r3, [r7, #7]
 8008428:	4613      	mov	r3, r2
 800842a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800842c:	79fb      	ldrb	r3, [r7, #7]
 800842e:	2b23      	cmp	r3, #35	; 0x23
 8008430:	d84a      	bhi.n	80084c8 <CDC_Control_FS+0xac>
 8008432:	a201      	add	r2, pc, #4	; (adr r2, 8008438 <CDC_Control_FS+0x1c>)
 8008434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008438:	080084c9 	.word	0x080084c9
 800843c:	080084c9 	.word	0x080084c9
 8008440:	080084c9 	.word	0x080084c9
 8008444:	080084c9 	.word	0x080084c9
 8008448:	080084c9 	.word	0x080084c9
 800844c:	080084c9 	.word	0x080084c9
 8008450:	080084c9 	.word	0x080084c9
 8008454:	080084c9 	.word	0x080084c9
 8008458:	080084c9 	.word	0x080084c9
 800845c:	080084c9 	.word	0x080084c9
 8008460:	080084c9 	.word	0x080084c9
 8008464:	080084c9 	.word	0x080084c9
 8008468:	080084c9 	.word	0x080084c9
 800846c:	080084c9 	.word	0x080084c9
 8008470:	080084c9 	.word	0x080084c9
 8008474:	080084c9 	.word	0x080084c9
 8008478:	080084c9 	.word	0x080084c9
 800847c:	080084c9 	.word	0x080084c9
 8008480:	080084c9 	.word	0x080084c9
 8008484:	080084c9 	.word	0x080084c9
 8008488:	080084c9 	.word	0x080084c9
 800848c:	080084c9 	.word	0x080084c9
 8008490:	080084c9 	.word	0x080084c9
 8008494:	080084c9 	.word	0x080084c9
 8008498:	080084c9 	.word	0x080084c9
 800849c:	080084c9 	.word	0x080084c9
 80084a0:	080084c9 	.word	0x080084c9
 80084a4:	080084c9 	.word	0x080084c9
 80084a8:	080084c9 	.word	0x080084c9
 80084ac:	080084c9 	.word	0x080084c9
 80084b0:	080084c9 	.word	0x080084c9
 80084b4:	080084c9 	.word	0x080084c9
 80084b8:	080084c9 	.word	0x080084c9
 80084bc:	080084c9 	.word	0x080084c9
 80084c0:	080084c9 	.word	0x080084c9
 80084c4:	080084c9 	.word	0x080084c9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80084c8:	bf00      	nop
  }

  return (USBD_OK);
 80084ca:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	370c      	adds	r7, #12
 80084d0:	46bd      	mov	sp, r7
 80084d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d6:	4770      	bx	lr

080084d8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b082      	sub	sp, #8
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
 80084e0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80084e2:	6879      	ldr	r1, [r7, #4]
 80084e4:	4805      	ldr	r0, [pc, #20]	; (80084fc <CDC_Receive_FS+0x24>)
 80084e6:	f7fe fbc1 	bl	8006c6c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80084ea:	4804      	ldr	r0, [pc, #16]	; (80084fc <CDC_Receive_FS+0x24>)
 80084ec:	f7fe fc22 	bl	8006d34 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80084f0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80084f2:	4618      	mov	r0, r3
 80084f4:	3708      	adds	r7, #8
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bd80      	pop	{r7, pc}
 80084fa:	bf00      	nop
 80084fc:	2000037c 	.word	0x2000037c

08008500 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b084      	sub	sp, #16
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
 8008508:	460b      	mov	r3, r1
 800850a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800850c:	2300      	movs	r3, #0
 800850e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008510:	4b0d      	ldr	r3, [pc, #52]	; (8008548 <CDC_Transmit_FS+0x48>)
 8008512:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008516:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800851e:	2b00      	cmp	r3, #0
 8008520:	d001      	beq.n	8008526 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008522:	2301      	movs	r3, #1
 8008524:	e00b      	b.n	800853e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008526:	887b      	ldrh	r3, [r7, #2]
 8008528:	461a      	mov	r2, r3
 800852a:	6879      	ldr	r1, [r7, #4]
 800852c:	4806      	ldr	r0, [pc, #24]	; (8008548 <CDC_Transmit_FS+0x48>)
 800852e:	f7fe fb7b 	bl	8006c28 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008532:	4805      	ldr	r0, [pc, #20]	; (8008548 <CDC_Transmit_FS+0x48>)
 8008534:	f7fe fbb8 	bl	8006ca8 <USBD_CDC_TransmitPacket>
 8008538:	4603      	mov	r3, r0
 800853a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800853c:	7bfb      	ldrb	r3, [r7, #15]
}
 800853e:	4618      	mov	r0, r3
 8008540:	3710      	adds	r7, #16
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}
 8008546:	bf00      	nop
 8008548:	2000037c 	.word	0x2000037c

0800854c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800854c:	b480      	push	{r7}
 800854e:	b087      	sub	sp, #28
 8008550:	af00      	add	r7, sp, #0
 8008552:	60f8      	str	r0, [r7, #12]
 8008554:	60b9      	str	r1, [r7, #8]
 8008556:	4613      	mov	r3, r2
 8008558:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800855a:	2300      	movs	r3, #0
 800855c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800855e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008562:	4618      	mov	r0, r3
 8008564:	371c      	adds	r7, #28
 8008566:	46bd      	mov	sp, r7
 8008568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856c:	4770      	bx	lr
	...

08008570 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008570:	b480      	push	{r7}
 8008572:	b083      	sub	sp, #12
 8008574:	af00      	add	r7, sp, #0
 8008576:	4603      	mov	r3, r0
 8008578:	6039      	str	r1, [r7, #0]
 800857a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	2212      	movs	r2, #18
 8008580:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008582:	4b03      	ldr	r3, [pc, #12]	; (8008590 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008584:	4618      	mov	r0, r3
 8008586:	370c      	adds	r7, #12
 8008588:	46bd      	mov	sp, r7
 800858a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858e:	4770      	bx	lr
 8008590:	200000cc 	.word	0x200000cc

08008594 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008594:	b480      	push	{r7}
 8008596:	b083      	sub	sp, #12
 8008598:	af00      	add	r7, sp, #0
 800859a:	4603      	mov	r3, r0
 800859c:	6039      	str	r1, [r7, #0]
 800859e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	2204      	movs	r2, #4
 80085a4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80085a6:	4b03      	ldr	r3, [pc, #12]	; (80085b4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80085a8:	4618      	mov	r0, r3
 80085aa:	370c      	adds	r7, #12
 80085ac:	46bd      	mov	sp, r7
 80085ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b2:	4770      	bx	lr
 80085b4:	200000e0 	.word	0x200000e0

080085b8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b082      	sub	sp, #8
 80085bc:	af00      	add	r7, sp, #0
 80085be:	4603      	mov	r3, r0
 80085c0:	6039      	str	r1, [r7, #0]
 80085c2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80085c4:	79fb      	ldrb	r3, [r7, #7]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d105      	bne.n	80085d6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80085ca:	683a      	ldr	r2, [r7, #0]
 80085cc:	4907      	ldr	r1, [pc, #28]	; (80085ec <USBD_FS_ProductStrDescriptor+0x34>)
 80085ce:	4808      	ldr	r0, [pc, #32]	; (80085f0 <USBD_FS_ProductStrDescriptor+0x38>)
 80085d0:	f7ff fdf8 	bl	80081c4 <USBD_GetString>
 80085d4:	e004      	b.n	80085e0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80085d6:	683a      	ldr	r2, [r7, #0]
 80085d8:	4904      	ldr	r1, [pc, #16]	; (80085ec <USBD_FS_ProductStrDescriptor+0x34>)
 80085da:	4805      	ldr	r0, [pc, #20]	; (80085f0 <USBD_FS_ProductStrDescriptor+0x38>)
 80085dc:	f7ff fdf2 	bl	80081c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80085e0:	4b02      	ldr	r3, [pc, #8]	; (80085ec <USBD_FS_ProductStrDescriptor+0x34>)
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	3708      	adds	r7, #8
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}
 80085ea:	bf00      	nop
 80085ec:	20001658 	.word	0x20001658
 80085f0:	0800c3f8 	.word	0x0800c3f8

080085f4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b082      	sub	sp, #8
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	4603      	mov	r3, r0
 80085fc:	6039      	str	r1, [r7, #0]
 80085fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008600:	683a      	ldr	r2, [r7, #0]
 8008602:	4904      	ldr	r1, [pc, #16]	; (8008614 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008604:	4804      	ldr	r0, [pc, #16]	; (8008618 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008606:	f7ff fddd 	bl	80081c4 <USBD_GetString>
  return USBD_StrDesc;
 800860a:	4b02      	ldr	r3, [pc, #8]	; (8008614 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800860c:	4618      	mov	r0, r3
 800860e:	3708      	adds	r7, #8
 8008610:	46bd      	mov	sp, r7
 8008612:	bd80      	pop	{r7, pc}
 8008614:	20001658 	.word	0x20001658
 8008618:	0800c410 	.word	0x0800c410

0800861c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b082      	sub	sp, #8
 8008620:	af00      	add	r7, sp, #0
 8008622:	4603      	mov	r3, r0
 8008624:	6039      	str	r1, [r7, #0]
 8008626:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	221a      	movs	r2, #26
 800862c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800862e:	f000 f843 	bl	80086b8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008632:	4b02      	ldr	r3, [pc, #8]	; (800863c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008634:	4618      	mov	r0, r3
 8008636:	3708      	adds	r7, #8
 8008638:	46bd      	mov	sp, r7
 800863a:	bd80      	pop	{r7, pc}
 800863c:	200000e4 	.word	0x200000e4

08008640 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b082      	sub	sp, #8
 8008644:	af00      	add	r7, sp, #0
 8008646:	4603      	mov	r3, r0
 8008648:	6039      	str	r1, [r7, #0]
 800864a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800864c:	79fb      	ldrb	r3, [r7, #7]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d105      	bne.n	800865e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008652:	683a      	ldr	r2, [r7, #0]
 8008654:	4907      	ldr	r1, [pc, #28]	; (8008674 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008656:	4808      	ldr	r0, [pc, #32]	; (8008678 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008658:	f7ff fdb4 	bl	80081c4 <USBD_GetString>
 800865c:	e004      	b.n	8008668 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800865e:	683a      	ldr	r2, [r7, #0]
 8008660:	4904      	ldr	r1, [pc, #16]	; (8008674 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008662:	4805      	ldr	r0, [pc, #20]	; (8008678 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008664:	f7ff fdae 	bl	80081c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008668:	4b02      	ldr	r3, [pc, #8]	; (8008674 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800866a:	4618      	mov	r0, r3
 800866c:	3708      	adds	r7, #8
 800866e:	46bd      	mov	sp, r7
 8008670:	bd80      	pop	{r7, pc}
 8008672:	bf00      	nop
 8008674:	20001658 	.word	0x20001658
 8008678:	0800c424 	.word	0x0800c424

0800867c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b082      	sub	sp, #8
 8008680:	af00      	add	r7, sp, #0
 8008682:	4603      	mov	r3, r0
 8008684:	6039      	str	r1, [r7, #0]
 8008686:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008688:	79fb      	ldrb	r3, [r7, #7]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d105      	bne.n	800869a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800868e:	683a      	ldr	r2, [r7, #0]
 8008690:	4907      	ldr	r1, [pc, #28]	; (80086b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008692:	4808      	ldr	r0, [pc, #32]	; (80086b4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008694:	f7ff fd96 	bl	80081c4 <USBD_GetString>
 8008698:	e004      	b.n	80086a4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800869a:	683a      	ldr	r2, [r7, #0]
 800869c:	4904      	ldr	r1, [pc, #16]	; (80086b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800869e:	4805      	ldr	r0, [pc, #20]	; (80086b4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80086a0:	f7ff fd90 	bl	80081c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80086a4:	4b02      	ldr	r3, [pc, #8]	; (80086b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	3708      	adds	r7, #8
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd80      	pop	{r7, pc}
 80086ae:	bf00      	nop
 80086b0:	20001658 	.word	0x20001658
 80086b4:	0800c430 	.word	0x0800c430

080086b8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b084      	sub	sp, #16
 80086bc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80086be:	4b0f      	ldr	r3, [pc, #60]	; (80086fc <Get_SerialNum+0x44>)
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80086c4:	4b0e      	ldr	r3, [pc, #56]	; (8008700 <Get_SerialNum+0x48>)
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80086ca:	4b0e      	ldr	r3, [pc, #56]	; (8008704 <Get_SerialNum+0x4c>)
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80086d0:	68fa      	ldr	r2, [r7, #12]
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	4413      	add	r3, r2
 80086d6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d009      	beq.n	80086f2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80086de:	2208      	movs	r2, #8
 80086e0:	4909      	ldr	r1, [pc, #36]	; (8008708 <Get_SerialNum+0x50>)
 80086e2:	68f8      	ldr	r0, [r7, #12]
 80086e4:	f000 f814 	bl	8008710 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80086e8:	2204      	movs	r2, #4
 80086ea:	4908      	ldr	r1, [pc, #32]	; (800870c <Get_SerialNum+0x54>)
 80086ec:	68b8      	ldr	r0, [r7, #8]
 80086ee:	f000 f80f 	bl	8008710 <IntToUnicode>
  }
}
 80086f2:	bf00      	nop
 80086f4:	3710      	adds	r7, #16
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bd80      	pop	{r7, pc}
 80086fa:	bf00      	nop
 80086fc:	1fff7a10 	.word	0x1fff7a10
 8008700:	1fff7a14 	.word	0x1fff7a14
 8008704:	1fff7a18 	.word	0x1fff7a18
 8008708:	200000e6 	.word	0x200000e6
 800870c:	200000f6 	.word	0x200000f6

08008710 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008710:	b480      	push	{r7}
 8008712:	b087      	sub	sp, #28
 8008714:	af00      	add	r7, sp, #0
 8008716:	60f8      	str	r0, [r7, #12]
 8008718:	60b9      	str	r1, [r7, #8]
 800871a:	4613      	mov	r3, r2
 800871c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800871e:	2300      	movs	r3, #0
 8008720:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008722:	2300      	movs	r3, #0
 8008724:	75fb      	strb	r3, [r7, #23]
 8008726:	e027      	b.n	8008778 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	0f1b      	lsrs	r3, r3, #28
 800872c:	2b09      	cmp	r3, #9
 800872e:	d80b      	bhi.n	8008748 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	0f1b      	lsrs	r3, r3, #28
 8008734:	b2da      	uxtb	r2, r3
 8008736:	7dfb      	ldrb	r3, [r7, #23]
 8008738:	005b      	lsls	r3, r3, #1
 800873a:	4619      	mov	r1, r3
 800873c:	68bb      	ldr	r3, [r7, #8]
 800873e:	440b      	add	r3, r1
 8008740:	3230      	adds	r2, #48	; 0x30
 8008742:	b2d2      	uxtb	r2, r2
 8008744:	701a      	strb	r2, [r3, #0]
 8008746:	e00a      	b.n	800875e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	0f1b      	lsrs	r3, r3, #28
 800874c:	b2da      	uxtb	r2, r3
 800874e:	7dfb      	ldrb	r3, [r7, #23]
 8008750:	005b      	lsls	r3, r3, #1
 8008752:	4619      	mov	r1, r3
 8008754:	68bb      	ldr	r3, [r7, #8]
 8008756:	440b      	add	r3, r1
 8008758:	3237      	adds	r2, #55	; 0x37
 800875a:	b2d2      	uxtb	r2, r2
 800875c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	011b      	lsls	r3, r3, #4
 8008762:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008764:	7dfb      	ldrb	r3, [r7, #23]
 8008766:	005b      	lsls	r3, r3, #1
 8008768:	3301      	adds	r3, #1
 800876a:	68ba      	ldr	r2, [r7, #8]
 800876c:	4413      	add	r3, r2
 800876e:	2200      	movs	r2, #0
 8008770:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008772:	7dfb      	ldrb	r3, [r7, #23]
 8008774:	3301      	adds	r3, #1
 8008776:	75fb      	strb	r3, [r7, #23]
 8008778:	7dfa      	ldrb	r2, [r7, #23]
 800877a:	79fb      	ldrb	r3, [r7, #7]
 800877c:	429a      	cmp	r2, r3
 800877e:	d3d3      	bcc.n	8008728 <IntToUnicode+0x18>
  }
}
 8008780:	bf00      	nop
 8008782:	bf00      	nop
 8008784:	371c      	adds	r7, #28
 8008786:	46bd      	mov	sp, r7
 8008788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878c:	4770      	bx	lr
	...

08008790 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b08a      	sub	sp, #40	; 0x28
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008798:	f107 0314 	add.w	r3, r7, #20
 800879c:	2200      	movs	r2, #0
 800879e:	601a      	str	r2, [r3, #0]
 80087a0:	605a      	str	r2, [r3, #4]
 80087a2:	609a      	str	r2, [r3, #8]
 80087a4:	60da      	str	r2, [r3, #12]
 80087a6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80087b0:	d13a      	bne.n	8008828 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80087b2:	2300      	movs	r3, #0
 80087b4:	613b      	str	r3, [r7, #16]
 80087b6:	4b1e      	ldr	r3, [pc, #120]	; (8008830 <HAL_PCD_MspInit+0xa0>)
 80087b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087ba:	4a1d      	ldr	r2, [pc, #116]	; (8008830 <HAL_PCD_MspInit+0xa0>)
 80087bc:	f043 0301 	orr.w	r3, r3, #1
 80087c0:	6313      	str	r3, [r2, #48]	; 0x30
 80087c2:	4b1b      	ldr	r3, [pc, #108]	; (8008830 <HAL_PCD_MspInit+0xa0>)
 80087c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087c6:	f003 0301 	and.w	r3, r3, #1
 80087ca:	613b      	str	r3, [r7, #16]
 80087cc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80087ce:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80087d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80087d4:	2302      	movs	r3, #2
 80087d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087d8:	2300      	movs	r3, #0
 80087da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80087dc:	2303      	movs	r3, #3
 80087de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80087e0:	230a      	movs	r3, #10
 80087e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80087e4:	f107 0314 	add.w	r3, r7, #20
 80087e8:	4619      	mov	r1, r3
 80087ea:	4812      	ldr	r0, [pc, #72]	; (8008834 <HAL_PCD_MspInit+0xa4>)
 80087ec:	f7f9 f980 	bl	8001af0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80087f0:	4b0f      	ldr	r3, [pc, #60]	; (8008830 <HAL_PCD_MspInit+0xa0>)
 80087f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087f4:	4a0e      	ldr	r2, [pc, #56]	; (8008830 <HAL_PCD_MspInit+0xa0>)
 80087f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087fa:	6353      	str	r3, [r2, #52]	; 0x34
 80087fc:	2300      	movs	r3, #0
 80087fe:	60fb      	str	r3, [r7, #12]
 8008800:	4b0b      	ldr	r3, [pc, #44]	; (8008830 <HAL_PCD_MspInit+0xa0>)
 8008802:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008804:	4a0a      	ldr	r2, [pc, #40]	; (8008830 <HAL_PCD_MspInit+0xa0>)
 8008806:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800880a:	6453      	str	r3, [r2, #68]	; 0x44
 800880c:	4b08      	ldr	r3, [pc, #32]	; (8008830 <HAL_PCD_MspInit+0xa0>)
 800880e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008810:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008814:	60fb      	str	r3, [r7, #12]
 8008816:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008818:	2200      	movs	r2, #0
 800881a:	2100      	movs	r1, #0
 800881c:	2043      	movs	r0, #67	; 0x43
 800881e:	f7f9 f930 	bl	8001a82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008822:	2043      	movs	r0, #67	; 0x43
 8008824:	f7f9 f949 	bl	8001aba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008828:	bf00      	nop
 800882a:	3728      	adds	r7, #40	; 0x28
 800882c:	46bd      	mov	sp, r7
 800882e:	bd80      	pop	{r7, pc}
 8008830:	40023800 	.word	0x40023800
 8008834:	40020000 	.word	0x40020000

08008838 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b082      	sub	sp, #8
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800884c:	4619      	mov	r1, r3
 800884e:	4610      	mov	r0, r2
 8008850:	f7fe fb59 	bl	8006f06 <USBD_LL_SetupStage>
}
 8008854:	bf00      	nop
 8008856:	3708      	adds	r7, #8
 8008858:	46bd      	mov	sp, r7
 800885a:	bd80      	pop	{r7, pc}

0800885c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b082      	sub	sp, #8
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
 8008864:	460b      	mov	r3, r1
 8008866:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800886e:	78fa      	ldrb	r2, [r7, #3]
 8008870:	6879      	ldr	r1, [r7, #4]
 8008872:	4613      	mov	r3, r2
 8008874:	00db      	lsls	r3, r3, #3
 8008876:	4413      	add	r3, r2
 8008878:	009b      	lsls	r3, r3, #2
 800887a:	440b      	add	r3, r1
 800887c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008880:	681a      	ldr	r2, [r3, #0]
 8008882:	78fb      	ldrb	r3, [r7, #3]
 8008884:	4619      	mov	r1, r3
 8008886:	f7fe fb93 	bl	8006fb0 <USBD_LL_DataOutStage>
}
 800888a:	bf00      	nop
 800888c:	3708      	adds	r7, #8
 800888e:	46bd      	mov	sp, r7
 8008890:	bd80      	pop	{r7, pc}

08008892 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008892:	b580      	push	{r7, lr}
 8008894:	b082      	sub	sp, #8
 8008896:	af00      	add	r7, sp, #0
 8008898:	6078      	str	r0, [r7, #4]
 800889a:	460b      	mov	r3, r1
 800889c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80088a4:	78fa      	ldrb	r2, [r7, #3]
 80088a6:	6879      	ldr	r1, [r7, #4]
 80088a8:	4613      	mov	r3, r2
 80088aa:	00db      	lsls	r3, r3, #3
 80088ac:	4413      	add	r3, r2
 80088ae:	009b      	lsls	r3, r3, #2
 80088b0:	440b      	add	r3, r1
 80088b2:	334c      	adds	r3, #76	; 0x4c
 80088b4:	681a      	ldr	r2, [r3, #0]
 80088b6:	78fb      	ldrb	r3, [r7, #3]
 80088b8:	4619      	mov	r1, r3
 80088ba:	f7fe fc2c 	bl	8007116 <USBD_LL_DataInStage>
}
 80088be:	bf00      	nop
 80088c0:	3708      	adds	r7, #8
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bd80      	pop	{r7, pc}

080088c6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088c6:	b580      	push	{r7, lr}
 80088c8:	b082      	sub	sp, #8
 80088ca:	af00      	add	r7, sp, #0
 80088cc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80088d4:	4618      	mov	r0, r3
 80088d6:	f7fe fd60 	bl	800739a <USBD_LL_SOF>
}
 80088da:	bf00      	nop
 80088dc:	3708      	adds	r7, #8
 80088de:	46bd      	mov	sp, r7
 80088e0:	bd80      	pop	{r7, pc}

080088e2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088e2:	b580      	push	{r7, lr}
 80088e4:	b084      	sub	sp, #16
 80088e6:	af00      	add	r7, sp, #0
 80088e8:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80088ea:	2301      	movs	r3, #1
 80088ec:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	68db      	ldr	r3, [r3, #12]
 80088f2:	2b02      	cmp	r3, #2
 80088f4:	d001      	beq.n	80088fa <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80088f6:	f7f8 fda5 	bl	8001444 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008900:	7bfa      	ldrb	r2, [r7, #15]
 8008902:	4611      	mov	r1, r2
 8008904:	4618      	mov	r0, r3
 8008906:	f7fe fd0a 	bl	800731e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008910:	4618      	mov	r0, r3
 8008912:	f7fe fcb2 	bl	800727a <USBD_LL_Reset>
}
 8008916:	bf00      	nop
 8008918:	3710      	adds	r7, #16
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}
	...

08008920 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b082      	sub	sp, #8
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800892e:	4618      	mov	r0, r3
 8008930:	f7fe fd05 	bl	800733e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	687a      	ldr	r2, [r7, #4]
 8008940:	6812      	ldr	r2, [r2, #0]
 8008942:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008946:	f043 0301 	orr.w	r3, r3, #1
 800894a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	6a1b      	ldr	r3, [r3, #32]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d005      	beq.n	8008960 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008954:	4b04      	ldr	r3, [pc, #16]	; (8008968 <HAL_PCD_SuspendCallback+0x48>)
 8008956:	691b      	ldr	r3, [r3, #16]
 8008958:	4a03      	ldr	r2, [pc, #12]	; (8008968 <HAL_PCD_SuspendCallback+0x48>)
 800895a:	f043 0306 	orr.w	r3, r3, #6
 800895e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008960:	bf00      	nop
 8008962:	3708      	adds	r7, #8
 8008964:	46bd      	mov	sp, r7
 8008966:	bd80      	pop	{r7, pc}
 8008968:	e000ed00 	.word	0xe000ed00

0800896c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b082      	sub	sp, #8
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800897a:	4618      	mov	r0, r3
 800897c:	f7fe fcf5 	bl	800736a <USBD_LL_Resume>
}
 8008980:	bf00      	nop
 8008982:	3708      	adds	r7, #8
 8008984:	46bd      	mov	sp, r7
 8008986:	bd80      	pop	{r7, pc}

08008988 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b082      	sub	sp, #8
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
 8008990:	460b      	mov	r3, r1
 8008992:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800899a:	78fa      	ldrb	r2, [r7, #3]
 800899c:	4611      	mov	r1, r2
 800899e:	4618      	mov	r0, r3
 80089a0:	f7fe fd4d 	bl	800743e <USBD_LL_IsoOUTIncomplete>
}
 80089a4:	bf00      	nop
 80089a6:	3708      	adds	r7, #8
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}

080089ac <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b082      	sub	sp, #8
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
 80089b4:	460b      	mov	r3, r1
 80089b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80089be:	78fa      	ldrb	r2, [r7, #3]
 80089c0:	4611      	mov	r1, r2
 80089c2:	4618      	mov	r0, r3
 80089c4:	f7fe fd09 	bl	80073da <USBD_LL_IsoINIncomplete>
}
 80089c8:	bf00      	nop
 80089ca:	3708      	adds	r7, #8
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}

080089d0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b082      	sub	sp, #8
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80089de:	4618      	mov	r0, r3
 80089e0:	f7fe fd5f 	bl	80074a2 <USBD_LL_DevConnected>
}
 80089e4:	bf00      	nop
 80089e6:	3708      	adds	r7, #8
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bd80      	pop	{r7, pc}

080089ec <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b082      	sub	sp, #8
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80089fa:	4618      	mov	r0, r3
 80089fc:	f7fe fd5c 	bl	80074b8 <USBD_LL_DevDisconnected>
}
 8008a00:	bf00      	nop
 8008a02:	3708      	adds	r7, #8
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd80      	pop	{r7, pc}

08008a08 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b082      	sub	sp, #8
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	781b      	ldrb	r3, [r3, #0]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d13c      	bne.n	8008a92 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008a18:	4a20      	ldr	r2, [pc, #128]	; (8008a9c <USBD_LL_Init+0x94>)
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	4a1e      	ldr	r2, [pc, #120]	; (8008a9c <USBD_LL_Init+0x94>)
 8008a24:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008a28:	4b1c      	ldr	r3, [pc, #112]	; (8008a9c <USBD_LL_Init+0x94>)
 8008a2a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008a2e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008a30:	4b1a      	ldr	r3, [pc, #104]	; (8008a9c <USBD_LL_Init+0x94>)
 8008a32:	2204      	movs	r2, #4
 8008a34:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008a36:	4b19      	ldr	r3, [pc, #100]	; (8008a9c <USBD_LL_Init+0x94>)
 8008a38:	2202      	movs	r2, #2
 8008a3a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008a3c:	4b17      	ldr	r3, [pc, #92]	; (8008a9c <USBD_LL_Init+0x94>)
 8008a3e:	2200      	movs	r2, #0
 8008a40:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008a42:	4b16      	ldr	r3, [pc, #88]	; (8008a9c <USBD_LL_Init+0x94>)
 8008a44:	2202      	movs	r2, #2
 8008a46:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008a48:	4b14      	ldr	r3, [pc, #80]	; (8008a9c <USBD_LL_Init+0x94>)
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008a4e:	4b13      	ldr	r3, [pc, #76]	; (8008a9c <USBD_LL_Init+0x94>)
 8008a50:	2200      	movs	r2, #0
 8008a52:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008a54:	4b11      	ldr	r3, [pc, #68]	; (8008a9c <USBD_LL_Init+0x94>)
 8008a56:	2200      	movs	r2, #0
 8008a58:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008a5a:	4b10      	ldr	r3, [pc, #64]	; (8008a9c <USBD_LL_Init+0x94>)
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008a60:	4b0e      	ldr	r3, [pc, #56]	; (8008a9c <USBD_LL_Init+0x94>)
 8008a62:	2200      	movs	r2, #0
 8008a64:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008a66:	480d      	ldr	r0, [pc, #52]	; (8008a9c <USBD_LL_Init+0x94>)
 8008a68:	f7fa f98f 	bl	8002d8a <HAL_PCD_Init>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d001      	beq.n	8008a76 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008a72:	f7f8 fce7 	bl	8001444 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008a76:	2180      	movs	r1, #128	; 0x80
 8008a78:	4808      	ldr	r0, [pc, #32]	; (8008a9c <USBD_LL_Init+0x94>)
 8008a7a:	f7fb fbe6 	bl	800424a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008a7e:	2240      	movs	r2, #64	; 0x40
 8008a80:	2100      	movs	r1, #0
 8008a82:	4806      	ldr	r0, [pc, #24]	; (8008a9c <USBD_LL_Init+0x94>)
 8008a84:	f7fb fb9a 	bl	80041bc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008a88:	2280      	movs	r2, #128	; 0x80
 8008a8a:	2101      	movs	r1, #1
 8008a8c:	4803      	ldr	r0, [pc, #12]	; (8008a9c <USBD_LL_Init+0x94>)
 8008a8e:	f7fb fb95 	bl	80041bc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008a92:	2300      	movs	r3, #0
}
 8008a94:	4618      	mov	r0, r3
 8008a96:	3708      	adds	r7, #8
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	bd80      	pop	{r7, pc}
 8008a9c:	20001858 	.word	0x20001858

08008aa0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b084      	sub	sp, #16
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008aac:	2300      	movs	r3, #0
 8008aae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	f7fa fa84 	bl	8002fc4 <HAL_PCD_Start>
 8008abc:	4603      	mov	r3, r0
 8008abe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ac0:	7bfb      	ldrb	r3, [r7, #15]
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	f000 f942 	bl	8008d4c <USBD_Get_USB_Status>
 8008ac8:	4603      	mov	r3, r0
 8008aca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008acc:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ace:	4618      	mov	r0, r3
 8008ad0:	3710      	adds	r7, #16
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bd80      	pop	{r7, pc}

08008ad6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008ad6:	b580      	push	{r7, lr}
 8008ad8:	b084      	sub	sp, #16
 8008ada:	af00      	add	r7, sp, #0
 8008adc:	6078      	str	r0, [r7, #4]
 8008ade:	4608      	mov	r0, r1
 8008ae0:	4611      	mov	r1, r2
 8008ae2:	461a      	mov	r2, r3
 8008ae4:	4603      	mov	r3, r0
 8008ae6:	70fb      	strb	r3, [r7, #3]
 8008ae8:	460b      	mov	r3, r1
 8008aea:	70bb      	strb	r3, [r7, #2]
 8008aec:	4613      	mov	r3, r2
 8008aee:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008af0:	2300      	movs	r3, #0
 8008af2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008af4:	2300      	movs	r3, #0
 8008af6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008afe:	78bb      	ldrb	r3, [r7, #2]
 8008b00:	883a      	ldrh	r2, [r7, #0]
 8008b02:	78f9      	ldrb	r1, [r7, #3]
 8008b04:	f7fa ff55 	bl	80039b2 <HAL_PCD_EP_Open>
 8008b08:	4603      	mov	r3, r0
 8008b0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b0c:	7bfb      	ldrb	r3, [r7, #15]
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f000 f91c 	bl	8008d4c <USBD_Get_USB_Status>
 8008b14:	4603      	mov	r3, r0
 8008b16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b18:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	3710      	adds	r7, #16
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd80      	pop	{r7, pc}

08008b22 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b22:	b580      	push	{r7, lr}
 8008b24:	b084      	sub	sp, #16
 8008b26:	af00      	add	r7, sp, #0
 8008b28:	6078      	str	r0, [r7, #4]
 8008b2a:	460b      	mov	r3, r1
 8008b2c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b2e:	2300      	movs	r3, #0
 8008b30:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b32:	2300      	movs	r3, #0
 8008b34:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008b3c:	78fa      	ldrb	r2, [r7, #3]
 8008b3e:	4611      	mov	r1, r2
 8008b40:	4618      	mov	r0, r3
 8008b42:	f7fa ff9e 	bl	8003a82 <HAL_PCD_EP_Close>
 8008b46:	4603      	mov	r3, r0
 8008b48:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b4a:	7bfb      	ldrb	r3, [r7, #15]
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	f000 f8fd 	bl	8008d4c <USBD_Get_USB_Status>
 8008b52:	4603      	mov	r3, r0
 8008b54:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b56:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b58:	4618      	mov	r0, r3
 8008b5a:	3710      	adds	r7, #16
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	bd80      	pop	{r7, pc}

08008b60 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b084      	sub	sp, #16
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
 8008b68:	460b      	mov	r3, r1
 8008b6a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b70:	2300      	movs	r3, #0
 8008b72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008b7a:	78fa      	ldrb	r2, [r7, #3]
 8008b7c:	4611      	mov	r1, r2
 8008b7e:	4618      	mov	r0, r3
 8008b80:	f7fb f876 	bl	8003c70 <HAL_PCD_EP_SetStall>
 8008b84:	4603      	mov	r3, r0
 8008b86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b88:	7bfb      	ldrb	r3, [r7, #15]
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f000 f8de 	bl	8008d4c <USBD_Get_USB_Status>
 8008b90:	4603      	mov	r3, r0
 8008b92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b94:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b96:	4618      	mov	r0, r3
 8008b98:	3710      	adds	r7, #16
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bd80      	pop	{r7, pc}

08008b9e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b9e:	b580      	push	{r7, lr}
 8008ba0:	b084      	sub	sp, #16
 8008ba2:	af00      	add	r7, sp, #0
 8008ba4:	6078      	str	r0, [r7, #4]
 8008ba6:	460b      	mov	r3, r1
 8008ba8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008baa:	2300      	movs	r3, #0
 8008bac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bae:	2300      	movs	r3, #0
 8008bb0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008bb8:	78fa      	ldrb	r2, [r7, #3]
 8008bba:	4611      	mov	r1, r2
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	f7fb f8bb 	bl	8003d38 <HAL_PCD_EP_ClrStall>
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008bc6:	7bfb      	ldrb	r3, [r7, #15]
 8008bc8:	4618      	mov	r0, r3
 8008bca:	f000 f8bf 	bl	8008d4c <USBD_Get_USB_Status>
 8008bce:	4603      	mov	r3, r0
 8008bd0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008bd2:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	3710      	adds	r7, #16
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	bd80      	pop	{r7, pc}

08008bdc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008bdc:	b480      	push	{r7}
 8008bde:	b085      	sub	sp, #20
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
 8008be4:	460b      	mov	r3, r1
 8008be6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008bee:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008bf0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	da0b      	bge.n	8008c10 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008bf8:	78fb      	ldrb	r3, [r7, #3]
 8008bfa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008bfe:	68f9      	ldr	r1, [r7, #12]
 8008c00:	4613      	mov	r3, r2
 8008c02:	00db      	lsls	r3, r3, #3
 8008c04:	4413      	add	r3, r2
 8008c06:	009b      	lsls	r3, r3, #2
 8008c08:	440b      	add	r3, r1
 8008c0a:	333e      	adds	r3, #62	; 0x3e
 8008c0c:	781b      	ldrb	r3, [r3, #0]
 8008c0e:	e00b      	b.n	8008c28 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008c10:	78fb      	ldrb	r3, [r7, #3]
 8008c12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008c16:	68f9      	ldr	r1, [r7, #12]
 8008c18:	4613      	mov	r3, r2
 8008c1a:	00db      	lsls	r3, r3, #3
 8008c1c:	4413      	add	r3, r2
 8008c1e:	009b      	lsls	r3, r3, #2
 8008c20:	440b      	add	r3, r1
 8008c22:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8008c26:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008c28:	4618      	mov	r0, r3
 8008c2a:	3714      	adds	r7, #20
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c32:	4770      	bx	lr

08008c34 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b084      	sub	sp, #16
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
 8008c3c:	460b      	mov	r3, r1
 8008c3e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c40:	2300      	movs	r3, #0
 8008c42:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c44:	2300      	movs	r3, #0
 8008c46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008c4e:	78fa      	ldrb	r2, [r7, #3]
 8008c50:	4611      	mov	r1, r2
 8008c52:	4618      	mov	r0, r3
 8008c54:	f7fa fe88 	bl	8003968 <HAL_PCD_SetAddress>
 8008c58:	4603      	mov	r3, r0
 8008c5a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c5c:	7bfb      	ldrb	r3, [r7, #15]
 8008c5e:	4618      	mov	r0, r3
 8008c60:	f000 f874 	bl	8008d4c <USBD_Get_USB_Status>
 8008c64:	4603      	mov	r3, r0
 8008c66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c68:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	3710      	adds	r7, #16
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}

08008c72 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008c72:	b580      	push	{r7, lr}
 8008c74:	b086      	sub	sp, #24
 8008c76:	af00      	add	r7, sp, #0
 8008c78:	60f8      	str	r0, [r7, #12]
 8008c7a:	607a      	str	r2, [r7, #4]
 8008c7c:	603b      	str	r3, [r7, #0]
 8008c7e:	460b      	mov	r3, r1
 8008c80:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c82:	2300      	movs	r3, #0
 8008c84:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c86:	2300      	movs	r3, #0
 8008c88:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008c90:	7af9      	ldrb	r1, [r7, #11]
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	687a      	ldr	r2, [r7, #4]
 8008c96:	f7fa ffa1 	bl	8003bdc <HAL_PCD_EP_Transmit>
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c9e:	7dfb      	ldrb	r3, [r7, #23]
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	f000 f853 	bl	8008d4c <USBD_Get_USB_Status>
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008caa:	7dbb      	ldrb	r3, [r7, #22]
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	3718      	adds	r7, #24
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}

08008cb4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b086      	sub	sp, #24
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	60f8      	str	r0, [r7, #12]
 8008cbc:	607a      	str	r2, [r7, #4]
 8008cbe:	603b      	str	r3, [r7, #0]
 8008cc0:	460b      	mov	r3, r1
 8008cc2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cc8:	2300      	movs	r3, #0
 8008cca:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008cd2:	7af9      	ldrb	r1, [r7, #11]
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	687a      	ldr	r2, [r7, #4]
 8008cd8:	f7fa ff1d 	bl	8003b16 <HAL_PCD_EP_Receive>
 8008cdc:	4603      	mov	r3, r0
 8008cde:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ce0:	7dfb      	ldrb	r3, [r7, #23]
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	f000 f832 	bl	8008d4c <USBD_Get_USB_Status>
 8008ce8:	4603      	mov	r3, r0
 8008cea:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008cec:	7dbb      	ldrb	r3, [r7, #22]
}
 8008cee:	4618      	mov	r0, r3
 8008cf0:	3718      	adds	r7, #24
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	bd80      	pop	{r7, pc}

08008cf6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008cf6:	b580      	push	{r7, lr}
 8008cf8:	b082      	sub	sp, #8
 8008cfa:	af00      	add	r7, sp, #0
 8008cfc:	6078      	str	r0, [r7, #4]
 8008cfe:	460b      	mov	r3, r1
 8008d00:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008d08:	78fa      	ldrb	r2, [r7, #3]
 8008d0a:	4611      	mov	r1, r2
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f7fa ff4d 	bl	8003bac <HAL_PCD_EP_GetRxCount>
 8008d12:	4603      	mov	r3, r0
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	3708      	adds	r7, #8
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bd80      	pop	{r7, pc}

08008d1c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008d1c:	b480      	push	{r7}
 8008d1e:	b083      	sub	sp, #12
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008d24:	4b03      	ldr	r3, [pc, #12]	; (8008d34 <USBD_static_malloc+0x18>)
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	370c      	adds	r7, #12
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d30:	4770      	bx	lr
 8008d32:	bf00      	nop
 8008d34:	20001d64 	.word	0x20001d64

08008d38 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008d38:	b480      	push	{r7}
 8008d3a:	b083      	sub	sp, #12
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]

}
 8008d40:	bf00      	nop
 8008d42:	370c      	adds	r7, #12
 8008d44:	46bd      	mov	sp, r7
 8008d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4a:	4770      	bx	lr

08008d4c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008d4c:	b480      	push	{r7}
 8008d4e:	b085      	sub	sp, #20
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	4603      	mov	r3, r0
 8008d54:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d56:	2300      	movs	r3, #0
 8008d58:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008d5a:	79fb      	ldrb	r3, [r7, #7]
 8008d5c:	2b03      	cmp	r3, #3
 8008d5e:	d817      	bhi.n	8008d90 <USBD_Get_USB_Status+0x44>
 8008d60:	a201      	add	r2, pc, #4	; (adr r2, 8008d68 <USBD_Get_USB_Status+0x1c>)
 8008d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d66:	bf00      	nop
 8008d68:	08008d79 	.word	0x08008d79
 8008d6c:	08008d7f 	.word	0x08008d7f
 8008d70:	08008d85 	.word	0x08008d85
 8008d74:	08008d8b 	.word	0x08008d8b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008d78:	2300      	movs	r3, #0
 8008d7a:	73fb      	strb	r3, [r7, #15]
    break;
 8008d7c:	e00b      	b.n	8008d96 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008d7e:	2303      	movs	r3, #3
 8008d80:	73fb      	strb	r3, [r7, #15]
    break;
 8008d82:	e008      	b.n	8008d96 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008d84:	2301      	movs	r3, #1
 8008d86:	73fb      	strb	r3, [r7, #15]
    break;
 8008d88:	e005      	b.n	8008d96 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008d8a:	2303      	movs	r3, #3
 8008d8c:	73fb      	strb	r3, [r7, #15]
    break;
 8008d8e:	e002      	b.n	8008d96 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008d90:	2303      	movs	r3, #3
 8008d92:	73fb      	strb	r3, [r7, #15]
    break;
 8008d94:	bf00      	nop
  }
  return usb_status;
 8008d96:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	3714      	adds	r7, #20
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da2:	4770      	bx	lr

08008da4 <__errno>:
 8008da4:	4b01      	ldr	r3, [pc, #4]	; (8008dac <__errno+0x8>)
 8008da6:	6818      	ldr	r0, [r3, #0]
 8008da8:	4770      	bx	lr
 8008daa:	bf00      	nop
 8008dac:	20000100 	.word	0x20000100

08008db0 <__libc_init_array>:
 8008db0:	b570      	push	{r4, r5, r6, lr}
 8008db2:	4d0d      	ldr	r5, [pc, #52]	; (8008de8 <__libc_init_array+0x38>)
 8008db4:	4c0d      	ldr	r4, [pc, #52]	; (8008dec <__libc_init_array+0x3c>)
 8008db6:	1b64      	subs	r4, r4, r5
 8008db8:	10a4      	asrs	r4, r4, #2
 8008dba:	2600      	movs	r6, #0
 8008dbc:	42a6      	cmp	r6, r4
 8008dbe:	d109      	bne.n	8008dd4 <__libc_init_array+0x24>
 8008dc0:	4d0b      	ldr	r5, [pc, #44]	; (8008df0 <__libc_init_array+0x40>)
 8008dc2:	4c0c      	ldr	r4, [pc, #48]	; (8008df4 <__libc_init_array+0x44>)
 8008dc4:	f003 faea 	bl	800c39c <_init>
 8008dc8:	1b64      	subs	r4, r4, r5
 8008dca:	10a4      	asrs	r4, r4, #2
 8008dcc:	2600      	movs	r6, #0
 8008dce:	42a6      	cmp	r6, r4
 8008dd0:	d105      	bne.n	8008dde <__libc_init_array+0x2e>
 8008dd2:	bd70      	pop	{r4, r5, r6, pc}
 8008dd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008dd8:	4798      	blx	r3
 8008dda:	3601      	adds	r6, #1
 8008ddc:	e7ee      	b.n	8008dbc <__libc_init_array+0xc>
 8008dde:	f855 3b04 	ldr.w	r3, [r5], #4
 8008de2:	4798      	blx	r3
 8008de4:	3601      	adds	r6, #1
 8008de6:	e7f2      	b.n	8008dce <__libc_init_array+0x1e>
 8008de8:	0800c854 	.word	0x0800c854
 8008dec:	0800c854 	.word	0x0800c854
 8008df0:	0800c854 	.word	0x0800c854
 8008df4:	0800c858 	.word	0x0800c858

08008df8 <memset>:
 8008df8:	4402      	add	r2, r0
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	4293      	cmp	r3, r2
 8008dfe:	d100      	bne.n	8008e02 <memset+0xa>
 8008e00:	4770      	bx	lr
 8008e02:	f803 1b01 	strb.w	r1, [r3], #1
 8008e06:	e7f9      	b.n	8008dfc <memset+0x4>

08008e08 <__cvt>:
 8008e08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008e0c:	ec55 4b10 	vmov	r4, r5, d0
 8008e10:	2d00      	cmp	r5, #0
 8008e12:	460e      	mov	r6, r1
 8008e14:	4619      	mov	r1, r3
 8008e16:	462b      	mov	r3, r5
 8008e18:	bfbb      	ittet	lt
 8008e1a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008e1e:	461d      	movlt	r5, r3
 8008e20:	2300      	movge	r3, #0
 8008e22:	232d      	movlt	r3, #45	; 0x2d
 8008e24:	700b      	strb	r3, [r1, #0]
 8008e26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008e28:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008e2c:	4691      	mov	r9, r2
 8008e2e:	f023 0820 	bic.w	r8, r3, #32
 8008e32:	bfbc      	itt	lt
 8008e34:	4622      	movlt	r2, r4
 8008e36:	4614      	movlt	r4, r2
 8008e38:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008e3c:	d005      	beq.n	8008e4a <__cvt+0x42>
 8008e3e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008e42:	d100      	bne.n	8008e46 <__cvt+0x3e>
 8008e44:	3601      	adds	r6, #1
 8008e46:	2102      	movs	r1, #2
 8008e48:	e000      	b.n	8008e4c <__cvt+0x44>
 8008e4a:	2103      	movs	r1, #3
 8008e4c:	ab03      	add	r3, sp, #12
 8008e4e:	9301      	str	r3, [sp, #4]
 8008e50:	ab02      	add	r3, sp, #8
 8008e52:	9300      	str	r3, [sp, #0]
 8008e54:	ec45 4b10 	vmov	d0, r4, r5
 8008e58:	4653      	mov	r3, sl
 8008e5a:	4632      	mov	r2, r6
 8008e5c:	f000 fd00 	bl	8009860 <_dtoa_r>
 8008e60:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008e64:	4607      	mov	r7, r0
 8008e66:	d102      	bne.n	8008e6e <__cvt+0x66>
 8008e68:	f019 0f01 	tst.w	r9, #1
 8008e6c:	d022      	beq.n	8008eb4 <__cvt+0xac>
 8008e6e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008e72:	eb07 0906 	add.w	r9, r7, r6
 8008e76:	d110      	bne.n	8008e9a <__cvt+0x92>
 8008e78:	783b      	ldrb	r3, [r7, #0]
 8008e7a:	2b30      	cmp	r3, #48	; 0x30
 8008e7c:	d10a      	bne.n	8008e94 <__cvt+0x8c>
 8008e7e:	2200      	movs	r2, #0
 8008e80:	2300      	movs	r3, #0
 8008e82:	4620      	mov	r0, r4
 8008e84:	4629      	mov	r1, r5
 8008e86:	f7f7 fe27 	bl	8000ad8 <__aeabi_dcmpeq>
 8008e8a:	b918      	cbnz	r0, 8008e94 <__cvt+0x8c>
 8008e8c:	f1c6 0601 	rsb	r6, r6, #1
 8008e90:	f8ca 6000 	str.w	r6, [sl]
 8008e94:	f8da 3000 	ldr.w	r3, [sl]
 8008e98:	4499      	add	r9, r3
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	4620      	mov	r0, r4
 8008ea0:	4629      	mov	r1, r5
 8008ea2:	f7f7 fe19 	bl	8000ad8 <__aeabi_dcmpeq>
 8008ea6:	b108      	cbz	r0, 8008eac <__cvt+0xa4>
 8008ea8:	f8cd 900c 	str.w	r9, [sp, #12]
 8008eac:	2230      	movs	r2, #48	; 0x30
 8008eae:	9b03      	ldr	r3, [sp, #12]
 8008eb0:	454b      	cmp	r3, r9
 8008eb2:	d307      	bcc.n	8008ec4 <__cvt+0xbc>
 8008eb4:	9b03      	ldr	r3, [sp, #12]
 8008eb6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008eb8:	1bdb      	subs	r3, r3, r7
 8008eba:	4638      	mov	r0, r7
 8008ebc:	6013      	str	r3, [r2, #0]
 8008ebe:	b004      	add	sp, #16
 8008ec0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ec4:	1c59      	adds	r1, r3, #1
 8008ec6:	9103      	str	r1, [sp, #12]
 8008ec8:	701a      	strb	r2, [r3, #0]
 8008eca:	e7f0      	b.n	8008eae <__cvt+0xa6>

08008ecc <__exponent>:
 8008ecc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008ece:	4603      	mov	r3, r0
 8008ed0:	2900      	cmp	r1, #0
 8008ed2:	bfb8      	it	lt
 8008ed4:	4249      	neglt	r1, r1
 8008ed6:	f803 2b02 	strb.w	r2, [r3], #2
 8008eda:	bfb4      	ite	lt
 8008edc:	222d      	movlt	r2, #45	; 0x2d
 8008ede:	222b      	movge	r2, #43	; 0x2b
 8008ee0:	2909      	cmp	r1, #9
 8008ee2:	7042      	strb	r2, [r0, #1]
 8008ee4:	dd2a      	ble.n	8008f3c <__exponent+0x70>
 8008ee6:	f10d 0407 	add.w	r4, sp, #7
 8008eea:	46a4      	mov	ip, r4
 8008eec:	270a      	movs	r7, #10
 8008eee:	46a6      	mov	lr, r4
 8008ef0:	460a      	mov	r2, r1
 8008ef2:	fb91 f6f7 	sdiv	r6, r1, r7
 8008ef6:	fb07 1516 	mls	r5, r7, r6, r1
 8008efa:	3530      	adds	r5, #48	; 0x30
 8008efc:	2a63      	cmp	r2, #99	; 0x63
 8008efe:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8008f02:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008f06:	4631      	mov	r1, r6
 8008f08:	dcf1      	bgt.n	8008eee <__exponent+0x22>
 8008f0a:	3130      	adds	r1, #48	; 0x30
 8008f0c:	f1ae 0502 	sub.w	r5, lr, #2
 8008f10:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008f14:	1c44      	adds	r4, r0, #1
 8008f16:	4629      	mov	r1, r5
 8008f18:	4561      	cmp	r1, ip
 8008f1a:	d30a      	bcc.n	8008f32 <__exponent+0x66>
 8008f1c:	f10d 0209 	add.w	r2, sp, #9
 8008f20:	eba2 020e 	sub.w	r2, r2, lr
 8008f24:	4565      	cmp	r5, ip
 8008f26:	bf88      	it	hi
 8008f28:	2200      	movhi	r2, #0
 8008f2a:	4413      	add	r3, r2
 8008f2c:	1a18      	subs	r0, r3, r0
 8008f2e:	b003      	add	sp, #12
 8008f30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008f36:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008f3a:	e7ed      	b.n	8008f18 <__exponent+0x4c>
 8008f3c:	2330      	movs	r3, #48	; 0x30
 8008f3e:	3130      	adds	r1, #48	; 0x30
 8008f40:	7083      	strb	r3, [r0, #2]
 8008f42:	70c1      	strb	r1, [r0, #3]
 8008f44:	1d03      	adds	r3, r0, #4
 8008f46:	e7f1      	b.n	8008f2c <__exponent+0x60>

08008f48 <_printf_float>:
 8008f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f4c:	ed2d 8b02 	vpush	{d8}
 8008f50:	b08d      	sub	sp, #52	; 0x34
 8008f52:	460c      	mov	r4, r1
 8008f54:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008f58:	4616      	mov	r6, r2
 8008f5a:	461f      	mov	r7, r3
 8008f5c:	4605      	mov	r5, r0
 8008f5e:	f001 fa6d 	bl	800a43c <_localeconv_r>
 8008f62:	f8d0 a000 	ldr.w	sl, [r0]
 8008f66:	4650      	mov	r0, sl
 8008f68:	f7f7 f93a 	bl	80001e0 <strlen>
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	930a      	str	r3, [sp, #40]	; 0x28
 8008f70:	6823      	ldr	r3, [r4, #0]
 8008f72:	9305      	str	r3, [sp, #20]
 8008f74:	f8d8 3000 	ldr.w	r3, [r8]
 8008f78:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008f7c:	3307      	adds	r3, #7
 8008f7e:	f023 0307 	bic.w	r3, r3, #7
 8008f82:	f103 0208 	add.w	r2, r3, #8
 8008f86:	f8c8 2000 	str.w	r2, [r8]
 8008f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f8e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008f92:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008f96:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008f9a:	9307      	str	r3, [sp, #28]
 8008f9c:	f8cd 8018 	str.w	r8, [sp, #24]
 8008fa0:	ee08 0a10 	vmov	s16, r0
 8008fa4:	4b9f      	ldr	r3, [pc, #636]	; (8009224 <_printf_float+0x2dc>)
 8008fa6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008faa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008fae:	f7f7 fdc5 	bl	8000b3c <__aeabi_dcmpun>
 8008fb2:	bb88      	cbnz	r0, 8009018 <_printf_float+0xd0>
 8008fb4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008fb8:	4b9a      	ldr	r3, [pc, #616]	; (8009224 <_printf_float+0x2dc>)
 8008fba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008fbe:	f7f7 fd9f 	bl	8000b00 <__aeabi_dcmple>
 8008fc2:	bb48      	cbnz	r0, 8009018 <_printf_float+0xd0>
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	4640      	mov	r0, r8
 8008fca:	4649      	mov	r1, r9
 8008fcc:	f7f7 fd8e 	bl	8000aec <__aeabi_dcmplt>
 8008fd0:	b110      	cbz	r0, 8008fd8 <_printf_float+0x90>
 8008fd2:	232d      	movs	r3, #45	; 0x2d
 8008fd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008fd8:	4b93      	ldr	r3, [pc, #588]	; (8009228 <_printf_float+0x2e0>)
 8008fda:	4894      	ldr	r0, [pc, #592]	; (800922c <_printf_float+0x2e4>)
 8008fdc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008fe0:	bf94      	ite	ls
 8008fe2:	4698      	movls	r8, r3
 8008fe4:	4680      	movhi	r8, r0
 8008fe6:	2303      	movs	r3, #3
 8008fe8:	6123      	str	r3, [r4, #16]
 8008fea:	9b05      	ldr	r3, [sp, #20]
 8008fec:	f023 0204 	bic.w	r2, r3, #4
 8008ff0:	6022      	str	r2, [r4, #0]
 8008ff2:	f04f 0900 	mov.w	r9, #0
 8008ff6:	9700      	str	r7, [sp, #0]
 8008ff8:	4633      	mov	r3, r6
 8008ffa:	aa0b      	add	r2, sp, #44	; 0x2c
 8008ffc:	4621      	mov	r1, r4
 8008ffe:	4628      	mov	r0, r5
 8009000:	f000 f9d8 	bl	80093b4 <_printf_common>
 8009004:	3001      	adds	r0, #1
 8009006:	f040 8090 	bne.w	800912a <_printf_float+0x1e2>
 800900a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800900e:	b00d      	add	sp, #52	; 0x34
 8009010:	ecbd 8b02 	vpop	{d8}
 8009014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009018:	4642      	mov	r2, r8
 800901a:	464b      	mov	r3, r9
 800901c:	4640      	mov	r0, r8
 800901e:	4649      	mov	r1, r9
 8009020:	f7f7 fd8c 	bl	8000b3c <__aeabi_dcmpun>
 8009024:	b140      	cbz	r0, 8009038 <_printf_float+0xf0>
 8009026:	464b      	mov	r3, r9
 8009028:	2b00      	cmp	r3, #0
 800902a:	bfbc      	itt	lt
 800902c:	232d      	movlt	r3, #45	; 0x2d
 800902e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009032:	487f      	ldr	r0, [pc, #508]	; (8009230 <_printf_float+0x2e8>)
 8009034:	4b7f      	ldr	r3, [pc, #508]	; (8009234 <_printf_float+0x2ec>)
 8009036:	e7d1      	b.n	8008fdc <_printf_float+0x94>
 8009038:	6863      	ldr	r3, [r4, #4]
 800903a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800903e:	9206      	str	r2, [sp, #24]
 8009040:	1c5a      	adds	r2, r3, #1
 8009042:	d13f      	bne.n	80090c4 <_printf_float+0x17c>
 8009044:	2306      	movs	r3, #6
 8009046:	6063      	str	r3, [r4, #4]
 8009048:	9b05      	ldr	r3, [sp, #20]
 800904a:	6861      	ldr	r1, [r4, #4]
 800904c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009050:	2300      	movs	r3, #0
 8009052:	9303      	str	r3, [sp, #12]
 8009054:	ab0a      	add	r3, sp, #40	; 0x28
 8009056:	e9cd b301 	strd	fp, r3, [sp, #4]
 800905a:	ab09      	add	r3, sp, #36	; 0x24
 800905c:	ec49 8b10 	vmov	d0, r8, r9
 8009060:	9300      	str	r3, [sp, #0]
 8009062:	6022      	str	r2, [r4, #0]
 8009064:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009068:	4628      	mov	r0, r5
 800906a:	f7ff fecd 	bl	8008e08 <__cvt>
 800906e:	9b06      	ldr	r3, [sp, #24]
 8009070:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009072:	2b47      	cmp	r3, #71	; 0x47
 8009074:	4680      	mov	r8, r0
 8009076:	d108      	bne.n	800908a <_printf_float+0x142>
 8009078:	1cc8      	adds	r0, r1, #3
 800907a:	db02      	blt.n	8009082 <_printf_float+0x13a>
 800907c:	6863      	ldr	r3, [r4, #4]
 800907e:	4299      	cmp	r1, r3
 8009080:	dd41      	ble.n	8009106 <_printf_float+0x1be>
 8009082:	f1ab 0b02 	sub.w	fp, fp, #2
 8009086:	fa5f fb8b 	uxtb.w	fp, fp
 800908a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800908e:	d820      	bhi.n	80090d2 <_printf_float+0x18a>
 8009090:	3901      	subs	r1, #1
 8009092:	465a      	mov	r2, fp
 8009094:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009098:	9109      	str	r1, [sp, #36]	; 0x24
 800909a:	f7ff ff17 	bl	8008ecc <__exponent>
 800909e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80090a0:	1813      	adds	r3, r2, r0
 80090a2:	2a01      	cmp	r2, #1
 80090a4:	4681      	mov	r9, r0
 80090a6:	6123      	str	r3, [r4, #16]
 80090a8:	dc02      	bgt.n	80090b0 <_printf_float+0x168>
 80090aa:	6822      	ldr	r2, [r4, #0]
 80090ac:	07d2      	lsls	r2, r2, #31
 80090ae:	d501      	bpl.n	80090b4 <_printf_float+0x16c>
 80090b0:	3301      	adds	r3, #1
 80090b2:	6123      	str	r3, [r4, #16]
 80090b4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d09c      	beq.n	8008ff6 <_printf_float+0xae>
 80090bc:	232d      	movs	r3, #45	; 0x2d
 80090be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80090c2:	e798      	b.n	8008ff6 <_printf_float+0xae>
 80090c4:	9a06      	ldr	r2, [sp, #24]
 80090c6:	2a47      	cmp	r2, #71	; 0x47
 80090c8:	d1be      	bne.n	8009048 <_printf_float+0x100>
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d1bc      	bne.n	8009048 <_printf_float+0x100>
 80090ce:	2301      	movs	r3, #1
 80090d0:	e7b9      	b.n	8009046 <_printf_float+0xfe>
 80090d2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80090d6:	d118      	bne.n	800910a <_printf_float+0x1c2>
 80090d8:	2900      	cmp	r1, #0
 80090da:	6863      	ldr	r3, [r4, #4]
 80090dc:	dd0b      	ble.n	80090f6 <_printf_float+0x1ae>
 80090de:	6121      	str	r1, [r4, #16]
 80090e0:	b913      	cbnz	r3, 80090e8 <_printf_float+0x1a0>
 80090e2:	6822      	ldr	r2, [r4, #0]
 80090e4:	07d0      	lsls	r0, r2, #31
 80090e6:	d502      	bpl.n	80090ee <_printf_float+0x1a6>
 80090e8:	3301      	adds	r3, #1
 80090ea:	440b      	add	r3, r1
 80090ec:	6123      	str	r3, [r4, #16]
 80090ee:	65a1      	str	r1, [r4, #88]	; 0x58
 80090f0:	f04f 0900 	mov.w	r9, #0
 80090f4:	e7de      	b.n	80090b4 <_printf_float+0x16c>
 80090f6:	b913      	cbnz	r3, 80090fe <_printf_float+0x1b6>
 80090f8:	6822      	ldr	r2, [r4, #0]
 80090fa:	07d2      	lsls	r2, r2, #31
 80090fc:	d501      	bpl.n	8009102 <_printf_float+0x1ba>
 80090fe:	3302      	adds	r3, #2
 8009100:	e7f4      	b.n	80090ec <_printf_float+0x1a4>
 8009102:	2301      	movs	r3, #1
 8009104:	e7f2      	b.n	80090ec <_printf_float+0x1a4>
 8009106:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800910a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800910c:	4299      	cmp	r1, r3
 800910e:	db05      	blt.n	800911c <_printf_float+0x1d4>
 8009110:	6823      	ldr	r3, [r4, #0]
 8009112:	6121      	str	r1, [r4, #16]
 8009114:	07d8      	lsls	r0, r3, #31
 8009116:	d5ea      	bpl.n	80090ee <_printf_float+0x1a6>
 8009118:	1c4b      	adds	r3, r1, #1
 800911a:	e7e7      	b.n	80090ec <_printf_float+0x1a4>
 800911c:	2900      	cmp	r1, #0
 800911e:	bfd4      	ite	le
 8009120:	f1c1 0202 	rsble	r2, r1, #2
 8009124:	2201      	movgt	r2, #1
 8009126:	4413      	add	r3, r2
 8009128:	e7e0      	b.n	80090ec <_printf_float+0x1a4>
 800912a:	6823      	ldr	r3, [r4, #0]
 800912c:	055a      	lsls	r2, r3, #21
 800912e:	d407      	bmi.n	8009140 <_printf_float+0x1f8>
 8009130:	6923      	ldr	r3, [r4, #16]
 8009132:	4642      	mov	r2, r8
 8009134:	4631      	mov	r1, r6
 8009136:	4628      	mov	r0, r5
 8009138:	47b8      	blx	r7
 800913a:	3001      	adds	r0, #1
 800913c:	d12c      	bne.n	8009198 <_printf_float+0x250>
 800913e:	e764      	b.n	800900a <_printf_float+0xc2>
 8009140:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009144:	f240 80e0 	bls.w	8009308 <_printf_float+0x3c0>
 8009148:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800914c:	2200      	movs	r2, #0
 800914e:	2300      	movs	r3, #0
 8009150:	f7f7 fcc2 	bl	8000ad8 <__aeabi_dcmpeq>
 8009154:	2800      	cmp	r0, #0
 8009156:	d034      	beq.n	80091c2 <_printf_float+0x27a>
 8009158:	4a37      	ldr	r2, [pc, #220]	; (8009238 <_printf_float+0x2f0>)
 800915a:	2301      	movs	r3, #1
 800915c:	4631      	mov	r1, r6
 800915e:	4628      	mov	r0, r5
 8009160:	47b8      	blx	r7
 8009162:	3001      	adds	r0, #1
 8009164:	f43f af51 	beq.w	800900a <_printf_float+0xc2>
 8009168:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800916c:	429a      	cmp	r2, r3
 800916e:	db02      	blt.n	8009176 <_printf_float+0x22e>
 8009170:	6823      	ldr	r3, [r4, #0]
 8009172:	07d8      	lsls	r0, r3, #31
 8009174:	d510      	bpl.n	8009198 <_printf_float+0x250>
 8009176:	ee18 3a10 	vmov	r3, s16
 800917a:	4652      	mov	r2, sl
 800917c:	4631      	mov	r1, r6
 800917e:	4628      	mov	r0, r5
 8009180:	47b8      	blx	r7
 8009182:	3001      	adds	r0, #1
 8009184:	f43f af41 	beq.w	800900a <_printf_float+0xc2>
 8009188:	f04f 0800 	mov.w	r8, #0
 800918c:	f104 091a 	add.w	r9, r4, #26
 8009190:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009192:	3b01      	subs	r3, #1
 8009194:	4543      	cmp	r3, r8
 8009196:	dc09      	bgt.n	80091ac <_printf_float+0x264>
 8009198:	6823      	ldr	r3, [r4, #0]
 800919a:	079b      	lsls	r3, r3, #30
 800919c:	f100 8105 	bmi.w	80093aa <_printf_float+0x462>
 80091a0:	68e0      	ldr	r0, [r4, #12]
 80091a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091a4:	4298      	cmp	r0, r3
 80091a6:	bfb8      	it	lt
 80091a8:	4618      	movlt	r0, r3
 80091aa:	e730      	b.n	800900e <_printf_float+0xc6>
 80091ac:	2301      	movs	r3, #1
 80091ae:	464a      	mov	r2, r9
 80091b0:	4631      	mov	r1, r6
 80091b2:	4628      	mov	r0, r5
 80091b4:	47b8      	blx	r7
 80091b6:	3001      	adds	r0, #1
 80091b8:	f43f af27 	beq.w	800900a <_printf_float+0xc2>
 80091bc:	f108 0801 	add.w	r8, r8, #1
 80091c0:	e7e6      	b.n	8009190 <_printf_float+0x248>
 80091c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	dc39      	bgt.n	800923c <_printf_float+0x2f4>
 80091c8:	4a1b      	ldr	r2, [pc, #108]	; (8009238 <_printf_float+0x2f0>)
 80091ca:	2301      	movs	r3, #1
 80091cc:	4631      	mov	r1, r6
 80091ce:	4628      	mov	r0, r5
 80091d0:	47b8      	blx	r7
 80091d2:	3001      	adds	r0, #1
 80091d4:	f43f af19 	beq.w	800900a <_printf_float+0xc2>
 80091d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80091dc:	4313      	orrs	r3, r2
 80091de:	d102      	bne.n	80091e6 <_printf_float+0x29e>
 80091e0:	6823      	ldr	r3, [r4, #0]
 80091e2:	07d9      	lsls	r1, r3, #31
 80091e4:	d5d8      	bpl.n	8009198 <_printf_float+0x250>
 80091e6:	ee18 3a10 	vmov	r3, s16
 80091ea:	4652      	mov	r2, sl
 80091ec:	4631      	mov	r1, r6
 80091ee:	4628      	mov	r0, r5
 80091f0:	47b8      	blx	r7
 80091f2:	3001      	adds	r0, #1
 80091f4:	f43f af09 	beq.w	800900a <_printf_float+0xc2>
 80091f8:	f04f 0900 	mov.w	r9, #0
 80091fc:	f104 0a1a 	add.w	sl, r4, #26
 8009200:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009202:	425b      	negs	r3, r3
 8009204:	454b      	cmp	r3, r9
 8009206:	dc01      	bgt.n	800920c <_printf_float+0x2c4>
 8009208:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800920a:	e792      	b.n	8009132 <_printf_float+0x1ea>
 800920c:	2301      	movs	r3, #1
 800920e:	4652      	mov	r2, sl
 8009210:	4631      	mov	r1, r6
 8009212:	4628      	mov	r0, r5
 8009214:	47b8      	blx	r7
 8009216:	3001      	adds	r0, #1
 8009218:	f43f aef7 	beq.w	800900a <_printf_float+0xc2>
 800921c:	f109 0901 	add.w	r9, r9, #1
 8009220:	e7ee      	b.n	8009200 <_printf_float+0x2b8>
 8009222:	bf00      	nop
 8009224:	7fefffff 	.word	0x7fefffff
 8009228:	0800c45c 	.word	0x0800c45c
 800922c:	0800c460 	.word	0x0800c460
 8009230:	0800c468 	.word	0x0800c468
 8009234:	0800c464 	.word	0x0800c464
 8009238:	0800c46c 	.word	0x0800c46c
 800923c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800923e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009240:	429a      	cmp	r2, r3
 8009242:	bfa8      	it	ge
 8009244:	461a      	movge	r2, r3
 8009246:	2a00      	cmp	r2, #0
 8009248:	4691      	mov	r9, r2
 800924a:	dc37      	bgt.n	80092bc <_printf_float+0x374>
 800924c:	f04f 0b00 	mov.w	fp, #0
 8009250:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009254:	f104 021a 	add.w	r2, r4, #26
 8009258:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800925a:	9305      	str	r3, [sp, #20]
 800925c:	eba3 0309 	sub.w	r3, r3, r9
 8009260:	455b      	cmp	r3, fp
 8009262:	dc33      	bgt.n	80092cc <_printf_float+0x384>
 8009264:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009268:	429a      	cmp	r2, r3
 800926a:	db3b      	blt.n	80092e4 <_printf_float+0x39c>
 800926c:	6823      	ldr	r3, [r4, #0]
 800926e:	07da      	lsls	r2, r3, #31
 8009270:	d438      	bmi.n	80092e4 <_printf_float+0x39c>
 8009272:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009274:	9a05      	ldr	r2, [sp, #20]
 8009276:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009278:	1a9a      	subs	r2, r3, r2
 800927a:	eba3 0901 	sub.w	r9, r3, r1
 800927e:	4591      	cmp	r9, r2
 8009280:	bfa8      	it	ge
 8009282:	4691      	movge	r9, r2
 8009284:	f1b9 0f00 	cmp.w	r9, #0
 8009288:	dc35      	bgt.n	80092f6 <_printf_float+0x3ae>
 800928a:	f04f 0800 	mov.w	r8, #0
 800928e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009292:	f104 0a1a 	add.w	sl, r4, #26
 8009296:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800929a:	1a9b      	subs	r3, r3, r2
 800929c:	eba3 0309 	sub.w	r3, r3, r9
 80092a0:	4543      	cmp	r3, r8
 80092a2:	f77f af79 	ble.w	8009198 <_printf_float+0x250>
 80092a6:	2301      	movs	r3, #1
 80092a8:	4652      	mov	r2, sl
 80092aa:	4631      	mov	r1, r6
 80092ac:	4628      	mov	r0, r5
 80092ae:	47b8      	blx	r7
 80092b0:	3001      	adds	r0, #1
 80092b2:	f43f aeaa 	beq.w	800900a <_printf_float+0xc2>
 80092b6:	f108 0801 	add.w	r8, r8, #1
 80092ba:	e7ec      	b.n	8009296 <_printf_float+0x34e>
 80092bc:	4613      	mov	r3, r2
 80092be:	4631      	mov	r1, r6
 80092c0:	4642      	mov	r2, r8
 80092c2:	4628      	mov	r0, r5
 80092c4:	47b8      	blx	r7
 80092c6:	3001      	adds	r0, #1
 80092c8:	d1c0      	bne.n	800924c <_printf_float+0x304>
 80092ca:	e69e      	b.n	800900a <_printf_float+0xc2>
 80092cc:	2301      	movs	r3, #1
 80092ce:	4631      	mov	r1, r6
 80092d0:	4628      	mov	r0, r5
 80092d2:	9205      	str	r2, [sp, #20]
 80092d4:	47b8      	blx	r7
 80092d6:	3001      	adds	r0, #1
 80092d8:	f43f ae97 	beq.w	800900a <_printf_float+0xc2>
 80092dc:	9a05      	ldr	r2, [sp, #20]
 80092de:	f10b 0b01 	add.w	fp, fp, #1
 80092e2:	e7b9      	b.n	8009258 <_printf_float+0x310>
 80092e4:	ee18 3a10 	vmov	r3, s16
 80092e8:	4652      	mov	r2, sl
 80092ea:	4631      	mov	r1, r6
 80092ec:	4628      	mov	r0, r5
 80092ee:	47b8      	blx	r7
 80092f0:	3001      	adds	r0, #1
 80092f2:	d1be      	bne.n	8009272 <_printf_float+0x32a>
 80092f4:	e689      	b.n	800900a <_printf_float+0xc2>
 80092f6:	9a05      	ldr	r2, [sp, #20]
 80092f8:	464b      	mov	r3, r9
 80092fa:	4442      	add	r2, r8
 80092fc:	4631      	mov	r1, r6
 80092fe:	4628      	mov	r0, r5
 8009300:	47b8      	blx	r7
 8009302:	3001      	adds	r0, #1
 8009304:	d1c1      	bne.n	800928a <_printf_float+0x342>
 8009306:	e680      	b.n	800900a <_printf_float+0xc2>
 8009308:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800930a:	2a01      	cmp	r2, #1
 800930c:	dc01      	bgt.n	8009312 <_printf_float+0x3ca>
 800930e:	07db      	lsls	r3, r3, #31
 8009310:	d538      	bpl.n	8009384 <_printf_float+0x43c>
 8009312:	2301      	movs	r3, #1
 8009314:	4642      	mov	r2, r8
 8009316:	4631      	mov	r1, r6
 8009318:	4628      	mov	r0, r5
 800931a:	47b8      	blx	r7
 800931c:	3001      	adds	r0, #1
 800931e:	f43f ae74 	beq.w	800900a <_printf_float+0xc2>
 8009322:	ee18 3a10 	vmov	r3, s16
 8009326:	4652      	mov	r2, sl
 8009328:	4631      	mov	r1, r6
 800932a:	4628      	mov	r0, r5
 800932c:	47b8      	blx	r7
 800932e:	3001      	adds	r0, #1
 8009330:	f43f ae6b 	beq.w	800900a <_printf_float+0xc2>
 8009334:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009338:	2200      	movs	r2, #0
 800933a:	2300      	movs	r3, #0
 800933c:	f7f7 fbcc 	bl	8000ad8 <__aeabi_dcmpeq>
 8009340:	b9d8      	cbnz	r0, 800937a <_printf_float+0x432>
 8009342:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009344:	f108 0201 	add.w	r2, r8, #1
 8009348:	3b01      	subs	r3, #1
 800934a:	4631      	mov	r1, r6
 800934c:	4628      	mov	r0, r5
 800934e:	47b8      	blx	r7
 8009350:	3001      	adds	r0, #1
 8009352:	d10e      	bne.n	8009372 <_printf_float+0x42a>
 8009354:	e659      	b.n	800900a <_printf_float+0xc2>
 8009356:	2301      	movs	r3, #1
 8009358:	4652      	mov	r2, sl
 800935a:	4631      	mov	r1, r6
 800935c:	4628      	mov	r0, r5
 800935e:	47b8      	blx	r7
 8009360:	3001      	adds	r0, #1
 8009362:	f43f ae52 	beq.w	800900a <_printf_float+0xc2>
 8009366:	f108 0801 	add.w	r8, r8, #1
 800936a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800936c:	3b01      	subs	r3, #1
 800936e:	4543      	cmp	r3, r8
 8009370:	dcf1      	bgt.n	8009356 <_printf_float+0x40e>
 8009372:	464b      	mov	r3, r9
 8009374:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009378:	e6dc      	b.n	8009134 <_printf_float+0x1ec>
 800937a:	f04f 0800 	mov.w	r8, #0
 800937e:	f104 0a1a 	add.w	sl, r4, #26
 8009382:	e7f2      	b.n	800936a <_printf_float+0x422>
 8009384:	2301      	movs	r3, #1
 8009386:	4642      	mov	r2, r8
 8009388:	e7df      	b.n	800934a <_printf_float+0x402>
 800938a:	2301      	movs	r3, #1
 800938c:	464a      	mov	r2, r9
 800938e:	4631      	mov	r1, r6
 8009390:	4628      	mov	r0, r5
 8009392:	47b8      	blx	r7
 8009394:	3001      	adds	r0, #1
 8009396:	f43f ae38 	beq.w	800900a <_printf_float+0xc2>
 800939a:	f108 0801 	add.w	r8, r8, #1
 800939e:	68e3      	ldr	r3, [r4, #12]
 80093a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80093a2:	1a5b      	subs	r3, r3, r1
 80093a4:	4543      	cmp	r3, r8
 80093a6:	dcf0      	bgt.n	800938a <_printf_float+0x442>
 80093a8:	e6fa      	b.n	80091a0 <_printf_float+0x258>
 80093aa:	f04f 0800 	mov.w	r8, #0
 80093ae:	f104 0919 	add.w	r9, r4, #25
 80093b2:	e7f4      	b.n	800939e <_printf_float+0x456>

080093b4 <_printf_common>:
 80093b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093b8:	4616      	mov	r6, r2
 80093ba:	4699      	mov	r9, r3
 80093bc:	688a      	ldr	r2, [r1, #8]
 80093be:	690b      	ldr	r3, [r1, #16]
 80093c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80093c4:	4293      	cmp	r3, r2
 80093c6:	bfb8      	it	lt
 80093c8:	4613      	movlt	r3, r2
 80093ca:	6033      	str	r3, [r6, #0]
 80093cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80093d0:	4607      	mov	r7, r0
 80093d2:	460c      	mov	r4, r1
 80093d4:	b10a      	cbz	r2, 80093da <_printf_common+0x26>
 80093d6:	3301      	adds	r3, #1
 80093d8:	6033      	str	r3, [r6, #0]
 80093da:	6823      	ldr	r3, [r4, #0]
 80093dc:	0699      	lsls	r1, r3, #26
 80093de:	bf42      	ittt	mi
 80093e0:	6833      	ldrmi	r3, [r6, #0]
 80093e2:	3302      	addmi	r3, #2
 80093e4:	6033      	strmi	r3, [r6, #0]
 80093e6:	6825      	ldr	r5, [r4, #0]
 80093e8:	f015 0506 	ands.w	r5, r5, #6
 80093ec:	d106      	bne.n	80093fc <_printf_common+0x48>
 80093ee:	f104 0a19 	add.w	sl, r4, #25
 80093f2:	68e3      	ldr	r3, [r4, #12]
 80093f4:	6832      	ldr	r2, [r6, #0]
 80093f6:	1a9b      	subs	r3, r3, r2
 80093f8:	42ab      	cmp	r3, r5
 80093fa:	dc26      	bgt.n	800944a <_printf_common+0x96>
 80093fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009400:	1e13      	subs	r3, r2, #0
 8009402:	6822      	ldr	r2, [r4, #0]
 8009404:	bf18      	it	ne
 8009406:	2301      	movne	r3, #1
 8009408:	0692      	lsls	r2, r2, #26
 800940a:	d42b      	bmi.n	8009464 <_printf_common+0xb0>
 800940c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009410:	4649      	mov	r1, r9
 8009412:	4638      	mov	r0, r7
 8009414:	47c0      	blx	r8
 8009416:	3001      	adds	r0, #1
 8009418:	d01e      	beq.n	8009458 <_printf_common+0xa4>
 800941a:	6823      	ldr	r3, [r4, #0]
 800941c:	68e5      	ldr	r5, [r4, #12]
 800941e:	6832      	ldr	r2, [r6, #0]
 8009420:	f003 0306 	and.w	r3, r3, #6
 8009424:	2b04      	cmp	r3, #4
 8009426:	bf08      	it	eq
 8009428:	1aad      	subeq	r5, r5, r2
 800942a:	68a3      	ldr	r3, [r4, #8]
 800942c:	6922      	ldr	r2, [r4, #16]
 800942e:	bf0c      	ite	eq
 8009430:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009434:	2500      	movne	r5, #0
 8009436:	4293      	cmp	r3, r2
 8009438:	bfc4      	itt	gt
 800943a:	1a9b      	subgt	r3, r3, r2
 800943c:	18ed      	addgt	r5, r5, r3
 800943e:	2600      	movs	r6, #0
 8009440:	341a      	adds	r4, #26
 8009442:	42b5      	cmp	r5, r6
 8009444:	d11a      	bne.n	800947c <_printf_common+0xc8>
 8009446:	2000      	movs	r0, #0
 8009448:	e008      	b.n	800945c <_printf_common+0xa8>
 800944a:	2301      	movs	r3, #1
 800944c:	4652      	mov	r2, sl
 800944e:	4649      	mov	r1, r9
 8009450:	4638      	mov	r0, r7
 8009452:	47c0      	blx	r8
 8009454:	3001      	adds	r0, #1
 8009456:	d103      	bne.n	8009460 <_printf_common+0xac>
 8009458:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800945c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009460:	3501      	adds	r5, #1
 8009462:	e7c6      	b.n	80093f2 <_printf_common+0x3e>
 8009464:	18e1      	adds	r1, r4, r3
 8009466:	1c5a      	adds	r2, r3, #1
 8009468:	2030      	movs	r0, #48	; 0x30
 800946a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800946e:	4422      	add	r2, r4
 8009470:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009474:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009478:	3302      	adds	r3, #2
 800947a:	e7c7      	b.n	800940c <_printf_common+0x58>
 800947c:	2301      	movs	r3, #1
 800947e:	4622      	mov	r2, r4
 8009480:	4649      	mov	r1, r9
 8009482:	4638      	mov	r0, r7
 8009484:	47c0      	blx	r8
 8009486:	3001      	adds	r0, #1
 8009488:	d0e6      	beq.n	8009458 <_printf_common+0xa4>
 800948a:	3601      	adds	r6, #1
 800948c:	e7d9      	b.n	8009442 <_printf_common+0x8e>
	...

08009490 <_printf_i>:
 8009490:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009494:	7e0f      	ldrb	r7, [r1, #24]
 8009496:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009498:	2f78      	cmp	r7, #120	; 0x78
 800949a:	4691      	mov	r9, r2
 800949c:	4680      	mov	r8, r0
 800949e:	460c      	mov	r4, r1
 80094a0:	469a      	mov	sl, r3
 80094a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80094a6:	d807      	bhi.n	80094b8 <_printf_i+0x28>
 80094a8:	2f62      	cmp	r7, #98	; 0x62
 80094aa:	d80a      	bhi.n	80094c2 <_printf_i+0x32>
 80094ac:	2f00      	cmp	r7, #0
 80094ae:	f000 80d8 	beq.w	8009662 <_printf_i+0x1d2>
 80094b2:	2f58      	cmp	r7, #88	; 0x58
 80094b4:	f000 80a3 	beq.w	80095fe <_printf_i+0x16e>
 80094b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80094bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80094c0:	e03a      	b.n	8009538 <_printf_i+0xa8>
 80094c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80094c6:	2b15      	cmp	r3, #21
 80094c8:	d8f6      	bhi.n	80094b8 <_printf_i+0x28>
 80094ca:	a101      	add	r1, pc, #4	; (adr r1, 80094d0 <_printf_i+0x40>)
 80094cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80094d0:	08009529 	.word	0x08009529
 80094d4:	0800953d 	.word	0x0800953d
 80094d8:	080094b9 	.word	0x080094b9
 80094dc:	080094b9 	.word	0x080094b9
 80094e0:	080094b9 	.word	0x080094b9
 80094e4:	080094b9 	.word	0x080094b9
 80094e8:	0800953d 	.word	0x0800953d
 80094ec:	080094b9 	.word	0x080094b9
 80094f0:	080094b9 	.word	0x080094b9
 80094f4:	080094b9 	.word	0x080094b9
 80094f8:	080094b9 	.word	0x080094b9
 80094fc:	08009649 	.word	0x08009649
 8009500:	0800956d 	.word	0x0800956d
 8009504:	0800962b 	.word	0x0800962b
 8009508:	080094b9 	.word	0x080094b9
 800950c:	080094b9 	.word	0x080094b9
 8009510:	0800966b 	.word	0x0800966b
 8009514:	080094b9 	.word	0x080094b9
 8009518:	0800956d 	.word	0x0800956d
 800951c:	080094b9 	.word	0x080094b9
 8009520:	080094b9 	.word	0x080094b9
 8009524:	08009633 	.word	0x08009633
 8009528:	682b      	ldr	r3, [r5, #0]
 800952a:	1d1a      	adds	r2, r3, #4
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	602a      	str	r2, [r5, #0]
 8009530:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009534:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009538:	2301      	movs	r3, #1
 800953a:	e0a3      	b.n	8009684 <_printf_i+0x1f4>
 800953c:	6820      	ldr	r0, [r4, #0]
 800953e:	6829      	ldr	r1, [r5, #0]
 8009540:	0606      	lsls	r6, r0, #24
 8009542:	f101 0304 	add.w	r3, r1, #4
 8009546:	d50a      	bpl.n	800955e <_printf_i+0xce>
 8009548:	680e      	ldr	r6, [r1, #0]
 800954a:	602b      	str	r3, [r5, #0]
 800954c:	2e00      	cmp	r6, #0
 800954e:	da03      	bge.n	8009558 <_printf_i+0xc8>
 8009550:	232d      	movs	r3, #45	; 0x2d
 8009552:	4276      	negs	r6, r6
 8009554:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009558:	485e      	ldr	r0, [pc, #376]	; (80096d4 <_printf_i+0x244>)
 800955a:	230a      	movs	r3, #10
 800955c:	e019      	b.n	8009592 <_printf_i+0x102>
 800955e:	680e      	ldr	r6, [r1, #0]
 8009560:	602b      	str	r3, [r5, #0]
 8009562:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009566:	bf18      	it	ne
 8009568:	b236      	sxthne	r6, r6
 800956a:	e7ef      	b.n	800954c <_printf_i+0xbc>
 800956c:	682b      	ldr	r3, [r5, #0]
 800956e:	6820      	ldr	r0, [r4, #0]
 8009570:	1d19      	adds	r1, r3, #4
 8009572:	6029      	str	r1, [r5, #0]
 8009574:	0601      	lsls	r1, r0, #24
 8009576:	d501      	bpl.n	800957c <_printf_i+0xec>
 8009578:	681e      	ldr	r6, [r3, #0]
 800957a:	e002      	b.n	8009582 <_printf_i+0xf2>
 800957c:	0646      	lsls	r6, r0, #25
 800957e:	d5fb      	bpl.n	8009578 <_printf_i+0xe8>
 8009580:	881e      	ldrh	r6, [r3, #0]
 8009582:	4854      	ldr	r0, [pc, #336]	; (80096d4 <_printf_i+0x244>)
 8009584:	2f6f      	cmp	r7, #111	; 0x6f
 8009586:	bf0c      	ite	eq
 8009588:	2308      	moveq	r3, #8
 800958a:	230a      	movne	r3, #10
 800958c:	2100      	movs	r1, #0
 800958e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009592:	6865      	ldr	r5, [r4, #4]
 8009594:	60a5      	str	r5, [r4, #8]
 8009596:	2d00      	cmp	r5, #0
 8009598:	bfa2      	ittt	ge
 800959a:	6821      	ldrge	r1, [r4, #0]
 800959c:	f021 0104 	bicge.w	r1, r1, #4
 80095a0:	6021      	strge	r1, [r4, #0]
 80095a2:	b90e      	cbnz	r6, 80095a8 <_printf_i+0x118>
 80095a4:	2d00      	cmp	r5, #0
 80095a6:	d04d      	beq.n	8009644 <_printf_i+0x1b4>
 80095a8:	4615      	mov	r5, r2
 80095aa:	fbb6 f1f3 	udiv	r1, r6, r3
 80095ae:	fb03 6711 	mls	r7, r3, r1, r6
 80095b2:	5dc7      	ldrb	r7, [r0, r7]
 80095b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80095b8:	4637      	mov	r7, r6
 80095ba:	42bb      	cmp	r3, r7
 80095bc:	460e      	mov	r6, r1
 80095be:	d9f4      	bls.n	80095aa <_printf_i+0x11a>
 80095c0:	2b08      	cmp	r3, #8
 80095c2:	d10b      	bne.n	80095dc <_printf_i+0x14c>
 80095c4:	6823      	ldr	r3, [r4, #0]
 80095c6:	07de      	lsls	r6, r3, #31
 80095c8:	d508      	bpl.n	80095dc <_printf_i+0x14c>
 80095ca:	6923      	ldr	r3, [r4, #16]
 80095cc:	6861      	ldr	r1, [r4, #4]
 80095ce:	4299      	cmp	r1, r3
 80095d0:	bfde      	ittt	le
 80095d2:	2330      	movle	r3, #48	; 0x30
 80095d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80095d8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80095dc:	1b52      	subs	r2, r2, r5
 80095de:	6122      	str	r2, [r4, #16]
 80095e0:	f8cd a000 	str.w	sl, [sp]
 80095e4:	464b      	mov	r3, r9
 80095e6:	aa03      	add	r2, sp, #12
 80095e8:	4621      	mov	r1, r4
 80095ea:	4640      	mov	r0, r8
 80095ec:	f7ff fee2 	bl	80093b4 <_printf_common>
 80095f0:	3001      	adds	r0, #1
 80095f2:	d14c      	bne.n	800968e <_printf_i+0x1fe>
 80095f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80095f8:	b004      	add	sp, #16
 80095fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095fe:	4835      	ldr	r0, [pc, #212]	; (80096d4 <_printf_i+0x244>)
 8009600:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009604:	6829      	ldr	r1, [r5, #0]
 8009606:	6823      	ldr	r3, [r4, #0]
 8009608:	f851 6b04 	ldr.w	r6, [r1], #4
 800960c:	6029      	str	r1, [r5, #0]
 800960e:	061d      	lsls	r5, r3, #24
 8009610:	d514      	bpl.n	800963c <_printf_i+0x1ac>
 8009612:	07df      	lsls	r7, r3, #31
 8009614:	bf44      	itt	mi
 8009616:	f043 0320 	orrmi.w	r3, r3, #32
 800961a:	6023      	strmi	r3, [r4, #0]
 800961c:	b91e      	cbnz	r6, 8009626 <_printf_i+0x196>
 800961e:	6823      	ldr	r3, [r4, #0]
 8009620:	f023 0320 	bic.w	r3, r3, #32
 8009624:	6023      	str	r3, [r4, #0]
 8009626:	2310      	movs	r3, #16
 8009628:	e7b0      	b.n	800958c <_printf_i+0xfc>
 800962a:	6823      	ldr	r3, [r4, #0]
 800962c:	f043 0320 	orr.w	r3, r3, #32
 8009630:	6023      	str	r3, [r4, #0]
 8009632:	2378      	movs	r3, #120	; 0x78
 8009634:	4828      	ldr	r0, [pc, #160]	; (80096d8 <_printf_i+0x248>)
 8009636:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800963a:	e7e3      	b.n	8009604 <_printf_i+0x174>
 800963c:	0659      	lsls	r1, r3, #25
 800963e:	bf48      	it	mi
 8009640:	b2b6      	uxthmi	r6, r6
 8009642:	e7e6      	b.n	8009612 <_printf_i+0x182>
 8009644:	4615      	mov	r5, r2
 8009646:	e7bb      	b.n	80095c0 <_printf_i+0x130>
 8009648:	682b      	ldr	r3, [r5, #0]
 800964a:	6826      	ldr	r6, [r4, #0]
 800964c:	6961      	ldr	r1, [r4, #20]
 800964e:	1d18      	adds	r0, r3, #4
 8009650:	6028      	str	r0, [r5, #0]
 8009652:	0635      	lsls	r5, r6, #24
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	d501      	bpl.n	800965c <_printf_i+0x1cc>
 8009658:	6019      	str	r1, [r3, #0]
 800965a:	e002      	b.n	8009662 <_printf_i+0x1d2>
 800965c:	0670      	lsls	r0, r6, #25
 800965e:	d5fb      	bpl.n	8009658 <_printf_i+0x1c8>
 8009660:	8019      	strh	r1, [r3, #0]
 8009662:	2300      	movs	r3, #0
 8009664:	6123      	str	r3, [r4, #16]
 8009666:	4615      	mov	r5, r2
 8009668:	e7ba      	b.n	80095e0 <_printf_i+0x150>
 800966a:	682b      	ldr	r3, [r5, #0]
 800966c:	1d1a      	adds	r2, r3, #4
 800966e:	602a      	str	r2, [r5, #0]
 8009670:	681d      	ldr	r5, [r3, #0]
 8009672:	6862      	ldr	r2, [r4, #4]
 8009674:	2100      	movs	r1, #0
 8009676:	4628      	mov	r0, r5
 8009678:	f7f6 fdba 	bl	80001f0 <memchr>
 800967c:	b108      	cbz	r0, 8009682 <_printf_i+0x1f2>
 800967e:	1b40      	subs	r0, r0, r5
 8009680:	6060      	str	r0, [r4, #4]
 8009682:	6863      	ldr	r3, [r4, #4]
 8009684:	6123      	str	r3, [r4, #16]
 8009686:	2300      	movs	r3, #0
 8009688:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800968c:	e7a8      	b.n	80095e0 <_printf_i+0x150>
 800968e:	6923      	ldr	r3, [r4, #16]
 8009690:	462a      	mov	r2, r5
 8009692:	4649      	mov	r1, r9
 8009694:	4640      	mov	r0, r8
 8009696:	47d0      	blx	sl
 8009698:	3001      	adds	r0, #1
 800969a:	d0ab      	beq.n	80095f4 <_printf_i+0x164>
 800969c:	6823      	ldr	r3, [r4, #0]
 800969e:	079b      	lsls	r3, r3, #30
 80096a0:	d413      	bmi.n	80096ca <_printf_i+0x23a>
 80096a2:	68e0      	ldr	r0, [r4, #12]
 80096a4:	9b03      	ldr	r3, [sp, #12]
 80096a6:	4298      	cmp	r0, r3
 80096a8:	bfb8      	it	lt
 80096aa:	4618      	movlt	r0, r3
 80096ac:	e7a4      	b.n	80095f8 <_printf_i+0x168>
 80096ae:	2301      	movs	r3, #1
 80096b0:	4632      	mov	r2, r6
 80096b2:	4649      	mov	r1, r9
 80096b4:	4640      	mov	r0, r8
 80096b6:	47d0      	blx	sl
 80096b8:	3001      	adds	r0, #1
 80096ba:	d09b      	beq.n	80095f4 <_printf_i+0x164>
 80096bc:	3501      	adds	r5, #1
 80096be:	68e3      	ldr	r3, [r4, #12]
 80096c0:	9903      	ldr	r1, [sp, #12]
 80096c2:	1a5b      	subs	r3, r3, r1
 80096c4:	42ab      	cmp	r3, r5
 80096c6:	dcf2      	bgt.n	80096ae <_printf_i+0x21e>
 80096c8:	e7eb      	b.n	80096a2 <_printf_i+0x212>
 80096ca:	2500      	movs	r5, #0
 80096cc:	f104 0619 	add.w	r6, r4, #25
 80096d0:	e7f5      	b.n	80096be <_printf_i+0x22e>
 80096d2:	bf00      	nop
 80096d4:	0800c46e 	.word	0x0800c46e
 80096d8:	0800c47f 	.word	0x0800c47f

080096dc <sniprintf>:
 80096dc:	b40c      	push	{r2, r3}
 80096de:	b530      	push	{r4, r5, lr}
 80096e0:	4b17      	ldr	r3, [pc, #92]	; (8009740 <sniprintf+0x64>)
 80096e2:	1e0c      	subs	r4, r1, #0
 80096e4:	681d      	ldr	r5, [r3, #0]
 80096e6:	b09d      	sub	sp, #116	; 0x74
 80096e8:	da08      	bge.n	80096fc <sniprintf+0x20>
 80096ea:	238b      	movs	r3, #139	; 0x8b
 80096ec:	602b      	str	r3, [r5, #0]
 80096ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80096f2:	b01d      	add	sp, #116	; 0x74
 80096f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80096f8:	b002      	add	sp, #8
 80096fa:	4770      	bx	lr
 80096fc:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009700:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009704:	bf14      	ite	ne
 8009706:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800970a:	4623      	moveq	r3, r4
 800970c:	9304      	str	r3, [sp, #16]
 800970e:	9307      	str	r3, [sp, #28]
 8009710:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009714:	9002      	str	r0, [sp, #8]
 8009716:	9006      	str	r0, [sp, #24]
 8009718:	f8ad 3016 	strh.w	r3, [sp, #22]
 800971c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800971e:	ab21      	add	r3, sp, #132	; 0x84
 8009720:	a902      	add	r1, sp, #8
 8009722:	4628      	mov	r0, r5
 8009724:	9301      	str	r3, [sp, #4]
 8009726:	f001 fb79 	bl	800ae1c <_svfiprintf_r>
 800972a:	1c43      	adds	r3, r0, #1
 800972c:	bfbc      	itt	lt
 800972e:	238b      	movlt	r3, #139	; 0x8b
 8009730:	602b      	strlt	r3, [r5, #0]
 8009732:	2c00      	cmp	r4, #0
 8009734:	d0dd      	beq.n	80096f2 <sniprintf+0x16>
 8009736:	9b02      	ldr	r3, [sp, #8]
 8009738:	2200      	movs	r2, #0
 800973a:	701a      	strb	r2, [r3, #0]
 800973c:	e7d9      	b.n	80096f2 <sniprintf+0x16>
 800973e:	bf00      	nop
 8009740:	20000100 	.word	0x20000100

08009744 <quorem>:
 8009744:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009748:	6903      	ldr	r3, [r0, #16]
 800974a:	690c      	ldr	r4, [r1, #16]
 800974c:	42a3      	cmp	r3, r4
 800974e:	4607      	mov	r7, r0
 8009750:	f2c0 8081 	blt.w	8009856 <quorem+0x112>
 8009754:	3c01      	subs	r4, #1
 8009756:	f101 0814 	add.w	r8, r1, #20
 800975a:	f100 0514 	add.w	r5, r0, #20
 800975e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009762:	9301      	str	r3, [sp, #4]
 8009764:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009768:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800976c:	3301      	adds	r3, #1
 800976e:	429a      	cmp	r2, r3
 8009770:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009774:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009778:	fbb2 f6f3 	udiv	r6, r2, r3
 800977c:	d331      	bcc.n	80097e2 <quorem+0x9e>
 800977e:	f04f 0e00 	mov.w	lr, #0
 8009782:	4640      	mov	r0, r8
 8009784:	46ac      	mov	ip, r5
 8009786:	46f2      	mov	sl, lr
 8009788:	f850 2b04 	ldr.w	r2, [r0], #4
 800978c:	b293      	uxth	r3, r2
 800978e:	fb06 e303 	mla	r3, r6, r3, lr
 8009792:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009796:	b29b      	uxth	r3, r3
 8009798:	ebaa 0303 	sub.w	r3, sl, r3
 800979c:	f8dc a000 	ldr.w	sl, [ip]
 80097a0:	0c12      	lsrs	r2, r2, #16
 80097a2:	fa13 f38a 	uxtah	r3, r3, sl
 80097a6:	fb06 e202 	mla	r2, r6, r2, lr
 80097aa:	9300      	str	r3, [sp, #0]
 80097ac:	9b00      	ldr	r3, [sp, #0]
 80097ae:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80097b2:	b292      	uxth	r2, r2
 80097b4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80097b8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80097bc:	f8bd 3000 	ldrh.w	r3, [sp]
 80097c0:	4581      	cmp	r9, r0
 80097c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80097c6:	f84c 3b04 	str.w	r3, [ip], #4
 80097ca:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80097ce:	d2db      	bcs.n	8009788 <quorem+0x44>
 80097d0:	f855 300b 	ldr.w	r3, [r5, fp]
 80097d4:	b92b      	cbnz	r3, 80097e2 <quorem+0x9e>
 80097d6:	9b01      	ldr	r3, [sp, #4]
 80097d8:	3b04      	subs	r3, #4
 80097da:	429d      	cmp	r5, r3
 80097dc:	461a      	mov	r2, r3
 80097de:	d32e      	bcc.n	800983e <quorem+0xfa>
 80097e0:	613c      	str	r4, [r7, #16]
 80097e2:	4638      	mov	r0, r7
 80097e4:	f001 f8c6 	bl	800a974 <__mcmp>
 80097e8:	2800      	cmp	r0, #0
 80097ea:	db24      	blt.n	8009836 <quorem+0xf2>
 80097ec:	3601      	adds	r6, #1
 80097ee:	4628      	mov	r0, r5
 80097f0:	f04f 0c00 	mov.w	ip, #0
 80097f4:	f858 2b04 	ldr.w	r2, [r8], #4
 80097f8:	f8d0 e000 	ldr.w	lr, [r0]
 80097fc:	b293      	uxth	r3, r2
 80097fe:	ebac 0303 	sub.w	r3, ip, r3
 8009802:	0c12      	lsrs	r2, r2, #16
 8009804:	fa13 f38e 	uxtah	r3, r3, lr
 8009808:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800980c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009810:	b29b      	uxth	r3, r3
 8009812:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009816:	45c1      	cmp	r9, r8
 8009818:	f840 3b04 	str.w	r3, [r0], #4
 800981c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009820:	d2e8      	bcs.n	80097f4 <quorem+0xb0>
 8009822:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009826:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800982a:	b922      	cbnz	r2, 8009836 <quorem+0xf2>
 800982c:	3b04      	subs	r3, #4
 800982e:	429d      	cmp	r5, r3
 8009830:	461a      	mov	r2, r3
 8009832:	d30a      	bcc.n	800984a <quorem+0x106>
 8009834:	613c      	str	r4, [r7, #16]
 8009836:	4630      	mov	r0, r6
 8009838:	b003      	add	sp, #12
 800983a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800983e:	6812      	ldr	r2, [r2, #0]
 8009840:	3b04      	subs	r3, #4
 8009842:	2a00      	cmp	r2, #0
 8009844:	d1cc      	bne.n	80097e0 <quorem+0x9c>
 8009846:	3c01      	subs	r4, #1
 8009848:	e7c7      	b.n	80097da <quorem+0x96>
 800984a:	6812      	ldr	r2, [r2, #0]
 800984c:	3b04      	subs	r3, #4
 800984e:	2a00      	cmp	r2, #0
 8009850:	d1f0      	bne.n	8009834 <quorem+0xf0>
 8009852:	3c01      	subs	r4, #1
 8009854:	e7eb      	b.n	800982e <quorem+0xea>
 8009856:	2000      	movs	r0, #0
 8009858:	e7ee      	b.n	8009838 <quorem+0xf4>
 800985a:	0000      	movs	r0, r0
 800985c:	0000      	movs	r0, r0
	...

08009860 <_dtoa_r>:
 8009860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009864:	ed2d 8b04 	vpush	{d8-d9}
 8009868:	ec57 6b10 	vmov	r6, r7, d0
 800986c:	b093      	sub	sp, #76	; 0x4c
 800986e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009870:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009874:	9106      	str	r1, [sp, #24]
 8009876:	ee10 aa10 	vmov	sl, s0
 800987a:	4604      	mov	r4, r0
 800987c:	9209      	str	r2, [sp, #36]	; 0x24
 800987e:	930c      	str	r3, [sp, #48]	; 0x30
 8009880:	46bb      	mov	fp, r7
 8009882:	b975      	cbnz	r5, 80098a2 <_dtoa_r+0x42>
 8009884:	2010      	movs	r0, #16
 8009886:	f000 fddd 	bl	800a444 <malloc>
 800988a:	4602      	mov	r2, r0
 800988c:	6260      	str	r0, [r4, #36]	; 0x24
 800988e:	b920      	cbnz	r0, 800989a <_dtoa_r+0x3a>
 8009890:	4ba7      	ldr	r3, [pc, #668]	; (8009b30 <_dtoa_r+0x2d0>)
 8009892:	21ea      	movs	r1, #234	; 0xea
 8009894:	48a7      	ldr	r0, [pc, #668]	; (8009b34 <_dtoa_r+0x2d4>)
 8009896:	f001 fbd1 	bl	800b03c <__assert_func>
 800989a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800989e:	6005      	str	r5, [r0, #0]
 80098a0:	60c5      	str	r5, [r0, #12]
 80098a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80098a4:	6819      	ldr	r1, [r3, #0]
 80098a6:	b151      	cbz	r1, 80098be <_dtoa_r+0x5e>
 80098a8:	685a      	ldr	r2, [r3, #4]
 80098aa:	604a      	str	r2, [r1, #4]
 80098ac:	2301      	movs	r3, #1
 80098ae:	4093      	lsls	r3, r2
 80098b0:	608b      	str	r3, [r1, #8]
 80098b2:	4620      	mov	r0, r4
 80098b4:	f000 fe1c 	bl	800a4f0 <_Bfree>
 80098b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80098ba:	2200      	movs	r2, #0
 80098bc:	601a      	str	r2, [r3, #0]
 80098be:	1e3b      	subs	r3, r7, #0
 80098c0:	bfaa      	itet	ge
 80098c2:	2300      	movge	r3, #0
 80098c4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80098c8:	f8c8 3000 	strge.w	r3, [r8]
 80098cc:	4b9a      	ldr	r3, [pc, #616]	; (8009b38 <_dtoa_r+0x2d8>)
 80098ce:	bfbc      	itt	lt
 80098d0:	2201      	movlt	r2, #1
 80098d2:	f8c8 2000 	strlt.w	r2, [r8]
 80098d6:	ea33 030b 	bics.w	r3, r3, fp
 80098da:	d11b      	bne.n	8009914 <_dtoa_r+0xb4>
 80098dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80098de:	f242 730f 	movw	r3, #9999	; 0x270f
 80098e2:	6013      	str	r3, [r2, #0]
 80098e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80098e8:	4333      	orrs	r3, r6
 80098ea:	f000 8592 	beq.w	800a412 <_dtoa_r+0xbb2>
 80098ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80098f0:	b963      	cbnz	r3, 800990c <_dtoa_r+0xac>
 80098f2:	4b92      	ldr	r3, [pc, #584]	; (8009b3c <_dtoa_r+0x2dc>)
 80098f4:	e022      	b.n	800993c <_dtoa_r+0xdc>
 80098f6:	4b92      	ldr	r3, [pc, #584]	; (8009b40 <_dtoa_r+0x2e0>)
 80098f8:	9301      	str	r3, [sp, #4]
 80098fa:	3308      	adds	r3, #8
 80098fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80098fe:	6013      	str	r3, [r2, #0]
 8009900:	9801      	ldr	r0, [sp, #4]
 8009902:	b013      	add	sp, #76	; 0x4c
 8009904:	ecbd 8b04 	vpop	{d8-d9}
 8009908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800990c:	4b8b      	ldr	r3, [pc, #556]	; (8009b3c <_dtoa_r+0x2dc>)
 800990e:	9301      	str	r3, [sp, #4]
 8009910:	3303      	adds	r3, #3
 8009912:	e7f3      	b.n	80098fc <_dtoa_r+0x9c>
 8009914:	2200      	movs	r2, #0
 8009916:	2300      	movs	r3, #0
 8009918:	4650      	mov	r0, sl
 800991a:	4659      	mov	r1, fp
 800991c:	f7f7 f8dc 	bl	8000ad8 <__aeabi_dcmpeq>
 8009920:	ec4b ab19 	vmov	d9, sl, fp
 8009924:	4680      	mov	r8, r0
 8009926:	b158      	cbz	r0, 8009940 <_dtoa_r+0xe0>
 8009928:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800992a:	2301      	movs	r3, #1
 800992c:	6013      	str	r3, [r2, #0]
 800992e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009930:	2b00      	cmp	r3, #0
 8009932:	f000 856b 	beq.w	800a40c <_dtoa_r+0xbac>
 8009936:	4883      	ldr	r0, [pc, #524]	; (8009b44 <_dtoa_r+0x2e4>)
 8009938:	6018      	str	r0, [r3, #0]
 800993a:	1e43      	subs	r3, r0, #1
 800993c:	9301      	str	r3, [sp, #4]
 800993e:	e7df      	b.n	8009900 <_dtoa_r+0xa0>
 8009940:	ec4b ab10 	vmov	d0, sl, fp
 8009944:	aa10      	add	r2, sp, #64	; 0x40
 8009946:	a911      	add	r1, sp, #68	; 0x44
 8009948:	4620      	mov	r0, r4
 800994a:	f001 f8b9 	bl	800aac0 <__d2b>
 800994e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8009952:	ee08 0a10 	vmov	s16, r0
 8009956:	2d00      	cmp	r5, #0
 8009958:	f000 8084 	beq.w	8009a64 <_dtoa_r+0x204>
 800995c:	ee19 3a90 	vmov	r3, s19
 8009960:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009964:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009968:	4656      	mov	r6, sl
 800996a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800996e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009972:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8009976:	4b74      	ldr	r3, [pc, #464]	; (8009b48 <_dtoa_r+0x2e8>)
 8009978:	2200      	movs	r2, #0
 800997a:	4630      	mov	r0, r6
 800997c:	4639      	mov	r1, r7
 800997e:	f7f6 fc8b 	bl	8000298 <__aeabi_dsub>
 8009982:	a365      	add	r3, pc, #404	; (adr r3, 8009b18 <_dtoa_r+0x2b8>)
 8009984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009988:	f7f6 fe3e 	bl	8000608 <__aeabi_dmul>
 800998c:	a364      	add	r3, pc, #400	; (adr r3, 8009b20 <_dtoa_r+0x2c0>)
 800998e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009992:	f7f6 fc83 	bl	800029c <__adddf3>
 8009996:	4606      	mov	r6, r0
 8009998:	4628      	mov	r0, r5
 800999a:	460f      	mov	r7, r1
 800999c:	f7f6 fdca 	bl	8000534 <__aeabi_i2d>
 80099a0:	a361      	add	r3, pc, #388	; (adr r3, 8009b28 <_dtoa_r+0x2c8>)
 80099a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099a6:	f7f6 fe2f 	bl	8000608 <__aeabi_dmul>
 80099aa:	4602      	mov	r2, r0
 80099ac:	460b      	mov	r3, r1
 80099ae:	4630      	mov	r0, r6
 80099b0:	4639      	mov	r1, r7
 80099b2:	f7f6 fc73 	bl	800029c <__adddf3>
 80099b6:	4606      	mov	r6, r0
 80099b8:	460f      	mov	r7, r1
 80099ba:	f7f7 f8d5 	bl	8000b68 <__aeabi_d2iz>
 80099be:	2200      	movs	r2, #0
 80099c0:	9000      	str	r0, [sp, #0]
 80099c2:	2300      	movs	r3, #0
 80099c4:	4630      	mov	r0, r6
 80099c6:	4639      	mov	r1, r7
 80099c8:	f7f7 f890 	bl	8000aec <__aeabi_dcmplt>
 80099cc:	b150      	cbz	r0, 80099e4 <_dtoa_r+0x184>
 80099ce:	9800      	ldr	r0, [sp, #0]
 80099d0:	f7f6 fdb0 	bl	8000534 <__aeabi_i2d>
 80099d4:	4632      	mov	r2, r6
 80099d6:	463b      	mov	r3, r7
 80099d8:	f7f7 f87e 	bl	8000ad8 <__aeabi_dcmpeq>
 80099dc:	b910      	cbnz	r0, 80099e4 <_dtoa_r+0x184>
 80099de:	9b00      	ldr	r3, [sp, #0]
 80099e0:	3b01      	subs	r3, #1
 80099e2:	9300      	str	r3, [sp, #0]
 80099e4:	9b00      	ldr	r3, [sp, #0]
 80099e6:	2b16      	cmp	r3, #22
 80099e8:	d85a      	bhi.n	8009aa0 <_dtoa_r+0x240>
 80099ea:	9a00      	ldr	r2, [sp, #0]
 80099ec:	4b57      	ldr	r3, [pc, #348]	; (8009b4c <_dtoa_r+0x2ec>)
 80099ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80099f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099f6:	ec51 0b19 	vmov	r0, r1, d9
 80099fa:	f7f7 f877 	bl	8000aec <__aeabi_dcmplt>
 80099fe:	2800      	cmp	r0, #0
 8009a00:	d050      	beq.n	8009aa4 <_dtoa_r+0x244>
 8009a02:	9b00      	ldr	r3, [sp, #0]
 8009a04:	3b01      	subs	r3, #1
 8009a06:	9300      	str	r3, [sp, #0]
 8009a08:	2300      	movs	r3, #0
 8009a0a:	930b      	str	r3, [sp, #44]	; 0x2c
 8009a0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009a0e:	1b5d      	subs	r5, r3, r5
 8009a10:	1e6b      	subs	r3, r5, #1
 8009a12:	9305      	str	r3, [sp, #20]
 8009a14:	bf45      	ittet	mi
 8009a16:	f1c5 0301 	rsbmi	r3, r5, #1
 8009a1a:	9304      	strmi	r3, [sp, #16]
 8009a1c:	2300      	movpl	r3, #0
 8009a1e:	2300      	movmi	r3, #0
 8009a20:	bf4c      	ite	mi
 8009a22:	9305      	strmi	r3, [sp, #20]
 8009a24:	9304      	strpl	r3, [sp, #16]
 8009a26:	9b00      	ldr	r3, [sp, #0]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	db3d      	blt.n	8009aa8 <_dtoa_r+0x248>
 8009a2c:	9b05      	ldr	r3, [sp, #20]
 8009a2e:	9a00      	ldr	r2, [sp, #0]
 8009a30:	920a      	str	r2, [sp, #40]	; 0x28
 8009a32:	4413      	add	r3, r2
 8009a34:	9305      	str	r3, [sp, #20]
 8009a36:	2300      	movs	r3, #0
 8009a38:	9307      	str	r3, [sp, #28]
 8009a3a:	9b06      	ldr	r3, [sp, #24]
 8009a3c:	2b09      	cmp	r3, #9
 8009a3e:	f200 8089 	bhi.w	8009b54 <_dtoa_r+0x2f4>
 8009a42:	2b05      	cmp	r3, #5
 8009a44:	bfc4      	itt	gt
 8009a46:	3b04      	subgt	r3, #4
 8009a48:	9306      	strgt	r3, [sp, #24]
 8009a4a:	9b06      	ldr	r3, [sp, #24]
 8009a4c:	f1a3 0302 	sub.w	r3, r3, #2
 8009a50:	bfcc      	ite	gt
 8009a52:	2500      	movgt	r5, #0
 8009a54:	2501      	movle	r5, #1
 8009a56:	2b03      	cmp	r3, #3
 8009a58:	f200 8087 	bhi.w	8009b6a <_dtoa_r+0x30a>
 8009a5c:	e8df f003 	tbb	[pc, r3]
 8009a60:	59383a2d 	.word	0x59383a2d
 8009a64:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009a68:	441d      	add	r5, r3
 8009a6a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009a6e:	2b20      	cmp	r3, #32
 8009a70:	bfc1      	itttt	gt
 8009a72:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009a76:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009a7a:	fa0b f303 	lslgt.w	r3, fp, r3
 8009a7e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009a82:	bfda      	itte	le
 8009a84:	f1c3 0320 	rsble	r3, r3, #32
 8009a88:	fa06 f003 	lslle.w	r0, r6, r3
 8009a8c:	4318      	orrgt	r0, r3
 8009a8e:	f7f6 fd41 	bl	8000514 <__aeabi_ui2d>
 8009a92:	2301      	movs	r3, #1
 8009a94:	4606      	mov	r6, r0
 8009a96:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009a9a:	3d01      	subs	r5, #1
 8009a9c:	930e      	str	r3, [sp, #56]	; 0x38
 8009a9e:	e76a      	b.n	8009976 <_dtoa_r+0x116>
 8009aa0:	2301      	movs	r3, #1
 8009aa2:	e7b2      	b.n	8009a0a <_dtoa_r+0x1aa>
 8009aa4:	900b      	str	r0, [sp, #44]	; 0x2c
 8009aa6:	e7b1      	b.n	8009a0c <_dtoa_r+0x1ac>
 8009aa8:	9b04      	ldr	r3, [sp, #16]
 8009aaa:	9a00      	ldr	r2, [sp, #0]
 8009aac:	1a9b      	subs	r3, r3, r2
 8009aae:	9304      	str	r3, [sp, #16]
 8009ab0:	4253      	negs	r3, r2
 8009ab2:	9307      	str	r3, [sp, #28]
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	930a      	str	r3, [sp, #40]	; 0x28
 8009ab8:	e7bf      	b.n	8009a3a <_dtoa_r+0x1da>
 8009aba:	2300      	movs	r3, #0
 8009abc:	9308      	str	r3, [sp, #32]
 8009abe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	dc55      	bgt.n	8009b70 <_dtoa_r+0x310>
 8009ac4:	2301      	movs	r3, #1
 8009ac6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009aca:	461a      	mov	r2, r3
 8009acc:	9209      	str	r2, [sp, #36]	; 0x24
 8009ace:	e00c      	b.n	8009aea <_dtoa_r+0x28a>
 8009ad0:	2301      	movs	r3, #1
 8009ad2:	e7f3      	b.n	8009abc <_dtoa_r+0x25c>
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ad8:	9308      	str	r3, [sp, #32]
 8009ada:	9b00      	ldr	r3, [sp, #0]
 8009adc:	4413      	add	r3, r2
 8009ade:	9302      	str	r3, [sp, #8]
 8009ae0:	3301      	adds	r3, #1
 8009ae2:	2b01      	cmp	r3, #1
 8009ae4:	9303      	str	r3, [sp, #12]
 8009ae6:	bfb8      	it	lt
 8009ae8:	2301      	movlt	r3, #1
 8009aea:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009aec:	2200      	movs	r2, #0
 8009aee:	6042      	str	r2, [r0, #4]
 8009af0:	2204      	movs	r2, #4
 8009af2:	f102 0614 	add.w	r6, r2, #20
 8009af6:	429e      	cmp	r6, r3
 8009af8:	6841      	ldr	r1, [r0, #4]
 8009afa:	d93d      	bls.n	8009b78 <_dtoa_r+0x318>
 8009afc:	4620      	mov	r0, r4
 8009afe:	f000 fcb7 	bl	800a470 <_Balloc>
 8009b02:	9001      	str	r0, [sp, #4]
 8009b04:	2800      	cmp	r0, #0
 8009b06:	d13b      	bne.n	8009b80 <_dtoa_r+0x320>
 8009b08:	4b11      	ldr	r3, [pc, #68]	; (8009b50 <_dtoa_r+0x2f0>)
 8009b0a:	4602      	mov	r2, r0
 8009b0c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009b10:	e6c0      	b.n	8009894 <_dtoa_r+0x34>
 8009b12:	2301      	movs	r3, #1
 8009b14:	e7df      	b.n	8009ad6 <_dtoa_r+0x276>
 8009b16:	bf00      	nop
 8009b18:	636f4361 	.word	0x636f4361
 8009b1c:	3fd287a7 	.word	0x3fd287a7
 8009b20:	8b60c8b3 	.word	0x8b60c8b3
 8009b24:	3fc68a28 	.word	0x3fc68a28
 8009b28:	509f79fb 	.word	0x509f79fb
 8009b2c:	3fd34413 	.word	0x3fd34413
 8009b30:	0800c49d 	.word	0x0800c49d
 8009b34:	0800c4b4 	.word	0x0800c4b4
 8009b38:	7ff00000 	.word	0x7ff00000
 8009b3c:	0800c499 	.word	0x0800c499
 8009b40:	0800c490 	.word	0x0800c490
 8009b44:	0800c46d 	.word	0x0800c46d
 8009b48:	3ff80000 	.word	0x3ff80000
 8009b4c:	0800c5a8 	.word	0x0800c5a8
 8009b50:	0800c50f 	.word	0x0800c50f
 8009b54:	2501      	movs	r5, #1
 8009b56:	2300      	movs	r3, #0
 8009b58:	9306      	str	r3, [sp, #24]
 8009b5a:	9508      	str	r5, [sp, #32]
 8009b5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009b60:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009b64:	2200      	movs	r2, #0
 8009b66:	2312      	movs	r3, #18
 8009b68:	e7b0      	b.n	8009acc <_dtoa_r+0x26c>
 8009b6a:	2301      	movs	r3, #1
 8009b6c:	9308      	str	r3, [sp, #32]
 8009b6e:	e7f5      	b.n	8009b5c <_dtoa_r+0x2fc>
 8009b70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b72:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009b76:	e7b8      	b.n	8009aea <_dtoa_r+0x28a>
 8009b78:	3101      	adds	r1, #1
 8009b7a:	6041      	str	r1, [r0, #4]
 8009b7c:	0052      	lsls	r2, r2, #1
 8009b7e:	e7b8      	b.n	8009af2 <_dtoa_r+0x292>
 8009b80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b82:	9a01      	ldr	r2, [sp, #4]
 8009b84:	601a      	str	r2, [r3, #0]
 8009b86:	9b03      	ldr	r3, [sp, #12]
 8009b88:	2b0e      	cmp	r3, #14
 8009b8a:	f200 809d 	bhi.w	8009cc8 <_dtoa_r+0x468>
 8009b8e:	2d00      	cmp	r5, #0
 8009b90:	f000 809a 	beq.w	8009cc8 <_dtoa_r+0x468>
 8009b94:	9b00      	ldr	r3, [sp, #0]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	dd32      	ble.n	8009c00 <_dtoa_r+0x3a0>
 8009b9a:	4ab7      	ldr	r2, [pc, #732]	; (8009e78 <_dtoa_r+0x618>)
 8009b9c:	f003 030f 	and.w	r3, r3, #15
 8009ba0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009ba4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009ba8:	9b00      	ldr	r3, [sp, #0]
 8009baa:	05d8      	lsls	r0, r3, #23
 8009bac:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009bb0:	d516      	bpl.n	8009be0 <_dtoa_r+0x380>
 8009bb2:	4bb2      	ldr	r3, [pc, #712]	; (8009e7c <_dtoa_r+0x61c>)
 8009bb4:	ec51 0b19 	vmov	r0, r1, d9
 8009bb8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009bbc:	f7f6 fe4e 	bl	800085c <__aeabi_ddiv>
 8009bc0:	f007 070f 	and.w	r7, r7, #15
 8009bc4:	4682      	mov	sl, r0
 8009bc6:	468b      	mov	fp, r1
 8009bc8:	2503      	movs	r5, #3
 8009bca:	4eac      	ldr	r6, [pc, #688]	; (8009e7c <_dtoa_r+0x61c>)
 8009bcc:	b957      	cbnz	r7, 8009be4 <_dtoa_r+0x384>
 8009bce:	4642      	mov	r2, r8
 8009bd0:	464b      	mov	r3, r9
 8009bd2:	4650      	mov	r0, sl
 8009bd4:	4659      	mov	r1, fp
 8009bd6:	f7f6 fe41 	bl	800085c <__aeabi_ddiv>
 8009bda:	4682      	mov	sl, r0
 8009bdc:	468b      	mov	fp, r1
 8009bde:	e028      	b.n	8009c32 <_dtoa_r+0x3d2>
 8009be0:	2502      	movs	r5, #2
 8009be2:	e7f2      	b.n	8009bca <_dtoa_r+0x36a>
 8009be4:	07f9      	lsls	r1, r7, #31
 8009be6:	d508      	bpl.n	8009bfa <_dtoa_r+0x39a>
 8009be8:	4640      	mov	r0, r8
 8009bea:	4649      	mov	r1, r9
 8009bec:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009bf0:	f7f6 fd0a 	bl	8000608 <__aeabi_dmul>
 8009bf4:	3501      	adds	r5, #1
 8009bf6:	4680      	mov	r8, r0
 8009bf8:	4689      	mov	r9, r1
 8009bfa:	107f      	asrs	r7, r7, #1
 8009bfc:	3608      	adds	r6, #8
 8009bfe:	e7e5      	b.n	8009bcc <_dtoa_r+0x36c>
 8009c00:	f000 809b 	beq.w	8009d3a <_dtoa_r+0x4da>
 8009c04:	9b00      	ldr	r3, [sp, #0]
 8009c06:	4f9d      	ldr	r7, [pc, #628]	; (8009e7c <_dtoa_r+0x61c>)
 8009c08:	425e      	negs	r6, r3
 8009c0a:	4b9b      	ldr	r3, [pc, #620]	; (8009e78 <_dtoa_r+0x618>)
 8009c0c:	f006 020f 	and.w	r2, r6, #15
 8009c10:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c18:	ec51 0b19 	vmov	r0, r1, d9
 8009c1c:	f7f6 fcf4 	bl	8000608 <__aeabi_dmul>
 8009c20:	1136      	asrs	r6, r6, #4
 8009c22:	4682      	mov	sl, r0
 8009c24:	468b      	mov	fp, r1
 8009c26:	2300      	movs	r3, #0
 8009c28:	2502      	movs	r5, #2
 8009c2a:	2e00      	cmp	r6, #0
 8009c2c:	d17a      	bne.n	8009d24 <_dtoa_r+0x4c4>
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d1d3      	bne.n	8009bda <_dtoa_r+0x37a>
 8009c32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	f000 8082 	beq.w	8009d3e <_dtoa_r+0x4de>
 8009c3a:	4b91      	ldr	r3, [pc, #580]	; (8009e80 <_dtoa_r+0x620>)
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	4650      	mov	r0, sl
 8009c40:	4659      	mov	r1, fp
 8009c42:	f7f6 ff53 	bl	8000aec <__aeabi_dcmplt>
 8009c46:	2800      	cmp	r0, #0
 8009c48:	d079      	beq.n	8009d3e <_dtoa_r+0x4de>
 8009c4a:	9b03      	ldr	r3, [sp, #12]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d076      	beq.n	8009d3e <_dtoa_r+0x4de>
 8009c50:	9b02      	ldr	r3, [sp, #8]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	dd36      	ble.n	8009cc4 <_dtoa_r+0x464>
 8009c56:	9b00      	ldr	r3, [sp, #0]
 8009c58:	4650      	mov	r0, sl
 8009c5a:	4659      	mov	r1, fp
 8009c5c:	1e5f      	subs	r7, r3, #1
 8009c5e:	2200      	movs	r2, #0
 8009c60:	4b88      	ldr	r3, [pc, #544]	; (8009e84 <_dtoa_r+0x624>)
 8009c62:	f7f6 fcd1 	bl	8000608 <__aeabi_dmul>
 8009c66:	9e02      	ldr	r6, [sp, #8]
 8009c68:	4682      	mov	sl, r0
 8009c6a:	468b      	mov	fp, r1
 8009c6c:	3501      	adds	r5, #1
 8009c6e:	4628      	mov	r0, r5
 8009c70:	f7f6 fc60 	bl	8000534 <__aeabi_i2d>
 8009c74:	4652      	mov	r2, sl
 8009c76:	465b      	mov	r3, fp
 8009c78:	f7f6 fcc6 	bl	8000608 <__aeabi_dmul>
 8009c7c:	4b82      	ldr	r3, [pc, #520]	; (8009e88 <_dtoa_r+0x628>)
 8009c7e:	2200      	movs	r2, #0
 8009c80:	f7f6 fb0c 	bl	800029c <__adddf3>
 8009c84:	46d0      	mov	r8, sl
 8009c86:	46d9      	mov	r9, fp
 8009c88:	4682      	mov	sl, r0
 8009c8a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009c8e:	2e00      	cmp	r6, #0
 8009c90:	d158      	bne.n	8009d44 <_dtoa_r+0x4e4>
 8009c92:	4b7e      	ldr	r3, [pc, #504]	; (8009e8c <_dtoa_r+0x62c>)
 8009c94:	2200      	movs	r2, #0
 8009c96:	4640      	mov	r0, r8
 8009c98:	4649      	mov	r1, r9
 8009c9a:	f7f6 fafd 	bl	8000298 <__aeabi_dsub>
 8009c9e:	4652      	mov	r2, sl
 8009ca0:	465b      	mov	r3, fp
 8009ca2:	4680      	mov	r8, r0
 8009ca4:	4689      	mov	r9, r1
 8009ca6:	f7f6 ff3f 	bl	8000b28 <__aeabi_dcmpgt>
 8009caa:	2800      	cmp	r0, #0
 8009cac:	f040 8295 	bne.w	800a1da <_dtoa_r+0x97a>
 8009cb0:	4652      	mov	r2, sl
 8009cb2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009cb6:	4640      	mov	r0, r8
 8009cb8:	4649      	mov	r1, r9
 8009cba:	f7f6 ff17 	bl	8000aec <__aeabi_dcmplt>
 8009cbe:	2800      	cmp	r0, #0
 8009cc0:	f040 8289 	bne.w	800a1d6 <_dtoa_r+0x976>
 8009cc4:	ec5b ab19 	vmov	sl, fp, d9
 8009cc8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	f2c0 8148 	blt.w	8009f60 <_dtoa_r+0x700>
 8009cd0:	9a00      	ldr	r2, [sp, #0]
 8009cd2:	2a0e      	cmp	r2, #14
 8009cd4:	f300 8144 	bgt.w	8009f60 <_dtoa_r+0x700>
 8009cd8:	4b67      	ldr	r3, [pc, #412]	; (8009e78 <_dtoa_r+0x618>)
 8009cda:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009cde:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009ce2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	f280 80d5 	bge.w	8009e94 <_dtoa_r+0x634>
 8009cea:	9b03      	ldr	r3, [sp, #12]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	f300 80d1 	bgt.w	8009e94 <_dtoa_r+0x634>
 8009cf2:	f040 826f 	bne.w	800a1d4 <_dtoa_r+0x974>
 8009cf6:	4b65      	ldr	r3, [pc, #404]	; (8009e8c <_dtoa_r+0x62c>)
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	4640      	mov	r0, r8
 8009cfc:	4649      	mov	r1, r9
 8009cfe:	f7f6 fc83 	bl	8000608 <__aeabi_dmul>
 8009d02:	4652      	mov	r2, sl
 8009d04:	465b      	mov	r3, fp
 8009d06:	f7f6 ff05 	bl	8000b14 <__aeabi_dcmpge>
 8009d0a:	9e03      	ldr	r6, [sp, #12]
 8009d0c:	4637      	mov	r7, r6
 8009d0e:	2800      	cmp	r0, #0
 8009d10:	f040 8245 	bne.w	800a19e <_dtoa_r+0x93e>
 8009d14:	9d01      	ldr	r5, [sp, #4]
 8009d16:	2331      	movs	r3, #49	; 0x31
 8009d18:	f805 3b01 	strb.w	r3, [r5], #1
 8009d1c:	9b00      	ldr	r3, [sp, #0]
 8009d1e:	3301      	adds	r3, #1
 8009d20:	9300      	str	r3, [sp, #0]
 8009d22:	e240      	b.n	800a1a6 <_dtoa_r+0x946>
 8009d24:	07f2      	lsls	r2, r6, #31
 8009d26:	d505      	bpl.n	8009d34 <_dtoa_r+0x4d4>
 8009d28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009d2c:	f7f6 fc6c 	bl	8000608 <__aeabi_dmul>
 8009d30:	3501      	adds	r5, #1
 8009d32:	2301      	movs	r3, #1
 8009d34:	1076      	asrs	r6, r6, #1
 8009d36:	3708      	adds	r7, #8
 8009d38:	e777      	b.n	8009c2a <_dtoa_r+0x3ca>
 8009d3a:	2502      	movs	r5, #2
 8009d3c:	e779      	b.n	8009c32 <_dtoa_r+0x3d2>
 8009d3e:	9f00      	ldr	r7, [sp, #0]
 8009d40:	9e03      	ldr	r6, [sp, #12]
 8009d42:	e794      	b.n	8009c6e <_dtoa_r+0x40e>
 8009d44:	9901      	ldr	r1, [sp, #4]
 8009d46:	4b4c      	ldr	r3, [pc, #304]	; (8009e78 <_dtoa_r+0x618>)
 8009d48:	4431      	add	r1, r6
 8009d4a:	910d      	str	r1, [sp, #52]	; 0x34
 8009d4c:	9908      	ldr	r1, [sp, #32]
 8009d4e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009d52:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009d56:	2900      	cmp	r1, #0
 8009d58:	d043      	beq.n	8009de2 <_dtoa_r+0x582>
 8009d5a:	494d      	ldr	r1, [pc, #308]	; (8009e90 <_dtoa_r+0x630>)
 8009d5c:	2000      	movs	r0, #0
 8009d5e:	f7f6 fd7d 	bl	800085c <__aeabi_ddiv>
 8009d62:	4652      	mov	r2, sl
 8009d64:	465b      	mov	r3, fp
 8009d66:	f7f6 fa97 	bl	8000298 <__aeabi_dsub>
 8009d6a:	9d01      	ldr	r5, [sp, #4]
 8009d6c:	4682      	mov	sl, r0
 8009d6e:	468b      	mov	fp, r1
 8009d70:	4649      	mov	r1, r9
 8009d72:	4640      	mov	r0, r8
 8009d74:	f7f6 fef8 	bl	8000b68 <__aeabi_d2iz>
 8009d78:	4606      	mov	r6, r0
 8009d7a:	f7f6 fbdb 	bl	8000534 <__aeabi_i2d>
 8009d7e:	4602      	mov	r2, r0
 8009d80:	460b      	mov	r3, r1
 8009d82:	4640      	mov	r0, r8
 8009d84:	4649      	mov	r1, r9
 8009d86:	f7f6 fa87 	bl	8000298 <__aeabi_dsub>
 8009d8a:	3630      	adds	r6, #48	; 0x30
 8009d8c:	f805 6b01 	strb.w	r6, [r5], #1
 8009d90:	4652      	mov	r2, sl
 8009d92:	465b      	mov	r3, fp
 8009d94:	4680      	mov	r8, r0
 8009d96:	4689      	mov	r9, r1
 8009d98:	f7f6 fea8 	bl	8000aec <__aeabi_dcmplt>
 8009d9c:	2800      	cmp	r0, #0
 8009d9e:	d163      	bne.n	8009e68 <_dtoa_r+0x608>
 8009da0:	4642      	mov	r2, r8
 8009da2:	464b      	mov	r3, r9
 8009da4:	4936      	ldr	r1, [pc, #216]	; (8009e80 <_dtoa_r+0x620>)
 8009da6:	2000      	movs	r0, #0
 8009da8:	f7f6 fa76 	bl	8000298 <__aeabi_dsub>
 8009dac:	4652      	mov	r2, sl
 8009dae:	465b      	mov	r3, fp
 8009db0:	f7f6 fe9c 	bl	8000aec <__aeabi_dcmplt>
 8009db4:	2800      	cmp	r0, #0
 8009db6:	f040 80b5 	bne.w	8009f24 <_dtoa_r+0x6c4>
 8009dba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009dbc:	429d      	cmp	r5, r3
 8009dbe:	d081      	beq.n	8009cc4 <_dtoa_r+0x464>
 8009dc0:	4b30      	ldr	r3, [pc, #192]	; (8009e84 <_dtoa_r+0x624>)
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	4650      	mov	r0, sl
 8009dc6:	4659      	mov	r1, fp
 8009dc8:	f7f6 fc1e 	bl	8000608 <__aeabi_dmul>
 8009dcc:	4b2d      	ldr	r3, [pc, #180]	; (8009e84 <_dtoa_r+0x624>)
 8009dce:	4682      	mov	sl, r0
 8009dd0:	468b      	mov	fp, r1
 8009dd2:	4640      	mov	r0, r8
 8009dd4:	4649      	mov	r1, r9
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	f7f6 fc16 	bl	8000608 <__aeabi_dmul>
 8009ddc:	4680      	mov	r8, r0
 8009dde:	4689      	mov	r9, r1
 8009de0:	e7c6      	b.n	8009d70 <_dtoa_r+0x510>
 8009de2:	4650      	mov	r0, sl
 8009de4:	4659      	mov	r1, fp
 8009de6:	f7f6 fc0f 	bl	8000608 <__aeabi_dmul>
 8009dea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009dec:	9d01      	ldr	r5, [sp, #4]
 8009dee:	930f      	str	r3, [sp, #60]	; 0x3c
 8009df0:	4682      	mov	sl, r0
 8009df2:	468b      	mov	fp, r1
 8009df4:	4649      	mov	r1, r9
 8009df6:	4640      	mov	r0, r8
 8009df8:	f7f6 feb6 	bl	8000b68 <__aeabi_d2iz>
 8009dfc:	4606      	mov	r6, r0
 8009dfe:	f7f6 fb99 	bl	8000534 <__aeabi_i2d>
 8009e02:	3630      	adds	r6, #48	; 0x30
 8009e04:	4602      	mov	r2, r0
 8009e06:	460b      	mov	r3, r1
 8009e08:	4640      	mov	r0, r8
 8009e0a:	4649      	mov	r1, r9
 8009e0c:	f7f6 fa44 	bl	8000298 <__aeabi_dsub>
 8009e10:	f805 6b01 	strb.w	r6, [r5], #1
 8009e14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009e16:	429d      	cmp	r5, r3
 8009e18:	4680      	mov	r8, r0
 8009e1a:	4689      	mov	r9, r1
 8009e1c:	f04f 0200 	mov.w	r2, #0
 8009e20:	d124      	bne.n	8009e6c <_dtoa_r+0x60c>
 8009e22:	4b1b      	ldr	r3, [pc, #108]	; (8009e90 <_dtoa_r+0x630>)
 8009e24:	4650      	mov	r0, sl
 8009e26:	4659      	mov	r1, fp
 8009e28:	f7f6 fa38 	bl	800029c <__adddf3>
 8009e2c:	4602      	mov	r2, r0
 8009e2e:	460b      	mov	r3, r1
 8009e30:	4640      	mov	r0, r8
 8009e32:	4649      	mov	r1, r9
 8009e34:	f7f6 fe78 	bl	8000b28 <__aeabi_dcmpgt>
 8009e38:	2800      	cmp	r0, #0
 8009e3a:	d173      	bne.n	8009f24 <_dtoa_r+0x6c4>
 8009e3c:	4652      	mov	r2, sl
 8009e3e:	465b      	mov	r3, fp
 8009e40:	4913      	ldr	r1, [pc, #76]	; (8009e90 <_dtoa_r+0x630>)
 8009e42:	2000      	movs	r0, #0
 8009e44:	f7f6 fa28 	bl	8000298 <__aeabi_dsub>
 8009e48:	4602      	mov	r2, r0
 8009e4a:	460b      	mov	r3, r1
 8009e4c:	4640      	mov	r0, r8
 8009e4e:	4649      	mov	r1, r9
 8009e50:	f7f6 fe4c 	bl	8000aec <__aeabi_dcmplt>
 8009e54:	2800      	cmp	r0, #0
 8009e56:	f43f af35 	beq.w	8009cc4 <_dtoa_r+0x464>
 8009e5a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009e5c:	1e6b      	subs	r3, r5, #1
 8009e5e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009e60:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009e64:	2b30      	cmp	r3, #48	; 0x30
 8009e66:	d0f8      	beq.n	8009e5a <_dtoa_r+0x5fa>
 8009e68:	9700      	str	r7, [sp, #0]
 8009e6a:	e049      	b.n	8009f00 <_dtoa_r+0x6a0>
 8009e6c:	4b05      	ldr	r3, [pc, #20]	; (8009e84 <_dtoa_r+0x624>)
 8009e6e:	f7f6 fbcb 	bl	8000608 <__aeabi_dmul>
 8009e72:	4680      	mov	r8, r0
 8009e74:	4689      	mov	r9, r1
 8009e76:	e7bd      	b.n	8009df4 <_dtoa_r+0x594>
 8009e78:	0800c5a8 	.word	0x0800c5a8
 8009e7c:	0800c580 	.word	0x0800c580
 8009e80:	3ff00000 	.word	0x3ff00000
 8009e84:	40240000 	.word	0x40240000
 8009e88:	401c0000 	.word	0x401c0000
 8009e8c:	40140000 	.word	0x40140000
 8009e90:	3fe00000 	.word	0x3fe00000
 8009e94:	9d01      	ldr	r5, [sp, #4]
 8009e96:	4656      	mov	r6, sl
 8009e98:	465f      	mov	r7, fp
 8009e9a:	4642      	mov	r2, r8
 8009e9c:	464b      	mov	r3, r9
 8009e9e:	4630      	mov	r0, r6
 8009ea0:	4639      	mov	r1, r7
 8009ea2:	f7f6 fcdb 	bl	800085c <__aeabi_ddiv>
 8009ea6:	f7f6 fe5f 	bl	8000b68 <__aeabi_d2iz>
 8009eaa:	4682      	mov	sl, r0
 8009eac:	f7f6 fb42 	bl	8000534 <__aeabi_i2d>
 8009eb0:	4642      	mov	r2, r8
 8009eb2:	464b      	mov	r3, r9
 8009eb4:	f7f6 fba8 	bl	8000608 <__aeabi_dmul>
 8009eb8:	4602      	mov	r2, r0
 8009eba:	460b      	mov	r3, r1
 8009ebc:	4630      	mov	r0, r6
 8009ebe:	4639      	mov	r1, r7
 8009ec0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009ec4:	f7f6 f9e8 	bl	8000298 <__aeabi_dsub>
 8009ec8:	f805 6b01 	strb.w	r6, [r5], #1
 8009ecc:	9e01      	ldr	r6, [sp, #4]
 8009ece:	9f03      	ldr	r7, [sp, #12]
 8009ed0:	1bae      	subs	r6, r5, r6
 8009ed2:	42b7      	cmp	r7, r6
 8009ed4:	4602      	mov	r2, r0
 8009ed6:	460b      	mov	r3, r1
 8009ed8:	d135      	bne.n	8009f46 <_dtoa_r+0x6e6>
 8009eda:	f7f6 f9df 	bl	800029c <__adddf3>
 8009ede:	4642      	mov	r2, r8
 8009ee0:	464b      	mov	r3, r9
 8009ee2:	4606      	mov	r6, r0
 8009ee4:	460f      	mov	r7, r1
 8009ee6:	f7f6 fe1f 	bl	8000b28 <__aeabi_dcmpgt>
 8009eea:	b9d0      	cbnz	r0, 8009f22 <_dtoa_r+0x6c2>
 8009eec:	4642      	mov	r2, r8
 8009eee:	464b      	mov	r3, r9
 8009ef0:	4630      	mov	r0, r6
 8009ef2:	4639      	mov	r1, r7
 8009ef4:	f7f6 fdf0 	bl	8000ad8 <__aeabi_dcmpeq>
 8009ef8:	b110      	cbz	r0, 8009f00 <_dtoa_r+0x6a0>
 8009efa:	f01a 0f01 	tst.w	sl, #1
 8009efe:	d110      	bne.n	8009f22 <_dtoa_r+0x6c2>
 8009f00:	4620      	mov	r0, r4
 8009f02:	ee18 1a10 	vmov	r1, s16
 8009f06:	f000 faf3 	bl	800a4f0 <_Bfree>
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	9800      	ldr	r0, [sp, #0]
 8009f0e:	702b      	strb	r3, [r5, #0]
 8009f10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009f12:	3001      	adds	r0, #1
 8009f14:	6018      	str	r0, [r3, #0]
 8009f16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	f43f acf1 	beq.w	8009900 <_dtoa_r+0xa0>
 8009f1e:	601d      	str	r5, [r3, #0]
 8009f20:	e4ee      	b.n	8009900 <_dtoa_r+0xa0>
 8009f22:	9f00      	ldr	r7, [sp, #0]
 8009f24:	462b      	mov	r3, r5
 8009f26:	461d      	mov	r5, r3
 8009f28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009f2c:	2a39      	cmp	r2, #57	; 0x39
 8009f2e:	d106      	bne.n	8009f3e <_dtoa_r+0x6de>
 8009f30:	9a01      	ldr	r2, [sp, #4]
 8009f32:	429a      	cmp	r2, r3
 8009f34:	d1f7      	bne.n	8009f26 <_dtoa_r+0x6c6>
 8009f36:	9901      	ldr	r1, [sp, #4]
 8009f38:	2230      	movs	r2, #48	; 0x30
 8009f3a:	3701      	adds	r7, #1
 8009f3c:	700a      	strb	r2, [r1, #0]
 8009f3e:	781a      	ldrb	r2, [r3, #0]
 8009f40:	3201      	adds	r2, #1
 8009f42:	701a      	strb	r2, [r3, #0]
 8009f44:	e790      	b.n	8009e68 <_dtoa_r+0x608>
 8009f46:	4ba6      	ldr	r3, [pc, #664]	; (800a1e0 <_dtoa_r+0x980>)
 8009f48:	2200      	movs	r2, #0
 8009f4a:	f7f6 fb5d 	bl	8000608 <__aeabi_dmul>
 8009f4e:	2200      	movs	r2, #0
 8009f50:	2300      	movs	r3, #0
 8009f52:	4606      	mov	r6, r0
 8009f54:	460f      	mov	r7, r1
 8009f56:	f7f6 fdbf 	bl	8000ad8 <__aeabi_dcmpeq>
 8009f5a:	2800      	cmp	r0, #0
 8009f5c:	d09d      	beq.n	8009e9a <_dtoa_r+0x63a>
 8009f5e:	e7cf      	b.n	8009f00 <_dtoa_r+0x6a0>
 8009f60:	9a08      	ldr	r2, [sp, #32]
 8009f62:	2a00      	cmp	r2, #0
 8009f64:	f000 80d7 	beq.w	800a116 <_dtoa_r+0x8b6>
 8009f68:	9a06      	ldr	r2, [sp, #24]
 8009f6a:	2a01      	cmp	r2, #1
 8009f6c:	f300 80ba 	bgt.w	800a0e4 <_dtoa_r+0x884>
 8009f70:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009f72:	2a00      	cmp	r2, #0
 8009f74:	f000 80b2 	beq.w	800a0dc <_dtoa_r+0x87c>
 8009f78:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009f7c:	9e07      	ldr	r6, [sp, #28]
 8009f7e:	9d04      	ldr	r5, [sp, #16]
 8009f80:	9a04      	ldr	r2, [sp, #16]
 8009f82:	441a      	add	r2, r3
 8009f84:	9204      	str	r2, [sp, #16]
 8009f86:	9a05      	ldr	r2, [sp, #20]
 8009f88:	2101      	movs	r1, #1
 8009f8a:	441a      	add	r2, r3
 8009f8c:	4620      	mov	r0, r4
 8009f8e:	9205      	str	r2, [sp, #20]
 8009f90:	f000 fb66 	bl	800a660 <__i2b>
 8009f94:	4607      	mov	r7, r0
 8009f96:	2d00      	cmp	r5, #0
 8009f98:	dd0c      	ble.n	8009fb4 <_dtoa_r+0x754>
 8009f9a:	9b05      	ldr	r3, [sp, #20]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	dd09      	ble.n	8009fb4 <_dtoa_r+0x754>
 8009fa0:	42ab      	cmp	r3, r5
 8009fa2:	9a04      	ldr	r2, [sp, #16]
 8009fa4:	bfa8      	it	ge
 8009fa6:	462b      	movge	r3, r5
 8009fa8:	1ad2      	subs	r2, r2, r3
 8009faa:	9204      	str	r2, [sp, #16]
 8009fac:	9a05      	ldr	r2, [sp, #20]
 8009fae:	1aed      	subs	r5, r5, r3
 8009fb0:	1ad3      	subs	r3, r2, r3
 8009fb2:	9305      	str	r3, [sp, #20]
 8009fb4:	9b07      	ldr	r3, [sp, #28]
 8009fb6:	b31b      	cbz	r3, 800a000 <_dtoa_r+0x7a0>
 8009fb8:	9b08      	ldr	r3, [sp, #32]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	f000 80af 	beq.w	800a11e <_dtoa_r+0x8be>
 8009fc0:	2e00      	cmp	r6, #0
 8009fc2:	dd13      	ble.n	8009fec <_dtoa_r+0x78c>
 8009fc4:	4639      	mov	r1, r7
 8009fc6:	4632      	mov	r2, r6
 8009fc8:	4620      	mov	r0, r4
 8009fca:	f000 fc09 	bl	800a7e0 <__pow5mult>
 8009fce:	ee18 2a10 	vmov	r2, s16
 8009fd2:	4601      	mov	r1, r0
 8009fd4:	4607      	mov	r7, r0
 8009fd6:	4620      	mov	r0, r4
 8009fd8:	f000 fb58 	bl	800a68c <__multiply>
 8009fdc:	ee18 1a10 	vmov	r1, s16
 8009fe0:	4680      	mov	r8, r0
 8009fe2:	4620      	mov	r0, r4
 8009fe4:	f000 fa84 	bl	800a4f0 <_Bfree>
 8009fe8:	ee08 8a10 	vmov	s16, r8
 8009fec:	9b07      	ldr	r3, [sp, #28]
 8009fee:	1b9a      	subs	r2, r3, r6
 8009ff0:	d006      	beq.n	800a000 <_dtoa_r+0x7a0>
 8009ff2:	ee18 1a10 	vmov	r1, s16
 8009ff6:	4620      	mov	r0, r4
 8009ff8:	f000 fbf2 	bl	800a7e0 <__pow5mult>
 8009ffc:	ee08 0a10 	vmov	s16, r0
 800a000:	2101      	movs	r1, #1
 800a002:	4620      	mov	r0, r4
 800a004:	f000 fb2c 	bl	800a660 <__i2b>
 800a008:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	4606      	mov	r6, r0
 800a00e:	f340 8088 	ble.w	800a122 <_dtoa_r+0x8c2>
 800a012:	461a      	mov	r2, r3
 800a014:	4601      	mov	r1, r0
 800a016:	4620      	mov	r0, r4
 800a018:	f000 fbe2 	bl	800a7e0 <__pow5mult>
 800a01c:	9b06      	ldr	r3, [sp, #24]
 800a01e:	2b01      	cmp	r3, #1
 800a020:	4606      	mov	r6, r0
 800a022:	f340 8081 	ble.w	800a128 <_dtoa_r+0x8c8>
 800a026:	f04f 0800 	mov.w	r8, #0
 800a02a:	6933      	ldr	r3, [r6, #16]
 800a02c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a030:	6918      	ldr	r0, [r3, #16]
 800a032:	f000 fac5 	bl	800a5c0 <__hi0bits>
 800a036:	f1c0 0020 	rsb	r0, r0, #32
 800a03a:	9b05      	ldr	r3, [sp, #20]
 800a03c:	4418      	add	r0, r3
 800a03e:	f010 001f 	ands.w	r0, r0, #31
 800a042:	f000 8092 	beq.w	800a16a <_dtoa_r+0x90a>
 800a046:	f1c0 0320 	rsb	r3, r0, #32
 800a04a:	2b04      	cmp	r3, #4
 800a04c:	f340 808a 	ble.w	800a164 <_dtoa_r+0x904>
 800a050:	f1c0 001c 	rsb	r0, r0, #28
 800a054:	9b04      	ldr	r3, [sp, #16]
 800a056:	4403      	add	r3, r0
 800a058:	9304      	str	r3, [sp, #16]
 800a05a:	9b05      	ldr	r3, [sp, #20]
 800a05c:	4403      	add	r3, r0
 800a05e:	4405      	add	r5, r0
 800a060:	9305      	str	r3, [sp, #20]
 800a062:	9b04      	ldr	r3, [sp, #16]
 800a064:	2b00      	cmp	r3, #0
 800a066:	dd07      	ble.n	800a078 <_dtoa_r+0x818>
 800a068:	ee18 1a10 	vmov	r1, s16
 800a06c:	461a      	mov	r2, r3
 800a06e:	4620      	mov	r0, r4
 800a070:	f000 fc10 	bl	800a894 <__lshift>
 800a074:	ee08 0a10 	vmov	s16, r0
 800a078:	9b05      	ldr	r3, [sp, #20]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	dd05      	ble.n	800a08a <_dtoa_r+0x82a>
 800a07e:	4631      	mov	r1, r6
 800a080:	461a      	mov	r2, r3
 800a082:	4620      	mov	r0, r4
 800a084:	f000 fc06 	bl	800a894 <__lshift>
 800a088:	4606      	mov	r6, r0
 800a08a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d06e      	beq.n	800a16e <_dtoa_r+0x90e>
 800a090:	ee18 0a10 	vmov	r0, s16
 800a094:	4631      	mov	r1, r6
 800a096:	f000 fc6d 	bl	800a974 <__mcmp>
 800a09a:	2800      	cmp	r0, #0
 800a09c:	da67      	bge.n	800a16e <_dtoa_r+0x90e>
 800a09e:	9b00      	ldr	r3, [sp, #0]
 800a0a0:	3b01      	subs	r3, #1
 800a0a2:	ee18 1a10 	vmov	r1, s16
 800a0a6:	9300      	str	r3, [sp, #0]
 800a0a8:	220a      	movs	r2, #10
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	4620      	mov	r0, r4
 800a0ae:	f000 fa41 	bl	800a534 <__multadd>
 800a0b2:	9b08      	ldr	r3, [sp, #32]
 800a0b4:	ee08 0a10 	vmov	s16, r0
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	f000 81b1 	beq.w	800a420 <_dtoa_r+0xbc0>
 800a0be:	2300      	movs	r3, #0
 800a0c0:	4639      	mov	r1, r7
 800a0c2:	220a      	movs	r2, #10
 800a0c4:	4620      	mov	r0, r4
 800a0c6:	f000 fa35 	bl	800a534 <__multadd>
 800a0ca:	9b02      	ldr	r3, [sp, #8]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	4607      	mov	r7, r0
 800a0d0:	f300 808e 	bgt.w	800a1f0 <_dtoa_r+0x990>
 800a0d4:	9b06      	ldr	r3, [sp, #24]
 800a0d6:	2b02      	cmp	r3, #2
 800a0d8:	dc51      	bgt.n	800a17e <_dtoa_r+0x91e>
 800a0da:	e089      	b.n	800a1f0 <_dtoa_r+0x990>
 800a0dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a0de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a0e2:	e74b      	b.n	8009f7c <_dtoa_r+0x71c>
 800a0e4:	9b03      	ldr	r3, [sp, #12]
 800a0e6:	1e5e      	subs	r6, r3, #1
 800a0e8:	9b07      	ldr	r3, [sp, #28]
 800a0ea:	42b3      	cmp	r3, r6
 800a0ec:	bfbf      	itttt	lt
 800a0ee:	9b07      	ldrlt	r3, [sp, #28]
 800a0f0:	9607      	strlt	r6, [sp, #28]
 800a0f2:	1af2      	sublt	r2, r6, r3
 800a0f4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a0f6:	bfb6      	itet	lt
 800a0f8:	189b      	addlt	r3, r3, r2
 800a0fa:	1b9e      	subge	r6, r3, r6
 800a0fc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a0fe:	9b03      	ldr	r3, [sp, #12]
 800a100:	bfb8      	it	lt
 800a102:	2600      	movlt	r6, #0
 800a104:	2b00      	cmp	r3, #0
 800a106:	bfb7      	itett	lt
 800a108:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a10c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a110:	1a9d      	sublt	r5, r3, r2
 800a112:	2300      	movlt	r3, #0
 800a114:	e734      	b.n	8009f80 <_dtoa_r+0x720>
 800a116:	9e07      	ldr	r6, [sp, #28]
 800a118:	9d04      	ldr	r5, [sp, #16]
 800a11a:	9f08      	ldr	r7, [sp, #32]
 800a11c:	e73b      	b.n	8009f96 <_dtoa_r+0x736>
 800a11e:	9a07      	ldr	r2, [sp, #28]
 800a120:	e767      	b.n	8009ff2 <_dtoa_r+0x792>
 800a122:	9b06      	ldr	r3, [sp, #24]
 800a124:	2b01      	cmp	r3, #1
 800a126:	dc18      	bgt.n	800a15a <_dtoa_r+0x8fa>
 800a128:	f1ba 0f00 	cmp.w	sl, #0
 800a12c:	d115      	bne.n	800a15a <_dtoa_r+0x8fa>
 800a12e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a132:	b993      	cbnz	r3, 800a15a <_dtoa_r+0x8fa>
 800a134:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a138:	0d1b      	lsrs	r3, r3, #20
 800a13a:	051b      	lsls	r3, r3, #20
 800a13c:	b183      	cbz	r3, 800a160 <_dtoa_r+0x900>
 800a13e:	9b04      	ldr	r3, [sp, #16]
 800a140:	3301      	adds	r3, #1
 800a142:	9304      	str	r3, [sp, #16]
 800a144:	9b05      	ldr	r3, [sp, #20]
 800a146:	3301      	adds	r3, #1
 800a148:	9305      	str	r3, [sp, #20]
 800a14a:	f04f 0801 	mov.w	r8, #1
 800a14e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a150:	2b00      	cmp	r3, #0
 800a152:	f47f af6a 	bne.w	800a02a <_dtoa_r+0x7ca>
 800a156:	2001      	movs	r0, #1
 800a158:	e76f      	b.n	800a03a <_dtoa_r+0x7da>
 800a15a:	f04f 0800 	mov.w	r8, #0
 800a15e:	e7f6      	b.n	800a14e <_dtoa_r+0x8ee>
 800a160:	4698      	mov	r8, r3
 800a162:	e7f4      	b.n	800a14e <_dtoa_r+0x8ee>
 800a164:	f43f af7d 	beq.w	800a062 <_dtoa_r+0x802>
 800a168:	4618      	mov	r0, r3
 800a16a:	301c      	adds	r0, #28
 800a16c:	e772      	b.n	800a054 <_dtoa_r+0x7f4>
 800a16e:	9b03      	ldr	r3, [sp, #12]
 800a170:	2b00      	cmp	r3, #0
 800a172:	dc37      	bgt.n	800a1e4 <_dtoa_r+0x984>
 800a174:	9b06      	ldr	r3, [sp, #24]
 800a176:	2b02      	cmp	r3, #2
 800a178:	dd34      	ble.n	800a1e4 <_dtoa_r+0x984>
 800a17a:	9b03      	ldr	r3, [sp, #12]
 800a17c:	9302      	str	r3, [sp, #8]
 800a17e:	9b02      	ldr	r3, [sp, #8]
 800a180:	b96b      	cbnz	r3, 800a19e <_dtoa_r+0x93e>
 800a182:	4631      	mov	r1, r6
 800a184:	2205      	movs	r2, #5
 800a186:	4620      	mov	r0, r4
 800a188:	f000 f9d4 	bl	800a534 <__multadd>
 800a18c:	4601      	mov	r1, r0
 800a18e:	4606      	mov	r6, r0
 800a190:	ee18 0a10 	vmov	r0, s16
 800a194:	f000 fbee 	bl	800a974 <__mcmp>
 800a198:	2800      	cmp	r0, #0
 800a19a:	f73f adbb 	bgt.w	8009d14 <_dtoa_r+0x4b4>
 800a19e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1a0:	9d01      	ldr	r5, [sp, #4]
 800a1a2:	43db      	mvns	r3, r3
 800a1a4:	9300      	str	r3, [sp, #0]
 800a1a6:	f04f 0800 	mov.w	r8, #0
 800a1aa:	4631      	mov	r1, r6
 800a1ac:	4620      	mov	r0, r4
 800a1ae:	f000 f99f 	bl	800a4f0 <_Bfree>
 800a1b2:	2f00      	cmp	r7, #0
 800a1b4:	f43f aea4 	beq.w	8009f00 <_dtoa_r+0x6a0>
 800a1b8:	f1b8 0f00 	cmp.w	r8, #0
 800a1bc:	d005      	beq.n	800a1ca <_dtoa_r+0x96a>
 800a1be:	45b8      	cmp	r8, r7
 800a1c0:	d003      	beq.n	800a1ca <_dtoa_r+0x96a>
 800a1c2:	4641      	mov	r1, r8
 800a1c4:	4620      	mov	r0, r4
 800a1c6:	f000 f993 	bl	800a4f0 <_Bfree>
 800a1ca:	4639      	mov	r1, r7
 800a1cc:	4620      	mov	r0, r4
 800a1ce:	f000 f98f 	bl	800a4f0 <_Bfree>
 800a1d2:	e695      	b.n	8009f00 <_dtoa_r+0x6a0>
 800a1d4:	2600      	movs	r6, #0
 800a1d6:	4637      	mov	r7, r6
 800a1d8:	e7e1      	b.n	800a19e <_dtoa_r+0x93e>
 800a1da:	9700      	str	r7, [sp, #0]
 800a1dc:	4637      	mov	r7, r6
 800a1de:	e599      	b.n	8009d14 <_dtoa_r+0x4b4>
 800a1e0:	40240000 	.word	0x40240000
 800a1e4:	9b08      	ldr	r3, [sp, #32]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	f000 80ca 	beq.w	800a380 <_dtoa_r+0xb20>
 800a1ec:	9b03      	ldr	r3, [sp, #12]
 800a1ee:	9302      	str	r3, [sp, #8]
 800a1f0:	2d00      	cmp	r5, #0
 800a1f2:	dd05      	ble.n	800a200 <_dtoa_r+0x9a0>
 800a1f4:	4639      	mov	r1, r7
 800a1f6:	462a      	mov	r2, r5
 800a1f8:	4620      	mov	r0, r4
 800a1fa:	f000 fb4b 	bl	800a894 <__lshift>
 800a1fe:	4607      	mov	r7, r0
 800a200:	f1b8 0f00 	cmp.w	r8, #0
 800a204:	d05b      	beq.n	800a2be <_dtoa_r+0xa5e>
 800a206:	6879      	ldr	r1, [r7, #4]
 800a208:	4620      	mov	r0, r4
 800a20a:	f000 f931 	bl	800a470 <_Balloc>
 800a20e:	4605      	mov	r5, r0
 800a210:	b928      	cbnz	r0, 800a21e <_dtoa_r+0x9be>
 800a212:	4b87      	ldr	r3, [pc, #540]	; (800a430 <_dtoa_r+0xbd0>)
 800a214:	4602      	mov	r2, r0
 800a216:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a21a:	f7ff bb3b 	b.w	8009894 <_dtoa_r+0x34>
 800a21e:	693a      	ldr	r2, [r7, #16]
 800a220:	3202      	adds	r2, #2
 800a222:	0092      	lsls	r2, r2, #2
 800a224:	f107 010c 	add.w	r1, r7, #12
 800a228:	300c      	adds	r0, #12
 800a22a:	f000 f913 	bl	800a454 <memcpy>
 800a22e:	2201      	movs	r2, #1
 800a230:	4629      	mov	r1, r5
 800a232:	4620      	mov	r0, r4
 800a234:	f000 fb2e 	bl	800a894 <__lshift>
 800a238:	9b01      	ldr	r3, [sp, #4]
 800a23a:	f103 0901 	add.w	r9, r3, #1
 800a23e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a242:	4413      	add	r3, r2
 800a244:	9305      	str	r3, [sp, #20]
 800a246:	f00a 0301 	and.w	r3, sl, #1
 800a24a:	46b8      	mov	r8, r7
 800a24c:	9304      	str	r3, [sp, #16]
 800a24e:	4607      	mov	r7, r0
 800a250:	4631      	mov	r1, r6
 800a252:	ee18 0a10 	vmov	r0, s16
 800a256:	f7ff fa75 	bl	8009744 <quorem>
 800a25a:	4641      	mov	r1, r8
 800a25c:	9002      	str	r0, [sp, #8]
 800a25e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a262:	ee18 0a10 	vmov	r0, s16
 800a266:	f000 fb85 	bl	800a974 <__mcmp>
 800a26a:	463a      	mov	r2, r7
 800a26c:	9003      	str	r0, [sp, #12]
 800a26e:	4631      	mov	r1, r6
 800a270:	4620      	mov	r0, r4
 800a272:	f000 fb9b 	bl	800a9ac <__mdiff>
 800a276:	68c2      	ldr	r2, [r0, #12]
 800a278:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800a27c:	4605      	mov	r5, r0
 800a27e:	bb02      	cbnz	r2, 800a2c2 <_dtoa_r+0xa62>
 800a280:	4601      	mov	r1, r0
 800a282:	ee18 0a10 	vmov	r0, s16
 800a286:	f000 fb75 	bl	800a974 <__mcmp>
 800a28a:	4602      	mov	r2, r0
 800a28c:	4629      	mov	r1, r5
 800a28e:	4620      	mov	r0, r4
 800a290:	9207      	str	r2, [sp, #28]
 800a292:	f000 f92d 	bl	800a4f0 <_Bfree>
 800a296:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a29a:	ea43 0102 	orr.w	r1, r3, r2
 800a29e:	9b04      	ldr	r3, [sp, #16]
 800a2a0:	430b      	orrs	r3, r1
 800a2a2:	464d      	mov	r5, r9
 800a2a4:	d10f      	bne.n	800a2c6 <_dtoa_r+0xa66>
 800a2a6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a2aa:	d02a      	beq.n	800a302 <_dtoa_r+0xaa2>
 800a2ac:	9b03      	ldr	r3, [sp, #12]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	dd02      	ble.n	800a2b8 <_dtoa_r+0xa58>
 800a2b2:	9b02      	ldr	r3, [sp, #8]
 800a2b4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a2b8:	f88b a000 	strb.w	sl, [fp]
 800a2bc:	e775      	b.n	800a1aa <_dtoa_r+0x94a>
 800a2be:	4638      	mov	r0, r7
 800a2c0:	e7ba      	b.n	800a238 <_dtoa_r+0x9d8>
 800a2c2:	2201      	movs	r2, #1
 800a2c4:	e7e2      	b.n	800a28c <_dtoa_r+0xa2c>
 800a2c6:	9b03      	ldr	r3, [sp, #12]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	db04      	blt.n	800a2d6 <_dtoa_r+0xa76>
 800a2cc:	9906      	ldr	r1, [sp, #24]
 800a2ce:	430b      	orrs	r3, r1
 800a2d0:	9904      	ldr	r1, [sp, #16]
 800a2d2:	430b      	orrs	r3, r1
 800a2d4:	d122      	bne.n	800a31c <_dtoa_r+0xabc>
 800a2d6:	2a00      	cmp	r2, #0
 800a2d8:	ddee      	ble.n	800a2b8 <_dtoa_r+0xa58>
 800a2da:	ee18 1a10 	vmov	r1, s16
 800a2de:	2201      	movs	r2, #1
 800a2e0:	4620      	mov	r0, r4
 800a2e2:	f000 fad7 	bl	800a894 <__lshift>
 800a2e6:	4631      	mov	r1, r6
 800a2e8:	ee08 0a10 	vmov	s16, r0
 800a2ec:	f000 fb42 	bl	800a974 <__mcmp>
 800a2f0:	2800      	cmp	r0, #0
 800a2f2:	dc03      	bgt.n	800a2fc <_dtoa_r+0xa9c>
 800a2f4:	d1e0      	bne.n	800a2b8 <_dtoa_r+0xa58>
 800a2f6:	f01a 0f01 	tst.w	sl, #1
 800a2fa:	d0dd      	beq.n	800a2b8 <_dtoa_r+0xa58>
 800a2fc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a300:	d1d7      	bne.n	800a2b2 <_dtoa_r+0xa52>
 800a302:	2339      	movs	r3, #57	; 0x39
 800a304:	f88b 3000 	strb.w	r3, [fp]
 800a308:	462b      	mov	r3, r5
 800a30a:	461d      	mov	r5, r3
 800a30c:	3b01      	subs	r3, #1
 800a30e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a312:	2a39      	cmp	r2, #57	; 0x39
 800a314:	d071      	beq.n	800a3fa <_dtoa_r+0xb9a>
 800a316:	3201      	adds	r2, #1
 800a318:	701a      	strb	r2, [r3, #0]
 800a31a:	e746      	b.n	800a1aa <_dtoa_r+0x94a>
 800a31c:	2a00      	cmp	r2, #0
 800a31e:	dd07      	ble.n	800a330 <_dtoa_r+0xad0>
 800a320:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a324:	d0ed      	beq.n	800a302 <_dtoa_r+0xaa2>
 800a326:	f10a 0301 	add.w	r3, sl, #1
 800a32a:	f88b 3000 	strb.w	r3, [fp]
 800a32e:	e73c      	b.n	800a1aa <_dtoa_r+0x94a>
 800a330:	9b05      	ldr	r3, [sp, #20]
 800a332:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a336:	4599      	cmp	r9, r3
 800a338:	d047      	beq.n	800a3ca <_dtoa_r+0xb6a>
 800a33a:	ee18 1a10 	vmov	r1, s16
 800a33e:	2300      	movs	r3, #0
 800a340:	220a      	movs	r2, #10
 800a342:	4620      	mov	r0, r4
 800a344:	f000 f8f6 	bl	800a534 <__multadd>
 800a348:	45b8      	cmp	r8, r7
 800a34a:	ee08 0a10 	vmov	s16, r0
 800a34e:	f04f 0300 	mov.w	r3, #0
 800a352:	f04f 020a 	mov.w	r2, #10
 800a356:	4641      	mov	r1, r8
 800a358:	4620      	mov	r0, r4
 800a35a:	d106      	bne.n	800a36a <_dtoa_r+0xb0a>
 800a35c:	f000 f8ea 	bl	800a534 <__multadd>
 800a360:	4680      	mov	r8, r0
 800a362:	4607      	mov	r7, r0
 800a364:	f109 0901 	add.w	r9, r9, #1
 800a368:	e772      	b.n	800a250 <_dtoa_r+0x9f0>
 800a36a:	f000 f8e3 	bl	800a534 <__multadd>
 800a36e:	4639      	mov	r1, r7
 800a370:	4680      	mov	r8, r0
 800a372:	2300      	movs	r3, #0
 800a374:	220a      	movs	r2, #10
 800a376:	4620      	mov	r0, r4
 800a378:	f000 f8dc 	bl	800a534 <__multadd>
 800a37c:	4607      	mov	r7, r0
 800a37e:	e7f1      	b.n	800a364 <_dtoa_r+0xb04>
 800a380:	9b03      	ldr	r3, [sp, #12]
 800a382:	9302      	str	r3, [sp, #8]
 800a384:	9d01      	ldr	r5, [sp, #4]
 800a386:	ee18 0a10 	vmov	r0, s16
 800a38a:	4631      	mov	r1, r6
 800a38c:	f7ff f9da 	bl	8009744 <quorem>
 800a390:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a394:	9b01      	ldr	r3, [sp, #4]
 800a396:	f805 ab01 	strb.w	sl, [r5], #1
 800a39a:	1aea      	subs	r2, r5, r3
 800a39c:	9b02      	ldr	r3, [sp, #8]
 800a39e:	4293      	cmp	r3, r2
 800a3a0:	dd09      	ble.n	800a3b6 <_dtoa_r+0xb56>
 800a3a2:	ee18 1a10 	vmov	r1, s16
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	220a      	movs	r2, #10
 800a3aa:	4620      	mov	r0, r4
 800a3ac:	f000 f8c2 	bl	800a534 <__multadd>
 800a3b0:	ee08 0a10 	vmov	s16, r0
 800a3b4:	e7e7      	b.n	800a386 <_dtoa_r+0xb26>
 800a3b6:	9b02      	ldr	r3, [sp, #8]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	bfc8      	it	gt
 800a3bc:	461d      	movgt	r5, r3
 800a3be:	9b01      	ldr	r3, [sp, #4]
 800a3c0:	bfd8      	it	le
 800a3c2:	2501      	movle	r5, #1
 800a3c4:	441d      	add	r5, r3
 800a3c6:	f04f 0800 	mov.w	r8, #0
 800a3ca:	ee18 1a10 	vmov	r1, s16
 800a3ce:	2201      	movs	r2, #1
 800a3d0:	4620      	mov	r0, r4
 800a3d2:	f000 fa5f 	bl	800a894 <__lshift>
 800a3d6:	4631      	mov	r1, r6
 800a3d8:	ee08 0a10 	vmov	s16, r0
 800a3dc:	f000 faca 	bl	800a974 <__mcmp>
 800a3e0:	2800      	cmp	r0, #0
 800a3e2:	dc91      	bgt.n	800a308 <_dtoa_r+0xaa8>
 800a3e4:	d102      	bne.n	800a3ec <_dtoa_r+0xb8c>
 800a3e6:	f01a 0f01 	tst.w	sl, #1
 800a3ea:	d18d      	bne.n	800a308 <_dtoa_r+0xaa8>
 800a3ec:	462b      	mov	r3, r5
 800a3ee:	461d      	mov	r5, r3
 800a3f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a3f4:	2a30      	cmp	r2, #48	; 0x30
 800a3f6:	d0fa      	beq.n	800a3ee <_dtoa_r+0xb8e>
 800a3f8:	e6d7      	b.n	800a1aa <_dtoa_r+0x94a>
 800a3fa:	9a01      	ldr	r2, [sp, #4]
 800a3fc:	429a      	cmp	r2, r3
 800a3fe:	d184      	bne.n	800a30a <_dtoa_r+0xaaa>
 800a400:	9b00      	ldr	r3, [sp, #0]
 800a402:	3301      	adds	r3, #1
 800a404:	9300      	str	r3, [sp, #0]
 800a406:	2331      	movs	r3, #49	; 0x31
 800a408:	7013      	strb	r3, [r2, #0]
 800a40a:	e6ce      	b.n	800a1aa <_dtoa_r+0x94a>
 800a40c:	4b09      	ldr	r3, [pc, #36]	; (800a434 <_dtoa_r+0xbd4>)
 800a40e:	f7ff ba95 	b.w	800993c <_dtoa_r+0xdc>
 800a412:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a414:	2b00      	cmp	r3, #0
 800a416:	f47f aa6e 	bne.w	80098f6 <_dtoa_r+0x96>
 800a41a:	4b07      	ldr	r3, [pc, #28]	; (800a438 <_dtoa_r+0xbd8>)
 800a41c:	f7ff ba8e 	b.w	800993c <_dtoa_r+0xdc>
 800a420:	9b02      	ldr	r3, [sp, #8]
 800a422:	2b00      	cmp	r3, #0
 800a424:	dcae      	bgt.n	800a384 <_dtoa_r+0xb24>
 800a426:	9b06      	ldr	r3, [sp, #24]
 800a428:	2b02      	cmp	r3, #2
 800a42a:	f73f aea8 	bgt.w	800a17e <_dtoa_r+0x91e>
 800a42e:	e7a9      	b.n	800a384 <_dtoa_r+0xb24>
 800a430:	0800c50f 	.word	0x0800c50f
 800a434:	0800c46c 	.word	0x0800c46c
 800a438:	0800c490 	.word	0x0800c490

0800a43c <_localeconv_r>:
 800a43c:	4800      	ldr	r0, [pc, #0]	; (800a440 <_localeconv_r+0x4>)
 800a43e:	4770      	bx	lr
 800a440:	20000254 	.word	0x20000254

0800a444 <malloc>:
 800a444:	4b02      	ldr	r3, [pc, #8]	; (800a450 <malloc+0xc>)
 800a446:	4601      	mov	r1, r0
 800a448:	6818      	ldr	r0, [r3, #0]
 800a44a:	f000 bc17 	b.w	800ac7c <_malloc_r>
 800a44e:	bf00      	nop
 800a450:	20000100 	.word	0x20000100

0800a454 <memcpy>:
 800a454:	440a      	add	r2, r1
 800a456:	4291      	cmp	r1, r2
 800a458:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a45c:	d100      	bne.n	800a460 <memcpy+0xc>
 800a45e:	4770      	bx	lr
 800a460:	b510      	push	{r4, lr}
 800a462:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a466:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a46a:	4291      	cmp	r1, r2
 800a46c:	d1f9      	bne.n	800a462 <memcpy+0xe>
 800a46e:	bd10      	pop	{r4, pc}

0800a470 <_Balloc>:
 800a470:	b570      	push	{r4, r5, r6, lr}
 800a472:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a474:	4604      	mov	r4, r0
 800a476:	460d      	mov	r5, r1
 800a478:	b976      	cbnz	r6, 800a498 <_Balloc+0x28>
 800a47a:	2010      	movs	r0, #16
 800a47c:	f7ff ffe2 	bl	800a444 <malloc>
 800a480:	4602      	mov	r2, r0
 800a482:	6260      	str	r0, [r4, #36]	; 0x24
 800a484:	b920      	cbnz	r0, 800a490 <_Balloc+0x20>
 800a486:	4b18      	ldr	r3, [pc, #96]	; (800a4e8 <_Balloc+0x78>)
 800a488:	4818      	ldr	r0, [pc, #96]	; (800a4ec <_Balloc+0x7c>)
 800a48a:	2166      	movs	r1, #102	; 0x66
 800a48c:	f000 fdd6 	bl	800b03c <__assert_func>
 800a490:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a494:	6006      	str	r6, [r0, #0]
 800a496:	60c6      	str	r6, [r0, #12]
 800a498:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a49a:	68f3      	ldr	r3, [r6, #12]
 800a49c:	b183      	cbz	r3, 800a4c0 <_Balloc+0x50>
 800a49e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a4a0:	68db      	ldr	r3, [r3, #12]
 800a4a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a4a6:	b9b8      	cbnz	r0, 800a4d8 <_Balloc+0x68>
 800a4a8:	2101      	movs	r1, #1
 800a4aa:	fa01 f605 	lsl.w	r6, r1, r5
 800a4ae:	1d72      	adds	r2, r6, #5
 800a4b0:	0092      	lsls	r2, r2, #2
 800a4b2:	4620      	mov	r0, r4
 800a4b4:	f000 fb60 	bl	800ab78 <_calloc_r>
 800a4b8:	b160      	cbz	r0, 800a4d4 <_Balloc+0x64>
 800a4ba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a4be:	e00e      	b.n	800a4de <_Balloc+0x6e>
 800a4c0:	2221      	movs	r2, #33	; 0x21
 800a4c2:	2104      	movs	r1, #4
 800a4c4:	4620      	mov	r0, r4
 800a4c6:	f000 fb57 	bl	800ab78 <_calloc_r>
 800a4ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a4cc:	60f0      	str	r0, [r6, #12]
 800a4ce:	68db      	ldr	r3, [r3, #12]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d1e4      	bne.n	800a49e <_Balloc+0x2e>
 800a4d4:	2000      	movs	r0, #0
 800a4d6:	bd70      	pop	{r4, r5, r6, pc}
 800a4d8:	6802      	ldr	r2, [r0, #0]
 800a4da:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a4de:	2300      	movs	r3, #0
 800a4e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a4e4:	e7f7      	b.n	800a4d6 <_Balloc+0x66>
 800a4e6:	bf00      	nop
 800a4e8:	0800c49d 	.word	0x0800c49d
 800a4ec:	0800c520 	.word	0x0800c520

0800a4f0 <_Bfree>:
 800a4f0:	b570      	push	{r4, r5, r6, lr}
 800a4f2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a4f4:	4605      	mov	r5, r0
 800a4f6:	460c      	mov	r4, r1
 800a4f8:	b976      	cbnz	r6, 800a518 <_Bfree+0x28>
 800a4fa:	2010      	movs	r0, #16
 800a4fc:	f7ff ffa2 	bl	800a444 <malloc>
 800a500:	4602      	mov	r2, r0
 800a502:	6268      	str	r0, [r5, #36]	; 0x24
 800a504:	b920      	cbnz	r0, 800a510 <_Bfree+0x20>
 800a506:	4b09      	ldr	r3, [pc, #36]	; (800a52c <_Bfree+0x3c>)
 800a508:	4809      	ldr	r0, [pc, #36]	; (800a530 <_Bfree+0x40>)
 800a50a:	218a      	movs	r1, #138	; 0x8a
 800a50c:	f000 fd96 	bl	800b03c <__assert_func>
 800a510:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a514:	6006      	str	r6, [r0, #0]
 800a516:	60c6      	str	r6, [r0, #12]
 800a518:	b13c      	cbz	r4, 800a52a <_Bfree+0x3a>
 800a51a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a51c:	6862      	ldr	r2, [r4, #4]
 800a51e:	68db      	ldr	r3, [r3, #12]
 800a520:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a524:	6021      	str	r1, [r4, #0]
 800a526:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a52a:	bd70      	pop	{r4, r5, r6, pc}
 800a52c:	0800c49d 	.word	0x0800c49d
 800a530:	0800c520 	.word	0x0800c520

0800a534 <__multadd>:
 800a534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a538:	690d      	ldr	r5, [r1, #16]
 800a53a:	4607      	mov	r7, r0
 800a53c:	460c      	mov	r4, r1
 800a53e:	461e      	mov	r6, r3
 800a540:	f101 0c14 	add.w	ip, r1, #20
 800a544:	2000      	movs	r0, #0
 800a546:	f8dc 3000 	ldr.w	r3, [ip]
 800a54a:	b299      	uxth	r1, r3
 800a54c:	fb02 6101 	mla	r1, r2, r1, r6
 800a550:	0c1e      	lsrs	r6, r3, #16
 800a552:	0c0b      	lsrs	r3, r1, #16
 800a554:	fb02 3306 	mla	r3, r2, r6, r3
 800a558:	b289      	uxth	r1, r1
 800a55a:	3001      	adds	r0, #1
 800a55c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a560:	4285      	cmp	r5, r0
 800a562:	f84c 1b04 	str.w	r1, [ip], #4
 800a566:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a56a:	dcec      	bgt.n	800a546 <__multadd+0x12>
 800a56c:	b30e      	cbz	r6, 800a5b2 <__multadd+0x7e>
 800a56e:	68a3      	ldr	r3, [r4, #8]
 800a570:	42ab      	cmp	r3, r5
 800a572:	dc19      	bgt.n	800a5a8 <__multadd+0x74>
 800a574:	6861      	ldr	r1, [r4, #4]
 800a576:	4638      	mov	r0, r7
 800a578:	3101      	adds	r1, #1
 800a57a:	f7ff ff79 	bl	800a470 <_Balloc>
 800a57e:	4680      	mov	r8, r0
 800a580:	b928      	cbnz	r0, 800a58e <__multadd+0x5a>
 800a582:	4602      	mov	r2, r0
 800a584:	4b0c      	ldr	r3, [pc, #48]	; (800a5b8 <__multadd+0x84>)
 800a586:	480d      	ldr	r0, [pc, #52]	; (800a5bc <__multadd+0x88>)
 800a588:	21b5      	movs	r1, #181	; 0xb5
 800a58a:	f000 fd57 	bl	800b03c <__assert_func>
 800a58e:	6922      	ldr	r2, [r4, #16]
 800a590:	3202      	adds	r2, #2
 800a592:	f104 010c 	add.w	r1, r4, #12
 800a596:	0092      	lsls	r2, r2, #2
 800a598:	300c      	adds	r0, #12
 800a59a:	f7ff ff5b 	bl	800a454 <memcpy>
 800a59e:	4621      	mov	r1, r4
 800a5a0:	4638      	mov	r0, r7
 800a5a2:	f7ff ffa5 	bl	800a4f0 <_Bfree>
 800a5a6:	4644      	mov	r4, r8
 800a5a8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a5ac:	3501      	adds	r5, #1
 800a5ae:	615e      	str	r6, [r3, #20]
 800a5b0:	6125      	str	r5, [r4, #16]
 800a5b2:	4620      	mov	r0, r4
 800a5b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5b8:	0800c50f 	.word	0x0800c50f
 800a5bc:	0800c520 	.word	0x0800c520

0800a5c0 <__hi0bits>:
 800a5c0:	0c03      	lsrs	r3, r0, #16
 800a5c2:	041b      	lsls	r3, r3, #16
 800a5c4:	b9d3      	cbnz	r3, 800a5fc <__hi0bits+0x3c>
 800a5c6:	0400      	lsls	r0, r0, #16
 800a5c8:	2310      	movs	r3, #16
 800a5ca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a5ce:	bf04      	itt	eq
 800a5d0:	0200      	lsleq	r0, r0, #8
 800a5d2:	3308      	addeq	r3, #8
 800a5d4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a5d8:	bf04      	itt	eq
 800a5da:	0100      	lsleq	r0, r0, #4
 800a5dc:	3304      	addeq	r3, #4
 800a5de:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a5e2:	bf04      	itt	eq
 800a5e4:	0080      	lsleq	r0, r0, #2
 800a5e6:	3302      	addeq	r3, #2
 800a5e8:	2800      	cmp	r0, #0
 800a5ea:	db05      	blt.n	800a5f8 <__hi0bits+0x38>
 800a5ec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a5f0:	f103 0301 	add.w	r3, r3, #1
 800a5f4:	bf08      	it	eq
 800a5f6:	2320      	moveq	r3, #32
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	4770      	bx	lr
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	e7e4      	b.n	800a5ca <__hi0bits+0xa>

0800a600 <__lo0bits>:
 800a600:	6803      	ldr	r3, [r0, #0]
 800a602:	f013 0207 	ands.w	r2, r3, #7
 800a606:	4601      	mov	r1, r0
 800a608:	d00b      	beq.n	800a622 <__lo0bits+0x22>
 800a60a:	07da      	lsls	r2, r3, #31
 800a60c:	d423      	bmi.n	800a656 <__lo0bits+0x56>
 800a60e:	0798      	lsls	r0, r3, #30
 800a610:	bf49      	itett	mi
 800a612:	085b      	lsrmi	r3, r3, #1
 800a614:	089b      	lsrpl	r3, r3, #2
 800a616:	2001      	movmi	r0, #1
 800a618:	600b      	strmi	r3, [r1, #0]
 800a61a:	bf5c      	itt	pl
 800a61c:	600b      	strpl	r3, [r1, #0]
 800a61e:	2002      	movpl	r0, #2
 800a620:	4770      	bx	lr
 800a622:	b298      	uxth	r0, r3
 800a624:	b9a8      	cbnz	r0, 800a652 <__lo0bits+0x52>
 800a626:	0c1b      	lsrs	r3, r3, #16
 800a628:	2010      	movs	r0, #16
 800a62a:	b2da      	uxtb	r2, r3
 800a62c:	b90a      	cbnz	r2, 800a632 <__lo0bits+0x32>
 800a62e:	3008      	adds	r0, #8
 800a630:	0a1b      	lsrs	r3, r3, #8
 800a632:	071a      	lsls	r2, r3, #28
 800a634:	bf04      	itt	eq
 800a636:	091b      	lsreq	r3, r3, #4
 800a638:	3004      	addeq	r0, #4
 800a63a:	079a      	lsls	r2, r3, #30
 800a63c:	bf04      	itt	eq
 800a63e:	089b      	lsreq	r3, r3, #2
 800a640:	3002      	addeq	r0, #2
 800a642:	07da      	lsls	r2, r3, #31
 800a644:	d403      	bmi.n	800a64e <__lo0bits+0x4e>
 800a646:	085b      	lsrs	r3, r3, #1
 800a648:	f100 0001 	add.w	r0, r0, #1
 800a64c:	d005      	beq.n	800a65a <__lo0bits+0x5a>
 800a64e:	600b      	str	r3, [r1, #0]
 800a650:	4770      	bx	lr
 800a652:	4610      	mov	r0, r2
 800a654:	e7e9      	b.n	800a62a <__lo0bits+0x2a>
 800a656:	2000      	movs	r0, #0
 800a658:	4770      	bx	lr
 800a65a:	2020      	movs	r0, #32
 800a65c:	4770      	bx	lr
	...

0800a660 <__i2b>:
 800a660:	b510      	push	{r4, lr}
 800a662:	460c      	mov	r4, r1
 800a664:	2101      	movs	r1, #1
 800a666:	f7ff ff03 	bl	800a470 <_Balloc>
 800a66a:	4602      	mov	r2, r0
 800a66c:	b928      	cbnz	r0, 800a67a <__i2b+0x1a>
 800a66e:	4b05      	ldr	r3, [pc, #20]	; (800a684 <__i2b+0x24>)
 800a670:	4805      	ldr	r0, [pc, #20]	; (800a688 <__i2b+0x28>)
 800a672:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a676:	f000 fce1 	bl	800b03c <__assert_func>
 800a67a:	2301      	movs	r3, #1
 800a67c:	6144      	str	r4, [r0, #20]
 800a67e:	6103      	str	r3, [r0, #16]
 800a680:	bd10      	pop	{r4, pc}
 800a682:	bf00      	nop
 800a684:	0800c50f 	.word	0x0800c50f
 800a688:	0800c520 	.word	0x0800c520

0800a68c <__multiply>:
 800a68c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a690:	4691      	mov	r9, r2
 800a692:	690a      	ldr	r2, [r1, #16]
 800a694:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a698:	429a      	cmp	r2, r3
 800a69a:	bfb8      	it	lt
 800a69c:	460b      	movlt	r3, r1
 800a69e:	460c      	mov	r4, r1
 800a6a0:	bfbc      	itt	lt
 800a6a2:	464c      	movlt	r4, r9
 800a6a4:	4699      	movlt	r9, r3
 800a6a6:	6927      	ldr	r7, [r4, #16]
 800a6a8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a6ac:	68a3      	ldr	r3, [r4, #8]
 800a6ae:	6861      	ldr	r1, [r4, #4]
 800a6b0:	eb07 060a 	add.w	r6, r7, sl
 800a6b4:	42b3      	cmp	r3, r6
 800a6b6:	b085      	sub	sp, #20
 800a6b8:	bfb8      	it	lt
 800a6ba:	3101      	addlt	r1, #1
 800a6bc:	f7ff fed8 	bl	800a470 <_Balloc>
 800a6c0:	b930      	cbnz	r0, 800a6d0 <__multiply+0x44>
 800a6c2:	4602      	mov	r2, r0
 800a6c4:	4b44      	ldr	r3, [pc, #272]	; (800a7d8 <__multiply+0x14c>)
 800a6c6:	4845      	ldr	r0, [pc, #276]	; (800a7dc <__multiply+0x150>)
 800a6c8:	f240 115d 	movw	r1, #349	; 0x15d
 800a6cc:	f000 fcb6 	bl	800b03c <__assert_func>
 800a6d0:	f100 0514 	add.w	r5, r0, #20
 800a6d4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a6d8:	462b      	mov	r3, r5
 800a6da:	2200      	movs	r2, #0
 800a6dc:	4543      	cmp	r3, r8
 800a6de:	d321      	bcc.n	800a724 <__multiply+0x98>
 800a6e0:	f104 0314 	add.w	r3, r4, #20
 800a6e4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a6e8:	f109 0314 	add.w	r3, r9, #20
 800a6ec:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a6f0:	9202      	str	r2, [sp, #8]
 800a6f2:	1b3a      	subs	r2, r7, r4
 800a6f4:	3a15      	subs	r2, #21
 800a6f6:	f022 0203 	bic.w	r2, r2, #3
 800a6fa:	3204      	adds	r2, #4
 800a6fc:	f104 0115 	add.w	r1, r4, #21
 800a700:	428f      	cmp	r7, r1
 800a702:	bf38      	it	cc
 800a704:	2204      	movcc	r2, #4
 800a706:	9201      	str	r2, [sp, #4]
 800a708:	9a02      	ldr	r2, [sp, #8]
 800a70a:	9303      	str	r3, [sp, #12]
 800a70c:	429a      	cmp	r2, r3
 800a70e:	d80c      	bhi.n	800a72a <__multiply+0x9e>
 800a710:	2e00      	cmp	r6, #0
 800a712:	dd03      	ble.n	800a71c <__multiply+0x90>
 800a714:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d05a      	beq.n	800a7d2 <__multiply+0x146>
 800a71c:	6106      	str	r6, [r0, #16]
 800a71e:	b005      	add	sp, #20
 800a720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a724:	f843 2b04 	str.w	r2, [r3], #4
 800a728:	e7d8      	b.n	800a6dc <__multiply+0x50>
 800a72a:	f8b3 a000 	ldrh.w	sl, [r3]
 800a72e:	f1ba 0f00 	cmp.w	sl, #0
 800a732:	d024      	beq.n	800a77e <__multiply+0xf2>
 800a734:	f104 0e14 	add.w	lr, r4, #20
 800a738:	46a9      	mov	r9, r5
 800a73a:	f04f 0c00 	mov.w	ip, #0
 800a73e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a742:	f8d9 1000 	ldr.w	r1, [r9]
 800a746:	fa1f fb82 	uxth.w	fp, r2
 800a74a:	b289      	uxth	r1, r1
 800a74c:	fb0a 110b 	mla	r1, sl, fp, r1
 800a750:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a754:	f8d9 2000 	ldr.w	r2, [r9]
 800a758:	4461      	add	r1, ip
 800a75a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a75e:	fb0a c20b 	mla	r2, sl, fp, ip
 800a762:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a766:	b289      	uxth	r1, r1
 800a768:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a76c:	4577      	cmp	r7, lr
 800a76e:	f849 1b04 	str.w	r1, [r9], #4
 800a772:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a776:	d8e2      	bhi.n	800a73e <__multiply+0xb2>
 800a778:	9a01      	ldr	r2, [sp, #4]
 800a77a:	f845 c002 	str.w	ip, [r5, r2]
 800a77e:	9a03      	ldr	r2, [sp, #12]
 800a780:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a784:	3304      	adds	r3, #4
 800a786:	f1b9 0f00 	cmp.w	r9, #0
 800a78a:	d020      	beq.n	800a7ce <__multiply+0x142>
 800a78c:	6829      	ldr	r1, [r5, #0]
 800a78e:	f104 0c14 	add.w	ip, r4, #20
 800a792:	46ae      	mov	lr, r5
 800a794:	f04f 0a00 	mov.w	sl, #0
 800a798:	f8bc b000 	ldrh.w	fp, [ip]
 800a79c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a7a0:	fb09 220b 	mla	r2, r9, fp, r2
 800a7a4:	4492      	add	sl, r2
 800a7a6:	b289      	uxth	r1, r1
 800a7a8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a7ac:	f84e 1b04 	str.w	r1, [lr], #4
 800a7b0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a7b4:	f8be 1000 	ldrh.w	r1, [lr]
 800a7b8:	0c12      	lsrs	r2, r2, #16
 800a7ba:	fb09 1102 	mla	r1, r9, r2, r1
 800a7be:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a7c2:	4567      	cmp	r7, ip
 800a7c4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a7c8:	d8e6      	bhi.n	800a798 <__multiply+0x10c>
 800a7ca:	9a01      	ldr	r2, [sp, #4]
 800a7cc:	50a9      	str	r1, [r5, r2]
 800a7ce:	3504      	adds	r5, #4
 800a7d0:	e79a      	b.n	800a708 <__multiply+0x7c>
 800a7d2:	3e01      	subs	r6, #1
 800a7d4:	e79c      	b.n	800a710 <__multiply+0x84>
 800a7d6:	bf00      	nop
 800a7d8:	0800c50f 	.word	0x0800c50f
 800a7dc:	0800c520 	.word	0x0800c520

0800a7e0 <__pow5mult>:
 800a7e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7e4:	4615      	mov	r5, r2
 800a7e6:	f012 0203 	ands.w	r2, r2, #3
 800a7ea:	4606      	mov	r6, r0
 800a7ec:	460f      	mov	r7, r1
 800a7ee:	d007      	beq.n	800a800 <__pow5mult+0x20>
 800a7f0:	4c25      	ldr	r4, [pc, #148]	; (800a888 <__pow5mult+0xa8>)
 800a7f2:	3a01      	subs	r2, #1
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a7fa:	f7ff fe9b 	bl	800a534 <__multadd>
 800a7fe:	4607      	mov	r7, r0
 800a800:	10ad      	asrs	r5, r5, #2
 800a802:	d03d      	beq.n	800a880 <__pow5mult+0xa0>
 800a804:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a806:	b97c      	cbnz	r4, 800a828 <__pow5mult+0x48>
 800a808:	2010      	movs	r0, #16
 800a80a:	f7ff fe1b 	bl	800a444 <malloc>
 800a80e:	4602      	mov	r2, r0
 800a810:	6270      	str	r0, [r6, #36]	; 0x24
 800a812:	b928      	cbnz	r0, 800a820 <__pow5mult+0x40>
 800a814:	4b1d      	ldr	r3, [pc, #116]	; (800a88c <__pow5mult+0xac>)
 800a816:	481e      	ldr	r0, [pc, #120]	; (800a890 <__pow5mult+0xb0>)
 800a818:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a81c:	f000 fc0e 	bl	800b03c <__assert_func>
 800a820:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a824:	6004      	str	r4, [r0, #0]
 800a826:	60c4      	str	r4, [r0, #12]
 800a828:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a82c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a830:	b94c      	cbnz	r4, 800a846 <__pow5mult+0x66>
 800a832:	f240 2171 	movw	r1, #625	; 0x271
 800a836:	4630      	mov	r0, r6
 800a838:	f7ff ff12 	bl	800a660 <__i2b>
 800a83c:	2300      	movs	r3, #0
 800a83e:	f8c8 0008 	str.w	r0, [r8, #8]
 800a842:	4604      	mov	r4, r0
 800a844:	6003      	str	r3, [r0, #0]
 800a846:	f04f 0900 	mov.w	r9, #0
 800a84a:	07eb      	lsls	r3, r5, #31
 800a84c:	d50a      	bpl.n	800a864 <__pow5mult+0x84>
 800a84e:	4639      	mov	r1, r7
 800a850:	4622      	mov	r2, r4
 800a852:	4630      	mov	r0, r6
 800a854:	f7ff ff1a 	bl	800a68c <__multiply>
 800a858:	4639      	mov	r1, r7
 800a85a:	4680      	mov	r8, r0
 800a85c:	4630      	mov	r0, r6
 800a85e:	f7ff fe47 	bl	800a4f0 <_Bfree>
 800a862:	4647      	mov	r7, r8
 800a864:	106d      	asrs	r5, r5, #1
 800a866:	d00b      	beq.n	800a880 <__pow5mult+0xa0>
 800a868:	6820      	ldr	r0, [r4, #0]
 800a86a:	b938      	cbnz	r0, 800a87c <__pow5mult+0x9c>
 800a86c:	4622      	mov	r2, r4
 800a86e:	4621      	mov	r1, r4
 800a870:	4630      	mov	r0, r6
 800a872:	f7ff ff0b 	bl	800a68c <__multiply>
 800a876:	6020      	str	r0, [r4, #0]
 800a878:	f8c0 9000 	str.w	r9, [r0]
 800a87c:	4604      	mov	r4, r0
 800a87e:	e7e4      	b.n	800a84a <__pow5mult+0x6a>
 800a880:	4638      	mov	r0, r7
 800a882:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a886:	bf00      	nop
 800a888:	0800c670 	.word	0x0800c670
 800a88c:	0800c49d 	.word	0x0800c49d
 800a890:	0800c520 	.word	0x0800c520

0800a894 <__lshift>:
 800a894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a898:	460c      	mov	r4, r1
 800a89a:	6849      	ldr	r1, [r1, #4]
 800a89c:	6923      	ldr	r3, [r4, #16]
 800a89e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a8a2:	68a3      	ldr	r3, [r4, #8]
 800a8a4:	4607      	mov	r7, r0
 800a8a6:	4691      	mov	r9, r2
 800a8a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a8ac:	f108 0601 	add.w	r6, r8, #1
 800a8b0:	42b3      	cmp	r3, r6
 800a8b2:	db0b      	blt.n	800a8cc <__lshift+0x38>
 800a8b4:	4638      	mov	r0, r7
 800a8b6:	f7ff fddb 	bl	800a470 <_Balloc>
 800a8ba:	4605      	mov	r5, r0
 800a8bc:	b948      	cbnz	r0, 800a8d2 <__lshift+0x3e>
 800a8be:	4602      	mov	r2, r0
 800a8c0:	4b2a      	ldr	r3, [pc, #168]	; (800a96c <__lshift+0xd8>)
 800a8c2:	482b      	ldr	r0, [pc, #172]	; (800a970 <__lshift+0xdc>)
 800a8c4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a8c8:	f000 fbb8 	bl	800b03c <__assert_func>
 800a8cc:	3101      	adds	r1, #1
 800a8ce:	005b      	lsls	r3, r3, #1
 800a8d0:	e7ee      	b.n	800a8b0 <__lshift+0x1c>
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	f100 0114 	add.w	r1, r0, #20
 800a8d8:	f100 0210 	add.w	r2, r0, #16
 800a8dc:	4618      	mov	r0, r3
 800a8de:	4553      	cmp	r3, sl
 800a8e0:	db37      	blt.n	800a952 <__lshift+0xbe>
 800a8e2:	6920      	ldr	r0, [r4, #16]
 800a8e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a8e8:	f104 0314 	add.w	r3, r4, #20
 800a8ec:	f019 091f 	ands.w	r9, r9, #31
 800a8f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a8f4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a8f8:	d02f      	beq.n	800a95a <__lshift+0xc6>
 800a8fa:	f1c9 0e20 	rsb	lr, r9, #32
 800a8fe:	468a      	mov	sl, r1
 800a900:	f04f 0c00 	mov.w	ip, #0
 800a904:	681a      	ldr	r2, [r3, #0]
 800a906:	fa02 f209 	lsl.w	r2, r2, r9
 800a90a:	ea42 020c 	orr.w	r2, r2, ip
 800a90e:	f84a 2b04 	str.w	r2, [sl], #4
 800a912:	f853 2b04 	ldr.w	r2, [r3], #4
 800a916:	4298      	cmp	r0, r3
 800a918:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a91c:	d8f2      	bhi.n	800a904 <__lshift+0x70>
 800a91e:	1b03      	subs	r3, r0, r4
 800a920:	3b15      	subs	r3, #21
 800a922:	f023 0303 	bic.w	r3, r3, #3
 800a926:	3304      	adds	r3, #4
 800a928:	f104 0215 	add.w	r2, r4, #21
 800a92c:	4290      	cmp	r0, r2
 800a92e:	bf38      	it	cc
 800a930:	2304      	movcc	r3, #4
 800a932:	f841 c003 	str.w	ip, [r1, r3]
 800a936:	f1bc 0f00 	cmp.w	ip, #0
 800a93a:	d001      	beq.n	800a940 <__lshift+0xac>
 800a93c:	f108 0602 	add.w	r6, r8, #2
 800a940:	3e01      	subs	r6, #1
 800a942:	4638      	mov	r0, r7
 800a944:	612e      	str	r6, [r5, #16]
 800a946:	4621      	mov	r1, r4
 800a948:	f7ff fdd2 	bl	800a4f0 <_Bfree>
 800a94c:	4628      	mov	r0, r5
 800a94e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a952:	f842 0f04 	str.w	r0, [r2, #4]!
 800a956:	3301      	adds	r3, #1
 800a958:	e7c1      	b.n	800a8de <__lshift+0x4a>
 800a95a:	3904      	subs	r1, #4
 800a95c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a960:	f841 2f04 	str.w	r2, [r1, #4]!
 800a964:	4298      	cmp	r0, r3
 800a966:	d8f9      	bhi.n	800a95c <__lshift+0xc8>
 800a968:	e7ea      	b.n	800a940 <__lshift+0xac>
 800a96a:	bf00      	nop
 800a96c:	0800c50f 	.word	0x0800c50f
 800a970:	0800c520 	.word	0x0800c520

0800a974 <__mcmp>:
 800a974:	b530      	push	{r4, r5, lr}
 800a976:	6902      	ldr	r2, [r0, #16]
 800a978:	690c      	ldr	r4, [r1, #16]
 800a97a:	1b12      	subs	r2, r2, r4
 800a97c:	d10e      	bne.n	800a99c <__mcmp+0x28>
 800a97e:	f100 0314 	add.w	r3, r0, #20
 800a982:	3114      	adds	r1, #20
 800a984:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a988:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a98c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a990:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a994:	42a5      	cmp	r5, r4
 800a996:	d003      	beq.n	800a9a0 <__mcmp+0x2c>
 800a998:	d305      	bcc.n	800a9a6 <__mcmp+0x32>
 800a99a:	2201      	movs	r2, #1
 800a99c:	4610      	mov	r0, r2
 800a99e:	bd30      	pop	{r4, r5, pc}
 800a9a0:	4283      	cmp	r3, r0
 800a9a2:	d3f3      	bcc.n	800a98c <__mcmp+0x18>
 800a9a4:	e7fa      	b.n	800a99c <__mcmp+0x28>
 800a9a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a9aa:	e7f7      	b.n	800a99c <__mcmp+0x28>

0800a9ac <__mdiff>:
 800a9ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9b0:	460c      	mov	r4, r1
 800a9b2:	4606      	mov	r6, r0
 800a9b4:	4611      	mov	r1, r2
 800a9b6:	4620      	mov	r0, r4
 800a9b8:	4690      	mov	r8, r2
 800a9ba:	f7ff ffdb 	bl	800a974 <__mcmp>
 800a9be:	1e05      	subs	r5, r0, #0
 800a9c0:	d110      	bne.n	800a9e4 <__mdiff+0x38>
 800a9c2:	4629      	mov	r1, r5
 800a9c4:	4630      	mov	r0, r6
 800a9c6:	f7ff fd53 	bl	800a470 <_Balloc>
 800a9ca:	b930      	cbnz	r0, 800a9da <__mdiff+0x2e>
 800a9cc:	4b3a      	ldr	r3, [pc, #232]	; (800aab8 <__mdiff+0x10c>)
 800a9ce:	4602      	mov	r2, r0
 800a9d0:	f240 2132 	movw	r1, #562	; 0x232
 800a9d4:	4839      	ldr	r0, [pc, #228]	; (800aabc <__mdiff+0x110>)
 800a9d6:	f000 fb31 	bl	800b03c <__assert_func>
 800a9da:	2301      	movs	r3, #1
 800a9dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a9e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9e4:	bfa4      	itt	ge
 800a9e6:	4643      	movge	r3, r8
 800a9e8:	46a0      	movge	r8, r4
 800a9ea:	4630      	mov	r0, r6
 800a9ec:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a9f0:	bfa6      	itte	ge
 800a9f2:	461c      	movge	r4, r3
 800a9f4:	2500      	movge	r5, #0
 800a9f6:	2501      	movlt	r5, #1
 800a9f8:	f7ff fd3a 	bl	800a470 <_Balloc>
 800a9fc:	b920      	cbnz	r0, 800aa08 <__mdiff+0x5c>
 800a9fe:	4b2e      	ldr	r3, [pc, #184]	; (800aab8 <__mdiff+0x10c>)
 800aa00:	4602      	mov	r2, r0
 800aa02:	f44f 7110 	mov.w	r1, #576	; 0x240
 800aa06:	e7e5      	b.n	800a9d4 <__mdiff+0x28>
 800aa08:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800aa0c:	6926      	ldr	r6, [r4, #16]
 800aa0e:	60c5      	str	r5, [r0, #12]
 800aa10:	f104 0914 	add.w	r9, r4, #20
 800aa14:	f108 0514 	add.w	r5, r8, #20
 800aa18:	f100 0e14 	add.w	lr, r0, #20
 800aa1c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800aa20:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800aa24:	f108 0210 	add.w	r2, r8, #16
 800aa28:	46f2      	mov	sl, lr
 800aa2a:	2100      	movs	r1, #0
 800aa2c:	f859 3b04 	ldr.w	r3, [r9], #4
 800aa30:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800aa34:	fa1f f883 	uxth.w	r8, r3
 800aa38:	fa11 f18b 	uxtah	r1, r1, fp
 800aa3c:	0c1b      	lsrs	r3, r3, #16
 800aa3e:	eba1 0808 	sub.w	r8, r1, r8
 800aa42:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800aa46:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800aa4a:	fa1f f888 	uxth.w	r8, r8
 800aa4e:	1419      	asrs	r1, r3, #16
 800aa50:	454e      	cmp	r6, r9
 800aa52:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800aa56:	f84a 3b04 	str.w	r3, [sl], #4
 800aa5a:	d8e7      	bhi.n	800aa2c <__mdiff+0x80>
 800aa5c:	1b33      	subs	r3, r6, r4
 800aa5e:	3b15      	subs	r3, #21
 800aa60:	f023 0303 	bic.w	r3, r3, #3
 800aa64:	3304      	adds	r3, #4
 800aa66:	3415      	adds	r4, #21
 800aa68:	42a6      	cmp	r6, r4
 800aa6a:	bf38      	it	cc
 800aa6c:	2304      	movcc	r3, #4
 800aa6e:	441d      	add	r5, r3
 800aa70:	4473      	add	r3, lr
 800aa72:	469e      	mov	lr, r3
 800aa74:	462e      	mov	r6, r5
 800aa76:	4566      	cmp	r6, ip
 800aa78:	d30e      	bcc.n	800aa98 <__mdiff+0xec>
 800aa7a:	f10c 0203 	add.w	r2, ip, #3
 800aa7e:	1b52      	subs	r2, r2, r5
 800aa80:	f022 0203 	bic.w	r2, r2, #3
 800aa84:	3d03      	subs	r5, #3
 800aa86:	45ac      	cmp	ip, r5
 800aa88:	bf38      	it	cc
 800aa8a:	2200      	movcc	r2, #0
 800aa8c:	441a      	add	r2, r3
 800aa8e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800aa92:	b17b      	cbz	r3, 800aab4 <__mdiff+0x108>
 800aa94:	6107      	str	r7, [r0, #16]
 800aa96:	e7a3      	b.n	800a9e0 <__mdiff+0x34>
 800aa98:	f856 8b04 	ldr.w	r8, [r6], #4
 800aa9c:	fa11 f288 	uxtah	r2, r1, r8
 800aaa0:	1414      	asrs	r4, r2, #16
 800aaa2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800aaa6:	b292      	uxth	r2, r2
 800aaa8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800aaac:	f84e 2b04 	str.w	r2, [lr], #4
 800aab0:	1421      	asrs	r1, r4, #16
 800aab2:	e7e0      	b.n	800aa76 <__mdiff+0xca>
 800aab4:	3f01      	subs	r7, #1
 800aab6:	e7ea      	b.n	800aa8e <__mdiff+0xe2>
 800aab8:	0800c50f 	.word	0x0800c50f
 800aabc:	0800c520 	.word	0x0800c520

0800aac0 <__d2b>:
 800aac0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800aac4:	4689      	mov	r9, r1
 800aac6:	2101      	movs	r1, #1
 800aac8:	ec57 6b10 	vmov	r6, r7, d0
 800aacc:	4690      	mov	r8, r2
 800aace:	f7ff fccf 	bl	800a470 <_Balloc>
 800aad2:	4604      	mov	r4, r0
 800aad4:	b930      	cbnz	r0, 800aae4 <__d2b+0x24>
 800aad6:	4602      	mov	r2, r0
 800aad8:	4b25      	ldr	r3, [pc, #148]	; (800ab70 <__d2b+0xb0>)
 800aada:	4826      	ldr	r0, [pc, #152]	; (800ab74 <__d2b+0xb4>)
 800aadc:	f240 310a 	movw	r1, #778	; 0x30a
 800aae0:	f000 faac 	bl	800b03c <__assert_func>
 800aae4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800aae8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800aaec:	bb35      	cbnz	r5, 800ab3c <__d2b+0x7c>
 800aaee:	2e00      	cmp	r6, #0
 800aaf0:	9301      	str	r3, [sp, #4]
 800aaf2:	d028      	beq.n	800ab46 <__d2b+0x86>
 800aaf4:	4668      	mov	r0, sp
 800aaf6:	9600      	str	r6, [sp, #0]
 800aaf8:	f7ff fd82 	bl	800a600 <__lo0bits>
 800aafc:	9900      	ldr	r1, [sp, #0]
 800aafe:	b300      	cbz	r0, 800ab42 <__d2b+0x82>
 800ab00:	9a01      	ldr	r2, [sp, #4]
 800ab02:	f1c0 0320 	rsb	r3, r0, #32
 800ab06:	fa02 f303 	lsl.w	r3, r2, r3
 800ab0a:	430b      	orrs	r3, r1
 800ab0c:	40c2      	lsrs	r2, r0
 800ab0e:	6163      	str	r3, [r4, #20]
 800ab10:	9201      	str	r2, [sp, #4]
 800ab12:	9b01      	ldr	r3, [sp, #4]
 800ab14:	61a3      	str	r3, [r4, #24]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	bf14      	ite	ne
 800ab1a:	2202      	movne	r2, #2
 800ab1c:	2201      	moveq	r2, #1
 800ab1e:	6122      	str	r2, [r4, #16]
 800ab20:	b1d5      	cbz	r5, 800ab58 <__d2b+0x98>
 800ab22:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ab26:	4405      	add	r5, r0
 800ab28:	f8c9 5000 	str.w	r5, [r9]
 800ab2c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ab30:	f8c8 0000 	str.w	r0, [r8]
 800ab34:	4620      	mov	r0, r4
 800ab36:	b003      	add	sp, #12
 800ab38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ab3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ab40:	e7d5      	b.n	800aaee <__d2b+0x2e>
 800ab42:	6161      	str	r1, [r4, #20]
 800ab44:	e7e5      	b.n	800ab12 <__d2b+0x52>
 800ab46:	a801      	add	r0, sp, #4
 800ab48:	f7ff fd5a 	bl	800a600 <__lo0bits>
 800ab4c:	9b01      	ldr	r3, [sp, #4]
 800ab4e:	6163      	str	r3, [r4, #20]
 800ab50:	2201      	movs	r2, #1
 800ab52:	6122      	str	r2, [r4, #16]
 800ab54:	3020      	adds	r0, #32
 800ab56:	e7e3      	b.n	800ab20 <__d2b+0x60>
 800ab58:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ab5c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ab60:	f8c9 0000 	str.w	r0, [r9]
 800ab64:	6918      	ldr	r0, [r3, #16]
 800ab66:	f7ff fd2b 	bl	800a5c0 <__hi0bits>
 800ab6a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ab6e:	e7df      	b.n	800ab30 <__d2b+0x70>
 800ab70:	0800c50f 	.word	0x0800c50f
 800ab74:	0800c520 	.word	0x0800c520

0800ab78 <_calloc_r>:
 800ab78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ab7a:	fba1 2402 	umull	r2, r4, r1, r2
 800ab7e:	b94c      	cbnz	r4, 800ab94 <_calloc_r+0x1c>
 800ab80:	4611      	mov	r1, r2
 800ab82:	9201      	str	r2, [sp, #4]
 800ab84:	f000 f87a 	bl	800ac7c <_malloc_r>
 800ab88:	9a01      	ldr	r2, [sp, #4]
 800ab8a:	4605      	mov	r5, r0
 800ab8c:	b930      	cbnz	r0, 800ab9c <_calloc_r+0x24>
 800ab8e:	4628      	mov	r0, r5
 800ab90:	b003      	add	sp, #12
 800ab92:	bd30      	pop	{r4, r5, pc}
 800ab94:	220c      	movs	r2, #12
 800ab96:	6002      	str	r2, [r0, #0]
 800ab98:	2500      	movs	r5, #0
 800ab9a:	e7f8      	b.n	800ab8e <_calloc_r+0x16>
 800ab9c:	4621      	mov	r1, r4
 800ab9e:	f7fe f92b 	bl	8008df8 <memset>
 800aba2:	e7f4      	b.n	800ab8e <_calloc_r+0x16>

0800aba4 <_free_r>:
 800aba4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aba6:	2900      	cmp	r1, #0
 800aba8:	d044      	beq.n	800ac34 <_free_r+0x90>
 800abaa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800abae:	9001      	str	r0, [sp, #4]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	f1a1 0404 	sub.w	r4, r1, #4
 800abb6:	bfb8      	it	lt
 800abb8:	18e4      	addlt	r4, r4, r3
 800abba:	f000 fa9b 	bl	800b0f4 <__malloc_lock>
 800abbe:	4a1e      	ldr	r2, [pc, #120]	; (800ac38 <_free_r+0x94>)
 800abc0:	9801      	ldr	r0, [sp, #4]
 800abc2:	6813      	ldr	r3, [r2, #0]
 800abc4:	b933      	cbnz	r3, 800abd4 <_free_r+0x30>
 800abc6:	6063      	str	r3, [r4, #4]
 800abc8:	6014      	str	r4, [r2, #0]
 800abca:	b003      	add	sp, #12
 800abcc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800abd0:	f000 ba96 	b.w	800b100 <__malloc_unlock>
 800abd4:	42a3      	cmp	r3, r4
 800abd6:	d908      	bls.n	800abea <_free_r+0x46>
 800abd8:	6825      	ldr	r5, [r4, #0]
 800abda:	1961      	adds	r1, r4, r5
 800abdc:	428b      	cmp	r3, r1
 800abde:	bf01      	itttt	eq
 800abe0:	6819      	ldreq	r1, [r3, #0]
 800abe2:	685b      	ldreq	r3, [r3, #4]
 800abe4:	1949      	addeq	r1, r1, r5
 800abe6:	6021      	streq	r1, [r4, #0]
 800abe8:	e7ed      	b.n	800abc6 <_free_r+0x22>
 800abea:	461a      	mov	r2, r3
 800abec:	685b      	ldr	r3, [r3, #4]
 800abee:	b10b      	cbz	r3, 800abf4 <_free_r+0x50>
 800abf0:	42a3      	cmp	r3, r4
 800abf2:	d9fa      	bls.n	800abea <_free_r+0x46>
 800abf4:	6811      	ldr	r1, [r2, #0]
 800abf6:	1855      	adds	r5, r2, r1
 800abf8:	42a5      	cmp	r5, r4
 800abfa:	d10b      	bne.n	800ac14 <_free_r+0x70>
 800abfc:	6824      	ldr	r4, [r4, #0]
 800abfe:	4421      	add	r1, r4
 800ac00:	1854      	adds	r4, r2, r1
 800ac02:	42a3      	cmp	r3, r4
 800ac04:	6011      	str	r1, [r2, #0]
 800ac06:	d1e0      	bne.n	800abca <_free_r+0x26>
 800ac08:	681c      	ldr	r4, [r3, #0]
 800ac0a:	685b      	ldr	r3, [r3, #4]
 800ac0c:	6053      	str	r3, [r2, #4]
 800ac0e:	4421      	add	r1, r4
 800ac10:	6011      	str	r1, [r2, #0]
 800ac12:	e7da      	b.n	800abca <_free_r+0x26>
 800ac14:	d902      	bls.n	800ac1c <_free_r+0x78>
 800ac16:	230c      	movs	r3, #12
 800ac18:	6003      	str	r3, [r0, #0]
 800ac1a:	e7d6      	b.n	800abca <_free_r+0x26>
 800ac1c:	6825      	ldr	r5, [r4, #0]
 800ac1e:	1961      	adds	r1, r4, r5
 800ac20:	428b      	cmp	r3, r1
 800ac22:	bf04      	itt	eq
 800ac24:	6819      	ldreq	r1, [r3, #0]
 800ac26:	685b      	ldreq	r3, [r3, #4]
 800ac28:	6063      	str	r3, [r4, #4]
 800ac2a:	bf04      	itt	eq
 800ac2c:	1949      	addeq	r1, r1, r5
 800ac2e:	6021      	streq	r1, [r4, #0]
 800ac30:	6054      	str	r4, [r2, #4]
 800ac32:	e7ca      	b.n	800abca <_free_r+0x26>
 800ac34:	b003      	add	sp, #12
 800ac36:	bd30      	pop	{r4, r5, pc}
 800ac38:	20001f84 	.word	0x20001f84

0800ac3c <sbrk_aligned>:
 800ac3c:	b570      	push	{r4, r5, r6, lr}
 800ac3e:	4e0e      	ldr	r6, [pc, #56]	; (800ac78 <sbrk_aligned+0x3c>)
 800ac40:	460c      	mov	r4, r1
 800ac42:	6831      	ldr	r1, [r6, #0]
 800ac44:	4605      	mov	r5, r0
 800ac46:	b911      	cbnz	r1, 800ac4e <sbrk_aligned+0x12>
 800ac48:	f000 f9e8 	bl	800b01c <_sbrk_r>
 800ac4c:	6030      	str	r0, [r6, #0]
 800ac4e:	4621      	mov	r1, r4
 800ac50:	4628      	mov	r0, r5
 800ac52:	f000 f9e3 	bl	800b01c <_sbrk_r>
 800ac56:	1c43      	adds	r3, r0, #1
 800ac58:	d00a      	beq.n	800ac70 <sbrk_aligned+0x34>
 800ac5a:	1cc4      	adds	r4, r0, #3
 800ac5c:	f024 0403 	bic.w	r4, r4, #3
 800ac60:	42a0      	cmp	r0, r4
 800ac62:	d007      	beq.n	800ac74 <sbrk_aligned+0x38>
 800ac64:	1a21      	subs	r1, r4, r0
 800ac66:	4628      	mov	r0, r5
 800ac68:	f000 f9d8 	bl	800b01c <_sbrk_r>
 800ac6c:	3001      	adds	r0, #1
 800ac6e:	d101      	bne.n	800ac74 <sbrk_aligned+0x38>
 800ac70:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800ac74:	4620      	mov	r0, r4
 800ac76:	bd70      	pop	{r4, r5, r6, pc}
 800ac78:	20001f88 	.word	0x20001f88

0800ac7c <_malloc_r>:
 800ac7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac80:	1ccd      	adds	r5, r1, #3
 800ac82:	f025 0503 	bic.w	r5, r5, #3
 800ac86:	3508      	adds	r5, #8
 800ac88:	2d0c      	cmp	r5, #12
 800ac8a:	bf38      	it	cc
 800ac8c:	250c      	movcc	r5, #12
 800ac8e:	2d00      	cmp	r5, #0
 800ac90:	4607      	mov	r7, r0
 800ac92:	db01      	blt.n	800ac98 <_malloc_r+0x1c>
 800ac94:	42a9      	cmp	r1, r5
 800ac96:	d905      	bls.n	800aca4 <_malloc_r+0x28>
 800ac98:	230c      	movs	r3, #12
 800ac9a:	603b      	str	r3, [r7, #0]
 800ac9c:	2600      	movs	r6, #0
 800ac9e:	4630      	mov	r0, r6
 800aca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aca4:	4e2e      	ldr	r6, [pc, #184]	; (800ad60 <_malloc_r+0xe4>)
 800aca6:	f000 fa25 	bl	800b0f4 <__malloc_lock>
 800acaa:	6833      	ldr	r3, [r6, #0]
 800acac:	461c      	mov	r4, r3
 800acae:	bb34      	cbnz	r4, 800acfe <_malloc_r+0x82>
 800acb0:	4629      	mov	r1, r5
 800acb2:	4638      	mov	r0, r7
 800acb4:	f7ff ffc2 	bl	800ac3c <sbrk_aligned>
 800acb8:	1c43      	adds	r3, r0, #1
 800acba:	4604      	mov	r4, r0
 800acbc:	d14d      	bne.n	800ad5a <_malloc_r+0xde>
 800acbe:	6834      	ldr	r4, [r6, #0]
 800acc0:	4626      	mov	r6, r4
 800acc2:	2e00      	cmp	r6, #0
 800acc4:	d140      	bne.n	800ad48 <_malloc_r+0xcc>
 800acc6:	6823      	ldr	r3, [r4, #0]
 800acc8:	4631      	mov	r1, r6
 800acca:	4638      	mov	r0, r7
 800accc:	eb04 0803 	add.w	r8, r4, r3
 800acd0:	f000 f9a4 	bl	800b01c <_sbrk_r>
 800acd4:	4580      	cmp	r8, r0
 800acd6:	d13a      	bne.n	800ad4e <_malloc_r+0xd2>
 800acd8:	6821      	ldr	r1, [r4, #0]
 800acda:	3503      	adds	r5, #3
 800acdc:	1a6d      	subs	r5, r5, r1
 800acde:	f025 0503 	bic.w	r5, r5, #3
 800ace2:	3508      	adds	r5, #8
 800ace4:	2d0c      	cmp	r5, #12
 800ace6:	bf38      	it	cc
 800ace8:	250c      	movcc	r5, #12
 800acea:	4629      	mov	r1, r5
 800acec:	4638      	mov	r0, r7
 800acee:	f7ff ffa5 	bl	800ac3c <sbrk_aligned>
 800acf2:	3001      	adds	r0, #1
 800acf4:	d02b      	beq.n	800ad4e <_malloc_r+0xd2>
 800acf6:	6823      	ldr	r3, [r4, #0]
 800acf8:	442b      	add	r3, r5
 800acfa:	6023      	str	r3, [r4, #0]
 800acfc:	e00e      	b.n	800ad1c <_malloc_r+0xa0>
 800acfe:	6822      	ldr	r2, [r4, #0]
 800ad00:	1b52      	subs	r2, r2, r5
 800ad02:	d41e      	bmi.n	800ad42 <_malloc_r+0xc6>
 800ad04:	2a0b      	cmp	r2, #11
 800ad06:	d916      	bls.n	800ad36 <_malloc_r+0xba>
 800ad08:	1961      	adds	r1, r4, r5
 800ad0a:	42a3      	cmp	r3, r4
 800ad0c:	6025      	str	r5, [r4, #0]
 800ad0e:	bf18      	it	ne
 800ad10:	6059      	strne	r1, [r3, #4]
 800ad12:	6863      	ldr	r3, [r4, #4]
 800ad14:	bf08      	it	eq
 800ad16:	6031      	streq	r1, [r6, #0]
 800ad18:	5162      	str	r2, [r4, r5]
 800ad1a:	604b      	str	r3, [r1, #4]
 800ad1c:	4638      	mov	r0, r7
 800ad1e:	f104 060b 	add.w	r6, r4, #11
 800ad22:	f000 f9ed 	bl	800b100 <__malloc_unlock>
 800ad26:	f026 0607 	bic.w	r6, r6, #7
 800ad2a:	1d23      	adds	r3, r4, #4
 800ad2c:	1af2      	subs	r2, r6, r3
 800ad2e:	d0b6      	beq.n	800ac9e <_malloc_r+0x22>
 800ad30:	1b9b      	subs	r3, r3, r6
 800ad32:	50a3      	str	r3, [r4, r2]
 800ad34:	e7b3      	b.n	800ac9e <_malloc_r+0x22>
 800ad36:	6862      	ldr	r2, [r4, #4]
 800ad38:	42a3      	cmp	r3, r4
 800ad3a:	bf0c      	ite	eq
 800ad3c:	6032      	streq	r2, [r6, #0]
 800ad3e:	605a      	strne	r2, [r3, #4]
 800ad40:	e7ec      	b.n	800ad1c <_malloc_r+0xa0>
 800ad42:	4623      	mov	r3, r4
 800ad44:	6864      	ldr	r4, [r4, #4]
 800ad46:	e7b2      	b.n	800acae <_malloc_r+0x32>
 800ad48:	4634      	mov	r4, r6
 800ad4a:	6876      	ldr	r6, [r6, #4]
 800ad4c:	e7b9      	b.n	800acc2 <_malloc_r+0x46>
 800ad4e:	230c      	movs	r3, #12
 800ad50:	603b      	str	r3, [r7, #0]
 800ad52:	4638      	mov	r0, r7
 800ad54:	f000 f9d4 	bl	800b100 <__malloc_unlock>
 800ad58:	e7a1      	b.n	800ac9e <_malloc_r+0x22>
 800ad5a:	6025      	str	r5, [r4, #0]
 800ad5c:	e7de      	b.n	800ad1c <_malloc_r+0xa0>
 800ad5e:	bf00      	nop
 800ad60:	20001f84 	.word	0x20001f84

0800ad64 <__ssputs_r>:
 800ad64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad68:	688e      	ldr	r6, [r1, #8]
 800ad6a:	429e      	cmp	r6, r3
 800ad6c:	4682      	mov	sl, r0
 800ad6e:	460c      	mov	r4, r1
 800ad70:	4690      	mov	r8, r2
 800ad72:	461f      	mov	r7, r3
 800ad74:	d838      	bhi.n	800ade8 <__ssputs_r+0x84>
 800ad76:	898a      	ldrh	r2, [r1, #12]
 800ad78:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ad7c:	d032      	beq.n	800ade4 <__ssputs_r+0x80>
 800ad7e:	6825      	ldr	r5, [r4, #0]
 800ad80:	6909      	ldr	r1, [r1, #16]
 800ad82:	eba5 0901 	sub.w	r9, r5, r1
 800ad86:	6965      	ldr	r5, [r4, #20]
 800ad88:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ad8c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ad90:	3301      	adds	r3, #1
 800ad92:	444b      	add	r3, r9
 800ad94:	106d      	asrs	r5, r5, #1
 800ad96:	429d      	cmp	r5, r3
 800ad98:	bf38      	it	cc
 800ad9a:	461d      	movcc	r5, r3
 800ad9c:	0553      	lsls	r3, r2, #21
 800ad9e:	d531      	bpl.n	800ae04 <__ssputs_r+0xa0>
 800ada0:	4629      	mov	r1, r5
 800ada2:	f7ff ff6b 	bl	800ac7c <_malloc_r>
 800ada6:	4606      	mov	r6, r0
 800ada8:	b950      	cbnz	r0, 800adc0 <__ssputs_r+0x5c>
 800adaa:	230c      	movs	r3, #12
 800adac:	f8ca 3000 	str.w	r3, [sl]
 800adb0:	89a3      	ldrh	r3, [r4, #12]
 800adb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800adb6:	81a3      	strh	r3, [r4, #12]
 800adb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800adbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800adc0:	6921      	ldr	r1, [r4, #16]
 800adc2:	464a      	mov	r2, r9
 800adc4:	f7ff fb46 	bl	800a454 <memcpy>
 800adc8:	89a3      	ldrh	r3, [r4, #12]
 800adca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800adce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800add2:	81a3      	strh	r3, [r4, #12]
 800add4:	6126      	str	r6, [r4, #16]
 800add6:	6165      	str	r5, [r4, #20]
 800add8:	444e      	add	r6, r9
 800adda:	eba5 0509 	sub.w	r5, r5, r9
 800adde:	6026      	str	r6, [r4, #0]
 800ade0:	60a5      	str	r5, [r4, #8]
 800ade2:	463e      	mov	r6, r7
 800ade4:	42be      	cmp	r6, r7
 800ade6:	d900      	bls.n	800adea <__ssputs_r+0x86>
 800ade8:	463e      	mov	r6, r7
 800adea:	6820      	ldr	r0, [r4, #0]
 800adec:	4632      	mov	r2, r6
 800adee:	4641      	mov	r1, r8
 800adf0:	f000 f966 	bl	800b0c0 <memmove>
 800adf4:	68a3      	ldr	r3, [r4, #8]
 800adf6:	1b9b      	subs	r3, r3, r6
 800adf8:	60a3      	str	r3, [r4, #8]
 800adfa:	6823      	ldr	r3, [r4, #0]
 800adfc:	4433      	add	r3, r6
 800adfe:	6023      	str	r3, [r4, #0]
 800ae00:	2000      	movs	r0, #0
 800ae02:	e7db      	b.n	800adbc <__ssputs_r+0x58>
 800ae04:	462a      	mov	r2, r5
 800ae06:	f000 f981 	bl	800b10c <_realloc_r>
 800ae0a:	4606      	mov	r6, r0
 800ae0c:	2800      	cmp	r0, #0
 800ae0e:	d1e1      	bne.n	800add4 <__ssputs_r+0x70>
 800ae10:	6921      	ldr	r1, [r4, #16]
 800ae12:	4650      	mov	r0, sl
 800ae14:	f7ff fec6 	bl	800aba4 <_free_r>
 800ae18:	e7c7      	b.n	800adaa <__ssputs_r+0x46>
	...

0800ae1c <_svfiprintf_r>:
 800ae1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae20:	4698      	mov	r8, r3
 800ae22:	898b      	ldrh	r3, [r1, #12]
 800ae24:	061b      	lsls	r3, r3, #24
 800ae26:	b09d      	sub	sp, #116	; 0x74
 800ae28:	4607      	mov	r7, r0
 800ae2a:	460d      	mov	r5, r1
 800ae2c:	4614      	mov	r4, r2
 800ae2e:	d50e      	bpl.n	800ae4e <_svfiprintf_r+0x32>
 800ae30:	690b      	ldr	r3, [r1, #16]
 800ae32:	b963      	cbnz	r3, 800ae4e <_svfiprintf_r+0x32>
 800ae34:	2140      	movs	r1, #64	; 0x40
 800ae36:	f7ff ff21 	bl	800ac7c <_malloc_r>
 800ae3a:	6028      	str	r0, [r5, #0]
 800ae3c:	6128      	str	r0, [r5, #16]
 800ae3e:	b920      	cbnz	r0, 800ae4a <_svfiprintf_r+0x2e>
 800ae40:	230c      	movs	r3, #12
 800ae42:	603b      	str	r3, [r7, #0]
 800ae44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ae48:	e0d1      	b.n	800afee <_svfiprintf_r+0x1d2>
 800ae4a:	2340      	movs	r3, #64	; 0x40
 800ae4c:	616b      	str	r3, [r5, #20]
 800ae4e:	2300      	movs	r3, #0
 800ae50:	9309      	str	r3, [sp, #36]	; 0x24
 800ae52:	2320      	movs	r3, #32
 800ae54:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ae58:	f8cd 800c 	str.w	r8, [sp, #12]
 800ae5c:	2330      	movs	r3, #48	; 0x30
 800ae5e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b008 <_svfiprintf_r+0x1ec>
 800ae62:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ae66:	f04f 0901 	mov.w	r9, #1
 800ae6a:	4623      	mov	r3, r4
 800ae6c:	469a      	mov	sl, r3
 800ae6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae72:	b10a      	cbz	r2, 800ae78 <_svfiprintf_r+0x5c>
 800ae74:	2a25      	cmp	r2, #37	; 0x25
 800ae76:	d1f9      	bne.n	800ae6c <_svfiprintf_r+0x50>
 800ae78:	ebba 0b04 	subs.w	fp, sl, r4
 800ae7c:	d00b      	beq.n	800ae96 <_svfiprintf_r+0x7a>
 800ae7e:	465b      	mov	r3, fp
 800ae80:	4622      	mov	r2, r4
 800ae82:	4629      	mov	r1, r5
 800ae84:	4638      	mov	r0, r7
 800ae86:	f7ff ff6d 	bl	800ad64 <__ssputs_r>
 800ae8a:	3001      	adds	r0, #1
 800ae8c:	f000 80aa 	beq.w	800afe4 <_svfiprintf_r+0x1c8>
 800ae90:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae92:	445a      	add	r2, fp
 800ae94:	9209      	str	r2, [sp, #36]	; 0x24
 800ae96:	f89a 3000 	ldrb.w	r3, [sl]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	f000 80a2 	beq.w	800afe4 <_svfiprintf_r+0x1c8>
 800aea0:	2300      	movs	r3, #0
 800aea2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800aea6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aeaa:	f10a 0a01 	add.w	sl, sl, #1
 800aeae:	9304      	str	r3, [sp, #16]
 800aeb0:	9307      	str	r3, [sp, #28]
 800aeb2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aeb6:	931a      	str	r3, [sp, #104]	; 0x68
 800aeb8:	4654      	mov	r4, sl
 800aeba:	2205      	movs	r2, #5
 800aebc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aec0:	4851      	ldr	r0, [pc, #324]	; (800b008 <_svfiprintf_r+0x1ec>)
 800aec2:	f7f5 f995 	bl	80001f0 <memchr>
 800aec6:	9a04      	ldr	r2, [sp, #16]
 800aec8:	b9d8      	cbnz	r0, 800af02 <_svfiprintf_r+0xe6>
 800aeca:	06d0      	lsls	r0, r2, #27
 800aecc:	bf44      	itt	mi
 800aece:	2320      	movmi	r3, #32
 800aed0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aed4:	0711      	lsls	r1, r2, #28
 800aed6:	bf44      	itt	mi
 800aed8:	232b      	movmi	r3, #43	; 0x2b
 800aeda:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aede:	f89a 3000 	ldrb.w	r3, [sl]
 800aee2:	2b2a      	cmp	r3, #42	; 0x2a
 800aee4:	d015      	beq.n	800af12 <_svfiprintf_r+0xf6>
 800aee6:	9a07      	ldr	r2, [sp, #28]
 800aee8:	4654      	mov	r4, sl
 800aeea:	2000      	movs	r0, #0
 800aeec:	f04f 0c0a 	mov.w	ip, #10
 800aef0:	4621      	mov	r1, r4
 800aef2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aef6:	3b30      	subs	r3, #48	; 0x30
 800aef8:	2b09      	cmp	r3, #9
 800aefa:	d94e      	bls.n	800af9a <_svfiprintf_r+0x17e>
 800aefc:	b1b0      	cbz	r0, 800af2c <_svfiprintf_r+0x110>
 800aefe:	9207      	str	r2, [sp, #28]
 800af00:	e014      	b.n	800af2c <_svfiprintf_r+0x110>
 800af02:	eba0 0308 	sub.w	r3, r0, r8
 800af06:	fa09 f303 	lsl.w	r3, r9, r3
 800af0a:	4313      	orrs	r3, r2
 800af0c:	9304      	str	r3, [sp, #16]
 800af0e:	46a2      	mov	sl, r4
 800af10:	e7d2      	b.n	800aeb8 <_svfiprintf_r+0x9c>
 800af12:	9b03      	ldr	r3, [sp, #12]
 800af14:	1d19      	adds	r1, r3, #4
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	9103      	str	r1, [sp, #12]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	bfbb      	ittet	lt
 800af1e:	425b      	neglt	r3, r3
 800af20:	f042 0202 	orrlt.w	r2, r2, #2
 800af24:	9307      	strge	r3, [sp, #28]
 800af26:	9307      	strlt	r3, [sp, #28]
 800af28:	bfb8      	it	lt
 800af2a:	9204      	strlt	r2, [sp, #16]
 800af2c:	7823      	ldrb	r3, [r4, #0]
 800af2e:	2b2e      	cmp	r3, #46	; 0x2e
 800af30:	d10c      	bne.n	800af4c <_svfiprintf_r+0x130>
 800af32:	7863      	ldrb	r3, [r4, #1]
 800af34:	2b2a      	cmp	r3, #42	; 0x2a
 800af36:	d135      	bne.n	800afa4 <_svfiprintf_r+0x188>
 800af38:	9b03      	ldr	r3, [sp, #12]
 800af3a:	1d1a      	adds	r2, r3, #4
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	9203      	str	r2, [sp, #12]
 800af40:	2b00      	cmp	r3, #0
 800af42:	bfb8      	it	lt
 800af44:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800af48:	3402      	adds	r4, #2
 800af4a:	9305      	str	r3, [sp, #20]
 800af4c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b018 <_svfiprintf_r+0x1fc>
 800af50:	7821      	ldrb	r1, [r4, #0]
 800af52:	2203      	movs	r2, #3
 800af54:	4650      	mov	r0, sl
 800af56:	f7f5 f94b 	bl	80001f0 <memchr>
 800af5a:	b140      	cbz	r0, 800af6e <_svfiprintf_r+0x152>
 800af5c:	2340      	movs	r3, #64	; 0x40
 800af5e:	eba0 000a 	sub.w	r0, r0, sl
 800af62:	fa03 f000 	lsl.w	r0, r3, r0
 800af66:	9b04      	ldr	r3, [sp, #16]
 800af68:	4303      	orrs	r3, r0
 800af6a:	3401      	adds	r4, #1
 800af6c:	9304      	str	r3, [sp, #16]
 800af6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af72:	4826      	ldr	r0, [pc, #152]	; (800b00c <_svfiprintf_r+0x1f0>)
 800af74:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800af78:	2206      	movs	r2, #6
 800af7a:	f7f5 f939 	bl	80001f0 <memchr>
 800af7e:	2800      	cmp	r0, #0
 800af80:	d038      	beq.n	800aff4 <_svfiprintf_r+0x1d8>
 800af82:	4b23      	ldr	r3, [pc, #140]	; (800b010 <_svfiprintf_r+0x1f4>)
 800af84:	bb1b      	cbnz	r3, 800afce <_svfiprintf_r+0x1b2>
 800af86:	9b03      	ldr	r3, [sp, #12]
 800af88:	3307      	adds	r3, #7
 800af8a:	f023 0307 	bic.w	r3, r3, #7
 800af8e:	3308      	adds	r3, #8
 800af90:	9303      	str	r3, [sp, #12]
 800af92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af94:	4433      	add	r3, r6
 800af96:	9309      	str	r3, [sp, #36]	; 0x24
 800af98:	e767      	b.n	800ae6a <_svfiprintf_r+0x4e>
 800af9a:	fb0c 3202 	mla	r2, ip, r2, r3
 800af9e:	460c      	mov	r4, r1
 800afa0:	2001      	movs	r0, #1
 800afa2:	e7a5      	b.n	800aef0 <_svfiprintf_r+0xd4>
 800afa4:	2300      	movs	r3, #0
 800afa6:	3401      	adds	r4, #1
 800afa8:	9305      	str	r3, [sp, #20]
 800afaa:	4619      	mov	r1, r3
 800afac:	f04f 0c0a 	mov.w	ip, #10
 800afb0:	4620      	mov	r0, r4
 800afb2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800afb6:	3a30      	subs	r2, #48	; 0x30
 800afb8:	2a09      	cmp	r2, #9
 800afba:	d903      	bls.n	800afc4 <_svfiprintf_r+0x1a8>
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d0c5      	beq.n	800af4c <_svfiprintf_r+0x130>
 800afc0:	9105      	str	r1, [sp, #20]
 800afc2:	e7c3      	b.n	800af4c <_svfiprintf_r+0x130>
 800afc4:	fb0c 2101 	mla	r1, ip, r1, r2
 800afc8:	4604      	mov	r4, r0
 800afca:	2301      	movs	r3, #1
 800afcc:	e7f0      	b.n	800afb0 <_svfiprintf_r+0x194>
 800afce:	ab03      	add	r3, sp, #12
 800afd0:	9300      	str	r3, [sp, #0]
 800afd2:	462a      	mov	r2, r5
 800afd4:	4b0f      	ldr	r3, [pc, #60]	; (800b014 <_svfiprintf_r+0x1f8>)
 800afd6:	a904      	add	r1, sp, #16
 800afd8:	4638      	mov	r0, r7
 800afda:	f7fd ffb5 	bl	8008f48 <_printf_float>
 800afde:	1c42      	adds	r2, r0, #1
 800afe0:	4606      	mov	r6, r0
 800afe2:	d1d6      	bne.n	800af92 <_svfiprintf_r+0x176>
 800afe4:	89ab      	ldrh	r3, [r5, #12]
 800afe6:	065b      	lsls	r3, r3, #25
 800afe8:	f53f af2c 	bmi.w	800ae44 <_svfiprintf_r+0x28>
 800afec:	9809      	ldr	r0, [sp, #36]	; 0x24
 800afee:	b01d      	add	sp, #116	; 0x74
 800aff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aff4:	ab03      	add	r3, sp, #12
 800aff6:	9300      	str	r3, [sp, #0]
 800aff8:	462a      	mov	r2, r5
 800affa:	4b06      	ldr	r3, [pc, #24]	; (800b014 <_svfiprintf_r+0x1f8>)
 800affc:	a904      	add	r1, sp, #16
 800affe:	4638      	mov	r0, r7
 800b000:	f7fe fa46 	bl	8009490 <_printf_i>
 800b004:	e7eb      	b.n	800afde <_svfiprintf_r+0x1c2>
 800b006:	bf00      	nop
 800b008:	0800c67c 	.word	0x0800c67c
 800b00c:	0800c686 	.word	0x0800c686
 800b010:	08008f49 	.word	0x08008f49
 800b014:	0800ad65 	.word	0x0800ad65
 800b018:	0800c682 	.word	0x0800c682

0800b01c <_sbrk_r>:
 800b01c:	b538      	push	{r3, r4, r5, lr}
 800b01e:	4d06      	ldr	r5, [pc, #24]	; (800b038 <_sbrk_r+0x1c>)
 800b020:	2300      	movs	r3, #0
 800b022:	4604      	mov	r4, r0
 800b024:	4608      	mov	r0, r1
 800b026:	602b      	str	r3, [r5, #0]
 800b028:	f7f6 fb48 	bl	80016bc <_sbrk>
 800b02c:	1c43      	adds	r3, r0, #1
 800b02e:	d102      	bne.n	800b036 <_sbrk_r+0x1a>
 800b030:	682b      	ldr	r3, [r5, #0]
 800b032:	b103      	cbz	r3, 800b036 <_sbrk_r+0x1a>
 800b034:	6023      	str	r3, [r4, #0]
 800b036:	bd38      	pop	{r3, r4, r5, pc}
 800b038:	20001f8c 	.word	0x20001f8c

0800b03c <__assert_func>:
 800b03c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b03e:	4614      	mov	r4, r2
 800b040:	461a      	mov	r2, r3
 800b042:	4b09      	ldr	r3, [pc, #36]	; (800b068 <__assert_func+0x2c>)
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	4605      	mov	r5, r0
 800b048:	68d8      	ldr	r0, [r3, #12]
 800b04a:	b14c      	cbz	r4, 800b060 <__assert_func+0x24>
 800b04c:	4b07      	ldr	r3, [pc, #28]	; (800b06c <__assert_func+0x30>)
 800b04e:	9100      	str	r1, [sp, #0]
 800b050:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b054:	4906      	ldr	r1, [pc, #24]	; (800b070 <__assert_func+0x34>)
 800b056:	462b      	mov	r3, r5
 800b058:	f000 f80e 	bl	800b078 <fiprintf>
 800b05c:	f000 faac 	bl	800b5b8 <abort>
 800b060:	4b04      	ldr	r3, [pc, #16]	; (800b074 <__assert_func+0x38>)
 800b062:	461c      	mov	r4, r3
 800b064:	e7f3      	b.n	800b04e <__assert_func+0x12>
 800b066:	bf00      	nop
 800b068:	20000100 	.word	0x20000100
 800b06c:	0800c68d 	.word	0x0800c68d
 800b070:	0800c69a 	.word	0x0800c69a
 800b074:	0800c6c8 	.word	0x0800c6c8

0800b078 <fiprintf>:
 800b078:	b40e      	push	{r1, r2, r3}
 800b07a:	b503      	push	{r0, r1, lr}
 800b07c:	4601      	mov	r1, r0
 800b07e:	ab03      	add	r3, sp, #12
 800b080:	4805      	ldr	r0, [pc, #20]	; (800b098 <fiprintf+0x20>)
 800b082:	f853 2b04 	ldr.w	r2, [r3], #4
 800b086:	6800      	ldr	r0, [r0, #0]
 800b088:	9301      	str	r3, [sp, #4]
 800b08a:	f000 f897 	bl	800b1bc <_vfiprintf_r>
 800b08e:	b002      	add	sp, #8
 800b090:	f85d eb04 	ldr.w	lr, [sp], #4
 800b094:	b003      	add	sp, #12
 800b096:	4770      	bx	lr
 800b098:	20000100 	.word	0x20000100

0800b09c <__ascii_mbtowc>:
 800b09c:	b082      	sub	sp, #8
 800b09e:	b901      	cbnz	r1, 800b0a2 <__ascii_mbtowc+0x6>
 800b0a0:	a901      	add	r1, sp, #4
 800b0a2:	b142      	cbz	r2, 800b0b6 <__ascii_mbtowc+0x1a>
 800b0a4:	b14b      	cbz	r3, 800b0ba <__ascii_mbtowc+0x1e>
 800b0a6:	7813      	ldrb	r3, [r2, #0]
 800b0a8:	600b      	str	r3, [r1, #0]
 800b0aa:	7812      	ldrb	r2, [r2, #0]
 800b0ac:	1e10      	subs	r0, r2, #0
 800b0ae:	bf18      	it	ne
 800b0b0:	2001      	movne	r0, #1
 800b0b2:	b002      	add	sp, #8
 800b0b4:	4770      	bx	lr
 800b0b6:	4610      	mov	r0, r2
 800b0b8:	e7fb      	b.n	800b0b2 <__ascii_mbtowc+0x16>
 800b0ba:	f06f 0001 	mvn.w	r0, #1
 800b0be:	e7f8      	b.n	800b0b2 <__ascii_mbtowc+0x16>

0800b0c0 <memmove>:
 800b0c0:	4288      	cmp	r0, r1
 800b0c2:	b510      	push	{r4, lr}
 800b0c4:	eb01 0402 	add.w	r4, r1, r2
 800b0c8:	d902      	bls.n	800b0d0 <memmove+0x10>
 800b0ca:	4284      	cmp	r4, r0
 800b0cc:	4623      	mov	r3, r4
 800b0ce:	d807      	bhi.n	800b0e0 <memmove+0x20>
 800b0d0:	1e43      	subs	r3, r0, #1
 800b0d2:	42a1      	cmp	r1, r4
 800b0d4:	d008      	beq.n	800b0e8 <memmove+0x28>
 800b0d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b0da:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b0de:	e7f8      	b.n	800b0d2 <memmove+0x12>
 800b0e0:	4402      	add	r2, r0
 800b0e2:	4601      	mov	r1, r0
 800b0e4:	428a      	cmp	r2, r1
 800b0e6:	d100      	bne.n	800b0ea <memmove+0x2a>
 800b0e8:	bd10      	pop	{r4, pc}
 800b0ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b0ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b0f2:	e7f7      	b.n	800b0e4 <memmove+0x24>

0800b0f4 <__malloc_lock>:
 800b0f4:	4801      	ldr	r0, [pc, #4]	; (800b0fc <__malloc_lock+0x8>)
 800b0f6:	f000 bc1f 	b.w	800b938 <__retarget_lock_acquire_recursive>
 800b0fa:	bf00      	nop
 800b0fc:	20001f90 	.word	0x20001f90

0800b100 <__malloc_unlock>:
 800b100:	4801      	ldr	r0, [pc, #4]	; (800b108 <__malloc_unlock+0x8>)
 800b102:	f000 bc1a 	b.w	800b93a <__retarget_lock_release_recursive>
 800b106:	bf00      	nop
 800b108:	20001f90 	.word	0x20001f90

0800b10c <_realloc_r>:
 800b10c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b110:	4680      	mov	r8, r0
 800b112:	4614      	mov	r4, r2
 800b114:	460e      	mov	r6, r1
 800b116:	b921      	cbnz	r1, 800b122 <_realloc_r+0x16>
 800b118:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b11c:	4611      	mov	r1, r2
 800b11e:	f7ff bdad 	b.w	800ac7c <_malloc_r>
 800b122:	b92a      	cbnz	r2, 800b130 <_realloc_r+0x24>
 800b124:	f7ff fd3e 	bl	800aba4 <_free_r>
 800b128:	4625      	mov	r5, r4
 800b12a:	4628      	mov	r0, r5
 800b12c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b130:	f000 fc6a 	bl	800ba08 <_malloc_usable_size_r>
 800b134:	4284      	cmp	r4, r0
 800b136:	4607      	mov	r7, r0
 800b138:	d802      	bhi.n	800b140 <_realloc_r+0x34>
 800b13a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b13e:	d812      	bhi.n	800b166 <_realloc_r+0x5a>
 800b140:	4621      	mov	r1, r4
 800b142:	4640      	mov	r0, r8
 800b144:	f7ff fd9a 	bl	800ac7c <_malloc_r>
 800b148:	4605      	mov	r5, r0
 800b14a:	2800      	cmp	r0, #0
 800b14c:	d0ed      	beq.n	800b12a <_realloc_r+0x1e>
 800b14e:	42bc      	cmp	r4, r7
 800b150:	4622      	mov	r2, r4
 800b152:	4631      	mov	r1, r6
 800b154:	bf28      	it	cs
 800b156:	463a      	movcs	r2, r7
 800b158:	f7ff f97c 	bl	800a454 <memcpy>
 800b15c:	4631      	mov	r1, r6
 800b15e:	4640      	mov	r0, r8
 800b160:	f7ff fd20 	bl	800aba4 <_free_r>
 800b164:	e7e1      	b.n	800b12a <_realloc_r+0x1e>
 800b166:	4635      	mov	r5, r6
 800b168:	e7df      	b.n	800b12a <_realloc_r+0x1e>

0800b16a <__sfputc_r>:
 800b16a:	6893      	ldr	r3, [r2, #8]
 800b16c:	3b01      	subs	r3, #1
 800b16e:	2b00      	cmp	r3, #0
 800b170:	b410      	push	{r4}
 800b172:	6093      	str	r3, [r2, #8]
 800b174:	da08      	bge.n	800b188 <__sfputc_r+0x1e>
 800b176:	6994      	ldr	r4, [r2, #24]
 800b178:	42a3      	cmp	r3, r4
 800b17a:	db01      	blt.n	800b180 <__sfputc_r+0x16>
 800b17c:	290a      	cmp	r1, #10
 800b17e:	d103      	bne.n	800b188 <__sfputc_r+0x1e>
 800b180:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b184:	f000 b94a 	b.w	800b41c <__swbuf_r>
 800b188:	6813      	ldr	r3, [r2, #0]
 800b18a:	1c58      	adds	r0, r3, #1
 800b18c:	6010      	str	r0, [r2, #0]
 800b18e:	7019      	strb	r1, [r3, #0]
 800b190:	4608      	mov	r0, r1
 800b192:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b196:	4770      	bx	lr

0800b198 <__sfputs_r>:
 800b198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b19a:	4606      	mov	r6, r0
 800b19c:	460f      	mov	r7, r1
 800b19e:	4614      	mov	r4, r2
 800b1a0:	18d5      	adds	r5, r2, r3
 800b1a2:	42ac      	cmp	r4, r5
 800b1a4:	d101      	bne.n	800b1aa <__sfputs_r+0x12>
 800b1a6:	2000      	movs	r0, #0
 800b1a8:	e007      	b.n	800b1ba <__sfputs_r+0x22>
 800b1aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1ae:	463a      	mov	r2, r7
 800b1b0:	4630      	mov	r0, r6
 800b1b2:	f7ff ffda 	bl	800b16a <__sfputc_r>
 800b1b6:	1c43      	adds	r3, r0, #1
 800b1b8:	d1f3      	bne.n	800b1a2 <__sfputs_r+0xa>
 800b1ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b1bc <_vfiprintf_r>:
 800b1bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1c0:	460d      	mov	r5, r1
 800b1c2:	b09d      	sub	sp, #116	; 0x74
 800b1c4:	4614      	mov	r4, r2
 800b1c6:	4698      	mov	r8, r3
 800b1c8:	4606      	mov	r6, r0
 800b1ca:	b118      	cbz	r0, 800b1d4 <_vfiprintf_r+0x18>
 800b1cc:	6983      	ldr	r3, [r0, #24]
 800b1ce:	b90b      	cbnz	r3, 800b1d4 <_vfiprintf_r+0x18>
 800b1d0:	f000 fb14 	bl	800b7fc <__sinit>
 800b1d4:	4b89      	ldr	r3, [pc, #548]	; (800b3fc <_vfiprintf_r+0x240>)
 800b1d6:	429d      	cmp	r5, r3
 800b1d8:	d11b      	bne.n	800b212 <_vfiprintf_r+0x56>
 800b1da:	6875      	ldr	r5, [r6, #4]
 800b1dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b1de:	07d9      	lsls	r1, r3, #31
 800b1e0:	d405      	bmi.n	800b1ee <_vfiprintf_r+0x32>
 800b1e2:	89ab      	ldrh	r3, [r5, #12]
 800b1e4:	059a      	lsls	r2, r3, #22
 800b1e6:	d402      	bmi.n	800b1ee <_vfiprintf_r+0x32>
 800b1e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b1ea:	f000 fba5 	bl	800b938 <__retarget_lock_acquire_recursive>
 800b1ee:	89ab      	ldrh	r3, [r5, #12]
 800b1f0:	071b      	lsls	r3, r3, #28
 800b1f2:	d501      	bpl.n	800b1f8 <_vfiprintf_r+0x3c>
 800b1f4:	692b      	ldr	r3, [r5, #16]
 800b1f6:	b9eb      	cbnz	r3, 800b234 <_vfiprintf_r+0x78>
 800b1f8:	4629      	mov	r1, r5
 800b1fa:	4630      	mov	r0, r6
 800b1fc:	f000 f96e 	bl	800b4dc <__swsetup_r>
 800b200:	b1c0      	cbz	r0, 800b234 <_vfiprintf_r+0x78>
 800b202:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b204:	07dc      	lsls	r4, r3, #31
 800b206:	d50e      	bpl.n	800b226 <_vfiprintf_r+0x6a>
 800b208:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b20c:	b01d      	add	sp, #116	; 0x74
 800b20e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b212:	4b7b      	ldr	r3, [pc, #492]	; (800b400 <_vfiprintf_r+0x244>)
 800b214:	429d      	cmp	r5, r3
 800b216:	d101      	bne.n	800b21c <_vfiprintf_r+0x60>
 800b218:	68b5      	ldr	r5, [r6, #8]
 800b21a:	e7df      	b.n	800b1dc <_vfiprintf_r+0x20>
 800b21c:	4b79      	ldr	r3, [pc, #484]	; (800b404 <_vfiprintf_r+0x248>)
 800b21e:	429d      	cmp	r5, r3
 800b220:	bf08      	it	eq
 800b222:	68f5      	ldreq	r5, [r6, #12]
 800b224:	e7da      	b.n	800b1dc <_vfiprintf_r+0x20>
 800b226:	89ab      	ldrh	r3, [r5, #12]
 800b228:	0598      	lsls	r0, r3, #22
 800b22a:	d4ed      	bmi.n	800b208 <_vfiprintf_r+0x4c>
 800b22c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b22e:	f000 fb84 	bl	800b93a <__retarget_lock_release_recursive>
 800b232:	e7e9      	b.n	800b208 <_vfiprintf_r+0x4c>
 800b234:	2300      	movs	r3, #0
 800b236:	9309      	str	r3, [sp, #36]	; 0x24
 800b238:	2320      	movs	r3, #32
 800b23a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b23e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b242:	2330      	movs	r3, #48	; 0x30
 800b244:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b408 <_vfiprintf_r+0x24c>
 800b248:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b24c:	f04f 0901 	mov.w	r9, #1
 800b250:	4623      	mov	r3, r4
 800b252:	469a      	mov	sl, r3
 800b254:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b258:	b10a      	cbz	r2, 800b25e <_vfiprintf_r+0xa2>
 800b25a:	2a25      	cmp	r2, #37	; 0x25
 800b25c:	d1f9      	bne.n	800b252 <_vfiprintf_r+0x96>
 800b25e:	ebba 0b04 	subs.w	fp, sl, r4
 800b262:	d00b      	beq.n	800b27c <_vfiprintf_r+0xc0>
 800b264:	465b      	mov	r3, fp
 800b266:	4622      	mov	r2, r4
 800b268:	4629      	mov	r1, r5
 800b26a:	4630      	mov	r0, r6
 800b26c:	f7ff ff94 	bl	800b198 <__sfputs_r>
 800b270:	3001      	adds	r0, #1
 800b272:	f000 80aa 	beq.w	800b3ca <_vfiprintf_r+0x20e>
 800b276:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b278:	445a      	add	r2, fp
 800b27a:	9209      	str	r2, [sp, #36]	; 0x24
 800b27c:	f89a 3000 	ldrb.w	r3, [sl]
 800b280:	2b00      	cmp	r3, #0
 800b282:	f000 80a2 	beq.w	800b3ca <_vfiprintf_r+0x20e>
 800b286:	2300      	movs	r3, #0
 800b288:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b28c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b290:	f10a 0a01 	add.w	sl, sl, #1
 800b294:	9304      	str	r3, [sp, #16]
 800b296:	9307      	str	r3, [sp, #28]
 800b298:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b29c:	931a      	str	r3, [sp, #104]	; 0x68
 800b29e:	4654      	mov	r4, sl
 800b2a0:	2205      	movs	r2, #5
 800b2a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2a6:	4858      	ldr	r0, [pc, #352]	; (800b408 <_vfiprintf_r+0x24c>)
 800b2a8:	f7f4 ffa2 	bl	80001f0 <memchr>
 800b2ac:	9a04      	ldr	r2, [sp, #16]
 800b2ae:	b9d8      	cbnz	r0, 800b2e8 <_vfiprintf_r+0x12c>
 800b2b0:	06d1      	lsls	r1, r2, #27
 800b2b2:	bf44      	itt	mi
 800b2b4:	2320      	movmi	r3, #32
 800b2b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b2ba:	0713      	lsls	r3, r2, #28
 800b2bc:	bf44      	itt	mi
 800b2be:	232b      	movmi	r3, #43	; 0x2b
 800b2c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b2c4:	f89a 3000 	ldrb.w	r3, [sl]
 800b2c8:	2b2a      	cmp	r3, #42	; 0x2a
 800b2ca:	d015      	beq.n	800b2f8 <_vfiprintf_r+0x13c>
 800b2cc:	9a07      	ldr	r2, [sp, #28]
 800b2ce:	4654      	mov	r4, sl
 800b2d0:	2000      	movs	r0, #0
 800b2d2:	f04f 0c0a 	mov.w	ip, #10
 800b2d6:	4621      	mov	r1, r4
 800b2d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b2dc:	3b30      	subs	r3, #48	; 0x30
 800b2de:	2b09      	cmp	r3, #9
 800b2e0:	d94e      	bls.n	800b380 <_vfiprintf_r+0x1c4>
 800b2e2:	b1b0      	cbz	r0, 800b312 <_vfiprintf_r+0x156>
 800b2e4:	9207      	str	r2, [sp, #28]
 800b2e6:	e014      	b.n	800b312 <_vfiprintf_r+0x156>
 800b2e8:	eba0 0308 	sub.w	r3, r0, r8
 800b2ec:	fa09 f303 	lsl.w	r3, r9, r3
 800b2f0:	4313      	orrs	r3, r2
 800b2f2:	9304      	str	r3, [sp, #16]
 800b2f4:	46a2      	mov	sl, r4
 800b2f6:	e7d2      	b.n	800b29e <_vfiprintf_r+0xe2>
 800b2f8:	9b03      	ldr	r3, [sp, #12]
 800b2fa:	1d19      	adds	r1, r3, #4
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	9103      	str	r1, [sp, #12]
 800b300:	2b00      	cmp	r3, #0
 800b302:	bfbb      	ittet	lt
 800b304:	425b      	neglt	r3, r3
 800b306:	f042 0202 	orrlt.w	r2, r2, #2
 800b30a:	9307      	strge	r3, [sp, #28]
 800b30c:	9307      	strlt	r3, [sp, #28]
 800b30e:	bfb8      	it	lt
 800b310:	9204      	strlt	r2, [sp, #16]
 800b312:	7823      	ldrb	r3, [r4, #0]
 800b314:	2b2e      	cmp	r3, #46	; 0x2e
 800b316:	d10c      	bne.n	800b332 <_vfiprintf_r+0x176>
 800b318:	7863      	ldrb	r3, [r4, #1]
 800b31a:	2b2a      	cmp	r3, #42	; 0x2a
 800b31c:	d135      	bne.n	800b38a <_vfiprintf_r+0x1ce>
 800b31e:	9b03      	ldr	r3, [sp, #12]
 800b320:	1d1a      	adds	r2, r3, #4
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	9203      	str	r2, [sp, #12]
 800b326:	2b00      	cmp	r3, #0
 800b328:	bfb8      	it	lt
 800b32a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b32e:	3402      	adds	r4, #2
 800b330:	9305      	str	r3, [sp, #20]
 800b332:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b418 <_vfiprintf_r+0x25c>
 800b336:	7821      	ldrb	r1, [r4, #0]
 800b338:	2203      	movs	r2, #3
 800b33a:	4650      	mov	r0, sl
 800b33c:	f7f4 ff58 	bl	80001f0 <memchr>
 800b340:	b140      	cbz	r0, 800b354 <_vfiprintf_r+0x198>
 800b342:	2340      	movs	r3, #64	; 0x40
 800b344:	eba0 000a 	sub.w	r0, r0, sl
 800b348:	fa03 f000 	lsl.w	r0, r3, r0
 800b34c:	9b04      	ldr	r3, [sp, #16]
 800b34e:	4303      	orrs	r3, r0
 800b350:	3401      	adds	r4, #1
 800b352:	9304      	str	r3, [sp, #16]
 800b354:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b358:	482c      	ldr	r0, [pc, #176]	; (800b40c <_vfiprintf_r+0x250>)
 800b35a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b35e:	2206      	movs	r2, #6
 800b360:	f7f4 ff46 	bl	80001f0 <memchr>
 800b364:	2800      	cmp	r0, #0
 800b366:	d03f      	beq.n	800b3e8 <_vfiprintf_r+0x22c>
 800b368:	4b29      	ldr	r3, [pc, #164]	; (800b410 <_vfiprintf_r+0x254>)
 800b36a:	bb1b      	cbnz	r3, 800b3b4 <_vfiprintf_r+0x1f8>
 800b36c:	9b03      	ldr	r3, [sp, #12]
 800b36e:	3307      	adds	r3, #7
 800b370:	f023 0307 	bic.w	r3, r3, #7
 800b374:	3308      	adds	r3, #8
 800b376:	9303      	str	r3, [sp, #12]
 800b378:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b37a:	443b      	add	r3, r7
 800b37c:	9309      	str	r3, [sp, #36]	; 0x24
 800b37e:	e767      	b.n	800b250 <_vfiprintf_r+0x94>
 800b380:	fb0c 3202 	mla	r2, ip, r2, r3
 800b384:	460c      	mov	r4, r1
 800b386:	2001      	movs	r0, #1
 800b388:	e7a5      	b.n	800b2d6 <_vfiprintf_r+0x11a>
 800b38a:	2300      	movs	r3, #0
 800b38c:	3401      	adds	r4, #1
 800b38e:	9305      	str	r3, [sp, #20]
 800b390:	4619      	mov	r1, r3
 800b392:	f04f 0c0a 	mov.w	ip, #10
 800b396:	4620      	mov	r0, r4
 800b398:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b39c:	3a30      	subs	r2, #48	; 0x30
 800b39e:	2a09      	cmp	r2, #9
 800b3a0:	d903      	bls.n	800b3aa <_vfiprintf_r+0x1ee>
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d0c5      	beq.n	800b332 <_vfiprintf_r+0x176>
 800b3a6:	9105      	str	r1, [sp, #20]
 800b3a8:	e7c3      	b.n	800b332 <_vfiprintf_r+0x176>
 800b3aa:	fb0c 2101 	mla	r1, ip, r1, r2
 800b3ae:	4604      	mov	r4, r0
 800b3b0:	2301      	movs	r3, #1
 800b3b2:	e7f0      	b.n	800b396 <_vfiprintf_r+0x1da>
 800b3b4:	ab03      	add	r3, sp, #12
 800b3b6:	9300      	str	r3, [sp, #0]
 800b3b8:	462a      	mov	r2, r5
 800b3ba:	4b16      	ldr	r3, [pc, #88]	; (800b414 <_vfiprintf_r+0x258>)
 800b3bc:	a904      	add	r1, sp, #16
 800b3be:	4630      	mov	r0, r6
 800b3c0:	f7fd fdc2 	bl	8008f48 <_printf_float>
 800b3c4:	4607      	mov	r7, r0
 800b3c6:	1c78      	adds	r0, r7, #1
 800b3c8:	d1d6      	bne.n	800b378 <_vfiprintf_r+0x1bc>
 800b3ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b3cc:	07d9      	lsls	r1, r3, #31
 800b3ce:	d405      	bmi.n	800b3dc <_vfiprintf_r+0x220>
 800b3d0:	89ab      	ldrh	r3, [r5, #12]
 800b3d2:	059a      	lsls	r2, r3, #22
 800b3d4:	d402      	bmi.n	800b3dc <_vfiprintf_r+0x220>
 800b3d6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b3d8:	f000 faaf 	bl	800b93a <__retarget_lock_release_recursive>
 800b3dc:	89ab      	ldrh	r3, [r5, #12]
 800b3de:	065b      	lsls	r3, r3, #25
 800b3e0:	f53f af12 	bmi.w	800b208 <_vfiprintf_r+0x4c>
 800b3e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b3e6:	e711      	b.n	800b20c <_vfiprintf_r+0x50>
 800b3e8:	ab03      	add	r3, sp, #12
 800b3ea:	9300      	str	r3, [sp, #0]
 800b3ec:	462a      	mov	r2, r5
 800b3ee:	4b09      	ldr	r3, [pc, #36]	; (800b414 <_vfiprintf_r+0x258>)
 800b3f0:	a904      	add	r1, sp, #16
 800b3f2:	4630      	mov	r0, r6
 800b3f4:	f7fe f84c 	bl	8009490 <_printf_i>
 800b3f8:	e7e4      	b.n	800b3c4 <_vfiprintf_r+0x208>
 800b3fa:	bf00      	nop
 800b3fc:	0800c7f4 	.word	0x0800c7f4
 800b400:	0800c814 	.word	0x0800c814
 800b404:	0800c7d4 	.word	0x0800c7d4
 800b408:	0800c67c 	.word	0x0800c67c
 800b40c:	0800c686 	.word	0x0800c686
 800b410:	08008f49 	.word	0x08008f49
 800b414:	0800b199 	.word	0x0800b199
 800b418:	0800c682 	.word	0x0800c682

0800b41c <__swbuf_r>:
 800b41c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b41e:	460e      	mov	r6, r1
 800b420:	4614      	mov	r4, r2
 800b422:	4605      	mov	r5, r0
 800b424:	b118      	cbz	r0, 800b42e <__swbuf_r+0x12>
 800b426:	6983      	ldr	r3, [r0, #24]
 800b428:	b90b      	cbnz	r3, 800b42e <__swbuf_r+0x12>
 800b42a:	f000 f9e7 	bl	800b7fc <__sinit>
 800b42e:	4b21      	ldr	r3, [pc, #132]	; (800b4b4 <__swbuf_r+0x98>)
 800b430:	429c      	cmp	r4, r3
 800b432:	d12b      	bne.n	800b48c <__swbuf_r+0x70>
 800b434:	686c      	ldr	r4, [r5, #4]
 800b436:	69a3      	ldr	r3, [r4, #24]
 800b438:	60a3      	str	r3, [r4, #8]
 800b43a:	89a3      	ldrh	r3, [r4, #12]
 800b43c:	071a      	lsls	r2, r3, #28
 800b43e:	d52f      	bpl.n	800b4a0 <__swbuf_r+0x84>
 800b440:	6923      	ldr	r3, [r4, #16]
 800b442:	b36b      	cbz	r3, 800b4a0 <__swbuf_r+0x84>
 800b444:	6923      	ldr	r3, [r4, #16]
 800b446:	6820      	ldr	r0, [r4, #0]
 800b448:	1ac0      	subs	r0, r0, r3
 800b44a:	6963      	ldr	r3, [r4, #20]
 800b44c:	b2f6      	uxtb	r6, r6
 800b44e:	4283      	cmp	r3, r0
 800b450:	4637      	mov	r7, r6
 800b452:	dc04      	bgt.n	800b45e <__swbuf_r+0x42>
 800b454:	4621      	mov	r1, r4
 800b456:	4628      	mov	r0, r5
 800b458:	f000 f93c 	bl	800b6d4 <_fflush_r>
 800b45c:	bb30      	cbnz	r0, 800b4ac <__swbuf_r+0x90>
 800b45e:	68a3      	ldr	r3, [r4, #8]
 800b460:	3b01      	subs	r3, #1
 800b462:	60a3      	str	r3, [r4, #8]
 800b464:	6823      	ldr	r3, [r4, #0]
 800b466:	1c5a      	adds	r2, r3, #1
 800b468:	6022      	str	r2, [r4, #0]
 800b46a:	701e      	strb	r6, [r3, #0]
 800b46c:	6963      	ldr	r3, [r4, #20]
 800b46e:	3001      	adds	r0, #1
 800b470:	4283      	cmp	r3, r0
 800b472:	d004      	beq.n	800b47e <__swbuf_r+0x62>
 800b474:	89a3      	ldrh	r3, [r4, #12]
 800b476:	07db      	lsls	r3, r3, #31
 800b478:	d506      	bpl.n	800b488 <__swbuf_r+0x6c>
 800b47a:	2e0a      	cmp	r6, #10
 800b47c:	d104      	bne.n	800b488 <__swbuf_r+0x6c>
 800b47e:	4621      	mov	r1, r4
 800b480:	4628      	mov	r0, r5
 800b482:	f000 f927 	bl	800b6d4 <_fflush_r>
 800b486:	b988      	cbnz	r0, 800b4ac <__swbuf_r+0x90>
 800b488:	4638      	mov	r0, r7
 800b48a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b48c:	4b0a      	ldr	r3, [pc, #40]	; (800b4b8 <__swbuf_r+0x9c>)
 800b48e:	429c      	cmp	r4, r3
 800b490:	d101      	bne.n	800b496 <__swbuf_r+0x7a>
 800b492:	68ac      	ldr	r4, [r5, #8]
 800b494:	e7cf      	b.n	800b436 <__swbuf_r+0x1a>
 800b496:	4b09      	ldr	r3, [pc, #36]	; (800b4bc <__swbuf_r+0xa0>)
 800b498:	429c      	cmp	r4, r3
 800b49a:	bf08      	it	eq
 800b49c:	68ec      	ldreq	r4, [r5, #12]
 800b49e:	e7ca      	b.n	800b436 <__swbuf_r+0x1a>
 800b4a0:	4621      	mov	r1, r4
 800b4a2:	4628      	mov	r0, r5
 800b4a4:	f000 f81a 	bl	800b4dc <__swsetup_r>
 800b4a8:	2800      	cmp	r0, #0
 800b4aa:	d0cb      	beq.n	800b444 <__swbuf_r+0x28>
 800b4ac:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800b4b0:	e7ea      	b.n	800b488 <__swbuf_r+0x6c>
 800b4b2:	bf00      	nop
 800b4b4:	0800c7f4 	.word	0x0800c7f4
 800b4b8:	0800c814 	.word	0x0800c814
 800b4bc:	0800c7d4 	.word	0x0800c7d4

0800b4c0 <__ascii_wctomb>:
 800b4c0:	b149      	cbz	r1, 800b4d6 <__ascii_wctomb+0x16>
 800b4c2:	2aff      	cmp	r2, #255	; 0xff
 800b4c4:	bf85      	ittet	hi
 800b4c6:	238a      	movhi	r3, #138	; 0x8a
 800b4c8:	6003      	strhi	r3, [r0, #0]
 800b4ca:	700a      	strbls	r2, [r1, #0]
 800b4cc:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800b4d0:	bf98      	it	ls
 800b4d2:	2001      	movls	r0, #1
 800b4d4:	4770      	bx	lr
 800b4d6:	4608      	mov	r0, r1
 800b4d8:	4770      	bx	lr
	...

0800b4dc <__swsetup_r>:
 800b4dc:	4b32      	ldr	r3, [pc, #200]	; (800b5a8 <__swsetup_r+0xcc>)
 800b4de:	b570      	push	{r4, r5, r6, lr}
 800b4e0:	681d      	ldr	r5, [r3, #0]
 800b4e2:	4606      	mov	r6, r0
 800b4e4:	460c      	mov	r4, r1
 800b4e6:	b125      	cbz	r5, 800b4f2 <__swsetup_r+0x16>
 800b4e8:	69ab      	ldr	r3, [r5, #24]
 800b4ea:	b913      	cbnz	r3, 800b4f2 <__swsetup_r+0x16>
 800b4ec:	4628      	mov	r0, r5
 800b4ee:	f000 f985 	bl	800b7fc <__sinit>
 800b4f2:	4b2e      	ldr	r3, [pc, #184]	; (800b5ac <__swsetup_r+0xd0>)
 800b4f4:	429c      	cmp	r4, r3
 800b4f6:	d10f      	bne.n	800b518 <__swsetup_r+0x3c>
 800b4f8:	686c      	ldr	r4, [r5, #4]
 800b4fa:	89a3      	ldrh	r3, [r4, #12]
 800b4fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b500:	0719      	lsls	r1, r3, #28
 800b502:	d42c      	bmi.n	800b55e <__swsetup_r+0x82>
 800b504:	06dd      	lsls	r5, r3, #27
 800b506:	d411      	bmi.n	800b52c <__swsetup_r+0x50>
 800b508:	2309      	movs	r3, #9
 800b50a:	6033      	str	r3, [r6, #0]
 800b50c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b510:	81a3      	strh	r3, [r4, #12]
 800b512:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b516:	e03e      	b.n	800b596 <__swsetup_r+0xba>
 800b518:	4b25      	ldr	r3, [pc, #148]	; (800b5b0 <__swsetup_r+0xd4>)
 800b51a:	429c      	cmp	r4, r3
 800b51c:	d101      	bne.n	800b522 <__swsetup_r+0x46>
 800b51e:	68ac      	ldr	r4, [r5, #8]
 800b520:	e7eb      	b.n	800b4fa <__swsetup_r+0x1e>
 800b522:	4b24      	ldr	r3, [pc, #144]	; (800b5b4 <__swsetup_r+0xd8>)
 800b524:	429c      	cmp	r4, r3
 800b526:	bf08      	it	eq
 800b528:	68ec      	ldreq	r4, [r5, #12]
 800b52a:	e7e6      	b.n	800b4fa <__swsetup_r+0x1e>
 800b52c:	0758      	lsls	r0, r3, #29
 800b52e:	d512      	bpl.n	800b556 <__swsetup_r+0x7a>
 800b530:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b532:	b141      	cbz	r1, 800b546 <__swsetup_r+0x6a>
 800b534:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b538:	4299      	cmp	r1, r3
 800b53a:	d002      	beq.n	800b542 <__swsetup_r+0x66>
 800b53c:	4630      	mov	r0, r6
 800b53e:	f7ff fb31 	bl	800aba4 <_free_r>
 800b542:	2300      	movs	r3, #0
 800b544:	6363      	str	r3, [r4, #52]	; 0x34
 800b546:	89a3      	ldrh	r3, [r4, #12]
 800b548:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b54c:	81a3      	strh	r3, [r4, #12]
 800b54e:	2300      	movs	r3, #0
 800b550:	6063      	str	r3, [r4, #4]
 800b552:	6923      	ldr	r3, [r4, #16]
 800b554:	6023      	str	r3, [r4, #0]
 800b556:	89a3      	ldrh	r3, [r4, #12]
 800b558:	f043 0308 	orr.w	r3, r3, #8
 800b55c:	81a3      	strh	r3, [r4, #12]
 800b55e:	6923      	ldr	r3, [r4, #16]
 800b560:	b94b      	cbnz	r3, 800b576 <__swsetup_r+0x9a>
 800b562:	89a3      	ldrh	r3, [r4, #12]
 800b564:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b568:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b56c:	d003      	beq.n	800b576 <__swsetup_r+0x9a>
 800b56e:	4621      	mov	r1, r4
 800b570:	4630      	mov	r0, r6
 800b572:	f000 fa09 	bl	800b988 <__smakebuf_r>
 800b576:	89a0      	ldrh	r0, [r4, #12]
 800b578:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b57c:	f010 0301 	ands.w	r3, r0, #1
 800b580:	d00a      	beq.n	800b598 <__swsetup_r+0xbc>
 800b582:	2300      	movs	r3, #0
 800b584:	60a3      	str	r3, [r4, #8]
 800b586:	6963      	ldr	r3, [r4, #20]
 800b588:	425b      	negs	r3, r3
 800b58a:	61a3      	str	r3, [r4, #24]
 800b58c:	6923      	ldr	r3, [r4, #16]
 800b58e:	b943      	cbnz	r3, 800b5a2 <__swsetup_r+0xc6>
 800b590:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b594:	d1ba      	bne.n	800b50c <__swsetup_r+0x30>
 800b596:	bd70      	pop	{r4, r5, r6, pc}
 800b598:	0781      	lsls	r1, r0, #30
 800b59a:	bf58      	it	pl
 800b59c:	6963      	ldrpl	r3, [r4, #20]
 800b59e:	60a3      	str	r3, [r4, #8]
 800b5a0:	e7f4      	b.n	800b58c <__swsetup_r+0xb0>
 800b5a2:	2000      	movs	r0, #0
 800b5a4:	e7f7      	b.n	800b596 <__swsetup_r+0xba>
 800b5a6:	bf00      	nop
 800b5a8:	20000100 	.word	0x20000100
 800b5ac:	0800c7f4 	.word	0x0800c7f4
 800b5b0:	0800c814 	.word	0x0800c814
 800b5b4:	0800c7d4 	.word	0x0800c7d4

0800b5b8 <abort>:
 800b5b8:	b508      	push	{r3, lr}
 800b5ba:	2006      	movs	r0, #6
 800b5bc:	f000 fa54 	bl	800ba68 <raise>
 800b5c0:	2001      	movs	r0, #1
 800b5c2:	f7f6 f803 	bl	80015cc <_exit>
	...

0800b5c8 <__sflush_r>:
 800b5c8:	898a      	ldrh	r2, [r1, #12]
 800b5ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5ce:	4605      	mov	r5, r0
 800b5d0:	0710      	lsls	r0, r2, #28
 800b5d2:	460c      	mov	r4, r1
 800b5d4:	d458      	bmi.n	800b688 <__sflush_r+0xc0>
 800b5d6:	684b      	ldr	r3, [r1, #4]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	dc05      	bgt.n	800b5e8 <__sflush_r+0x20>
 800b5dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	dc02      	bgt.n	800b5e8 <__sflush_r+0x20>
 800b5e2:	2000      	movs	r0, #0
 800b5e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b5ea:	2e00      	cmp	r6, #0
 800b5ec:	d0f9      	beq.n	800b5e2 <__sflush_r+0x1a>
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b5f4:	682f      	ldr	r7, [r5, #0]
 800b5f6:	602b      	str	r3, [r5, #0]
 800b5f8:	d032      	beq.n	800b660 <__sflush_r+0x98>
 800b5fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b5fc:	89a3      	ldrh	r3, [r4, #12]
 800b5fe:	075a      	lsls	r2, r3, #29
 800b600:	d505      	bpl.n	800b60e <__sflush_r+0x46>
 800b602:	6863      	ldr	r3, [r4, #4]
 800b604:	1ac0      	subs	r0, r0, r3
 800b606:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b608:	b10b      	cbz	r3, 800b60e <__sflush_r+0x46>
 800b60a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b60c:	1ac0      	subs	r0, r0, r3
 800b60e:	2300      	movs	r3, #0
 800b610:	4602      	mov	r2, r0
 800b612:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b614:	6a21      	ldr	r1, [r4, #32]
 800b616:	4628      	mov	r0, r5
 800b618:	47b0      	blx	r6
 800b61a:	1c43      	adds	r3, r0, #1
 800b61c:	89a3      	ldrh	r3, [r4, #12]
 800b61e:	d106      	bne.n	800b62e <__sflush_r+0x66>
 800b620:	6829      	ldr	r1, [r5, #0]
 800b622:	291d      	cmp	r1, #29
 800b624:	d82c      	bhi.n	800b680 <__sflush_r+0xb8>
 800b626:	4a2a      	ldr	r2, [pc, #168]	; (800b6d0 <__sflush_r+0x108>)
 800b628:	40ca      	lsrs	r2, r1
 800b62a:	07d6      	lsls	r6, r2, #31
 800b62c:	d528      	bpl.n	800b680 <__sflush_r+0xb8>
 800b62e:	2200      	movs	r2, #0
 800b630:	6062      	str	r2, [r4, #4]
 800b632:	04d9      	lsls	r1, r3, #19
 800b634:	6922      	ldr	r2, [r4, #16]
 800b636:	6022      	str	r2, [r4, #0]
 800b638:	d504      	bpl.n	800b644 <__sflush_r+0x7c>
 800b63a:	1c42      	adds	r2, r0, #1
 800b63c:	d101      	bne.n	800b642 <__sflush_r+0x7a>
 800b63e:	682b      	ldr	r3, [r5, #0]
 800b640:	b903      	cbnz	r3, 800b644 <__sflush_r+0x7c>
 800b642:	6560      	str	r0, [r4, #84]	; 0x54
 800b644:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b646:	602f      	str	r7, [r5, #0]
 800b648:	2900      	cmp	r1, #0
 800b64a:	d0ca      	beq.n	800b5e2 <__sflush_r+0x1a>
 800b64c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b650:	4299      	cmp	r1, r3
 800b652:	d002      	beq.n	800b65a <__sflush_r+0x92>
 800b654:	4628      	mov	r0, r5
 800b656:	f7ff faa5 	bl	800aba4 <_free_r>
 800b65a:	2000      	movs	r0, #0
 800b65c:	6360      	str	r0, [r4, #52]	; 0x34
 800b65e:	e7c1      	b.n	800b5e4 <__sflush_r+0x1c>
 800b660:	6a21      	ldr	r1, [r4, #32]
 800b662:	2301      	movs	r3, #1
 800b664:	4628      	mov	r0, r5
 800b666:	47b0      	blx	r6
 800b668:	1c41      	adds	r1, r0, #1
 800b66a:	d1c7      	bne.n	800b5fc <__sflush_r+0x34>
 800b66c:	682b      	ldr	r3, [r5, #0]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d0c4      	beq.n	800b5fc <__sflush_r+0x34>
 800b672:	2b1d      	cmp	r3, #29
 800b674:	d001      	beq.n	800b67a <__sflush_r+0xb2>
 800b676:	2b16      	cmp	r3, #22
 800b678:	d101      	bne.n	800b67e <__sflush_r+0xb6>
 800b67a:	602f      	str	r7, [r5, #0]
 800b67c:	e7b1      	b.n	800b5e2 <__sflush_r+0x1a>
 800b67e:	89a3      	ldrh	r3, [r4, #12]
 800b680:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b684:	81a3      	strh	r3, [r4, #12]
 800b686:	e7ad      	b.n	800b5e4 <__sflush_r+0x1c>
 800b688:	690f      	ldr	r7, [r1, #16]
 800b68a:	2f00      	cmp	r7, #0
 800b68c:	d0a9      	beq.n	800b5e2 <__sflush_r+0x1a>
 800b68e:	0793      	lsls	r3, r2, #30
 800b690:	680e      	ldr	r6, [r1, #0]
 800b692:	bf08      	it	eq
 800b694:	694b      	ldreq	r3, [r1, #20]
 800b696:	600f      	str	r7, [r1, #0]
 800b698:	bf18      	it	ne
 800b69a:	2300      	movne	r3, #0
 800b69c:	eba6 0807 	sub.w	r8, r6, r7
 800b6a0:	608b      	str	r3, [r1, #8]
 800b6a2:	f1b8 0f00 	cmp.w	r8, #0
 800b6a6:	dd9c      	ble.n	800b5e2 <__sflush_r+0x1a>
 800b6a8:	6a21      	ldr	r1, [r4, #32]
 800b6aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b6ac:	4643      	mov	r3, r8
 800b6ae:	463a      	mov	r2, r7
 800b6b0:	4628      	mov	r0, r5
 800b6b2:	47b0      	blx	r6
 800b6b4:	2800      	cmp	r0, #0
 800b6b6:	dc06      	bgt.n	800b6c6 <__sflush_r+0xfe>
 800b6b8:	89a3      	ldrh	r3, [r4, #12]
 800b6ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b6be:	81a3      	strh	r3, [r4, #12]
 800b6c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b6c4:	e78e      	b.n	800b5e4 <__sflush_r+0x1c>
 800b6c6:	4407      	add	r7, r0
 800b6c8:	eba8 0800 	sub.w	r8, r8, r0
 800b6cc:	e7e9      	b.n	800b6a2 <__sflush_r+0xda>
 800b6ce:	bf00      	nop
 800b6d0:	20400001 	.word	0x20400001

0800b6d4 <_fflush_r>:
 800b6d4:	b538      	push	{r3, r4, r5, lr}
 800b6d6:	690b      	ldr	r3, [r1, #16]
 800b6d8:	4605      	mov	r5, r0
 800b6da:	460c      	mov	r4, r1
 800b6dc:	b913      	cbnz	r3, 800b6e4 <_fflush_r+0x10>
 800b6de:	2500      	movs	r5, #0
 800b6e0:	4628      	mov	r0, r5
 800b6e2:	bd38      	pop	{r3, r4, r5, pc}
 800b6e4:	b118      	cbz	r0, 800b6ee <_fflush_r+0x1a>
 800b6e6:	6983      	ldr	r3, [r0, #24]
 800b6e8:	b90b      	cbnz	r3, 800b6ee <_fflush_r+0x1a>
 800b6ea:	f000 f887 	bl	800b7fc <__sinit>
 800b6ee:	4b14      	ldr	r3, [pc, #80]	; (800b740 <_fflush_r+0x6c>)
 800b6f0:	429c      	cmp	r4, r3
 800b6f2:	d11b      	bne.n	800b72c <_fflush_r+0x58>
 800b6f4:	686c      	ldr	r4, [r5, #4]
 800b6f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d0ef      	beq.n	800b6de <_fflush_r+0xa>
 800b6fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b700:	07d0      	lsls	r0, r2, #31
 800b702:	d404      	bmi.n	800b70e <_fflush_r+0x3a>
 800b704:	0599      	lsls	r1, r3, #22
 800b706:	d402      	bmi.n	800b70e <_fflush_r+0x3a>
 800b708:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b70a:	f000 f915 	bl	800b938 <__retarget_lock_acquire_recursive>
 800b70e:	4628      	mov	r0, r5
 800b710:	4621      	mov	r1, r4
 800b712:	f7ff ff59 	bl	800b5c8 <__sflush_r>
 800b716:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b718:	07da      	lsls	r2, r3, #31
 800b71a:	4605      	mov	r5, r0
 800b71c:	d4e0      	bmi.n	800b6e0 <_fflush_r+0xc>
 800b71e:	89a3      	ldrh	r3, [r4, #12]
 800b720:	059b      	lsls	r3, r3, #22
 800b722:	d4dd      	bmi.n	800b6e0 <_fflush_r+0xc>
 800b724:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b726:	f000 f908 	bl	800b93a <__retarget_lock_release_recursive>
 800b72a:	e7d9      	b.n	800b6e0 <_fflush_r+0xc>
 800b72c:	4b05      	ldr	r3, [pc, #20]	; (800b744 <_fflush_r+0x70>)
 800b72e:	429c      	cmp	r4, r3
 800b730:	d101      	bne.n	800b736 <_fflush_r+0x62>
 800b732:	68ac      	ldr	r4, [r5, #8]
 800b734:	e7df      	b.n	800b6f6 <_fflush_r+0x22>
 800b736:	4b04      	ldr	r3, [pc, #16]	; (800b748 <_fflush_r+0x74>)
 800b738:	429c      	cmp	r4, r3
 800b73a:	bf08      	it	eq
 800b73c:	68ec      	ldreq	r4, [r5, #12]
 800b73e:	e7da      	b.n	800b6f6 <_fflush_r+0x22>
 800b740:	0800c7f4 	.word	0x0800c7f4
 800b744:	0800c814 	.word	0x0800c814
 800b748:	0800c7d4 	.word	0x0800c7d4

0800b74c <std>:
 800b74c:	2300      	movs	r3, #0
 800b74e:	b510      	push	{r4, lr}
 800b750:	4604      	mov	r4, r0
 800b752:	e9c0 3300 	strd	r3, r3, [r0]
 800b756:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b75a:	6083      	str	r3, [r0, #8]
 800b75c:	8181      	strh	r1, [r0, #12]
 800b75e:	6643      	str	r3, [r0, #100]	; 0x64
 800b760:	81c2      	strh	r2, [r0, #14]
 800b762:	6183      	str	r3, [r0, #24]
 800b764:	4619      	mov	r1, r3
 800b766:	2208      	movs	r2, #8
 800b768:	305c      	adds	r0, #92	; 0x5c
 800b76a:	f7fd fb45 	bl	8008df8 <memset>
 800b76e:	4b05      	ldr	r3, [pc, #20]	; (800b784 <std+0x38>)
 800b770:	6263      	str	r3, [r4, #36]	; 0x24
 800b772:	4b05      	ldr	r3, [pc, #20]	; (800b788 <std+0x3c>)
 800b774:	62a3      	str	r3, [r4, #40]	; 0x28
 800b776:	4b05      	ldr	r3, [pc, #20]	; (800b78c <std+0x40>)
 800b778:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b77a:	4b05      	ldr	r3, [pc, #20]	; (800b790 <std+0x44>)
 800b77c:	6224      	str	r4, [r4, #32]
 800b77e:	6323      	str	r3, [r4, #48]	; 0x30
 800b780:	bd10      	pop	{r4, pc}
 800b782:	bf00      	nop
 800b784:	0800baa1 	.word	0x0800baa1
 800b788:	0800bac3 	.word	0x0800bac3
 800b78c:	0800bafb 	.word	0x0800bafb
 800b790:	0800bb1f 	.word	0x0800bb1f

0800b794 <_cleanup_r>:
 800b794:	4901      	ldr	r1, [pc, #4]	; (800b79c <_cleanup_r+0x8>)
 800b796:	f000 b8af 	b.w	800b8f8 <_fwalk_reent>
 800b79a:	bf00      	nop
 800b79c:	0800b6d5 	.word	0x0800b6d5

0800b7a0 <__sfmoreglue>:
 800b7a0:	b570      	push	{r4, r5, r6, lr}
 800b7a2:	2268      	movs	r2, #104	; 0x68
 800b7a4:	1e4d      	subs	r5, r1, #1
 800b7a6:	4355      	muls	r5, r2
 800b7a8:	460e      	mov	r6, r1
 800b7aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b7ae:	f7ff fa65 	bl	800ac7c <_malloc_r>
 800b7b2:	4604      	mov	r4, r0
 800b7b4:	b140      	cbz	r0, 800b7c8 <__sfmoreglue+0x28>
 800b7b6:	2100      	movs	r1, #0
 800b7b8:	e9c0 1600 	strd	r1, r6, [r0]
 800b7bc:	300c      	adds	r0, #12
 800b7be:	60a0      	str	r0, [r4, #8]
 800b7c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b7c4:	f7fd fb18 	bl	8008df8 <memset>
 800b7c8:	4620      	mov	r0, r4
 800b7ca:	bd70      	pop	{r4, r5, r6, pc}

0800b7cc <__sfp_lock_acquire>:
 800b7cc:	4801      	ldr	r0, [pc, #4]	; (800b7d4 <__sfp_lock_acquire+0x8>)
 800b7ce:	f000 b8b3 	b.w	800b938 <__retarget_lock_acquire_recursive>
 800b7d2:	bf00      	nop
 800b7d4:	20001f91 	.word	0x20001f91

0800b7d8 <__sfp_lock_release>:
 800b7d8:	4801      	ldr	r0, [pc, #4]	; (800b7e0 <__sfp_lock_release+0x8>)
 800b7da:	f000 b8ae 	b.w	800b93a <__retarget_lock_release_recursive>
 800b7de:	bf00      	nop
 800b7e0:	20001f91 	.word	0x20001f91

0800b7e4 <__sinit_lock_acquire>:
 800b7e4:	4801      	ldr	r0, [pc, #4]	; (800b7ec <__sinit_lock_acquire+0x8>)
 800b7e6:	f000 b8a7 	b.w	800b938 <__retarget_lock_acquire_recursive>
 800b7ea:	bf00      	nop
 800b7ec:	20001f92 	.word	0x20001f92

0800b7f0 <__sinit_lock_release>:
 800b7f0:	4801      	ldr	r0, [pc, #4]	; (800b7f8 <__sinit_lock_release+0x8>)
 800b7f2:	f000 b8a2 	b.w	800b93a <__retarget_lock_release_recursive>
 800b7f6:	bf00      	nop
 800b7f8:	20001f92 	.word	0x20001f92

0800b7fc <__sinit>:
 800b7fc:	b510      	push	{r4, lr}
 800b7fe:	4604      	mov	r4, r0
 800b800:	f7ff fff0 	bl	800b7e4 <__sinit_lock_acquire>
 800b804:	69a3      	ldr	r3, [r4, #24]
 800b806:	b11b      	cbz	r3, 800b810 <__sinit+0x14>
 800b808:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b80c:	f7ff bff0 	b.w	800b7f0 <__sinit_lock_release>
 800b810:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b814:	6523      	str	r3, [r4, #80]	; 0x50
 800b816:	4b13      	ldr	r3, [pc, #76]	; (800b864 <__sinit+0x68>)
 800b818:	4a13      	ldr	r2, [pc, #76]	; (800b868 <__sinit+0x6c>)
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	62a2      	str	r2, [r4, #40]	; 0x28
 800b81e:	42a3      	cmp	r3, r4
 800b820:	bf04      	itt	eq
 800b822:	2301      	moveq	r3, #1
 800b824:	61a3      	streq	r3, [r4, #24]
 800b826:	4620      	mov	r0, r4
 800b828:	f000 f820 	bl	800b86c <__sfp>
 800b82c:	6060      	str	r0, [r4, #4]
 800b82e:	4620      	mov	r0, r4
 800b830:	f000 f81c 	bl	800b86c <__sfp>
 800b834:	60a0      	str	r0, [r4, #8]
 800b836:	4620      	mov	r0, r4
 800b838:	f000 f818 	bl	800b86c <__sfp>
 800b83c:	2200      	movs	r2, #0
 800b83e:	60e0      	str	r0, [r4, #12]
 800b840:	2104      	movs	r1, #4
 800b842:	6860      	ldr	r0, [r4, #4]
 800b844:	f7ff ff82 	bl	800b74c <std>
 800b848:	68a0      	ldr	r0, [r4, #8]
 800b84a:	2201      	movs	r2, #1
 800b84c:	2109      	movs	r1, #9
 800b84e:	f7ff ff7d 	bl	800b74c <std>
 800b852:	68e0      	ldr	r0, [r4, #12]
 800b854:	2202      	movs	r2, #2
 800b856:	2112      	movs	r1, #18
 800b858:	f7ff ff78 	bl	800b74c <std>
 800b85c:	2301      	movs	r3, #1
 800b85e:	61a3      	str	r3, [r4, #24]
 800b860:	e7d2      	b.n	800b808 <__sinit+0xc>
 800b862:	bf00      	nop
 800b864:	0800c458 	.word	0x0800c458
 800b868:	0800b795 	.word	0x0800b795

0800b86c <__sfp>:
 800b86c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b86e:	4607      	mov	r7, r0
 800b870:	f7ff ffac 	bl	800b7cc <__sfp_lock_acquire>
 800b874:	4b1e      	ldr	r3, [pc, #120]	; (800b8f0 <__sfp+0x84>)
 800b876:	681e      	ldr	r6, [r3, #0]
 800b878:	69b3      	ldr	r3, [r6, #24]
 800b87a:	b913      	cbnz	r3, 800b882 <__sfp+0x16>
 800b87c:	4630      	mov	r0, r6
 800b87e:	f7ff ffbd 	bl	800b7fc <__sinit>
 800b882:	3648      	adds	r6, #72	; 0x48
 800b884:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b888:	3b01      	subs	r3, #1
 800b88a:	d503      	bpl.n	800b894 <__sfp+0x28>
 800b88c:	6833      	ldr	r3, [r6, #0]
 800b88e:	b30b      	cbz	r3, 800b8d4 <__sfp+0x68>
 800b890:	6836      	ldr	r6, [r6, #0]
 800b892:	e7f7      	b.n	800b884 <__sfp+0x18>
 800b894:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b898:	b9d5      	cbnz	r5, 800b8d0 <__sfp+0x64>
 800b89a:	4b16      	ldr	r3, [pc, #88]	; (800b8f4 <__sfp+0x88>)
 800b89c:	60e3      	str	r3, [r4, #12]
 800b89e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b8a2:	6665      	str	r5, [r4, #100]	; 0x64
 800b8a4:	f000 f847 	bl	800b936 <__retarget_lock_init_recursive>
 800b8a8:	f7ff ff96 	bl	800b7d8 <__sfp_lock_release>
 800b8ac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b8b0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b8b4:	6025      	str	r5, [r4, #0]
 800b8b6:	61a5      	str	r5, [r4, #24]
 800b8b8:	2208      	movs	r2, #8
 800b8ba:	4629      	mov	r1, r5
 800b8bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b8c0:	f7fd fa9a 	bl	8008df8 <memset>
 800b8c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b8c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b8cc:	4620      	mov	r0, r4
 800b8ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b8d0:	3468      	adds	r4, #104	; 0x68
 800b8d2:	e7d9      	b.n	800b888 <__sfp+0x1c>
 800b8d4:	2104      	movs	r1, #4
 800b8d6:	4638      	mov	r0, r7
 800b8d8:	f7ff ff62 	bl	800b7a0 <__sfmoreglue>
 800b8dc:	4604      	mov	r4, r0
 800b8de:	6030      	str	r0, [r6, #0]
 800b8e0:	2800      	cmp	r0, #0
 800b8e2:	d1d5      	bne.n	800b890 <__sfp+0x24>
 800b8e4:	f7ff ff78 	bl	800b7d8 <__sfp_lock_release>
 800b8e8:	230c      	movs	r3, #12
 800b8ea:	603b      	str	r3, [r7, #0]
 800b8ec:	e7ee      	b.n	800b8cc <__sfp+0x60>
 800b8ee:	bf00      	nop
 800b8f0:	0800c458 	.word	0x0800c458
 800b8f4:	ffff0001 	.word	0xffff0001

0800b8f8 <_fwalk_reent>:
 800b8f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b8fc:	4606      	mov	r6, r0
 800b8fe:	4688      	mov	r8, r1
 800b900:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b904:	2700      	movs	r7, #0
 800b906:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b90a:	f1b9 0901 	subs.w	r9, r9, #1
 800b90e:	d505      	bpl.n	800b91c <_fwalk_reent+0x24>
 800b910:	6824      	ldr	r4, [r4, #0]
 800b912:	2c00      	cmp	r4, #0
 800b914:	d1f7      	bne.n	800b906 <_fwalk_reent+0xe>
 800b916:	4638      	mov	r0, r7
 800b918:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b91c:	89ab      	ldrh	r3, [r5, #12]
 800b91e:	2b01      	cmp	r3, #1
 800b920:	d907      	bls.n	800b932 <_fwalk_reent+0x3a>
 800b922:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b926:	3301      	adds	r3, #1
 800b928:	d003      	beq.n	800b932 <_fwalk_reent+0x3a>
 800b92a:	4629      	mov	r1, r5
 800b92c:	4630      	mov	r0, r6
 800b92e:	47c0      	blx	r8
 800b930:	4307      	orrs	r7, r0
 800b932:	3568      	adds	r5, #104	; 0x68
 800b934:	e7e9      	b.n	800b90a <_fwalk_reent+0x12>

0800b936 <__retarget_lock_init_recursive>:
 800b936:	4770      	bx	lr

0800b938 <__retarget_lock_acquire_recursive>:
 800b938:	4770      	bx	lr

0800b93a <__retarget_lock_release_recursive>:
 800b93a:	4770      	bx	lr

0800b93c <__swhatbuf_r>:
 800b93c:	b570      	push	{r4, r5, r6, lr}
 800b93e:	460e      	mov	r6, r1
 800b940:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b944:	2900      	cmp	r1, #0
 800b946:	b096      	sub	sp, #88	; 0x58
 800b948:	4614      	mov	r4, r2
 800b94a:	461d      	mov	r5, r3
 800b94c:	da08      	bge.n	800b960 <__swhatbuf_r+0x24>
 800b94e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b952:	2200      	movs	r2, #0
 800b954:	602a      	str	r2, [r5, #0]
 800b956:	061a      	lsls	r2, r3, #24
 800b958:	d410      	bmi.n	800b97c <__swhatbuf_r+0x40>
 800b95a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b95e:	e00e      	b.n	800b97e <__swhatbuf_r+0x42>
 800b960:	466a      	mov	r2, sp
 800b962:	f000 f903 	bl	800bb6c <_fstat_r>
 800b966:	2800      	cmp	r0, #0
 800b968:	dbf1      	blt.n	800b94e <__swhatbuf_r+0x12>
 800b96a:	9a01      	ldr	r2, [sp, #4]
 800b96c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b970:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b974:	425a      	negs	r2, r3
 800b976:	415a      	adcs	r2, r3
 800b978:	602a      	str	r2, [r5, #0]
 800b97a:	e7ee      	b.n	800b95a <__swhatbuf_r+0x1e>
 800b97c:	2340      	movs	r3, #64	; 0x40
 800b97e:	2000      	movs	r0, #0
 800b980:	6023      	str	r3, [r4, #0]
 800b982:	b016      	add	sp, #88	; 0x58
 800b984:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b988 <__smakebuf_r>:
 800b988:	898b      	ldrh	r3, [r1, #12]
 800b98a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b98c:	079d      	lsls	r5, r3, #30
 800b98e:	4606      	mov	r6, r0
 800b990:	460c      	mov	r4, r1
 800b992:	d507      	bpl.n	800b9a4 <__smakebuf_r+0x1c>
 800b994:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b998:	6023      	str	r3, [r4, #0]
 800b99a:	6123      	str	r3, [r4, #16]
 800b99c:	2301      	movs	r3, #1
 800b99e:	6163      	str	r3, [r4, #20]
 800b9a0:	b002      	add	sp, #8
 800b9a2:	bd70      	pop	{r4, r5, r6, pc}
 800b9a4:	ab01      	add	r3, sp, #4
 800b9a6:	466a      	mov	r2, sp
 800b9a8:	f7ff ffc8 	bl	800b93c <__swhatbuf_r>
 800b9ac:	9900      	ldr	r1, [sp, #0]
 800b9ae:	4605      	mov	r5, r0
 800b9b0:	4630      	mov	r0, r6
 800b9b2:	f7ff f963 	bl	800ac7c <_malloc_r>
 800b9b6:	b948      	cbnz	r0, 800b9cc <__smakebuf_r+0x44>
 800b9b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b9bc:	059a      	lsls	r2, r3, #22
 800b9be:	d4ef      	bmi.n	800b9a0 <__smakebuf_r+0x18>
 800b9c0:	f023 0303 	bic.w	r3, r3, #3
 800b9c4:	f043 0302 	orr.w	r3, r3, #2
 800b9c8:	81a3      	strh	r3, [r4, #12]
 800b9ca:	e7e3      	b.n	800b994 <__smakebuf_r+0xc>
 800b9cc:	4b0d      	ldr	r3, [pc, #52]	; (800ba04 <__smakebuf_r+0x7c>)
 800b9ce:	62b3      	str	r3, [r6, #40]	; 0x28
 800b9d0:	89a3      	ldrh	r3, [r4, #12]
 800b9d2:	6020      	str	r0, [r4, #0]
 800b9d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b9d8:	81a3      	strh	r3, [r4, #12]
 800b9da:	9b00      	ldr	r3, [sp, #0]
 800b9dc:	6163      	str	r3, [r4, #20]
 800b9de:	9b01      	ldr	r3, [sp, #4]
 800b9e0:	6120      	str	r0, [r4, #16]
 800b9e2:	b15b      	cbz	r3, 800b9fc <__smakebuf_r+0x74>
 800b9e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b9e8:	4630      	mov	r0, r6
 800b9ea:	f000 f8d1 	bl	800bb90 <_isatty_r>
 800b9ee:	b128      	cbz	r0, 800b9fc <__smakebuf_r+0x74>
 800b9f0:	89a3      	ldrh	r3, [r4, #12]
 800b9f2:	f023 0303 	bic.w	r3, r3, #3
 800b9f6:	f043 0301 	orr.w	r3, r3, #1
 800b9fa:	81a3      	strh	r3, [r4, #12]
 800b9fc:	89a0      	ldrh	r0, [r4, #12]
 800b9fe:	4305      	orrs	r5, r0
 800ba00:	81a5      	strh	r5, [r4, #12]
 800ba02:	e7cd      	b.n	800b9a0 <__smakebuf_r+0x18>
 800ba04:	0800b795 	.word	0x0800b795

0800ba08 <_malloc_usable_size_r>:
 800ba08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba0c:	1f18      	subs	r0, r3, #4
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	bfbc      	itt	lt
 800ba12:	580b      	ldrlt	r3, [r1, r0]
 800ba14:	18c0      	addlt	r0, r0, r3
 800ba16:	4770      	bx	lr

0800ba18 <_raise_r>:
 800ba18:	291f      	cmp	r1, #31
 800ba1a:	b538      	push	{r3, r4, r5, lr}
 800ba1c:	4604      	mov	r4, r0
 800ba1e:	460d      	mov	r5, r1
 800ba20:	d904      	bls.n	800ba2c <_raise_r+0x14>
 800ba22:	2316      	movs	r3, #22
 800ba24:	6003      	str	r3, [r0, #0]
 800ba26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ba2a:	bd38      	pop	{r3, r4, r5, pc}
 800ba2c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ba2e:	b112      	cbz	r2, 800ba36 <_raise_r+0x1e>
 800ba30:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ba34:	b94b      	cbnz	r3, 800ba4a <_raise_r+0x32>
 800ba36:	4620      	mov	r0, r4
 800ba38:	f000 f830 	bl	800ba9c <_getpid_r>
 800ba3c:	462a      	mov	r2, r5
 800ba3e:	4601      	mov	r1, r0
 800ba40:	4620      	mov	r0, r4
 800ba42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ba46:	f000 b817 	b.w	800ba78 <_kill_r>
 800ba4a:	2b01      	cmp	r3, #1
 800ba4c:	d00a      	beq.n	800ba64 <_raise_r+0x4c>
 800ba4e:	1c59      	adds	r1, r3, #1
 800ba50:	d103      	bne.n	800ba5a <_raise_r+0x42>
 800ba52:	2316      	movs	r3, #22
 800ba54:	6003      	str	r3, [r0, #0]
 800ba56:	2001      	movs	r0, #1
 800ba58:	e7e7      	b.n	800ba2a <_raise_r+0x12>
 800ba5a:	2400      	movs	r4, #0
 800ba5c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ba60:	4628      	mov	r0, r5
 800ba62:	4798      	blx	r3
 800ba64:	2000      	movs	r0, #0
 800ba66:	e7e0      	b.n	800ba2a <_raise_r+0x12>

0800ba68 <raise>:
 800ba68:	4b02      	ldr	r3, [pc, #8]	; (800ba74 <raise+0xc>)
 800ba6a:	4601      	mov	r1, r0
 800ba6c:	6818      	ldr	r0, [r3, #0]
 800ba6e:	f7ff bfd3 	b.w	800ba18 <_raise_r>
 800ba72:	bf00      	nop
 800ba74:	20000100 	.word	0x20000100

0800ba78 <_kill_r>:
 800ba78:	b538      	push	{r3, r4, r5, lr}
 800ba7a:	4d07      	ldr	r5, [pc, #28]	; (800ba98 <_kill_r+0x20>)
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	4604      	mov	r4, r0
 800ba80:	4608      	mov	r0, r1
 800ba82:	4611      	mov	r1, r2
 800ba84:	602b      	str	r3, [r5, #0]
 800ba86:	f7f5 fd91 	bl	80015ac <_kill>
 800ba8a:	1c43      	adds	r3, r0, #1
 800ba8c:	d102      	bne.n	800ba94 <_kill_r+0x1c>
 800ba8e:	682b      	ldr	r3, [r5, #0]
 800ba90:	b103      	cbz	r3, 800ba94 <_kill_r+0x1c>
 800ba92:	6023      	str	r3, [r4, #0]
 800ba94:	bd38      	pop	{r3, r4, r5, pc}
 800ba96:	bf00      	nop
 800ba98:	20001f8c 	.word	0x20001f8c

0800ba9c <_getpid_r>:
 800ba9c:	f7f5 bd7e 	b.w	800159c <_getpid>

0800baa0 <__sread>:
 800baa0:	b510      	push	{r4, lr}
 800baa2:	460c      	mov	r4, r1
 800baa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800baa8:	f000 f894 	bl	800bbd4 <_read_r>
 800baac:	2800      	cmp	r0, #0
 800baae:	bfab      	itete	ge
 800bab0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bab2:	89a3      	ldrhlt	r3, [r4, #12]
 800bab4:	181b      	addge	r3, r3, r0
 800bab6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800baba:	bfac      	ite	ge
 800babc:	6563      	strge	r3, [r4, #84]	; 0x54
 800babe:	81a3      	strhlt	r3, [r4, #12]
 800bac0:	bd10      	pop	{r4, pc}

0800bac2 <__swrite>:
 800bac2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bac6:	461f      	mov	r7, r3
 800bac8:	898b      	ldrh	r3, [r1, #12]
 800baca:	05db      	lsls	r3, r3, #23
 800bacc:	4605      	mov	r5, r0
 800bace:	460c      	mov	r4, r1
 800bad0:	4616      	mov	r6, r2
 800bad2:	d505      	bpl.n	800bae0 <__swrite+0x1e>
 800bad4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bad8:	2302      	movs	r3, #2
 800bada:	2200      	movs	r2, #0
 800badc:	f000 f868 	bl	800bbb0 <_lseek_r>
 800bae0:	89a3      	ldrh	r3, [r4, #12]
 800bae2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bae6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800baea:	81a3      	strh	r3, [r4, #12]
 800baec:	4632      	mov	r2, r6
 800baee:	463b      	mov	r3, r7
 800baf0:	4628      	mov	r0, r5
 800baf2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800baf6:	f000 b817 	b.w	800bb28 <_write_r>

0800bafa <__sseek>:
 800bafa:	b510      	push	{r4, lr}
 800bafc:	460c      	mov	r4, r1
 800bafe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb02:	f000 f855 	bl	800bbb0 <_lseek_r>
 800bb06:	1c43      	adds	r3, r0, #1
 800bb08:	89a3      	ldrh	r3, [r4, #12]
 800bb0a:	bf15      	itete	ne
 800bb0c:	6560      	strne	r0, [r4, #84]	; 0x54
 800bb0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bb12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bb16:	81a3      	strheq	r3, [r4, #12]
 800bb18:	bf18      	it	ne
 800bb1a:	81a3      	strhne	r3, [r4, #12]
 800bb1c:	bd10      	pop	{r4, pc}

0800bb1e <__sclose>:
 800bb1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb22:	f000 b813 	b.w	800bb4c <_close_r>
	...

0800bb28 <_write_r>:
 800bb28:	b538      	push	{r3, r4, r5, lr}
 800bb2a:	4d07      	ldr	r5, [pc, #28]	; (800bb48 <_write_r+0x20>)
 800bb2c:	4604      	mov	r4, r0
 800bb2e:	4608      	mov	r0, r1
 800bb30:	4611      	mov	r1, r2
 800bb32:	2200      	movs	r2, #0
 800bb34:	602a      	str	r2, [r5, #0]
 800bb36:	461a      	mov	r2, r3
 800bb38:	f7f5 fd6f 	bl	800161a <_write>
 800bb3c:	1c43      	adds	r3, r0, #1
 800bb3e:	d102      	bne.n	800bb46 <_write_r+0x1e>
 800bb40:	682b      	ldr	r3, [r5, #0]
 800bb42:	b103      	cbz	r3, 800bb46 <_write_r+0x1e>
 800bb44:	6023      	str	r3, [r4, #0]
 800bb46:	bd38      	pop	{r3, r4, r5, pc}
 800bb48:	20001f8c 	.word	0x20001f8c

0800bb4c <_close_r>:
 800bb4c:	b538      	push	{r3, r4, r5, lr}
 800bb4e:	4d06      	ldr	r5, [pc, #24]	; (800bb68 <_close_r+0x1c>)
 800bb50:	2300      	movs	r3, #0
 800bb52:	4604      	mov	r4, r0
 800bb54:	4608      	mov	r0, r1
 800bb56:	602b      	str	r3, [r5, #0]
 800bb58:	f7f5 fd7b 	bl	8001652 <_close>
 800bb5c:	1c43      	adds	r3, r0, #1
 800bb5e:	d102      	bne.n	800bb66 <_close_r+0x1a>
 800bb60:	682b      	ldr	r3, [r5, #0]
 800bb62:	b103      	cbz	r3, 800bb66 <_close_r+0x1a>
 800bb64:	6023      	str	r3, [r4, #0]
 800bb66:	bd38      	pop	{r3, r4, r5, pc}
 800bb68:	20001f8c 	.word	0x20001f8c

0800bb6c <_fstat_r>:
 800bb6c:	b538      	push	{r3, r4, r5, lr}
 800bb6e:	4d07      	ldr	r5, [pc, #28]	; (800bb8c <_fstat_r+0x20>)
 800bb70:	2300      	movs	r3, #0
 800bb72:	4604      	mov	r4, r0
 800bb74:	4608      	mov	r0, r1
 800bb76:	4611      	mov	r1, r2
 800bb78:	602b      	str	r3, [r5, #0]
 800bb7a:	f7f5 fd76 	bl	800166a <_fstat>
 800bb7e:	1c43      	adds	r3, r0, #1
 800bb80:	d102      	bne.n	800bb88 <_fstat_r+0x1c>
 800bb82:	682b      	ldr	r3, [r5, #0]
 800bb84:	b103      	cbz	r3, 800bb88 <_fstat_r+0x1c>
 800bb86:	6023      	str	r3, [r4, #0]
 800bb88:	bd38      	pop	{r3, r4, r5, pc}
 800bb8a:	bf00      	nop
 800bb8c:	20001f8c 	.word	0x20001f8c

0800bb90 <_isatty_r>:
 800bb90:	b538      	push	{r3, r4, r5, lr}
 800bb92:	4d06      	ldr	r5, [pc, #24]	; (800bbac <_isatty_r+0x1c>)
 800bb94:	2300      	movs	r3, #0
 800bb96:	4604      	mov	r4, r0
 800bb98:	4608      	mov	r0, r1
 800bb9a:	602b      	str	r3, [r5, #0]
 800bb9c:	f7f5 fd75 	bl	800168a <_isatty>
 800bba0:	1c43      	adds	r3, r0, #1
 800bba2:	d102      	bne.n	800bbaa <_isatty_r+0x1a>
 800bba4:	682b      	ldr	r3, [r5, #0]
 800bba6:	b103      	cbz	r3, 800bbaa <_isatty_r+0x1a>
 800bba8:	6023      	str	r3, [r4, #0]
 800bbaa:	bd38      	pop	{r3, r4, r5, pc}
 800bbac:	20001f8c 	.word	0x20001f8c

0800bbb0 <_lseek_r>:
 800bbb0:	b538      	push	{r3, r4, r5, lr}
 800bbb2:	4d07      	ldr	r5, [pc, #28]	; (800bbd0 <_lseek_r+0x20>)
 800bbb4:	4604      	mov	r4, r0
 800bbb6:	4608      	mov	r0, r1
 800bbb8:	4611      	mov	r1, r2
 800bbba:	2200      	movs	r2, #0
 800bbbc:	602a      	str	r2, [r5, #0]
 800bbbe:	461a      	mov	r2, r3
 800bbc0:	f7f5 fd6e 	bl	80016a0 <_lseek>
 800bbc4:	1c43      	adds	r3, r0, #1
 800bbc6:	d102      	bne.n	800bbce <_lseek_r+0x1e>
 800bbc8:	682b      	ldr	r3, [r5, #0]
 800bbca:	b103      	cbz	r3, 800bbce <_lseek_r+0x1e>
 800bbcc:	6023      	str	r3, [r4, #0]
 800bbce:	bd38      	pop	{r3, r4, r5, pc}
 800bbd0:	20001f8c 	.word	0x20001f8c

0800bbd4 <_read_r>:
 800bbd4:	b538      	push	{r3, r4, r5, lr}
 800bbd6:	4d07      	ldr	r5, [pc, #28]	; (800bbf4 <_read_r+0x20>)
 800bbd8:	4604      	mov	r4, r0
 800bbda:	4608      	mov	r0, r1
 800bbdc:	4611      	mov	r1, r2
 800bbde:	2200      	movs	r2, #0
 800bbe0:	602a      	str	r2, [r5, #0]
 800bbe2:	461a      	mov	r2, r3
 800bbe4:	f7f5 fcfc 	bl	80015e0 <_read>
 800bbe8:	1c43      	adds	r3, r0, #1
 800bbea:	d102      	bne.n	800bbf2 <_read_r+0x1e>
 800bbec:	682b      	ldr	r3, [r5, #0]
 800bbee:	b103      	cbz	r3, 800bbf2 <_read_r+0x1e>
 800bbf0:	6023      	str	r3, [r4, #0]
 800bbf2:	bd38      	pop	{r3, r4, r5, pc}
 800bbf4:	20001f8c 	.word	0x20001f8c

0800bbf8 <powf>:
 800bbf8:	b508      	push	{r3, lr}
 800bbfa:	ed2d 8b04 	vpush	{d8-d9}
 800bbfe:	eeb0 8a60 	vmov.f32	s16, s1
 800bc02:	eeb0 9a40 	vmov.f32	s18, s0
 800bc06:	f000 f84f 	bl	800bca8 <__ieee754_powf>
 800bc0a:	eeb4 8a48 	vcmp.f32	s16, s16
 800bc0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc12:	eef0 8a40 	vmov.f32	s17, s0
 800bc16:	d63e      	bvs.n	800bc96 <powf+0x9e>
 800bc18:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800bc1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc20:	d112      	bne.n	800bc48 <powf+0x50>
 800bc22:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800bc26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc2a:	d039      	beq.n	800bca0 <powf+0xa8>
 800bc2c:	eeb0 0a48 	vmov.f32	s0, s16
 800bc30:	f000 fb35 	bl	800c29e <finitef>
 800bc34:	b378      	cbz	r0, 800bc96 <powf+0x9e>
 800bc36:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800bc3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc3e:	d52a      	bpl.n	800bc96 <powf+0x9e>
 800bc40:	f7fd f8b0 	bl	8008da4 <__errno>
 800bc44:	2322      	movs	r3, #34	; 0x22
 800bc46:	e014      	b.n	800bc72 <powf+0x7a>
 800bc48:	f000 fb29 	bl	800c29e <finitef>
 800bc4c:	b998      	cbnz	r0, 800bc76 <powf+0x7e>
 800bc4e:	eeb0 0a49 	vmov.f32	s0, s18
 800bc52:	f000 fb24 	bl	800c29e <finitef>
 800bc56:	b170      	cbz	r0, 800bc76 <powf+0x7e>
 800bc58:	eeb0 0a48 	vmov.f32	s0, s16
 800bc5c:	f000 fb1f 	bl	800c29e <finitef>
 800bc60:	b148      	cbz	r0, 800bc76 <powf+0x7e>
 800bc62:	eef4 8a68 	vcmp.f32	s17, s17
 800bc66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc6a:	d7e9      	bvc.n	800bc40 <powf+0x48>
 800bc6c:	f7fd f89a 	bl	8008da4 <__errno>
 800bc70:	2321      	movs	r3, #33	; 0x21
 800bc72:	6003      	str	r3, [r0, #0]
 800bc74:	e00f      	b.n	800bc96 <powf+0x9e>
 800bc76:	eef5 8a40 	vcmp.f32	s17, #0.0
 800bc7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc7e:	d10a      	bne.n	800bc96 <powf+0x9e>
 800bc80:	eeb0 0a49 	vmov.f32	s0, s18
 800bc84:	f000 fb0b 	bl	800c29e <finitef>
 800bc88:	b128      	cbz	r0, 800bc96 <powf+0x9e>
 800bc8a:	eeb0 0a48 	vmov.f32	s0, s16
 800bc8e:	f000 fb06 	bl	800c29e <finitef>
 800bc92:	2800      	cmp	r0, #0
 800bc94:	d1d4      	bne.n	800bc40 <powf+0x48>
 800bc96:	eeb0 0a68 	vmov.f32	s0, s17
 800bc9a:	ecbd 8b04 	vpop	{d8-d9}
 800bc9e:	bd08      	pop	{r3, pc}
 800bca0:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800bca4:	e7f7      	b.n	800bc96 <powf+0x9e>
	...

0800bca8 <__ieee754_powf>:
 800bca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcac:	ee10 4a90 	vmov	r4, s1
 800bcb0:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 800bcb4:	ed2d 8b02 	vpush	{d8}
 800bcb8:	ee10 6a10 	vmov	r6, s0
 800bcbc:	eeb0 8a40 	vmov.f32	s16, s0
 800bcc0:	eef0 8a60 	vmov.f32	s17, s1
 800bcc4:	d10c      	bne.n	800bce0 <__ieee754_powf+0x38>
 800bcc6:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 800bcca:	0076      	lsls	r6, r6, #1
 800bccc:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 800bcd0:	f240 8296 	bls.w	800c200 <__ieee754_powf+0x558>
 800bcd4:	ee38 0a28 	vadd.f32	s0, s16, s17
 800bcd8:	ecbd 8b02 	vpop	{d8}
 800bcdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bce0:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800bce4:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800bce8:	dcf4      	bgt.n	800bcd4 <__ieee754_powf+0x2c>
 800bcea:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800bcee:	dd08      	ble.n	800bd02 <__ieee754_powf+0x5a>
 800bcf0:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 800bcf4:	d1ee      	bne.n	800bcd4 <__ieee754_powf+0x2c>
 800bcf6:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 800bcfa:	0064      	lsls	r4, r4, #1
 800bcfc:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 800bd00:	e7e6      	b.n	800bcd0 <__ieee754_powf+0x28>
 800bd02:	2e00      	cmp	r6, #0
 800bd04:	da20      	bge.n	800bd48 <__ieee754_powf+0xa0>
 800bd06:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 800bd0a:	da2d      	bge.n	800bd68 <__ieee754_powf+0xc0>
 800bd0c:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800bd10:	f2c0 827f 	blt.w	800c212 <__ieee754_powf+0x56a>
 800bd14:	ea4f 53e8 	mov.w	r3, r8, asr #23
 800bd18:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800bd1c:	fa48 f703 	asr.w	r7, r8, r3
 800bd20:	fa07 f303 	lsl.w	r3, r7, r3
 800bd24:	4543      	cmp	r3, r8
 800bd26:	f040 8274 	bne.w	800c212 <__ieee754_powf+0x56a>
 800bd2a:	f007 0701 	and.w	r7, r7, #1
 800bd2e:	f1c7 0702 	rsb	r7, r7, #2
 800bd32:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800bd36:	d11f      	bne.n	800bd78 <__ieee754_powf+0xd0>
 800bd38:	2c00      	cmp	r4, #0
 800bd3a:	f280 8267 	bge.w	800c20c <__ieee754_powf+0x564>
 800bd3e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800bd42:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800bd46:	e7c7      	b.n	800bcd8 <__ieee754_powf+0x30>
 800bd48:	2700      	movs	r7, #0
 800bd4a:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800bd4e:	d1f0      	bne.n	800bd32 <__ieee754_powf+0x8a>
 800bd50:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 800bd54:	f000 8254 	beq.w	800c200 <__ieee754_powf+0x558>
 800bd58:	dd08      	ble.n	800bd6c <__ieee754_powf+0xc4>
 800bd5a:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 800c064 <__ieee754_powf+0x3bc>
 800bd5e:	2c00      	cmp	r4, #0
 800bd60:	bfa8      	it	ge
 800bd62:	eeb0 0a68 	vmovge.f32	s0, s17
 800bd66:	e7b7      	b.n	800bcd8 <__ieee754_powf+0x30>
 800bd68:	2702      	movs	r7, #2
 800bd6a:	e7ee      	b.n	800bd4a <__ieee754_powf+0xa2>
 800bd6c:	2c00      	cmp	r4, #0
 800bd6e:	f280 824a 	bge.w	800c206 <__ieee754_powf+0x55e>
 800bd72:	eeb1 0a68 	vneg.f32	s0, s17
 800bd76:	e7af      	b.n	800bcd8 <__ieee754_powf+0x30>
 800bd78:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800bd7c:	d102      	bne.n	800bd84 <__ieee754_powf+0xdc>
 800bd7e:	ee28 0a08 	vmul.f32	s0, s16, s16
 800bd82:	e7a9      	b.n	800bcd8 <__ieee754_powf+0x30>
 800bd84:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800bd88:	eeb0 0a48 	vmov.f32	s0, s16
 800bd8c:	d107      	bne.n	800bd9e <__ieee754_powf+0xf6>
 800bd8e:	2e00      	cmp	r6, #0
 800bd90:	db05      	blt.n	800bd9e <__ieee754_powf+0xf6>
 800bd92:	ecbd 8b02 	vpop	{d8}
 800bd96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bd9a:	f000 ba53 	b.w	800c244 <__ieee754_sqrtf>
 800bd9e:	f000 fa77 	bl	800c290 <fabsf>
 800bda2:	b125      	cbz	r5, 800bdae <__ieee754_powf+0x106>
 800bda4:	f026 4340 	bic.w	r3, r6, #3221225472	; 0xc0000000
 800bda8:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800bdac:	d116      	bne.n	800bddc <__ieee754_powf+0x134>
 800bdae:	2c00      	cmp	r4, #0
 800bdb0:	bfbc      	itt	lt
 800bdb2:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800bdb6:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800bdba:	2e00      	cmp	r6, #0
 800bdbc:	da8c      	bge.n	800bcd8 <__ieee754_powf+0x30>
 800bdbe:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 800bdc2:	ea55 0307 	orrs.w	r3, r5, r7
 800bdc6:	d104      	bne.n	800bdd2 <__ieee754_powf+0x12a>
 800bdc8:	ee70 7a40 	vsub.f32	s15, s0, s0
 800bdcc:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800bdd0:	e782      	b.n	800bcd8 <__ieee754_powf+0x30>
 800bdd2:	2f01      	cmp	r7, #1
 800bdd4:	d180      	bne.n	800bcd8 <__ieee754_powf+0x30>
 800bdd6:	eeb1 0a40 	vneg.f32	s0, s0
 800bdda:	e77d      	b.n	800bcd8 <__ieee754_powf+0x30>
 800bddc:	0ff0      	lsrs	r0, r6, #31
 800bdde:	3801      	subs	r0, #1
 800bde0:	ea57 0300 	orrs.w	r3, r7, r0
 800bde4:	d104      	bne.n	800bdf0 <__ieee754_powf+0x148>
 800bde6:	ee38 8a48 	vsub.f32	s16, s16, s16
 800bdea:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800bdee:	e773      	b.n	800bcd8 <__ieee754_powf+0x30>
 800bdf0:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 800bdf4:	dd74      	ble.n	800bee0 <__ieee754_powf+0x238>
 800bdf6:	4b9c      	ldr	r3, [pc, #624]	; (800c068 <__ieee754_powf+0x3c0>)
 800bdf8:	429d      	cmp	r5, r3
 800bdfa:	dc08      	bgt.n	800be0e <__ieee754_powf+0x166>
 800bdfc:	2c00      	cmp	r4, #0
 800bdfe:	da0b      	bge.n	800be18 <__ieee754_powf+0x170>
 800be00:	2000      	movs	r0, #0
 800be02:	ecbd 8b02 	vpop	{d8}
 800be06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800be0a:	f000 ba3b 	b.w	800c284 <__math_oflowf>
 800be0e:	4b97      	ldr	r3, [pc, #604]	; (800c06c <__ieee754_powf+0x3c4>)
 800be10:	429d      	cmp	r5, r3
 800be12:	dd08      	ble.n	800be26 <__ieee754_powf+0x17e>
 800be14:	2c00      	cmp	r4, #0
 800be16:	dcf3      	bgt.n	800be00 <__ieee754_powf+0x158>
 800be18:	2000      	movs	r0, #0
 800be1a:	ecbd 8b02 	vpop	{d8}
 800be1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800be22:	f000 ba29 	b.w	800c278 <__math_uflowf>
 800be26:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800be2a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800be2e:	eddf 6a90 	vldr	s13, [pc, #576]	; 800c070 <__ieee754_powf+0x3c8>
 800be32:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800be36:	eee0 6a67 	vfms.f32	s13, s0, s15
 800be3a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800be3e:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800be42:	ee20 7a00 	vmul.f32	s14, s0, s0
 800be46:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be4a:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800c074 <__ieee754_powf+0x3cc>
 800be4e:	ee67 7a67 	vnmul.f32	s15, s14, s15
 800be52:	ed9f 7a89 	vldr	s14, [pc, #548]	; 800c078 <__ieee754_powf+0x3d0>
 800be56:	eee0 7a07 	vfma.f32	s15, s0, s14
 800be5a:	ed9f 7a88 	vldr	s14, [pc, #544]	; 800c07c <__ieee754_powf+0x3d4>
 800be5e:	eef0 6a67 	vmov.f32	s13, s15
 800be62:	eee0 6a07 	vfma.f32	s13, s0, s14
 800be66:	ee16 3a90 	vmov	r3, s13
 800be6a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800be6e:	f023 030f 	bic.w	r3, r3, #15
 800be72:	ee00 3a90 	vmov	s1, r3
 800be76:	eee0 0a47 	vfms.f32	s1, s0, s14
 800be7a:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800be7e:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 800be82:	f024 040f 	bic.w	r4, r4, #15
 800be86:	ee07 4a10 	vmov	s14, r4
 800be8a:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800be8e:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800be92:	ee07 3a90 	vmov	s15, r3
 800be96:	eee7 0a27 	vfma.f32	s1, s14, s15
 800be9a:	3f01      	subs	r7, #1
 800be9c:	ea57 0200 	orrs.w	r2, r7, r0
 800bea0:	ee07 4a10 	vmov	s14, r4
 800bea4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bea8:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800beac:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800beb0:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800beb4:	ee17 4a10 	vmov	r4, s14
 800beb8:	bf08      	it	eq
 800beba:	eeb0 8a40 	vmoveq.f32	s16, s0
 800bebe:	2c00      	cmp	r4, #0
 800bec0:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800bec4:	f340 817e 	ble.w	800c1c4 <__ieee754_powf+0x51c>
 800bec8:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800becc:	f340 80f8 	ble.w	800c0c0 <__ieee754_powf+0x418>
 800bed0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800bed4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bed8:	bf4c      	ite	mi
 800beda:	2001      	movmi	r0, #1
 800bedc:	2000      	movpl	r0, #0
 800bede:	e790      	b.n	800be02 <__ieee754_powf+0x15a>
 800bee0:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 800bee4:	bf01      	itttt	eq
 800bee6:	eddf 7a66 	vldreq	s15, [pc, #408]	; 800c080 <__ieee754_powf+0x3d8>
 800beea:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800beee:	f06f 0217 	mvneq.w	r2, #23
 800bef2:	ee17 5a90 	vmoveq	r5, s15
 800bef6:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800befa:	bf18      	it	ne
 800befc:	2200      	movne	r2, #0
 800befe:	3b7f      	subs	r3, #127	; 0x7f
 800bf00:	4413      	add	r3, r2
 800bf02:	4a60      	ldr	r2, [pc, #384]	; (800c084 <__ieee754_powf+0x3dc>)
 800bf04:	f3c5 0516 	ubfx	r5, r5, #0, #23
 800bf08:	4295      	cmp	r5, r2
 800bf0a:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 800bf0e:	dd06      	ble.n	800bf1e <__ieee754_powf+0x276>
 800bf10:	4a5d      	ldr	r2, [pc, #372]	; (800c088 <__ieee754_powf+0x3e0>)
 800bf12:	4295      	cmp	r5, r2
 800bf14:	f340 80a4 	ble.w	800c060 <__ieee754_powf+0x3b8>
 800bf18:	3301      	adds	r3, #1
 800bf1a:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800bf1e:	2500      	movs	r5, #0
 800bf20:	4a5a      	ldr	r2, [pc, #360]	; (800c08c <__ieee754_powf+0x3e4>)
 800bf22:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 800bf26:	ee07 1a90 	vmov	s15, r1
 800bf2a:	ed92 7a00 	vldr	s14, [r2]
 800bf2e:	4a58      	ldr	r2, [pc, #352]	; (800c090 <__ieee754_powf+0x3e8>)
 800bf30:	ee37 6a27 	vadd.f32	s12, s14, s15
 800bf34:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800bf38:	eec5 6a86 	vdiv.f32	s13, s11, s12
 800bf3c:	1049      	asrs	r1, r1, #1
 800bf3e:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800bf42:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800bf46:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 800bf4a:	ee37 5ac7 	vsub.f32	s10, s15, s14
 800bf4e:	ee06 1a10 	vmov	s12, r1
 800bf52:	ee65 4a26 	vmul.f32	s9, s10, s13
 800bf56:	ee36 7a47 	vsub.f32	s14, s12, s14
 800bf5a:	ee14 6a90 	vmov	r6, s9
 800bf5e:	4016      	ands	r6, r2
 800bf60:	ee05 6a90 	vmov	s11, r6
 800bf64:	eea5 5ac6 	vfms.f32	s10, s11, s12
 800bf68:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bf6c:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800c094 <__ieee754_powf+0x3ec>
 800bf70:	eea5 5ae7 	vfms.f32	s10, s11, s15
 800bf74:	ee64 7aa4 	vmul.f32	s15, s9, s9
 800bf78:	ee25 6a26 	vmul.f32	s12, s10, s13
 800bf7c:	eddf 6a46 	vldr	s13, [pc, #280]	; 800c098 <__ieee754_powf+0x3f0>
 800bf80:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800bf84:	eddf 6a45 	vldr	s13, [pc, #276]	; 800c09c <__ieee754_powf+0x3f4>
 800bf88:	eee7 6a27 	vfma.f32	s13, s14, s15
 800bf8c:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800c070 <__ieee754_powf+0x3c8>
 800bf90:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800bf94:	eddf 6a42 	vldr	s13, [pc, #264]	; 800c0a0 <__ieee754_powf+0x3f8>
 800bf98:	eee7 6a27 	vfma.f32	s13, s14, s15
 800bf9c:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800c0a4 <__ieee754_powf+0x3fc>
 800bfa0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800bfa4:	ee74 6aa5 	vadd.f32	s13, s9, s11
 800bfa8:	ee27 5aa7 	vmul.f32	s10, s15, s15
 800bfac:	ee66 6a86 	vmul.f32	s13, s13, s12
 800bfb0:	eee5 6a07 	vfma.f32	s13, s10, s14
 800bfb4:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 800bfb8:	eef0 7a45 	vmov.f32	s15, s10
 800bfbc:	eee5 7aa5 	vfma.f32	s15, s11, s11
 800bfc0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bfc4:	ee17 1a90 	vmov	r1, s15
 800bfc8:	4011      	ands	r1, r2
 800bfca:	ee07 1a90 	vmov	s15, r1
 800bfce:	ee37 7ac5 	vsub.f32	s14, s15, s10
 800bfd2:	eea5 7ae5 	vfms.f32	s14, s11, s11
 800bfd6:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800bfda:	ee27 7a24 	vmul.f32	s14, s14, s9
 800bfde:	eea6 7a27 	vfma.f32	s14, s12, s15
 800bfe2:	eeb0 6a47 	vmov.f32	s12, s14
 800bfe6:	eea5 6aa7 	vfma.f32	s12, s11, s15
 800bfea:	ee16 1a10 	vmov	r1, s12
 800bfee:	4011      	ands	r1, r2
 800bff0:	ee06 1a90 	vmov	s13, r1
 800bff4:	eee5 6ae7 	vfms.f32	s13, s11, s15
 800bff8:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800c0a8 <__ieee754_powf+0x400>
 800bffc:	eddf 5a2b 	vldr	s11, [pc, #172]	; 800c0ac <__ieee754_powf+0x404>
 800c000:	ee37 7a66 	vsub.f32	s14, s14, s13
 800c004:	ee06 1a10 	vmov	s12, r1
 800c008:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c00c:	eddf 7a28 	vldr	s15, [pc, #160]	; 800c0b0 <__ieee754_powf+0x408>
 800c010:	4928      	ldr	r1, [pc, #160]	; (800c0b4 <__ieee754_powf+0x40c>)
 800c012:	eea6 7a27 	vfma.f32	s14, s12, s15
 800c016:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 800c01a:	edd1 7a00 	vldr	s15, [r1]
 800c01e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c022:	ee07 3a90 	vmov	s15, r3
 800c026:	4b24      	ldr	r3, [pc, #144]	; (800c0b8 <__ieee754_powf+0x410>)
 800c028:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800c02c:	eef0 7a47 	vmov.f32	s15, s14
 800c030:	eee6 7a25 	vfma.f32	s15, s12, s11
 800c034:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800c038:	edd5 0a00 	vldr	s1, [r5]
 800c03c:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800c040:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c044:	ee17 3a90 	vmov	r3, s15
 800c048:	4013      	ands	r3, r2
 800c04a:	ee07 3a90 	vmov	s15, r3
 800c04e:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800c052:	ee76 6ae0 	vsub.f32	s13, s13, s1
 800c056:	eee6 6a65 	vfms.f32	s13, s12, s11
 800c05a:	ee77 7a66 	vsub.f32	s15, s14, s13
 800c05e:	e70e      	b.n	800be7e <__ieee754_powf+0x1d6>
 800c060:	2501      	movs	r5, #1
 800c062:	e75d      	b.n	800bf20 <__ieee754_powf+0x278>
 800c064:	00000000 	.word	0x00000000
 800c068:	3f7ffff3 	.word	0x3f7ffff3
 800c06c:	3f800007 	.word	0x3f800007
 800c070:	3eaaaaab 	.word	0x3eaaaaab
 800c074:	3fb8aa3b 	.word	0x3fb8aa3b
 800c078:	36eca570 	.word	0x36eca570
 800c07c:	3fb8aa00 	.word	0x3fb8aa00
 800c080:	4b800000 	.word	0x4b800000
 800c084:	001cc471 	.word	0x001cc471
 800c088:	005db3d6 	.word	0x005db3d6
 800c08c:	0800c834 	.word	0x0800c834
 800c090:	fffff000 	.word	0xfffff000
 800c094:	3e6c3255 	.word	0x3e6c3255
 800c098:	3e53f142 	.word	0x3e53f142
 800c09c:	3e8ba305 	.word	0x3e8ba305
 800c0a0:	3edb6db7 	.word	0x3edb6db7
 800c0a4:	3f19999a 	.word	0x3f19999a
 800c0a8:	3f76384f 	.word	0x3f76384f
 800c0ac:	3f763800 	.word	0x3f763800
 800c0b0:	369dc3a0 	.word	0x369dc3a0
 800c0b4:	0800c844 	.word	0x0800c844
 800c0b8:	0800c83c 	.word	0x0800c83c
 800c0bc:	3338aa3c 	.word	0x3338aa3c
 800c0c0:	f040 8095 	bne.w	800c1ee <__ieee754_powf+0x546>
 800c0c4:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800c0bc <__ieee754_powf+0x414>
 800c0c8:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c0cc:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800c0d0:	eef4 6ac7 	vcmpe.f32	s13, s14
 800c0d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0d8:	f73f aefa 	bgt.w	800bed0 <__ieee754_powf+0x228>
 800c0dc:	15db      	asrs	r3, r3, #23
 800c0de:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 800c0e2:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800c0e6:	4103      	asrs	r3, r0
 800c0e8:	4423      	add	r3, r4
 800c0ea:	494b      	ldr	r1, [pc, #300]	; (800c218 <__ieee754_powf+0x570>)
 800c0ec:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c0f0:	3a7f      	subs	r2, #127	; 0x7f
 800c0f2:	4111      	asrs	r1, r2
 800c0f4:	ea23 0101 	bic.w	r1, r3, r1
 800c0f8:	ee07 1a10 	vmov	s14, r1
 800c0fc:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800c100:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800c104:	f1c2 0217 	rsb	r2, r2, #23
 800c108:	4110      	asrs	r0, r2
 800c10a:	2c00      	cmp	r4, #0
 800c10c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c110:	bfb8      	it	lt
 800c112:	4240      	neglt	r0, r0
 800c114:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800c118:	ed9f 0a40 	vldr	s0, [pc, #256]	; 800c21c <__ieee754_powf+0x574>
 800c11c:	eddf 6a40 	vldr	s13, [pc, #256]	; 800c220 <__ieee754_powf+0x578>
 800c120:	ee17 3a10 	vmov	r3, s14
 800c124:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800c128:	f023 030f 	bic.w	r3, r3, #15
 800c12c:	ee07 3a10 	vmov	s14, r3
 800c130:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c134:	ee27 0a00 	vmul.f32	s0, s14, s0
 800c138:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800c13c:	eddf 7a39 	vldr	s15, [pc, #228]	; 800c224 <__ieee754_powf+0x57c>
 800c140:	eea0 0aa7 	vfma.f32	s0, s1, s15
 800c144:	eef0 7a40 	vmov.f32	s15, s0
 800c148:	eee7 7a26 	vfma.f32	s15, s14, s13
 800c14c:	eeb0 6a67 	vmov.f32	s12, s15
 800c150:	eea7 6a66 	vfms.f32	s12, s14, s13
 800c154:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800c158:	ee30 0a46 	vsub.f32	s0, s0, s12
 800c15c:	eddf 6a32 	vldr	s13, [pc, #200]	; 800c228 <__ieee754_powf+0x580>
 800c160:	ed9f 6a32 	vldr	s12, [pc, #200]	; 800c22c <__ieee754_powf+0x584>
 800c164:	eee7 6a06 	vfma.f32	s13, s14, s12
 800c168:	ed9f 6a31 	vldr	s12, [pc, #196]	; 800c230 <__ieee754_powf+0x588>
 800c16c:	eea6 6a87 	vfma.f32	s12, s13, s14
 800c170:	eddf 6a30 	vldr	s13, [pc, #192]	; 800c234 <__ieee754_powf+0x58c>
 800c174:	eee6 6a07 	vfma.f32	s13, s12, s14
 800c178:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 800c238 <__ieee754_powf+0x590>
 800c17c:	eea6 6a87 	vfma.f32	s12, s13, s14
 800c180:	eef0 6a67 	vmov.f32	s13, s15
 800c184:	eee6 6a47 	vfms.f32	s13, s12, s14
 800c188:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800c18c:	ee27 6aa6 	vmul.f32	s12, s15, s13
 800c190:	ee76 6ac7 	vsub.f32	s13, s13, s14
 800c194:	eea7 0a80 	vfma.f32	s0, s15, s0
 800c198:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800c19c:	ee37 0a40 	vsub.f32	s0, s14, s0
 800c1a0:	ee70 7a67 	vsub.f32	s15, s0, s15
 800c1a4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800c1a8:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c1ac:	ee10 3a10 	vmov	r3, s0
 800c1b0:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800c1b4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c1b8:	da1f      	bge.n	800c1fa <__ieee754_powf+0x552>
 800c1ba:	f000 f87d 	bl	800c2b8 <scalbnf>
 800c1be:	ee20 0a08 	vmul.f32	s0, s0, s16
 800c1c2:	e589      	b.n	800bcd8 <__ieee754_powf+0x30>
 800c1c4:	4a1d      	ldr	r2, [pc, #116]	; (800c23c <__ieee754_powf+0x594>)
 800c1c6:	4293      	cmp	r3, r2
 800c1c8:	dd07      	ble.n	800c1da <__ieee754_powf+0x532>
 800c1ca:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800c1ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1d2:	bf4c      	ite	mi
 800c1d4:	2001      	movmi	r0, #1
 800c1d6:	2000      	movpl	r0, #0
 800c1d8:	e61f      	b.n	800be1a <__ieee754_powf+0x172>
 800c1da:	d108      	bne.n	800c1ee <__ieee754_powf+0x546>
 800c1dc:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c1e0:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800c1e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1e8:	f6ff af78 	blt.w	800c0dc <__ieee754_powf+0x434>
 800c1ec:	e7ed      	b.n	800c1ca <__ieee754_powf+0x522>
 800c1ee:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800c1f2:	f73f af73 	bgt.w	800c0dc <__ieee754_powf+0x434>
 800c1f6:	2000      	movs	r0, #0
 800c1f8:	e78c      	b.n	800c114 <__ieee754_powf+0x46c>
 800c1fa:	ee00 3a10 	vmov	s0, r3
 800c1fe:	e7de      	b.n	800c1be <__ieee754_powf+0x516>
 800c200:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800c204:	e568      	b.n	800bcd8 <__ieee754_powf+0x30>
 800c206:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800c240 <__ieee754_powf+0x598>
 800c20a:	e565      	b.n	800bcd8 <__ieee754_powf+0x30>
 800c20c:	eeb0 0a48 	vmov.f32	s0, s16
 800c210:	e562      	b.n	800bcd8 <__ieee754_powf+0x30>
 800c212:	2700      	movs	r7, #0
 800c214:	e58d      	b.n	800bd32 <__ieee754_powf+0x8a>
 800c216:	bf00      	nop
 800c218:	007fffff 	.word	0x007fffff
 800c21c:	35bfbe8c 	.word	0x35bfbe8c
 800c220:	3f317200 	.word	0x3f317200
 800c224:	3f317218 	.word	0x3f317218
 800c228:	b5ddea0e 	.word	0xb5ddea0e
 800c22c:	3331bb4c 	.word	0x3331bb4c
 800c230:	388ab355 	.word	0x388ab355
 800c234:	bb360b61 	.word	0xbb360b61
 800c238:	3e2aaaab 	.word	0x3e2aaaab
 800c23c:	43160000 	.word	0x43160000
 800c240:	00000000 	.word	0x00000000

0800c244 <__ieee754_sqrtf>:
 800c244:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800c248:	4770      	bx	lr

0800c24a <with_errnof>:
 800c24a:	b513      	push	{r0, r1, r4, lr}
 800c24c:	4604      	mov	r4, r0
 800c24e:	ed8d 0a01 	vstr	s0, [sp, #4]
 800c252:	f7fc fda7 	bl	8008da4 <__errno>
 800c256:	ed9d 0a01 	vldr	s0, [sp, #4]
 800c25a:	6004      	str	r4, [r0, #0]
 800c25c:	b002      	add	sp, #8
 800c25e:	bd10      	pop	{r4, pc}

0800c260 <xflowf>:
 800c260:	b130      	cbz	r0, 800c270 <xflowf+0x10>
 800c262:	eef1 7a40 	vneg.f32	s15, s0
 800c266:	ee27 0a80 	vmul.f32	s0, s15, s0
 800c26a:	2022      	movs	r0, #34	; 0x22
 800c26c:	f7ff bfed 	b.w	800c24a <with_errnof>
 800c270:	eef0 7a40 	vmov.f32	s15, s0
 800c274:	e7f7      	b.n	800c266 <xflowf+0x6>
	...

0800c278 <__math_uflowf>:
 800c278:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c280 <__math_uflowf+0x8>
 800c27c:	f7ff bff0 	b.w	800c260 <xflowf>
 800c280:	10000000 	.word	0x10000000

0800c284 <__math_oflowf>:
 800c284:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c28c <__math_oflowf+0x8>
 800c288:	f7ff bfea 	b.w	800c260 <xflowf>
 800c28c:	70000000 	.word	0x70000000

0800c290 <fabsf>:
 800c290:	ee10 3a10 	vmov	r3, s0
 800c294:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c298:	ee00 3a10 	vmov	s0, r3
 800c29c:	4770      	bx	lr

0800c29e <finitef>:
 800c29e:	b082      	sub	sp, #8
 800c2a0:	ed8d 0a01 	vstr	s0, [sp, #4]
 800c2a4:	9801      	ldr	r0, [sp, #4]
 800c2a6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800c2aa:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800c2ae:	bfac      	ite	ge
 800c2b0:	2000      	movge	r0, #0
 800c2b2:	2001      	movlt	r0, #1
 800c2b4:	b002      	add	sp, #8
 800c2b6:	4770      	bx	lr

0800c2b8 <scalbnf>:
 800c2b8:	ee10 3a10 	vmov	r3, s0
 800c2bc:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800c2c0:	d025      	beq.n	800c30e <scalbnf+0x56>
 800c2c2:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800c2c6:	d302      	bcc.n	800c2ce <scalbnf+0x16>
 800c2c8:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c2cc:	4770      	bx	lr
 800c2ce:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800c2d2:	d122      	bne.n	800c31a <scalbnf+0x62>
 800c2d4:	4b2a      	ldr	r3, [pc, #168]	; (800c380 <scalbnf+0xc8>)
 800c2d6:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800c384 <scalbnf+0xcc>
 800c2da:	4298      	cmp	r0, r3
 800c2dc:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c2e0:	db16      	blt.n	800c310 <scalbnf+0x58>
 800c2e2:	ee10 3a10 	vmov	r3, s0
 800c2e6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c2ea:	3a19      	subs	r2, #25
 800c2ec:	4402      	add	r2, r0
 800c2ee:	2afe      	cmp	r2, #254	; 0xfe
 800c2f0:	dd15      	ble.n	800c31e <scalbnf+0x66>
 800c2f2:	ee10 3a10 	vmov	r3, s0
 800c2f6:	eddf 7a24 	vldr	s15, [pc, #144]	; 800c388 <scalbnf+0xd0>
 800c2fa:	eddf 6a24 	vldr	s13, [pc, #144]	; 800c38c <scalbnf+0xd4>
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	eeb0 7a67 	vmov.f32	s14, s15
 800c304:	bfb8      	it	lt
 800c306:	eef0 7a66 	vmovlt.f32	s15, s13
 800c30a:	ee27 0a27 	vmul.f32	s0, s14, s15
 800c30e:	4770      	bx	lr
 800c310:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800c390 <scalbnf+0xd8>
 800c314:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c318:	4770      	bx	lr
 800c31a:	0dd2      	lsrs	r2, r2, #23
 800c31c:	e7e6      	b.n	800c2ec <scalbnf+0x34>
 800c31e:	2a00      	cmp	r2, #0
 800c320:	dd06      	ble.n	800c330 <scalbnf+0x78>
 800c322:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c326:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800c32a:	ee00 3a10 	vmov	s0, r3
 800c32e:	4770      	bx	lr
 800c330:	f112 0f16 	cmn.w	r2, #22
 800c334:	da1a      	bge.n	800c36c <scalbnf+0xb4>
 800c336:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c33a:	4298      	cmp	r0, r3
 800c33c:	ee10 3a10 	vmov	r3, s0
 800c340:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c344:	dd0a      	ble.n	800c35c <scalbnf+0xa4>
 800c346:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800c388 <scalbnf+0xd0>
 800c34a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800c38c <scalbnf+0xd4>
 800c34e:	eef0 7a40 	vmov.f32	s15, s0
 800c352:	2b00      	cmp	r3, #0
 800c354:	bf18      	it	ne
 800c356:	eeb0 0a47 	vmovne.f32	s0, s14
 800c35a:	e7db      	b.n	800c314 <scalbnf+0x5c>
 800c35c:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800c390 <scalbnf+0xd8>
 800c360:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800c394 <scalbnf+0xdc>
 800c364:	eef0 7a40 	vmov.f32	s15, s0
 800c368:	2b00      	cmp	r3, #0
 800c36a:	e7f3      	b.n	800c354 <scalbnf+0x9c>
 800c36c:	3219      	adds	r2, #25
 800c36e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c372:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800c376:	eddf 7a08 	vldr	s15, [pc, #32]	; 800c398 <scalbnf+0xe0>
 800c37a:	ee07 3a10 	vmov	s14, r3
 800c37e:	e7c4      	b.n	800c30a <scalbnf+0x52>
 800c380:	ffff3cb0 	.word	0xffff3cb0
 800c384:	4c000000 	.word	0x4c000000
 800c388:	7149f2ca 	.word	0x7149f2ca
 800c38c:	f149f2ca 	.word	0xf149f2ca
 800c390:	0da24260 	.word	0x0da24260
 800c394:	8da24260 	.word	0x8da24260
 800c398:	33000000 	.word	0x33000000

0800c39c <_init>:
 800c39c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c39e:	bf00      	nop
 800c3a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c3a2:	bc08      	pop	{r3}
 800c3a4:	469e      	mov	lr, r3
 800c3a6:	4770      	bx	lr

0800c3a8 <_fini>:
 800c3a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3aa:	bf00      	nop
 800c3ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c3ae:	bc08      	pop	{r3}
 800c3b0:	469e      	mov	lr, r3
 800c3b2:	4770      	bx	lr
