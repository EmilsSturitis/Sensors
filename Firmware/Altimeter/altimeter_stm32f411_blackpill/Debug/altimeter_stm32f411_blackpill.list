
altimeter_stm32f411_blackpill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f7c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08007114  08007114  00017114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007174  08007174  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  08007174  08007174  00017174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800717c  0800717c  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800717c  0800717c  0001717c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007180  08007180  00017180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  08007184  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c80  200000fc  08007280  000200fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001d7c  08007280  00021d7c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010eaa  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c5c  00000000  00000000  00030fd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000df0  00000000  00000000  00033c38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cc0  00000000  00000000  00034a28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000187cf  00000000  00000000  000356e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012667  00000000  00000000  0004deb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000897f6  00000000  00000000  0006051e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e9d14  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003928  00000000  00000000  000e9d64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000fc 	.word	0x200000fc
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080070fc 	.word	0x080070fc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000100 	.word	0x20000100
 80001d4:	080070fc 	.word	0x080070fc

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e0:	f000 f9ce 	bl	8000880 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e4:	f000 f808 	bl	80004f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e8:	f000 f89e 	bl	8000628 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004ec:	f000 f86e 	bl	80005cc <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 80004f0:	f006 f8ee 	bl	80066d0 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004f4:	e7fe      	b.n	80004f4 <main+0x18>
	...

080004f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b094      	sub	sp, #80	; 0x50
 80004fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004fe:	f107 0320 	add.w	r3, r7, #32
 8000502:	2230      	movs	r2, #48	; 0x30
 8000504:	2100      	movs	r1, #0
 8000506:	4618      	mov	r0, r3
 8000508:	f006 fdf0 	bl	80070ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800050c:	f107 030c 	add.w	r3, r7, #12
 8000510:	2200      	movs	r2, #0
 8000512:	601a      	str	r2, [r3, #0]
 8000514:	605a      	str	r2, [r3, #4]
 8000516:	609a      	str	r2, [r3, #8]
 8000518:	60da      	str	r2, [r3, #12]
 800051a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800051c:	2300      	movs	r3, #0
 800051e:	60bb      	str	r3, [r7, #8]
 8000520:	4b28      	ldr	r3, [pc, #160]	; (80005c4 <SystemClock_Config+0xcc>)
 8000522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000524:	4a27      	ldr	r2, [pc, #156]	; (80005c4 <SystemClock_Config+0xcc>)
 8000526:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800052a:	6413      	str	r3, [r2, #64]	; 0x40
 800052c:	4b25      	ldr	r3, [pc, #148]	; (80005c4 <SystemClock_Config+0xcc>)
 800052e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000530:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000534:	60bb      	str	r3, [r7, #8]
 8000536:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000538:	2300      	movs	r3, #0
 800053a:	607b      	str	r3, [r7, #4]
 800053c:	4b22      	ldr	r3, [pc, #136]	; (80005c8 <SystemClock_Config+0xd0>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	4a21      	ldr	r2, [pc, #132]	; (80005c8 <SystemClock_Config+0xd0>)
 8000542:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000546:	6013      	str	r3, [r2, #0]
 8000548:	4b1f      	ldr	r3, [pc, #124]	; (80005c8 <SystemClock_Config+0xd0>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000550:	607b      	str	r3, [r7, #4]
 8000552:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000554:	2301      	movs	r3, #1
 8000556:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000558:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800055c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800055e:	2302      	movs	r3, #2
 8000560:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000562:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000566:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000568:	230f      	movs	r3, #15
 800056a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 800056c:	2390      	movs	r3, #144	; 0x90
 800056e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000570:	2302      	movs	r3, #2
 8000572:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000574:	2305      	movs	r3, #5
 8000576:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000578:	f107 0320 	add.w	r3, r7, #32
 800057c:	4618      	mov	r0, r3
 800057e:	f002 f86d 	bl	800265c <HAL_RCC_OscConfig>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	d001      	beq.n	800058c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000588:	f000 f892 	bl	80006b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800058c:	230f      	movs	r3, #15
 800058e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000590:	2301      	movs	r3, #1
 8000592:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000594:	2300      	movs	r3, #0
 8000596:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000598:	2300      	movs	r3, #0
 800059a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800059c:	2300      	movs	r3, #0
 800059e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005a0:	f107 030c 	add.w	r3, r7, #12
 80005a4:	2100      	movs	r1, #0
 80005a6:	4618      	mov	r0, r3
 80005a8:	f002 fad0 	bl	8002b4c <HAL_RCC_ClockConfig>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80005b2:	f000 f87d 	bl	80006b0 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80005b6:	f002 fbaf 	bl	8002d18 <HAL_RCC_EnableCSS>
}
 80005ba:	bf00      	nop
 80005bc:	3750      	adds	r7, #80	; 0x50
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	40023800 	.word	0x40023800
 80005c8:	40007000 	.word	0x40007000

080005cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005d0:	4b12      	ldr	r3, [pc, #72]	; (800061c <MX_I2C1_Init+0x50>)
 80005d2:	4a13      	ldr	r2, [pc, #76]	; (8000620 <MX_I2C1_Init+0x54>)
 80005d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005d6:	4b11      	ldr	r3, [pc, #68]	; (800061c <MX_I2C1_Init+0x50>)
 80005d8:	4a12      	ldr	r2, [pc, #72]	; (8000624 <MX_I2C1_Init+0x58>)
 80005da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005dc:	4b0f      	ldr	r3, [pc, #60]	; (800061c <MX_I2C1_Init+0x50>)
 80005de:	2200      	movs	r2, #0
 80005e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005e2:	4b0e      	ldr	r3, [pc, #56]	; (800061c <MX_I2C1_Init+0x50>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005e8:	4b0c      	ldr	r3, [pc, #48]	; (800061c <MX_I2C1_Init+0x50>)
 80005ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80005ee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005f0:	4b0a      	ldr	r3, [pc, #40]	; (800061c <MX_I2C1_Init+0x50>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80005f6:	4b09      	ldr	r3, [pc, #36]	; (800061c <MX_I2C1_Init+0x50>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005fc:	4b07      	ldr	r3, [pc, #28]	; (800061c <MX_I2C1_Init+0x50>)
 80005fe:	2200      	movs	r2, #0
 8000600:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000602:	4b06      	ldr	r3, [pc, #24]	; (800061c <MX_I2C1_Init+0x50>)
 8000604:	2200      	movs	r2, #0
 8000606:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000608:	4804      	ldr	r0, [pc, #16]	; (800061c <MX_I2C1_Init+0x50>)
 800060a:	f000 fc65 	bl	8000ed8 <HAL_I2C_Init>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000614:	f000 f84c 	bl	80006b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000618:	bf00      	nop
 800061a:	bd80      	pop	{r7, pc}
 800061c:	20000118 	.word	0x20000118
 8000620:	40005400 	.word	0x40005400
 8000624:	000186a0 	.word	0x000186a0

08000628 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000628:	b480      	push	{r7}
 800062a:	b085      	sub	sp, #20
 800062c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800062e:	2300      	movs	r3, #0
 8000630:	60fb      	str	r3, [r7, #12]
 8000632:	4b1e      	ldr	r3, [pc, #120]	; (80006ac <MX_GPIO_Init+0x84>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000636:	4a1d      	ldr	r2, [pc, #116]	; (80006ac <MX_GPIO_Init+0x84>)
 8000638:	f043 0304 	orr.w	r3, r3, #4
 800063c:	6313      	str	r3, [r2, #48]	; 0x30
 800063e:	4b1b      	ldr	r3, [pc, #108]	; (80006ac <MX_GPIO_Init+0x84>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	f003 0304 	and.w	r3, r3, #4
 8000646:	60fb      	str	r3, [r7, #12]
 8000648:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800064a:	2300      	movs	r3, #0
 800064c:	60bb      	str	r3, [r7, #8]
 800064e:	4b17      	ldr	r3, [pc, #92]	; (80006ac <MX_GPIO_Init+0x84>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000652:	4a16      	ldr	r2, [pc, #88]	; (80006ac <MX_GPIO_Init+0x84>)
 8000654:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000658:	6313      	str	r3, [r2, #48]	; 0x30
 800065a:	4b14      	ldr	r3, [pc, #80]	; (80006ac <MX_GPIO_Init+0x84>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000662:	60bb      	str	r3, [r7, #8]
 8000664:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000666:	2300      	movs	r3, #0
 8000668:	607b      	str	r3, [r7, #4]
 800066a:	4b10      	ldr	r3, [pc, #64]	; (80006ac <MX_GPIO_Init+0x84>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	4a0f      	ldr	r2, [pc, #60]	; (80006ac <MX_GPIO_Init+0x84>)
 8000670:	f043 0301 	orr.w	r3, r3, #1
 8000674:	6313      	str	r3, [r2, #48]	; 0x30
 8000676:	4b0d      	ldr	r3, [pc, #52]	; (80006ac <MX_GPIO_Init+0x84>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	f003 0301 	and.w	r3, r3, #1
 800067e:	607b      	str	r3, [r7, #4]
 8000680:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000682:	2300      	movs	r3, #0
 8000684:	603b      	str	r3, [r7, #0]
 8000686:	4b09      	ldr	r3, [pc, #36]	; (80006ac <MX_GPIO_Init+0x84>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	4a08      	ldr	r2, [pc, #32]	; (80006ac <MX_GPIO_Init+0x84>)
 800068c:	f043 0302 	orr.w	r3, r3, #2
 8000690:	6313      	str	r3, [r2, #48]	; 0x30
 8000692:	4b06      	ldr	r3, [pc, #24]	; (80006ac <MX_GPIO_Init+0x84>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	f003 0302 	and.w	r3, r3, #2
 800069a:	603b      	str	r3, [r7, #0]
 800069c:	683b      	ldr	r3, [r7, #0]

}
 800069e:	bf00      	nop
 80006a0:	3714      	adds	r7, #20
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	40023800 	.word	0x40023800

080006b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006b4:	b672      	cpsid	i
}
 80006b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006b8:	e7fe      	b.n	80006b8 <Error_Handler+0x8>
	...

080006bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006c2:	2300      	movs	r3, #0
 80006c4:	607b      	str	r3, [r7, #4]
 80006c6:	4b10      	ldr	r3, [pc, #64]	; (8000708 <HAL_MspInit+0x4c>)
 80006c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ca:	4a0f      	ldr	r2, [pc, #60]	; (8000708 <HAL_MspInit+0x4c>)
 80006cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006d0:	6453      	str	r3, [r2, #68]	; 0x44
 80006d2:	4b0d      	ldr	r3, [pc, #52]	; (8000708 <HAL_MspInit+0x4c>)
 80006d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006de:	2300      	movs	r3, #0
 80006e0:	603b      	str	r3, [r7, #0]
 80006e2:	4b09      	ldr	r3, [pc, #36]	; (8000708 <HAL_MspInit+0x4c>)
 80006e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e6:	4a08      	ldr	r2, [pc, #32]	; (8000708 <HAL_MspInit+0x4c>)
 80006e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ec:	6413      	str	r3, [r2, #64]	; 0x40
 80006ee:	4b06      	ldr	r3, [pc, #24]	; (8000708 <HAL_MspInit+0x4c>)
 80006f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f6:	603b      	str	r3, [r7, #0]
 80006f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006fa:	bf00      	nop
 80006fc:	370c      	adds	r7, #12
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop
 8000708:	40023800 	.word	0x40023800

0800070c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b08a      	sub	sp, #40	; 0x28
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000714:	f107 0314 	add.w	r3, r7, #20
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	605a      	str	r2, [r3, #4]
 800071e:	609a      	str	r2, [r3, #8]
 8000720:	60da      	str	r2, [r3, #12]
 8000722:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4a19      	ldr	r2, [pc, #100]	; (8000790 <HAL_I2C_MspInit+0x84>)
 800072a:	4293      	cmp	r3, r2
 800072c:	d12b      	bne.n	8000786 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	613b      	str	r3, [r7, #16]
 8000732:	4b18      	ldr	r3, [pc, #96]	; (8000794 <HAL_I2C_MspInit+0x88>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4a17      	ldr	r2, [pc, #92]	; (8000794 <HAL_I2C_MspInit+0x88>)
 8000738:	f043 0302 	orr.w	r3, r3, #2
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
 800073e:	4b15      	ldr	r3, [pc, #84]	; (8000794 <HAL_I2C_MspInit+0x88>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f003 0302 	and.w	r3, r3, #2
 8000746:	613b      	str	r3, [r7, #16]
 8000748:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800074a:	23c0      	movs	r3, #192	; 0xc0
 800074c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800074e:	2312      	movs	r3, #18
 8000750:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000752:	2300      	movs	r3, #0
 8000754:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000756:	2303      	movs	r3, #3
 8000758:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800075a:	2304      	movs	r3, #4
 800075c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800075e:	f107 0314 	add.w	r3, r7, #20
 8000762:	4619      	mov	r1, r3
 8000764:	480c      	ldr	r0, [pc, #48]	; (8000798 <HAL_I2C_MspInit+0x8c>)
 8000766:	f000 fa33 	bl	8000bd0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	60fb      	str	r3, [r7, #12]
 800076e:	4b09      	ldr	r3, [pc, #36]	; (8000794 <HAL_I2C_MspInit+0x88>)
 8000770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000772:	4a08      	ldr	r2, [pc, #32]	; (8000794 <HAL_I2C_MspInit+0x88>)
 8000774:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000778:	6413      	str	r3, [r2, #64]	; 0x40
 800077a:	4b06      	ldr	r3, [pc, #24]	; (8000794 <HAL_I2C_MspInit+0x88>)
 800077c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800077e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000782:	60fb      	str	r3, [r7, #12]
 8000784:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000786:	bf00      	nop
 8000788:	3728      	adds	r7, #40	; 0x28
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40005400 	.word	0x40005400
 8000794:	40023800 	.word	0x40023800
 8000798:	40020400 	.word	0x40020400

0800079c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80007a0:	f002 fbac 	bl	8002efc <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007a4:	e7fe      	b.n	80007a4 <NMI_Handler+0x8>

080007a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007a6:	b480      	push	{r7}
 80007a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007aa:	e7fe      	b.n	80007aa <HardFault_Handler+0x4>

080007ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007b0:	e7fe      	b.n	80007b0 <MemManage_Handler+0x4>

080007b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007b2:	b480      	push	{r7}
 80007b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007b6:	e7fe      	b.n	80007b6 <BusFault_Handler+0x4>

080007b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007bc:	e7fe      	b.n	80007bc <UsageFault_Handler+0x4>

080007be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007be:	b480      	push	{r7}
 80007c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007c2:	bf00      	nop
 80007c4:	46bd      	mov	sp, r7
 80007c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ca:	4770      	bx	lr

080007cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007d0:	bf00      	nop
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr

080007da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007da:	b480      	push	{r7}
 80007dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007de:	bf00      	nop
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr

080007e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007ec:	f000 f89a 	bl	8000924 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007f0:	bf00      	nop
 80007f2:	bd80      	pop	{r7, pc}

080007f4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80007f8:	4802      	ldr	r0, [pc, #8]	; (8000804 <OTG_FS_IRQHandler+0x10>)
 80007fa:	f000 fe01 	bl	8001400 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80007fe:	bf00      	nop
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	20001650 	.word	0x20001650

08000808 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800080c:	4b06      	ldr	r3, [pc, #24]	; (8000828 <SystemInit+0x20>)
 800080e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000812:	4a05      	ldr	r2, [pc, #20]	; (8000828 <SystemInit+0x20>)
 8000814:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000818:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800081c:	bf00      	nop
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr
 8000826:	bf00      	nop
 8000828:	e000ed00 	.word	0xe000ed00

0800082c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800082c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000864 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000830:	480d      	ldr	r0, [pc, #52]	; (8000868 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000832:	490e      	ldr	r1, [pc, #56]	; (800086c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000834:	4a0e      	ldr	r2, [pc, #56]	; (8000870 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000836:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000838:	e002      	b.n	8000840 <LoopCopyDataInit>

0800083a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800083a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800083c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800083e:	3304      	adds	r3, #4

08000840 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000840:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000842:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000844:	d3f9      	bcc.n	800083a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000846:	4a0b      	ldr	r2, [pc, #44]	; (8000874 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000848:	4c0b      	ldr	r4, [pc, #44]	; (8000878 <LoopFillZerobss+0x26>)
  movs r3, #0
 800084a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800084c:	e001      	b.n	8000852 <LoopFillZerobss>

0800084e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800084e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000850:	3204      	adds	r2, #4

08000852 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000852:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000854:	d3fb      	bcc.n	800084e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000856:	f7ff ffd7 	bl	8000808 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800085a:	f006 fc23 	bl	80070a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800085e:	f7ff fe3d 	bl	80004dc <main>
  bx  lr    
 8000862:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000864:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000868:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800086c:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8000870:	08007184 	.word	0x08007184
  ldr r2, =_sbss
 8000874:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8000878:	20001d7c 	.word	0x20001d7c

0800087c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800087c:	e7fe      	b.n	800087c <ADC_IRQHandler>
	...

08000880 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000884:	4b0e      	ldr	r3, [pc, #56]	; (80008c0 <HAL_Init+0x40>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4a0d      	ldr	r2, [pc, #52]	; (80008c0 <HAL_Init+0x40>)
 800088a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800088e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000890:	4b0b      	ldr	r3, [pc, #44]	; (80008c0 <HAL_Init+0x40>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a0a      	ldr	r2, [pc, #40]	; (80008c0 <HAL_Init+0x40>)
 8000896:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800089a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800089c:	4b08      	ldr	r3, [pc, #32]	; (80008c0 <HAL_Init+0x40>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a07      	ldr	r2, [pc, #28]	; (80008c0 <HAL_Init+0x40>)
 80008a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008a8:	2003      	movs	r0, #3
 80008aa:	f000 f94f 	bl	8000b4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008ae:	200f      	movs	r0, #15
 80008b0:	f000 f808 	bl	80008c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008b4:	f7ff ff02 	bl	80006bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008b8:	2300      	movs	r3, #0
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	40023c00 	.word	0x40023c00

080008c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008cc:	4b12      	ldr	r3, [pc, #72]	; (8000918 <HAL_InitTick+0x54>)
 80008ce:	681a      	ldr	r2, [r3, #0]
 80008d0:	4b12      	ldr	r3, [pc, #72]	; (800091c <HAL_InitTick+0x58>)
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	4619      	mov	r1, r3
 80008d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008da:	fbb3 f3f1 	udiv	r3, r3, r1
 80008de:	fbb2 f3f3 	udiv	r3, r2, r3
 80008e2:	4618      	mov	r0, r3
 80008e4:	f000 f967 	bl	8000bb6 <HAL_SYSTICK_Config>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008ee:	2301      	movs	r3, #1
 80008f0:	e00e      	b.n	8000910 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	2b0f      	cmp	r3, #15
 80008f6:	d80a      	bhi.n	800090e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008f8:	2200      	movs	r2, #0
 80008fa:	6879      	ldr	r1, [r7, #4]
 80008fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000900:	f000 f92f 	bl	8000b62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000904:	4a06      	ldr	r2, [pc, #24]	; (8000920 <HAL_InitTick+0x5c>)
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800090a:	2300      	movs	r3, #0
 800090c:	e000      	b.n	8000910 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800090e:	2301      	movs	r3, #1
}
 8000910:	4618      	mov	r0, r3
 8000912:	3708      	adds	r7, #8
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	20000000 	.word	0x20000000
 800091c:	20000008 	.word	0x20000008
 8000920:	20000004 	.word	0x20000004

08000924 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000928:	4b06      	ldr	r3, [pc, #24]	; (8000944 <HAL_IncTick+0x20>)
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	461a      	mov	r2, r3
 800092e:	4b06      	ldr	r3, [pc, #24]	; (8000948 <HAL_IncTick+0x24>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	4413      	add	r3, r2
 8000934:	4a04      	ldr	r2, [pc, #16]	; (8000948 <HAL_IncTick+0x24>)
 8000936:	6013      	str	r3, [r2, #0]
}
 8000938:	bf00      	nop
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	20000008 	.word	0x20000008
 8000948:	2000016c 	.word	0x2000016c

0800094c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  return uwTick;
 8000950:	4b03      	ldr	r3, [pc, #12]	; (8000960 <HAL_GetTick+0x14>)
 8000952:	681b      	ldr	r3, [r3, #0]
}
 8000954:	4618      	mov	r0, r3
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	2000016c 	.word	0x2000016c

08000964 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b084      	sub	sp, #16
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800096c:	f7ff ffee 	bl	800094c <HAL_GetTick>
 8000970:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800097c:	d005      	beq.n	800098a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800097e:	4b0a      	ldr	r3, [pc, #40]	; (80009a8 <HAL_Delay+0x44>)
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	461a      	mov	r2, r3
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	4413      	add	r3, r2
 8000988:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800098a:	bf00      	nop
 800098c:	f7ff ffde 	bl	800094c <HAL_GetTick>
 8000990:	4602      	mov	r2, r0
 8000992:	68bb      	ldr	r3, [r7, #8]
 8000994:	1ad3      	subs	r3, r2, r3
 8000996:	68fa      	ldr	r2, [r7, #12]
 8000998:	429a      	cmp	r2, r3
 800099a:	d8f7      	bhi.n	800098c <HAL_Delay+0x28>
  {
  }
}
 800099c:	bf00      	nop
 800099e:	bf00      	nop
 80009a0:	3710      	adds	r7, #16
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	20000008 	.word	0x20000008

080009ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b085      	sub	sp, #20
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	f003 0307 	and.w	r3, r3, #7
 80009ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009bc:	4b0c      	ldr	r3, [pc, #48]	; (80009f0 <__NVIC_SetPriorityGrouping+0x44>)
 80009be:	68db      	ldr	r3, [r3, #12]
 80009c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009c2:	68ba      	ldr	r2, [r7, #8]
 80009c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009c8:	4013      	ands	r3, r2
 80009ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009d0:	68bb      	ldr	r3, [r7, #8]
 80009d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009de:	4a04      	ldr	r2, [pc, #16]	; (80009f0 <__NVIC_SetPriorityGrouping+0x44>)
 80009e0:	68bb      	ldr	r3, [r7, #8]
 80009e2:	60d3      	str	r3, [r2, #12]
}
 80009e4:	bf00      	nop
 80009e6:	3714      	adds	r7, #20
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr
 80009f0:	e000ed00 	.word	0xe000ed00

080009f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009f8:	4b04      	ldr	r3, [pc, #16]	; (8000a0c <__NVIC_GetPriorityGrouping+0x18>)
 80009fa:	68db      	ldr	r3, [r3, #12]
 80009fc:	0a1b      	lsrs	r3, r3, #8
 80009fe:	f003 0307 	and.w	r3, r3, #7
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr
 8000a0c:	e000ed00 	.word	0xe000ed00

08000a10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	db0b      	blt.n	8000a3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a22:	79fb      	ldrb	r3, [r7, #7]
 8000a24:	f003 021f 	and.w	r2, r3, #31
 8000a28:	4907      	ldr	r1, [pc, #28]	; (8000a48 <__NVIC_EnableIRQ+0x38>)
 8000a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a2e:	095b      	lsrs	r3, r3, #5
 8000a30:	2001      	movs	r0, #1
 8000a32:	fa00 f202 	lsl.w	r2, r0, r2
 8000a36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a3a:	bf00      	nop
 8000a3c:	370c      	adds	r7, #12
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	e000e100 	.word	0xe000e100

08000a4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	4603      	mov	r3, r0
 8000a54:	6039      	str	r1, [r7, #0]
 8000a56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	db0a      	blt.n	8000a76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	b2da      	uxtb	r2, r3
 8000a64:	490c      	ldr	r1, [pc, #48]	; (8000a98 <__NVIC_SetPriority+0x4c>)
 8000a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a6a:	0112      	lsls	r2, r2, #4
 8000a6c:	b2d2      	uxtb	r2, r2
 8000a6e:	440b      	add	r3, r1
 8000a70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a74:	e00a      	b.n	8000a8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	b2da      	uxtb	r2, r3
 8000a7a:	4908      	ldr	r1, [pc, #32]	; (8000a9c <__NVIC_SetPriority+0x50>)
 8000a7c:	79fb      	ldrb	r3, [r7, #7]
 8000a7e:	f003 030f 	and.w	r3, r3, #15
 8000a82:	3b04      	subs	r3, #4
 8000a84:	0112      	lsls	r2, r2, #4
 8000a86:	b2d2      	uxtb	r2, r2
 8000a88:	440b      	add	r3, r1
 8000a8a:	761a      	strb	r2, [r3, #24]
}
 8000a8c:	bf00      	nop
 8000a8e:	370c      	adds	r7, #12
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr
 8000a98:	e000e100 	.word	0xe000e100
 8000a9c:	e000ed00 	.word	0xe000ed00

08000aa0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b089      	sub	sp, #36	; 0x24
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	60f8      	str	r0, [r7, #12]
 8000aa8:	60b9      	str	r1, [r7, #8]
 8000aaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	f003 0307 	and.w	r3, r3, #7
 8000ab2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ab4:	69fb      	ldr	r3, [r7, #28]
 8000ab6:	f1c3 0307 	rsb	r3, r3, #7
 8000aba:	2b04      	cmp	r3, #4
 8000abc:	bf28      	it	cs
 8000abe:	2304      	movcs	r3, #4
 8000ac0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ac2:	69fb      	ldr	r3, [r7, #28]
 8000ac4:	3304      	adds	r3, #4
 8000ac6:	2b06      	cmp	r3, #6
 8000ac8:	d902      	bls.n	8000ad0 <NVIC_EncodePriority+0x30>
 8000aca:	69fb      	ldr	r3, [r7, #28]
 8000acc:	3b03      	subs	r3, #3
 8000ace:	e000      	b.n	8000ad2 <NVIC_EncodePriority+0x32>
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ad4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ad8:	69bb      	ldr	r3, [r7, #24]
 8000ada:	fa02 f303 	lsl.w	r3, r2, r3
 8000ade:	43da      	mvns	r2, r3
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	401a      	ands	r2, r3
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ae8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	fa01 f303 	lsl.w	r3, r1, r3
 8000af2:	43d9      	mvns	r1, r3
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000af8:	4313      	orrs	r3, r2
         );
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	3724      	adds	r7, #36	; 0x24
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
	...

08000b08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	3b01      	subs	r3, #1
 8000b14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b18:	d301      	bcc.n	8000b1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	e00f      	b.n	8000b3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b1e:	4a0a      	ldr	r2, [pc, #40]	; (8000b48 <SysTick_Config+0x40>)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	3b01      	subs	r3, #1
 8000b24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b26:	210f      	movs	r1, #15
 8000b28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b2c:	f7ff ff8e 	bl	8000a4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b30:	4b05      	ldr	r3, [pc, #20]	; (8000b48 <SysTick_Config+0x40>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b36:	4b04      	ldr	r3, [pc, #16]	; (8000b48 <SysTick_Config+0x40>)
 8000b38:	2207      	movs	r2, #7
 8000b3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b3c:	2300      	movs	r3, #0
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	e000e010 	.word	0xe000e010

08000b4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b54:	6878      	ldr	r0, [r7, #4]
 8000b56:	f7ff ff29 	bl	80009ac <__NVIC_SetPriorityGrouping>
}
 8000b5a:	bf00      	nop
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}

08000b62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b62:	b580      	push	{r7, lr}
 8000b64:	b086      	sub	sp, #24
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	4603      	mov	r3, r0
 8000b6a:	60b9      	str	r1, [r7, #8]
 8000b6c:	607a      	str	r2, [r7, #4]
 8000b6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b70:	2300      	movs	r3, #0
 8000b72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b74:	f7ff ff3e 	bl	80009f4 <__NVIC_GetPriorityGrouping>
 8000b78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b7a:	687a      	ldr	r2, [r7, #4]
 8000b7c:	68b9      	ldr	r1, [r7, #8]
 8000b7e:	6978      	ldr	r0, [r7, #20]
 8000b80:	f7ff ff8e 	bl	8000aa0 <NVIC_EncodePriority>
 8000b84:	4602      	mov	r2, r0
 8000b86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b8a:	4611      	mov	r1, r2
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f7ff ff5d 	bl	8000a4c <__NVIC_SetPriority>
}
 8000b92:	bf00      	nop
 8000b94:	3718      	adds	r7, #24
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}

08000b9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b9a:	b580      	push	{r7, lr}
 8000b9c:	b082      	sub	sp, #8
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f7ff ff31 	bl	8000a10 <__NVIC_EnableIRQ>
}
 8000bae:	bf00      	nop
 8000bb0:	3708      	adds	r7, #8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}

08000bb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bb6:	b580      	push	{r7, lr}
 8000bb8:	b082      	sub	sp, #8
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bbe:	6878      	ldr	r0, [r7, #4]
 8000bc0:	f7ff ffa2 	bl	8000b08 <SysTick_Config>
 8000bc4:	4603      	mov	r3, r0
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3708      	adds	r7, #8
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
	...

08000bd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b089      	sub	sp, #36	; 0x24
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
 8000bd8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000bde:	2300      	movs	r3, #0
 8000be0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000be2:	2300      	movs	r3, #0
 8000be4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000be6:	2300      	movs	r3, #0
 8000be8:	61fb      	str	r3, [r7, #28]
 8000bea:	e159      	b.n	8000ea0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000bec:	2201      	movs	r2, #1
 8000bee:	69fb      	ldr	r3, [r7, #28]
 8000bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	697a      	ldr	r2, [r7, #20]
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c00:	693a      	ldr	r2, [r7, #16]
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	429a      	cmp	r2, r3
 8000c06:	f040 8148 	bne.w	8000e9a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	f003 0303 	and.w	r3, r3, #3
 8000c12:	2b01      	cmp	r3, #1
 8000c14:	d005      	beq.n	8000c22 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c1e:	2b02      	cmp	r3, #2
 8000c20:	d130      	bne.n	8000c84 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	689b      	ldr	r3, [r3, #8]
 8000c26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c28:	69fb      	ldr	r3, [r7, #28]
 8000c2a:	005b      	lsls	r3, r3, #1
 8000c2c:	2203      	movs	r2, #3
 8000c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c32:	43db      	mvns	r3, r3
 8000c34:	69ba      	ldr	r2, [r7, #24]
 8000c36:	4013      	ands	r3, r2
 8000c38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	68da      	ldr	r2, [r3, #12]
 8000c3e:	69fb      	ldr	r3, [r7, #28]
 8000c40:	005b      	lsls	r3, r3, #1
 8000c42:	fa02 f303 	lsl.w	r3, r2, r3
 8000c46:	69ba      	ldr	r2, [r7, #24]
 8000c48:	4313      	orrs	r3, r2
 8000c4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	69ba      	ldr	r2, [r7, #24]
 8000c50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c58:	2201      	movs	r2, #1
 8000c5a:	69fb      	ldr	r3, [r7, #28]
 8000c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c60:	43db      	mvns	r3, r3
 8000c62:	69ba      	ldr	r2, [r7, #24]
 8000c64:	4013      	ands	r3, r2
 8000c66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	091b      	lsrs	r3, r3, #4
 8000c6e:	f003 0201 	and.w	r2, r3, #1
 8000c72:	69fb      	ldr	r3, [r7, #28]
 8000c74:	fa02 f303 	lsl.w	r3, r2, r3
 8000c78:	69ba      	ldr	r2, [r7, #24]
 8000c7a:	4313      	orrs	r3, r2
 8000c7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	69ba      	ldr	r2, [r7, #24]
 8000c82:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	f003 0303 	and.w	r3, r3, #3
 8000c8c:	2b03      	cmp	r3, #3
 8000c8e:	d017      	beq.n	8000cc0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	68db      	ldr	r3, [r3, #12]
 8000c94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c96:	69fb      	ldr	r3, [r7, #28]
 8000c98:	005b      	lsls	r3, r3, #1
 8000c9a:	2203      	movs	r2, #3
 8000c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca0:	43db      	mvns	r3, r3
 8000ca2:	69ba      	ldr	r2, [r7, #24]
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	689a      	ldr	r2, [r3, #8]
 8000cac:	69fb      	ldr	r3, [r7, #28]
 8000cae:	005b      	lsls	r3, r3, #1
 8000cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb4:	69ba      	ldr	r2, [r7, #24]
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	69ba      	ldr	r2, [r7, #24]
 8000cbe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	f003 0303 	and.w	r3, r3, #3
 8000cc8:	2b02      	cmp	r3, #2
 8000cca:	d123      	bne.n	8000d14 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ccc:	69fb      	ldr	r3, [r7, #28]
 8000cce:	08da      	lsrs	r2, r3, #3
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	3208      	adds	r2, #8
 8000cd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000cda:	69fb      	ldr	r3, [r7, #28]
 8000cdc:	f003 0307 	and.w	r3, r3, #7
 8000ce0:	009b      	lsls	r3, r3, #2
 8000ce2:	220f      	movs	r2, #15
 8000ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce8:	43db      	mvns	r3, r3
 8000cea:	69ba      	ldr	r2, [r7, #24]
 8000cec:	4013      	ands	r3, r2
 8000cee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	691a      	ldr	r2, [r3, #16]
 8000cf4:	69fb      	ldr	r3, [r7, #28]
 8000cf6:	f003 0307 	and.w	r3, r3, #7
 8000cfa:	009b      	lsls	r3, r3, #2
 8000cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000d00:	69ba      	ldr	r2, [r7, #24]
 8000d02:	4313      	orrs	r3, r2
 8000d04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	08da      	lsrs	r2, r3, #3
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	3208      	adds	r2, #8
 8000d0e:	69b9      	ldr	r1, [r7, #24]
 8000d10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d1a:	69fb      	ldr	r3, [r7, #28]
 8000d1c:	005b      	lsls	r3, r3, #1
 8000d1e:	2203      	movs	r2, #3
 8000d20:	fa02 f303 	lsl.w	r3, r2, r3
 8000d24:	43db      	mvns	r3, r3
 8000d26:	69ba      	ldr	r2, [r7, #24]
 8000d28:	4013      	ands	r3, r2
 8000d2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	f003 0203 	and.w	r2, r3, #3
 8000d34:	69fb      	ldr	r3, [r7, #28]
 8000d36:	005b      	lsls	r3, r3, #1
 8000d38:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3c:	69ba      	ldr	r2, [r7, #24]
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	69ba      	ldr	r2, [r7, #24]
 8000d46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	f000 80a2 	beq.w	8000e9a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	60fb      	str	r3, [r7, #12]
 8000d5a:	4b57      	ldr	r3, [pc, #348]	; (8000eb8 <HAL_GPIO_Init+0x2e8>)
 8000d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d5e:	4a56      	ldr	r2, [pc, #344]	; (8000eb8 <HAL_GPIO_Init+0x2e8>)
 8000d60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d64:	6453      	str	r3, [r2, #68]	; 0x44
 8000d66:	4b54      	ldr	r3, [pc, #336]	; (8000eb8 <HAL_GPIO_Init+0x2e8>)
 8000d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d6e:	60fb      	str	r3, [r7, #12]
 8000d70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d72:	4a52      	ldr	r2, [pc, #328]	; (8000ebc <HAL_GPIO_Init+0x2ec>)
 8000d74:	69fb      	ldr	r3, [r7, #28]
 8000d76:	089b      	lsrs	r3, r3, #2
 8000d78:	3302      	adds	r3, #2
 8000d7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d80:	69fb      	ldr	r3, [r7, #28]
 8000d82:	f003 0303 	and.w	r3, r3, #3
 8000d86:	009b      	lsls	r3, r3, #2
 8000d88:	220f      	movs	r2, #15
 8000d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8e:	43db      	mvns	r3, r3
 8000d90:	69ba      	ldr	r2, [r7, #24]
 8000d92:	4013      	ands	r3, r2
 8000d94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4a49      	ldr	r2, [pc, #292]	; (8000ec0 <HAL_GPIO_Init+0x2f0>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d019      	beq.n	8000dd2 <HAL_GPIO_Init+0x202>
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4a48      	ldr	r2, [pc, #288]	; (8000ec4 <HAL_GPIO_Init+0x2f4>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d013      	beq.n	8000dce <HAL_GPIO_Init+0x1fe>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4a47      	ldr	r2, [pc, #284]	; (8000ec8 <HAL_GPIO_Init+0x2f8>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d00d      	beq.n	8000dca <HAL_GPIO_Init+0x1fa>
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4a46      	ldr	r2, [pc, #280]	; (8000ecc <HAL_GPIO_Init+0x2fc>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d007      	beq.n	8000dc6 <HAL_GPIO_Init+0x1f6>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4a45      	ldr	r2, [pc, #276]	; (8000ed0 <HAL_GPIO_Init+0x300>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d101      	bne.n	8000dc2 <HAL_GPIO_Init+0x1f2>
 8000dbe:	2304      	movs	r3, #4
 8000dc0:	e008      	b.n	8000dd4 <HAL_GPIO_Init+0x204>
 8000dc2:	2307      	movs	r3, #7
 8000dc4:	e006      	b.n	8000dd4 <HAL_GPIO_Init+0x204>
 8000dc6:	2303      	movs	r3, #3
 8000dc8:	e004      	b.n	8000dd4 <HAL_GPIO_Init+0x204>
 8000dca:	2302      	movs	r3, #2
 8000dcc:	e002      	b.n	8000dd4 <HAL_GPIO_Init+0x204>
 8000dce:	2301      	movs	r3, #1
 8000dd0:	e000      	b.n	8000dd4 <HAL_GPIO_Init+0x204>
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	69fa      	ldr	r2, [r7, #28]
 8000dd6:	f002 0203 	and.w	r2, r2, #3
 8000dda:	0092      	lsls	r2, r2, #2
 8000ddc:	4093      	lsls	r3, r2
 8000dde:	69ba      	ldr	r2, [r7, #24]
 8000de0:	4313      	orrs	r3, r2
 8000de2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000de4:	4935      	ldr	r1, [pc, #212]	; (8000ebc <HAL_GPIO_Init+0x2ec>)
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	089b      	lsrs	r3, r3, #2
 8000dea:	3302      	adds	r3, #2
 8000dec:	69ba      	ldr	r2, [r7, #24]
 8000dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000df2:	4b38      	ldr	r3, [pc, #224]	; (8000ed4 <HAL_GPIO_Init+0x304>)
 8000df4:	689b      	ldr	r3, [r3, #8]
 8000df6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000df8:	693b      	ldr	r3, [r7, #16]
 8000dfa:	43db      	mvns	r3, r3
 8000dfc:	69ba      	ldr	r2, [r7, #24]
 8000dfe:	4013      	ands	r3, r2
 8000e00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d003      	beq.n	8000e16 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000e0e:	69ba      	ldr	r2, [r7, #24]
 8000e10:	693b      	ldr	r3, [r7, #16]
 8000e12:	4313      	orrs	r3, r2
 8000e14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e16:	4a2f      	ldr	r2, [pc, #188]	; (8000ed4 <HAL_GPIO_Init+0x304>)
 8000e18:	69bb      	ldr	r3, [r7, #24]
 8000e1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e1c:	4b2d      	ldr	r3, [pc, #180]	; (8000ed4 <HAL_GPIO_Init+0x304>)
 8000e1e:	68db      	ldr	r3, [r3, #12]
 8000e20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e22:	693b      	ldr	r3, [r7, #16]
 8000e24:	43db      	mvns	r3, r3
 8000e26:	69ba      	ldr	r2, [r7, #24]
 8000e28:	4013      	ands	r3, r2
 8000e2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d003      	beq.n	8000e40 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000e38:	69ba      	ldr	r2, [r7, #24]
 8000e3a:	693b      	ldr	r3, [r7, #16]
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e40:	4a24      	ldr	r2, [pc, #144]	; (8000ed4 <HAL_GPIO_Init+0x304>)
 8000e42:	69bb      	ldr	r3, [r7, #24]
 8000e44:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e46:	4b23      	ldr	r3, [pc, #140]	; (8000ed4 <HAL_GPIO_Init+0x304>)
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e4c:	693b      	ldr	r3, [r7, #16]
 8000e4e:	43db      	mvns	r3, r3
 8000e50:	69ba      	ldr	r2, [r7, #24]
 8000e52:	4013      	ands	r3, r2
 8000e54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d003      	beq.n	8000e6a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000e62:	69ba      	ldr	r2, [r7, #24]
 8000e64:	693b      	ldr	r3, [r7, #16]
 8000e66:	4313      	orrs	r3, r2
 8000e68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e6a:	4a1a      	ldr	r2, [pc, #104]	; (8000ed4 <HAL_GPIO_Init+0x304>)
 8000e6c:	69bb      	ldr	r3, [r7, #24]
 8000e6e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e70:	4b18      	ldr	r3, [pc, #96]	; (8000ed4 <HAL_GPIO_Init+0x304>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e76:	693b      	ldr	r3, [r7, #16]
 8000e78:	43db      	mvns	r3, r3
 8000e7a:	69ba      	ldr	r2, [r7, #24]
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d003      	beq.n	8000e94 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000e8c:	69ba      	ldr	r2, [r7, #24]
 8000e8e:	693b      	ldr	r3, [r7, #16]
 8000e90:	4313      	orrs	r3, r2
 8000e92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e94:	4a0f      	ldr	r2, [pc, #60]	; (8000ed4 <HAL_GPIO_Init+0x304>)
 8000e96:	69bb      	ldr	r3, [r7, #24]
 8000e98:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	61fb      	str	r3, [r7, #28]
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	2b0f      	cmp	r3, #15
 8000ea4:	f67f aea2 	bls.w	8000bec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ea8:	bf00      	nop
 8000eaa:	bf00      	nop
 8000eac:	3724      	adds	r7, #36	; 0x24
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	40023800 	.word	0x40023800
 8000ebc:	40013800 	.word	0x40013800
 8000ec0:	40020000 	.word	0x40020000
 8000ec4:	40020400 	.word	0x40020400
 8000ec8:	40020800 	.word	0x40020800
 8000ecc:	40020c00 	.word	0x40020c00
 8000ed0:	40021000 	.word	0x40021000
 8000ed4:	40013c00 	.word	0x40013c00

08000ed8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d101      	bne.n	8000eea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e12b      	b.n	8001142 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d106      	bne.n	8000f04 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2200      	movs	r2, #0
 8000efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000efe:	6878      	ldr	r0, [r7, #4]
 8000f00:	f7ff fc04 	bl	800070c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2224      	movs	r2, #36	; 0x24
 8000f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f022 0201 	bic.w	r2, r2, #1
 8000f1a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000f2a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000f3a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000f3c:	f001 ffca 	bl	8002ed4 <HAL_RCC_GetPCLK1Freq>
 8000f40:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	4a81      	ldr	r2, [pc, #516]	; (800114c <HAL_I2C_Init+0x274>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d807      	bhi.n	8000f5c <HAL_I2C_Init+0x84>
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	4a80      	ldr	r2, [pc, #512]	; (8001150 <HAL_I2C_Init+0x278>)
 8000f50:	4293      	cmp	r3, r2
 8000f52:	bf94      	ite	ls
 8000f54:	2301      	movls	r3, #1
 8000f56:	2300      	movhi	r3, #0
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	e006      	b.n	8000f6a <HAL_I2C_Init+0x92>
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	4a7d      	ldr	r2, [pc, #500]	; (8001154 <HAL_I2C_Init+0x27c>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	bf94      	ite	ls
 8000f64:	2301      	movls	r3, #1
 8000f66:	2300      	movhi	r3, #0
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	e0e7      	b.n	8001142 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	4a78      	ldr	r2, [pc, #480]	; (8001158 <HAL_I2C_Init+0x280>)
 8000f76:	fba2 2303 	umull	r2, r3, r2, r3
 8000f7a:	0c9b      	lsrs	r3, r3, #18
 8000f7c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	68ba      	ldr	r2, [r7, #8]
 8000f8e:	430a      	orrs	r2, r1
 8000f90:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	6a1b      	ldr	r3, [r3, #32]
 8000f98:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	4a6a      	ldr	r2, [pc, #424]	; (800114c <HAL_I2C_Init+0x274>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d802      	bhi.n	8000fac <HAL_I2C_Init+0xd4>
 8000fa6:	68bb      	ldr	r3, [r7, #8]
 8000fa8:	3301      	adds	r3, #1
 8000faa:	e009      	b.n	8000fc0 <HAL_I2C_Init+0xe8>
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000fb2:	fb02 f303 	mul.w	r3, r2, r3
 8000fb6:	4a69      	ldr	r2, [pc, #420]	; (800115c <HAL_I2C_Init+0x284>)
 8000fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8000fbc:	099b      	lsrs	r3, r3, #6
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	687a      	ldr	r2, [r7, #4]
 8000fc2:	6812      	ldr	r2, [r2, #0]
 8000fc4:	430b      	orrs	r3, r1
 8000fc6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	69db      	ldr	r3, [r3, #28]
 8000fce:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000fd2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	495c      	ldr	r1, [pc, #368]	; (800114c <HAL_I2C_Init+0x274>)
 8000fdc:	428b      	cmp	r3, r1
 8000fde:	d819      	bhi.n	8001014 <HAL_I2C_Init+0x13c>
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	1e59      	subs	r1, r3, #1
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	005b      	lsls	r3, r3, #1
 8000fea:	fbb1 f3f3 	udiv	r3, r1, r3
 8000fee:	1c59      	adds	r1, r3, #1
 8000ff0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8000ff4:	400b      	ands	r3, r1
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d00a      	beq.n	8001010 <HAL_I2C_Init+0x138>
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	1e59      	subs	r1, r3, #1
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	005b      	lsls	r3, r3, #1
 8001004:	fbb1 f3f3 	udiv	r3, r1, r3
 8001008:	3301      	adds	r3, #1
 800100a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800100e:	e051      	b.n	80010b4 <HAL_I2C_Init+0x1dc>
 8001010:	2304      	movs	r3, #4
 8001012:	e04f      	b.n	80010b4 <HAL_I2C_Init+0x1dc>
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	689b      	ldr	r3, [r3, #8]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d111      	bne.n	8001040 <HAL_I2C_Init+0x168>
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	1e58      	subs	r0, r3, #1
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6859      	ldr	r1, [r3, #4]
 8001024:	460b      	mov	r3, r1
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	440b      	add	r3, r1
 800102a:	fbb0 f3f3 	udiv	r3, r0, r3
 800102e:	3301      	adds	r3, #1
 8001030:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001034:	2b00      	cmp	r3, #0
 8001036:	bf0c      	ite	eq
 8001038:	2301      	moveq	r3, #1
 800103a:	2300      	movne	r3, #0
 800103c:	b2db      	uxtb	r3, r3
 800103e:	e012      	b.n	8001066 <HAL_I2C_Init+0x18e>
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	1e58      	subs	r0, r3, #1
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6859      	ldr	r1, [r3, #4]
 8001048:	460b      	mov	r3, r1
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	440b      	add	r3, r1
 800104e:	0099      	lsls	r1, r3, #2
 8001050:	440b      	add	r3, r1
 8001052:	fbb0 f3f3 	udiv	r3, r0, r3
 8001056:	3301      	adds	r3, #1
 8001058:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800105c:	2b00      	cmp	r3, #0
 800105e:	bf0c      	ite	eq
 8001060:	2301      	moveq	r3, #1
 8001062:	2300      	movne	r3, #0
 8001064:	b2db      	uxtb	r3, r3
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <HAL_I2C_Init+0x196>
 800106a:	2301      	movs	r3, #1
 800106c:	e022      	b.n	80010b4 <HAL_I2C_Init+0x1dc>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	689b      	ldr	r3, [r3, #8]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d10e      	bne.n	8001094 <HAL_I2C_Init+0x1bc>
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	1e58      	subs	r0, r3, #1
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6859      	ldr	r1, [r3, #4]
 800107e:	460b      	mov	r3, r1
 8001080:	005b      	lsls	r3, r3, #1
 8001082:	440b      	add	r3, r1
 8001084:	fbb0 f3f3 	udiv	r3, r0, r3
 8001088:	3301      	adds	r3, #1
 800108a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800108e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001092:	e00f      	b.n	80010b4 <HAL_I2C_Init+0x1dc>
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	1e58      	subs	r0, r3, #1
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6859      	ldr	r1, [r3, #4]
 800109c:	460b      	mov	r3, r1
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	440b      	add	r3, r1
 80010a2:	0099      	lsls	r1, r3, #2
 80010a4:	440b      	add	r3, r1
 80010a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80010aa:	3301      	adds	r3, #1
 80010ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010b4:	6879      	ldr	r1, [r7, #4]
 80010b6:	6809      	ldr	r1, [r1, #0]
 80010b8:	4313      	orrs	r3, r2
 80010ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	69da      	ldr	r2, [r3, #28]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6a1b      	ldr	r3, [r3, #32]
 80010ce:	431a      	orrs	r2, r3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	430a      	orrs	r2, r1
 80010d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80010e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80010e6:	687a      	ldr	r2, [r7, #4]
 80010e8:	6911      	ldr	r1, [r2, #16]
 80010ea:	687a      	ldr	r2, [r7, #4]
 80010ec:	68d2      	ldr	r2, [r2, #12]
 80010ee:	4311      	orrs	r1, r2
 80010f0:	687a      	ldr	r2, [r7, #4]
 80010f2:	6812      	ldr	r2, [r2, #0]
 80010f4:	430b      	orrs	r3, r1
 80010f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	68db      	ldr	r3, [r3, #12]
 80010fe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	695a      	ldr	r2, [r3, #20]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	699b      	ldr	r3, [r3, #24]
 800110a:	431a      	orrs	r2, r3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	430a      	orrs	r2, r1
 8001112:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f042 0201 	orr.w	r2, r2, #1
 8001122:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2200      	movs	r2, #0
 8001128:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2220      	movs	r2, #32
 800112e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2200      	movs	r2, #0
 8001136:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2200      	movs	r2, #0
 800113c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001140:	2300      	movs	r3, #0
}
 8001142:	4618      	mov	r0, r3
 8001144:	3710      	adds	r7, #16
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	000186a0 	.word	0x000186a0
 8001150:	001e847f 	.word	0x001e847f
 8001154:	003d08ff 	.word	0x003d08ff
 8001158:	431bde83 	.word	0x431bde83
 800115c:	10624dd3 	.word	0x10624dd3

08001160 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001160:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001162:	b08f      	sub	sp, #60	; 0x3c
 8001164:	af0a      	add	r7, sp, #40	; 0x28
 8001166:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d101      	bne.n	8001172 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	e10f      	b.n	8001392 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800117e:	b2db      	uxtb	r3, r3
 8001180:	2b00      	cmp	r3, #0
 8001182:	d106      	bne.n	8001192 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2200      	movs	r2, #0
 8001188:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	f005 fc7f 	bl	8006a90 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2203      	movs	r2, #3
 8001196:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800119e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d102      	bne.n	80011ac <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2200      	movs	r2, #0
 80011aa:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4618      	mov	r0, r3
 80011b2:	f001 ffd2 	bl	800315a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	603b      	str	r3, [r7, #0]
 80011bc:	687e      	ldr	r6, [r7, #4]
 80011be:	466d      	mov	r5, sp
 80011c0:	f106 0410 	add.w	r4, r6, #16
 80011c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011cc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80011d0:	e885 0003 	stmia.w	r5, {r0, r1}
 80011d4:	1d33      	adds	r3, r6, #4
 80011d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011d8:	6838      	ldr	r0, [r7, #0]
 80011da:	f001 feaa 	bl	8002f32 <USB_CoreInit>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d005      	beq.n	80011f0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2202      	movs	r2, #2
 80011e8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80011ec:	2301      	movs	r3, #1
 80011ee:	e0d0      	b.n	8001392 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2100      	movs	r1, #0
 80011f6:	4618      	mov	r0, r3
 80011f8:	f001 ffc0 	bl	800317c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011fc:	2300      	movs	r3, #0
 80011fe:	73fb      	strb	r3, [r7, #15]
 8001200:	e04a      	b.n	8001298 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001202:	7bfa      	ldrb	r2, [r7, #15]
 8001204:	6879      	ldr	r1, [r7, #4]
 8001206:	4613      	mov	r3, r2
 8001208:	00db      	lsls	r3, r3, #3
 800120a:	4413      	add	r3, r2
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	440b      	add	r3, r1
 8001210:	333d      	adds	r3, #61	; 0x3d
 8001212:	2201      	movs	r2, #1
 8001214:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001216:	7bfa      	ldrb	r2, [r7, #15]
 8001218:	6879      	ldr	r1, [r7, #4]
 800121a:	4613      	mov	r3, r2
 800121c:	00db      	lsls	r3, r3, #3
 800121e:	4413      	add	r3, r2
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	440b      	add	r3, r1
 8001224:	333c      	adds	r3, #60	; 0x3c
 8001226:	7bfa      	ldrb	r2, [r7, #15]
 8001228:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800122a:	7bfa      	ldrb	r2, [r7, #15]
 800122c:	7bfb      	ldrb	r3, [r7, #15]
 800122e:	b298      	uxth	r0, r3
 8001230:	6879      	ldr	r1, [r7, #4]
 8001232:	4613      	mov	r3, r2
 8001234:	00db      	lsls	r3, r3, #3
 8001236:	4413      	add	r3, r2
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	440b      	add	r3, r1
 800123c:	3344      	adds	r3, #68	; 0x44
 800123e:	4602      	mov	r2, r0
 8001240:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001242:	7bfa      	ldrb	r2, [r7, #15]
 8001244:	6879      	ldr	r1, [r7, #4]
 8001246:	4613      	mov	r3, r2
 8001248:	00db      	lsls	r3, r3, #3
 800124a:	4413      	add	r3, r2
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	440b      	add	r3, r1
 8001250:	3340      	adds	r3, #64	; 0x40
 8001252:	2200      	movs	r2, #0
 8001254:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001256:	7bfa      	ldrb	r2, [r7, #15]
 8001258:	6879      	ldr	r1, [r7, #4]
 800125a:	4613      	mov	r3, r2
 800125c:	00db      	lsls	r3, r3, #3
 800125e:	4413      	add	r3, r2
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	440b      	add	r3, r1
 8001264:	3348      	adds	r3, #72	; 0x48
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800126a:	7bfa      	ldrb	r2, [r7, #15]
 800126c:	6879      	ldr	r1, [r7, #4]
 800126e:	4613      	mov	r3, r2
 8001270:	00db      	lsls	r3, r3, #3
 8001272:	4413      	add	r3, r2
 8001274:	009b      	lsls	r3, r3, #2
 8001276:	440b      	add	r3, r1
 8001278:	334c      	adds	r3, #76	; 0x4c
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800127e:	7bfa      	ldrb	r2, [r7, #15]
 8001280:	6879      	ldr	r1, [r7, #4]
 8001282:	4613      	mov	r3, r2
 8001284:	00db      	lsls	r3, r3, #3
 8001286:	4413      	add	r3, r2
 8001288:	009b      	lsls	r3, r3, #2
 800128a:	440b      	add	r3, r1
 800128c:	3354      	adds	r3, #84	; 0x54
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001292:	7bfb      	ldrb	r3, [r7, #15]
 8001294:	3301      	adds	r3, #1
 8001296:	73fb      	strb	r3, [r7, #15]
 8001298:	7bfa      	ldrb	r2, [r7, #15]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	429a      	cmp	r2, r3
 80012a0:	d3af      	bcc.n	8001202 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012a2:	2300      	movs	r3, #0
 80012a4:	73fb      	strb	r3, [r7, #15]
 80012a6:	e044      	b.n	8001332 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80012a8:	7bfa      	ldrb	r2, [r7, #15]
 80012aa:	6879      	ldr	r1, [r7, #4]
 80012ac:	4613      	mov	r3, r2
 80012ae:	00db      	lsls	r3, r3, #3
 80012b0:	4413      	add	r3, r2
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	440b      	add	r3, r1
 80012b6:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80012ba:	2200      	movs	r2, #0
 80012bc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80012be:	7bfa      	ldrb	r2, [r7, #15]
 80012c0:	6879      	ldr	r1, [r7, #4]
 80012c2:	4613      	mov	r3, r2
 80012c4:	00db      	lsls	r3, r3, #3
 80012c6:	4413      	add	r3, r2
 80012c8:	009b      	lsls	r3, r3, #2
 80012ca:	440b      	add	r3, r1
 80012cc:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80012d0:	7bfa      	ldrb	r2, [r7, #15]
 80012d2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80012d4:	7bfa      	ldrb	r2, [r7, #15]
 80012d6:	6879      	ldr	r1, [r7, #4]
 80012d8:	4613      	mov	r3, r2
 80012da:	00db      	lsls	r3, r3, #3
 80012dc:	4413      	add	r3, r2
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	440b      	add	r3, r1
 80012e2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80012e6:	2200      	movs	r2, #0
 80012e8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80012ea:	7bfa      	ldrb	r2, [r7, #15]
 80012ec:	6879      	ldr	r1, [r7, #4]
 80012ee:	4613      	mov	r3, r2
 80012f0:	00db      	lsls	r3, r3, #3
 80012f2:	4413      	add	r3, r2
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	440b      	add	r3, r1
 80012f8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001300:	7bfa      	ldrb	r2, [r7, #15]
 8001302:	6879      	ldr	r1, [r7, #4]
 8001304:	4613      	mov	r3, r2
 8001306:	00db      	lsls	r3, r3, #3
 8001308:	4413      	add	r3, r2
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	440b      	add	r3, r1
 800130e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001316:	7bfa      	ldrb	r2, [r7, #15]
 8001318:	6879      	ldr	r1, [r7, #4]
 800131a:	4613      	mov	r3, r2
 800131c:	00db      	lsls	r3, r3, #3
 800131e:	4413      	add	r3, r2
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	440b      	add	r3, r1
 8001324:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001328:	2200      	movs	r2, #0
 800132a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800132c:	7bfb      	ldrb	r3, [r7, #15]
 800132e:	3301      	adds	r3, #1
 8001330:	73fb      	strb	r3, [r7, #15]
 8001332:	7bfa      	ldrb	r2, [r7, #15]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	429a      	cmp	r2, r3
 800133a:	d3b5      	bcc.n	80012a8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	603b      	str	r3, [r7, #0]
 8001342:	687e      	ldr	r6, [r7, #4]
 8001344:	466d      	mov	r5, sp
 8001346:	f106 0410 	add.w	r4, r6, #16
 800134a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800134c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800134e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001350:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001352:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001356:	e885 0003 	stmia.w	r5, {r0, r1}
 800135a:	1d33      	adds	r3, r6, #4
 800135c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800135e:	6838      	ldr	r0, [r7, #0]
 8001360:	f001 ff58 	bl	8003214 <USB_DevInit>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d005      	beq.n	8001376 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2202      	movs	r2, #2
 800136e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	e00d      	b.n	8001392 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2200      	movs	r2, #0
 800137a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2201      	movs	r2, #1
 8001382:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4618      	mov	r0, r3
 800138c:	f003 f8a7 	bl	80044de <USB_DevDisconnect>

  return HAL_OK;
 8001390:	2300      	movs	r3, #0
}
 8001392:	4618      	mov	r0, r3
 8001394:	3714      	adds	r7, #20
 8001396:	46bd      	mov	sp, r7
 8001398:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800139a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800139a:	b580      	push	{r7, lr}
 800139c:	b084      	sub	sp, #16
 800139e:	af00      	add	r7, sp, #0
 80013a0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d101      	bne.n	80013b6 <HAL_PCD_Start+0x1c>
 80013b2:	2302      	movs	r3, #2
 80013b4:	e020      	b.n	80013f8 <HAL_PCD_Start+0x5e>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2201      	movs	r2, #1
 80013ba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d109      	bne.n	80013da <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d005      	beq.n	80013da <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013d2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4618      	mov	r0, r3
 80013e0:	f001 feaa 	bl	8003138 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f003 f857 	bl	800449c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2200      	movs	r2, #0
 80013f2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80013f6:	2300      	movs	r3, #0
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3710      	adds	r7, #16
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}

08001400 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001400:	b590      	push	{r4, r7, lr}
 8001402:	b08d      	sub	sp, #52	; 0x34
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800140e:	6a3b      	ldr	r3, [r7, #32]
 8001410:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4618      	mov	r0, r3
 8001418:	f003 f915 	bl	8004646 <USB_GetMode>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	f040 848a 	bne.w	8001d38 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4618      	mov	r0, r3
 800142a:	f003 f879 	bl	8004520 <USB_ReadInterrupts>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	f000 8480 	beq.w	8001d36 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	0a1b      	lsrs	r3, r3, #8
 8001440:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4618      	mov	r0, r3
 8001450:	f003 f866 	bl	8004520 <USB_ReadInterrupts>
 8001454:	4603      	mov	r3, r0
 8001456:	f003 0302 	and.w	r3, r3, #2
 800145a:	2b02      	cmp	r3, #2
 800145c:	d107      	bne.n	800146e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	695a      	ldr	r2, [r3, #20]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f002 0202 	and.w	r2, r2, #2
 800146c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4618      	mov	r0, r3
 8001474:	f003 f854 	bl	8004520 <USB_ReadInterrupts>
 8001478:	4603      	mov	r3, r0
 800147a:	f003 0310 	and.w	r3, r3, #16
 800147e:	2b10      	cmp	r3, #16
 8001480:	d161      	bne.n	8001546 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	699a      	ldr	r2, [r3, #24]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f022 0210 	bic.w	r2, r2, #16
 8001490:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001492:	6a3b      	ldr	r3, [r7, #32]
 8001494:	6a1b      	ldr	r3, [r3, #32]
 8001496:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001498:	69bb      	ldr	r3, [r7, #24]
 800149a:	f003 020f 	and.w	r2, r3, #15
 800149e:	4613      	mov	r3, r2
 80014a0:	00db      	lsls	r3, r3, #3
 80014a2:	4413      	add	r3, r2
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	4413      	add	r3, r2
 80014ae:	3304      	adds	r3, #4
 80014b0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80014b2:	69bb      	ldr	r3, [r7, #24]
 80014b4:	0c5b      	lsrs	r3, r3, #17
 80014b6:	f003 030f 	and.w	r3, r3, #15
 80014ba:	2b02      	cmp	r3, #2
 80014bc:	d124      	bne.n	8001508 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80014be:	69ba      	ldr	r2, [r7, #24]
 80014c0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80014c4:	4013      	ands	r3, r2
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d035      	beq.n	8001536 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80014ce:	69bb      	ldr	r3, [r7, #24]
 80014d0:	091b      	lsrs	r3, r3, #4
 80014d2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80014d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014d8:	b29b      	uxth	r3, r3
 80014da:	461a      	mov	r2, r3
 80014dc:	6a38      	ldr	r0, [r7, #32]
 80014de:	f002 fe8b 	bl	80041f8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	691a      	ldr	r2, [r3, #16]
 80014e6:	69bb      	ldr	r3, [r7, #24]
 80014e8:	091b      	lsrs	r3, r3, #4
 80014ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014ee:	441a      	add	r2, r3
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	6a1a      	ldr	r2, [r3, #32]
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	091b      	lsrs	r3, r3, #4
 80014fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001500:	441a      	add	r2, r3
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	621a      	str	r2, [r3, #32]
 8001506:	e016      	b.n	8001536 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001508:	69bb      	ldr	r3, [r7, #24]
 800150a:	0c5b      	lsrs	r3, r3, #17
 800150c:	f003 030f 	and.w	r3, r3, #15
 8001510:	2b06      	cmp	r3, #6
 8001512:	d110      	bne.n	8001536 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800151a:	2208      	movs	r2, #8
 800151c:	4619      	mov	r1, r3
 800151e:	6a38      	ldr	r0, [r7, #32]
 8001520:	f002 fe6a 	bl	80041f8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	6a1a      	ldr	r2, [r3, #32]
 8001528:	69bb      	ldr	r3, [r7, #24]
 800152a:	091b      	lsrs	r3, r3, #4
 800152c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001530:	441a      	add	r2, r3
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	699a      	ldr	r2, [r3, #24]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f042 0210 	orr.w	r2, r2, #16
 8001544:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4618      	mov	r0, r3
 800154c:	f002 ffe8 	bl	8004520 <USB_ReadInterrupts>
 8001550:	4603      	mov	r3, r0
 8001552:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001556:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800155a:	f040 80a7 	bne.w	80016ac <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800155e:	2300      	movs	r3, #0
 8001560:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4618      	mov	r0, r3
 8001568:	f002 ffed 	bl	8004546 <USB_ReadDevAllOutEpInterrupt>
 800156c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800156e:	e099      	b.n	80016a4 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	2b00      	cmp	r3, #0
 8001578:	f000 808e 	beq.w	8001698 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001582:	b2d2      	uxtb	r2, r2
 8001584:	4611      	mov	r1, r2
 8001586:	4618      	mov	r0, r3
 8001588:	f003 f811 	bl	80045ae <USB_ReadDevOutEPInterrupt>
 800158c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	f003 0301 	and.w	r3, r3, #1
 8001594:	2b00      	cmp	r3, #0
 8001596:	d00c      	beq.n	80015b2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159a:	015a      	lsls	r2, r3, #5
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	4413      	add	r3, r2
 80015a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015a4:	461a      	mov	r2, r3
 80015a6:	2301      	movs	r3, #1
 80015a8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80015aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f000 fec3 	bl	8002338 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	f003 0308 	and.w	r3, r3, #8
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d00c      	beq.n	80015d6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80015bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015be:	015a      	lsls	r2, r3, #5
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	4413      	add	r3, r2
 80015c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015c8:	461a      	mov	r2, r3
 80015ca:	2308      	movs	r3, #8
 80015cc:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80015ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	f000 ff99 	bl	8002508 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	f003 0310 	and.w	r3, r3, #16
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d008      	beq.n	80015f2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80015e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e2:	015a      	lsls	r2, r3, #5
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	4413      	add	r3, r2
 80015e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015ec:	461a      	mov	r2, r3
 80015ee:	2310      	movs	r3, #16
 80015f0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	f003 0302 	and.w	r3, r3, #2
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d030      	beq.n	800165e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80015fc:	6a3b      	ldr	r3, [r7, #32]
 80015fe:	695b      	ldr	r3, [r3, #20]
 8001600:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001604:	2b80      	cmp	r3, #128	; 0x80
 8001606:	d109      	bne.n	800161c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	69fa      	ldr	r2, [r7, #28]
 8001612:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001616:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800161a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800161c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800161e:	4613      	mov	r3, r2
 8001620:	00db      	lsls	r3, r3, #3
 8001622:	4413      	add	r3, r2
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800162a:	687a      	ldr	r2, [r7, #4]
 800162c:	4413      	add	r3, r2
 800162e:	3304      	adds	r3, #4
 8001630:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	78db      	ldrb	r3, [r3, #3]
 8001636:	2b01      	cmp	r3, #1
 8001638:	d108      	bne.n	800164c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	2200      	movs	r2, #0
 800163e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001642:	b2db      	uxtb	r3, r3
 8001644:	4619      	mov	r1, r3
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f005 fb1e 	bl	8006c88 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800164c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164e:	015a      	lsls	r2, r3, #5
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	4413      	add	r3, r2
 8001654:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001658:	461a      	mov	r2, r3
 800165a:	2302      	movs	r3, #2
 800165c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	f003 0320 	and.w	r3, r3, #32
 8001664:	2b00      	cmp	r3, #0
 8001666:	d008      	beq.n	800167a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166a:	015a      	lsls	r2, r3, #5
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	4413      	add	r3, r2
 8001670:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001674:	461a      	mov	r2, r3
 8001676:	2320      	movs	r3, #32
 8001678:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001680:	2b00      	cmp	r3, #0
 8001682:	d009      	beq.n	8001698 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001686:	015a      	lsls	r2, r3, #5
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	4413      	add	r3, r2
 800168c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001690:	461a      	mov	r2, r3
 8001692:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001696:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169a:	3301      	adds	r3, #1
 800169c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800169e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016a0:	085b      	lsrs	r3, r3, #1
 80016a2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80016a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	f47f af62 	bne.w	8001570 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4618      	mov	r0, r3
 80016b2:	f002 ff35 	bl	8004520 <USB_ReadInterrupts>
 80016b6:	4603      	mov	r3, r0
 80016b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016bc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80016c0:	f040 80db 	bne.w	800187a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f002 ff56 	bl	800457a <USB_ReadDevAllInEpInterrupt>
 80016ce:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80016d0:	2300      	movs	r3, #0
 80016d2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80016d4:	e0cd      	b.n	8001872 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80016d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016d8:	f003 0301 	and.w	r3, r3, #1
 80016dc:	2b00      	cmp	r3, #0
 80016de:	f000 80c2 	beq.w	8001866 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016e8:	b2d2      	uxtb	r2, r2
 80016ea:	4611      	mov	r1, r2
 80016ec:	4618      	mov	r0, r3
 80016ee:	f002 ff7c 	bl	80045ea <USB_ReadDevInEPInterrupt>
 80016f2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	f003 0301 	and.w	r3, r3, #1
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d057      	beq.n	80017ae <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80016fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001700:	f003 030f 	and.w	r3, r3, #15
 8001704:	2201      	movs	r2, #1
 8001706:	fa02 f303 	lsl.w	r3, r2, r3
 800170a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001712:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	43db      	mvns	r3, r3
 8001718:	69f9      	ldr	r1, [r7, #28]
 800171a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800171e:	4013      	ands	r3, r2
 8001720:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001724:	015a      	lsls	r2, r3, #5
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	4413      	add	r3, r2
 800172a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800172e:	461a      	mov	r2, r3
 8001730:	2301      	movs	r3, #1
 8001732:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	691b      	ldr	r3, [r3, #16]
 8001738:	2b01      	cmp	r3, #1
 800173a:	d132      	bne.n	80017a2 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800173c:	6879      	ldr	r1, [r7, #4]
 800173e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001740:	4613      	mov	r3, r2
 8001742:	00db      	lsls	r3, r3, #3
 8001744:	4413      	add	r3, r2
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	440b      	add	r3, r1
 800174a:	334c      	adds	r3, #76	; 0x4c
 800174c:	6819      	ldr	r1, [r3, #0]
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001752:	4613      	mov	r3, r2
 8001754:	00db      	lsls	r3, r3, #3
 8001756:	4413      	add	r3, r2
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	4403      	add	r3, r0
 800175c:	3348      	adds	r3, #72	; 0x48
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4419      	add	r1, r3
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001766:	4613      	mov	r3, r2
 8001768:	00db      	lsls	r3, r3, #3
 800176a:	4413      	add	r3, r2
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	4403      	add	r3, r0
 8001770:	334c      	adds	r3, #76	; 0x4c
 8001772:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001776:	2b00      	cmp	r3, #0
 8001778:	d113      	bne.n	80017a2 <HAL_PCD_IRQHandler+0x3a2>
 800177a:	6879      	ldr	r1, [r7, #4]
 800177c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800177e:	4613      	mov	r3, r2
 8001780:	00db      	lsls	r3, r3, #3
 8001782:	4413      	add	r3, r2
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	440b      	add	r3, r1
 8001788:	3354      	adds	r3, #84	; 0x54
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d108      	bne.n	80017a2 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6818      	ldr	r0, [r3, #0]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800179a:	461a      	mov	r2, r3
 800179c:	2101      	movs	r1, #1
 800179e:	f002 ff83 	bl	80046a8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80017a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	4619      	mov	r1, r3
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f005 f9f2 	bl	8006b92 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	f003 0308 	and.w	r3, r3, #8
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d008      	beq.n	80017ca <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80017b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ba:	015a      	lsls	r2, r3, #5
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	4413      	add	r3, r2
 80017c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017c4:	461a      	mov	r2, r3
 80017c6:	2308      	movs	r3, #8
 80017c8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	f003 0310 	and.w	r3, r3, #16
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d008      	beq.n	80017e6 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80017d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d6:	015a      	lsls	r2, r3, #5
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	4413      	add	r3, r2
 80017dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017e0:	461a      	mov	r2, r3
 80017e2:	2310      	movs	r3, #16
 80017e4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d008      	beq.n	8001802 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80017f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f2:	015a      	lsls	r2, r3, #5
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	4413      	add	r3, r2
 80017f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017fc:	461a      	mov	r2, r3
 80017fe:	2340      	movs	r3, #64	; 0x40
 8001800:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	f003 0302 	and.w	r3, r3, #2
 8001808:	2b00      	cmp	r3, #0
 800180a:	d023      	beq.n	8001854 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800180c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800180e:	6a38      	ldr	r0, [r7, #32]
 8001810:	f001 fe64 	bl	80034dc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001814:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001816:	4613      	mov	r3, r2
 8001818:	00db      	lsls	r3, r3, #3
 800181a:	4413      	add	r3, r2
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	3338      	adds	r3, #56	; 0x38
 8001820:	687a      	ldr	r2, [r7, #4]
 8001822:	4413      	add	r3, r2
 8001824:	3304      	adds	r3, #4
 8001826:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	78db      	ldrb	r3, [r3, #3]
 800182c:	2b01      	cmp	r3, #1
 800182e:	d108      	bne.n	8001842 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	2200      	movs	r2, #0
 8001834:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001838:	b2db      	uxtb	r3, r3
 800183a:	4619      	mov	r1, r3
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f005 fa35 	bl	8006cac <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001844:	015a      	lsls	r2, r3, #5
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	4413      	add	r3, r2
 800184a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800184e:	461a      	mov	r2, r3
 8001850:	2302      	movs	r3, #2
 8001852:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800185a:	2b00      	cmp	r3, #0
 800185c:	d003      	beq.n	8001866 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800185e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f000 fcdb 	bl	800221c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001868:	3301      	adds	r3, #1
 800186a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800186c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800186e:	085b      	lsrs	r3, r3, #1
 8001870:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001874:	2b00      	cmp	r3, #0
 8001876:	f47f af2e 	bne.w	80016d6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4618      	mov	r0, r3
 8001880:	f002 fe4e 	bl	8004520 <USB_ReadInterrupts>
 8001884:	4603      	mov	r3, r0
 8001886:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800188a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800188e:	d122      	bne.n	80018d6 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	69fa      	ldr	r2, [r7, #28]
 800189a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800189e:	f023 0301 	bic.w	r3, r3, #1
 80018a2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d108      	bne.n	80018c0 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2200      	movs	r2, #0
 80018b2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80018b6:	2100      	movs	r1, #0
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	f000 fec3 	bl	8002644 <HAL_PCDEx_LPM_Callback>
 80018be:	e002      	b.n	80018c6 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	f005 f9d3 	bl	8006c6c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	695a      	ldr	r2, [r3, #20]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80018d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4618      	mov	r0, r3
 80018dc:	f002 fe20 	bl	8004520 <USB_ReadInterrupts>
 80018e0:	4603      	mov	r3, r0
 80018e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80018ea:	d112      	bne.n	8001912 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	f003 0301 	and.w	r3, r3, #1
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d102      	bne.n	8001902 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f005 f98f 	bl	8006c20 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	695a      	ldr	r2, [r3, #20]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001910:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4618      	mov	r0, r3
 8001918:	f002 fe02 	bl	8004520 <USB_ReadInterrupts>
 800191c:	4603      	mov	r3, r0
 800191e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001922:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001926:	f040 80b7 	bne.w	8001a98 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	69fa      	ldr	r2, [r7, #28]
 8001934:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001938:	f023 0301 	bic.w	r3, r3, #1
 800193c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	2110      	movs	r1, #16
 8001944:	4618      	mov	r0, r3
 8001946:	f001 fdc9 	bl	80034dc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800194a:	2300      	movs	r3, #0
 800194c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800194e:	e046      	b.n	80019de <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001952:	015a      	lsls	r2, r3, #5
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	4413      	add	r3, r2
 8001958:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800195c:	461a      	mov	r2, r3
 800195e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001962:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001966:	015a      	lsls	r2, r3, #5
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	4413      	add	r3, r2
 800196c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001974:	0151      	lsls	r1, r2, #5
 8001976:	69fa      	ldr	r2, [r7, #28]
 8001978:	440a      	add	r2, r1
 800197a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800197e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001982:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001986:	015a      	lsls	r2, r3, #5
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	4413      	add	r3, r2
 800198c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001990:	461a      	mov	r2, r3
 8001992:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001996:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800199a:	015a      	lsls	r2, r3, #5
 800199c:	69fb      	ldr	r3, [r7, #28]
 800199e:	4413      	add	r3, r2
 80019a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019a8:	0151      	lsls	r1, r2, #5
 80019aa:	69fa      	ldr	r2, [r7, #28]
 80019ac:	440a      	add	r2, r1
 80019ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80019b2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80019b6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80019b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019ba:	015a      	lsls	r2, r3, #5
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	4413      	add	r3, r2
 80019c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019c8:	0151      	lsls	r1, r2, #5
 80019ca:	69fa      	ldr	r2, [r7, #28]
 80019cc:	440a      	add	r2, r1
 80019ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80019d2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80019d6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019da:	3301      	adds	r3, #1
 80019dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d3b3      	bcc.n	8001950 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019ee:	69db      	ldr	r3, [r3, #28]
 80019f0:	69fa      	ldr	r2, [r7, #28]
 80019f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019f6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80019fa:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d016      	beq.n	8001a32 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a0e:	69fa      	ldr	r2, [r7, #28]
 8001a10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a14:	f043 030b 	orr.w	r3, r3, #11
 8001a18:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a24:	69fa      	ldr	r2, [r7, #28]
 8001a26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a2a:	f043 030b 	orr.w	r3, r3, #11
 8001a2e:	6453      	str	r3, [r2, #68]	; 0x44
 8001a30:	e015      	b.n	8001a5e <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a38:	695b      	ldr	r3, [r3, #20]
 8001a3a:	69fa      	ldr	r2, [r7, #28]
 8001a3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a40:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a44:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001a48:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a50:	691b      	ldr	r3, [r3, #16]
 8001a52:	69fa      	ldr	r2, [r7, #28]
 8001a54:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a58:	f043 030b 	orr.w	r3, r3, #11
 8001a5c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	69fa      	ldr	r2, [r7, #28]
 8001a68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a6c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001a70:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6818      	ldr	r0, [r3, #0]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	691b      	ldr	r3, [r3, #16]
 8001a7a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001a82:	461a      	mov	r2, r3
 8001a84:	f002 fe10 	bl	80046a8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	695a      	ldr	r2, [r3, #20]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001a96:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f002 fd3f 	bl	8004520 <USB_ReadInterrupts>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001aa8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001aac:	d124      	bne.n	8001af8 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f002 fdd5 	bl	8004662 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f001 fd8a 	bl	80035d6 <USB_GetDevSpeed>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681c      	ldr	r4, [r3, #0]
 8001ace:	f001 f9f5 	bl	8002ebc <HAL_RCC_GetHCLKFreq>
 8001ad2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	461a      	mov	r2, r3
 8001adc:	4620      	mov	r0, r4
 8001ade:	f001 fa89 	bl	8002ff4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f005 f87d 	bl	8006be2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	695a      	ldr	r2, [r3, #20]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001af6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f002 fd0f 	bl	8004520 <USB_ReadInterrupts>
 8001b02:	4603      	mov	r3, r0
 8001b04:	f003 0308 	and.w	r3, r3, #8
 8001b08:	2b08      	cmp	r3, #8
 8001b0a:	d10a      	bne.n	8001b22 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f005 f85a 	bl	8006bc6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	695a      	ldr	r2, [r3, #20]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f002 0208 	and.w	r2, r2, #8
 8001b20:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f002 fcfa 	bl	8004520 <USB_ReadInterrupts>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b32:	2b80      	cmp	r3, #128	; 0x80
 8001b34:	d122      	bne.n	8001b7c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001b36:	6a3b      	ldr	r3, [r7, #32]
 8001b38:	699b      	ldr	r3, [r3, #24]
 8001b3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001b3e:	6a3b      	ldr	r3, [r7, #32]
 8001b40:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b42:	2301      	movs	r3, #1
 8001b44:	627b      	str	r3, [r7, #36]	; 0x24
 8001b46:	e014      	b.n	8001b72 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001b48:	6879      	ldr	r1, [r7, #4]
 8001b4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	00db      	lsls	r3, r3, #3
 8001b50:	4413      	add	r3, r2
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	440b      	add	r3, r1
 8001b56:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d105      	bne.n	8001b6c <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	4619      	mov	r1, r3
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f000 fb27 	bl	80021ba <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6e:	3301      	adds	r3, #1
 8001b70:	627b      	str	r3, [r7, #36]	; 0x24
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d3e5      	bcc.n	8001b48 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4618      	mov	r0, r3
 8001b82:	f002 fccd 	bl	8004520 <USB_ReadInterrupts>
 8001b86:	4603      	mov	r3, r0
 8001b88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b90:	d13b      	bne.n	8001c0a <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b92:	2301      	movs	r3, #1
 8001b94:	627b      	str	r3, [r7, #36]	; 0x24
 8001b96:	e02b      	b.n	8001bf0 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9a:	015a      	lsls	r2, r3, #5
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	4413      	add	r3, r2
 8001ba0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ba8:	6879      	ldr	r1, [r7, #4]
 8001baa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bac:	4613      	mov	r3, r2
 8001bae:	00db      	lsls	r3, r3, #3
 8001bb0:	4413      	add	r3, r2
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	440b      	add	r3, r1
 8001bb6:	3340      	adds	r3, #64	; 0x40
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d115      	bne.n	8001bea <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001bbe:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	da12      	bge.n	8001bea <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001bc4:	6879      	ldr	r1, [r7, #4]
 8001bc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bc8:	4613      	mov	r3, r2
 8001bca:	00db      	lsls	r3, r3, #3
 8001bcc:	4413      	add	r3, r2
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	440b      	add	r3, r1
 8001bd2:	333f      	adds	r3, #63	; 0x3f
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	4619      	mov	r1, r3
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f000 fae8 	bl	80021ba <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bec:	3301      	adds	r3, #1
 8001bee:	627b      	str	r3, [r7, #36]	; 0x24
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d3ce      	bcc.n	8001b98 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	695a      	ldr	r2, [r3, #20]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001c08:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f002 fc86 	bl	8004520 <USB_ReadInterrupts>
 8001c14:	4603      	mov	r3, r0
 8001c16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c1a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001c1e:	d155      	bne.n	8001ccc <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001c20:	2301      	movs	r3, #1
 8001c22:	627b      	str	r3, [r7, #36]	; 0x24
 8001c24:	e045      	b.n	8001cb2 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c28:	015a      	lsls	r2, r3, #5
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001c36:	6879      	ldr	r1, [r7, #4]
 8001c38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	00db      	lsls	r3, r3, #3
 8001c3e:	4413      	add	r3, r2
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	440b      	add	r3, r1
 8001c44:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d12e      	bne.n	8001cac <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001c4e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	da2b      	bge.n	8001cac <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001c60:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d121      	bne.n	8001cac <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001c68:	6879      	ldr	r1, [r7, #4]
 8001c6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	00db      	lsls	r3, r3, #3
 8001c70:	4413      	add	r3, r2
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	440b      	add	r3, r1
 8001c76:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001c7e:	6a3b      	ldr	r3, [r7, #32]
 8001c80:	699b      	ldr	r3, [r3, #24]
 8001c82:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001c86:	6a3b      	ldr	r3, [r7, #32]
 8001c88:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001c8a:	6a3b      	ldr	r3, [r7, #32]
 8001c8c:	695b      	ldr	r3, [r3, #20]
 8001c8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d10a      	bne.n	8001cac <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	69fa      	ldr	r2, [r7, #28]
 8001ca0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ca4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ca8:	6053      	str	r3, [r2, #4]
            break;
 8001caa:	e007      	b.n	8001cbc <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cae:	3301      	adds	r3, #1
 8001cb0:	627b      	str	r3, [r7, #36]	; 0x24
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d3b4      	bcc.n	8001c26 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	695a      	ldr	r2, [r3, #20]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001cca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f002 fc25 	bl	8004520 <USB_ReadInterrupts>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001cdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ce0:	d10a      	bne.n	8001cf8 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f004 fff4 	bl	8006cd0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	695a      	ldr	r2, [r3, #20]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001cf6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f002 fc0f 	bl	8004520 <USB_ReadInterrupts>
 8001d02:	4603      	mov	r3, r0
 8001d04:	f003 0304 	and.w	r3, r3, #4
 8001d08:	2b04      	cmp	r3, #4
 8001d0a:	d115      	bne.n	8001d38 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	f003 0304 	and.w	r3, r3, #4
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d002      	beq.n	8001d24 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f004 ffe4 	bl	8006cec <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	6859      	ldr	r1, [r3, #4]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	69ba      	ldr	r2, [r7, #24]
 8001d30:	430a      	orrs	r2, r1
 8001d32:	605a      	str	r2, [r3, #4]
 8001d34:	e000      	b.n	8001d38 <HAL_PCD_IRQHandler+0x938>
      return;
 8001d36:	bf00      	nop
    }
  }
}
 8001d38:	3734      	adds	r7, #52	; 0x34
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd90      	pop	{r4, r7, pc}

08001d3e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	b082      	sub	sp, #8
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
 8001d46:	460b      	mov	r3, r1
 8001d48:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d101      	bne.n	8001d58 <HAL_PCD_SetAddress+0x1a>
 8001d54:	2302      	movs	r3, #2
 8001d56:	e013      	b.n	8001d80 <HAL_PCD_SetAddress+0x42>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	78fa      	ldrb	r2, [r7, #3]
 8001d64:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	78fa      	ldrb	r2, [r7, #3]
 8001d6e:	4611      	mov	r1, r2
 8001d70:	4618      	mov	r0, r3
 8001d72:	f002 fb6d 	bl	8004450 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001d7e:	2300      	movs	r3, #0
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3708      	adds	r7, #8
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	4608      	mov	r0, r1
 8001d92:	4611      	mov	r1, r2
 8001d94:	461a      	mov	r2, r3
 8001d96:	4603      	mov	r3, r0
 8001d98:	70fb      	strb	r3, [r7, #3]
 8001d9a:	460b      	mov	r3, r1
 8001d9c:	803b      	strh	r3, [r7, #0]
 8001d9e:	4613      	mov	r3, r2
 8001da0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001da2:	2300      	movs	r3, #0
 8001da4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001da6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	da0f      	bge.n	8001dce <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001dae:	78fb      	ldrb	r3, [r7, #3]
 8001db0:	f003 020f 	and.w	r2, r3, #15
 8001db4:	4613      	mov	r3, r2
 8001db6:	00db      	lsls	r3, r3, #3
 8001db8:	4413      	add	r3, r2
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	3338      	adds	r3, #56	; 0x38
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	3304      	adds	r3, #4
 8001dc4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2201      	movs	r2, #1
 8001dca:	705a      	strb	r2, [r3, #1]
 8001dcc:	e00f      	b.n	8001dee <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001dce:	78fb      	ldrb	r3, [r7, #3]
 8001dd0:	f003 020f 	and.w	r2, r3, #15
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	00db      	lsls	r3, r3, #3
 8001dd8:	4413      	add	r3, r2
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	4413      	add	r3, r2
 8001de4:	3304      	adds	r3, #4
 8001de6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2200      	movs	r2, #0
 8001dec:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001dee:	78fb      	ldrb	r3, [r7, #3]
 8001df0:	f003 030f 	and.w	r3, r3, #15
 8001df4:	b2da      	uxtb	r2, r3
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001dfa:	883a      	ldrh	r2, [r7, #0]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	78ba      	ldrb	r2, [r7, #2]
 8001e04:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	785b      	ldrb	r3, [r3, #1]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d004      	beq.n	8001e18 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	b29a      	uxth	r2, r3
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001e18:	78bb      	ldrb	r3, [r7, #2]
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d102      	bne.n	8001e24 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2200      	movs	r2, #0
 8001e22:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d101      	bne.n	8001e32 <HAL_PCD_EP_Open+0xaa>
 8001e2e:	2302      	movs	r3, #2
 8001e30:	e00e      	b.n	8001e50 <HAL_PCD_EP_Open+0xc8>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2201      	movs	r2, #1
 8001e36:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	68f9      	ldr	r1, [r7, #12]
 8001e40:	4618      	mov	r0, r3
 8001e42:	f001 fbed 	bl	8003620 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001e4e:	7afb      	ldrb	r3, [r7, #11]
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3710      	adds	r7, #16
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}

08001e58 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	460b      	mov	r3, r1
 8001e62:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001e64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	da0f      	bge.n	8001e8c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e6c:	78fb      	ldrb	r3, [r7, #3]
 8001e6e:	f003 020f 	and.w	r2, r3, #15
 8001e72:	4613      	mov	r3, r2
 8001e74:	00db      	lsls	r3, r3, #3
 8001e76:	4413      	add	r3, r2
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	3338      	adds	r3, #56	; 0x38
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	4413      	add	r3, r2
 8001e80:	3304      	adds	r3, #4
 8001e82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2201      	movs	r2, #1
 8001e88:	705a      	strb	r2, [r3, #1]
 8001e8a:	e00f      	b.n	8001eac <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e8c:	78fb      	ldrb	r3, [r7, #3]
 8001e8e:	f003 020f 	and.w	r2, r3, #15
 8001e92:	4613      	mov	r3, r2
 8001e94:	00db      	lsls	r3, r3, #3
 8001e96:	4413      	add	r3, r2
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	3304      	adds	r3, #4
 8001ea4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001eac:	78fb      	ldrb	r3, [r7, #3]
 8001eae:	f003 030f 	and.w	r3, r3, #15
 8001eb2:	b2da      	uxtb	r2, r3
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d101      	bne.n	8001ec6 <HAL_PCD_EP_Close+0x6e>
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	e00e      	b.n	8001ee4 <HAL_PCD_EP_Close+0x8c>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2201      	movs	r2, #1
 8001eca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	68f9      	ldr	r1, [r7, #12]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f001 fc2b 	bl	8003730 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001ee2:	2300      	movs	r3, #0
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3710      	adds	r7, #16
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}

08001eec <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b086      	sub	sp, #24
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	60f8      	str	r0, [r7, #12]
 8001ef4:	607a      	str	r2, [r7, #4]
 8001ef6:	603b      	str	r3, [r7, #0]
 8001ef8:	460b      	mov	r3, r1
 8001efa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001efc:	7afb      	ldrb	r3, [r7, #11]
 8001efe:	f003 020f 	and.w	r2, r3, #15
 8001f02:	4613      	mov	r3, r2
 8001f04:	00db      	lsls	r3, r3, #3
 8001f06:	4413      	add	r3, r2
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001f0e:	68fa      	ldr	r2, [r7, #12]
 8001f10:	4413      	add	r3, r2
 8001f12:	3304      	adds	r3, #4
 8001f14:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	683a      	ldr	r2, [r7, #0]
 8001f20:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	2200      	movs	r2, #0
 8001f26:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f2e:	7afb      	ldrb	r3, [r7, #11]
 8001f30:	f003 030f 	and.w	r3, r3, #15
 8001f34:	b2da      	uxtb	r2, r3
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	691b      	ldr	r3, [r3, #16]
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d102      	bne.n	8001f48 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f48:	7afb      	ldrb	r3, [r7, #11]
 8001f4a:	f003 030f 	and.w	r3, r3, #15
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d109      	bne.n	8001f66 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	6818      	ldr	r0, [r3, #0]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	691b      	ldr	r3, [r3, #16]
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	6979      	ldr	r1, [r7, #20]
 8001f60:	f001 ff0a 	bl	8003d78 <USB_EP0StartXfer>
 8001f64:	e008      	b.n	8001f78 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	6818      	ldr	r0, [r3, #0]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	691b      	ldr	r3, [r3, #16]
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	461a      	mov	r2, r3
 8001f72:	6979      	ldr	r1, [r7, #20]
 8001f74:	f001 fcb8 	bl	80038e8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001f78:	2300      	movs	r3, #0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3718      	adds	r7, #24
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f82:	b480      	push	{r7}
 8001f84:	b083      	sub	sp, #12
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
 8001f8a:	460b      	mov	r3, r1
 8001f8c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001f8e:	78fb      	ldrb	r3, [r7, #3]
 8001f90:	f003 020f 	and.w	r2, r3, #15
 8001f94:	6879      	ldr	r1, [r7, #4]
 8001f96:	4613      	mov	r3, r2
 8001f98:	00db      	lsls	r3, r3, #3
 8001f9a:	4413      	add	r3, r2
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	440b      	add	r3, r1
 8001fa0:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8001fa4:	681b      	ldr	r3, [r3, #0]
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	370c      	adds	r7, #12
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr

08001fb2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001fb2:	b580      	push	{r7, lr}
 8001fb4:	b086      	sub	sp, #24
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	60f8      	str	r0, [r7, #12]
 8001fba:	607a      	str	r2, [r7, #4]
 8001fbc:	603b      	str	r3, [r7, #0]
 8001fbe:	460b      	mov	r3, r1
 8001fc0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fc2:	7afb      	ldrb	r3, [r7, #11]
 8001fc4:	f003 020f 	and.w	r2, r3, #15
 8001fc8:	4613      	mov	r3, r2
 8001fca:	00db      	lsls	r3, r3, #3
 8001fcc:	4413      	add	r3, r2
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	3338      	adds	r3, #56	; 0x38
 8001fd2:	68fa      	ldr	r2, [r7, #12]
 8001fd4:	4413      	add	r3, r2
 8001fd6:	3304      	adds	r3, #4
 8001fd8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	683a      	ldr	r2, [r7, #0]
 8001fe4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ff2:	7afb      	ldrb	r3, [r7, #11]
 8001ff4:	f003 030f 	and.w	r3, r3, #15
 8001ff8:	b2da      	uxtb	r2, r3
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	691b      	ldr	r3, [r3, #16]
 8002002:	2b01      	cmp	r3, #1
 8002004:	d102      	bne.n	800200c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800200c:	7afb      	ldrb	r3, [r7, #11]
 800200e:	f003 030f 	and.w	r3, r3, #15
 8002012:	2b00      	cmp	r3, #0
 8002014:	d109      	bne.n	800202a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	6818      	ldr	r0, [r3, #0]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	691b      	ldr	r3, [r3, #16]
 800201e:	b2db      	uxtb	r3, r3
 8002020:	461a      	mov	r2, r3
 8002022:	6979      	ldr	r1, [r7, #20]
 8002024:	f001 fea8 	bl	8003d78 <USB_EP0StartXfer>
 8002028:	e008      	b.n	800203c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	6818      	ldr	r0, [r3, #0]
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	691b      	ldr	r3, [r3, #16]
 8002032:	b2db      	uxtb	r3, r3
 8002034:	461a      	mov	r2, r3
 8002036:	6979      	ldr	r1, [r7, #20]
 8002038:	f001 fc56 	bl	80038e8 <USB_EPStartXfer>
  }

  return HAL_OK;
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	3718      	adds	r7, #24
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}

08002046 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002046:	b580      	push	{r7, lr}
 8002048:	b084      	sub	sp, #16
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
 800204e:	460b      	mov	r3, r1
 8002050:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002052:	78fb      	ldrb	r3, [r7, #3]
 8002054:	f003 020f 	and.w	r2, r3, #15
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	429a      	cmp	r2, r3
 800205e:	d901      	bls.n	8002064 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e050      	b.n	8002106 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002064:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002068:	2b00      	cmp	r3, #0
 800206a:	da0f      	bge.n	800208c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800206c:	78fb      	ldrb	r3, [r7, #3]
 800206e:	f003 020f 	and.w	r2, r3, #15
 8002072:	4613      	mov	r3, r2
 8002074:	00db      	lsls	r3, r3, #3
 8002076:	4413      	add	r3, r2
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	3338      	adds	r3, #56	; 0x38
 800207c:	687a      	ldr	r2, [r7, #4]
 800207e:	4413      	add	r3, r2
 8002080:	3304      	adds	r3, #4
 8002082:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2201      	movs	r2, #1
 8002088:	705a      	strb	r2, [r3, #1]
 800208a:	e00d      	b.n	80020a8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800208c:	78fa      	ldrb	r2, [r7, #3]
 800208e:	4613      	mov	r3, r2
 8002090:	00db      	lsls	r3, r3, #3
 8002092:	4413      	add	r3, r2
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	4413      	add	r3, r2
 800209e:	3304      	adds	r3, #4
 80020a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2200      	movs	r2, #0
 80020a6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2201      	movs	r2, #1
 80020ac:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020ae:	78fb      	ldrb	r3, [r7, #3]
 80020b0:	f003 030f 	and.w	r3, r3, #15
 80020b4:	b2da      	uxtb	r2, r3
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d101      	bne.n	80020c8 <HAL_PCD_EP_SetStall+0x82>
 80020c4:	2302      	movs	r3, #2
 80020c6:	e01e      	b.n	8002106 <HAL_PCD_EP_SetStall+0xc0>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2201      	movs	r2, #1
 80020cc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	68f9      	ldr	r1, [r7, #12]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f002 f8e6 	bl	80042a8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80020dc:	78fb      	ldrb	r3, [r7, #3]
 80020de:	f003 030f 	and.w	r3, r3, #15
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d10a      	bne.n	80020fc <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6818      	ldr	r0, [r3, #0]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	691b      	ldr	r3, [r3, #16]
 80020ee:	b2d9      	uxtb	r1, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80020f6:	461a      	mov	r2, r3
 80020f8:	f002 fad6 	bl	80046a8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2200      	movs	r2, #0
 8002100:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002104:	2300      	movs	r3, #0
}
 8002106:	4618      	mov	r0, r3
 8002108:	3710      	adds	r7, #16
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}

0800210e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800210e:	b580      	push	{r7, lr}
 8002110:	b084      	sub	sp, #16
 8002112:	af00      	add	r7, sp, #0
 8002114:	6078      	str	r0, [r7, #4]
 8002116:	460b      	mov	r3, r1
 8002118:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800211a:	78fb      	ldrb	r3, [r7, #3]
 800211c:	f003 020f 	and.w	r2, r3, #15
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	429a      	cmp	r2, r3
 8002126:	d901      	bls.n	800212c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e042      	b.n	80021b2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800212c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002130:	2b00      	cmp	r3, #0
 8002132:	da0f      	bge.n	8002154 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002134:	78fb      	ldrb	r3, [r7, #3]
 8002136:	f003 020f 	and.w	r2, r3, #15
 800213a:	4613      	mov	r3, r2
 800213c:	00db      	lsls	r3, r3, #3
 800213e:	4413      	add	r3, r2
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	3338      	adds	r3, #56	; 0x38
 8002144:	687a      	ldr	r2, [r7, #4]
 8002146:	4413      	add	r3, r2
 8002148:	3304      	adds	r3, #4
 800214a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2201      	movs	r2, #1
 8002150:	705a      	strb	r2, [r3, #1]
 8002152:	e00f      	b.n	8002174 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002154:	78fb      	ldrb	r3, [r7, #3]
 8002156:	f003 020f 	and.w	r2, r3, #15
 800215a:	4613      	mov	r3, r2
 800215c:	00db      	lsls	r3, r3, #3
 800215e:	4413      	add	r3, r2
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	4413      	add	r3, r2
 800216a:	3304      	adds	r3, #4
 800216c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2200      	movs	r2, #0
 8002172:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2200      	movs	r2, #0
 8002178:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800217a:	78fb      	ldrb	r3, [r7, #3]
 800217c:	f003 030f 	and.w	r3, r3, #15
 8002180:	b2da      	uxtb	r2, r3
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800218c:	2b01      	cmp	r3, #1
 800218e:	d101      	bne.n	8002194 <HAL_PCD_EP_ClrStall+0x86>
 8002190:	2302      	movs	r3, #2
 8002192:	e00e      	b.n	80021b2 <HAL_PCD_EP_ClrStall+0xa4>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2201      	movs	r2, #1
 8002198:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	68f9      	ldr	r1, [r7, #12]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f002 f8ee 	bl	8004384 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2200      	movs	r2, #0
 80021ac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80021b0:	2300      	movs	r3, #0
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3710      	adds	r7, #16
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}

080021ba <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b084      	sub	sp, #16
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
 80021c2:	460b      	mov	r3, r1
 80021c4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80021c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	da0c      	bge.n	80021e8 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021ce:	78fb      	ldrb	r3, [r7, #3]
 80021d0:	f003 020f 	and.w	r2, r3, #15
 80021d4:	4613      	mov	r3, r2
 80021d6:	00db      	lsls	r3, r3, #3
 80021d8:	4413      	add	r3, r2
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	3338      	adds	r3, #56	; 0x38
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	4413      	add	r3, r2
 80021e2:	3304      	adds	r3, #4
 80021e4:	60fb      	str	r3, [r7, #12]
 80021e6:	e00c      	b.n	8002202 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021e8:	78fb      	ldrb	r3, [r7, #3]
 80021ea:	f003 020f 	and.w	r2, r3, #15
 80021ee:	4613      	mov	r3, r2
 80021f0:	00db      	lsls	r3, r3, #3
 80021f2:	4413      	add	r3, r2
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	4413      	add	r3, r2
 80021fe:	3304      	adds	r3, #4
 8002200:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	68f9      	ldr	r1, [r7, #12]
 8002208:	4618      	mov	r0, r3
 800220a:	f001 ff0d 	bl	8004028 <USB_EPStopXfer>
 800220e:	4603      	mov	r3, r0
 8002210:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002212:	7afb      	ldrb	r3, [r7, #11]
}
 8002214:	4618      	mov	r0, r3
 8002216:	3710      	adds	r7, #16
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}

0800221c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b08a      	sub	sp, #40	; 0x28
 8002220:	af02      	add	r7, sp, #8
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002230:	683a      	ldr	r2, [r7, #0]
 8002232:	4613      	mov	r3, r2
 8002234:	00db      	lsls	r3, r3, #3
 8002236:	4413      	add	r3, r2
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	3338      	adds	r3, #56	; 0x38
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	4413      	add	r3, r2
 8002240:	3304      	adds	r3, #4
 8002242:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	6a1a      	ldr	r2, [r3, #32]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	699b      	ldr	r3, [r3, #24]
 800224c:	429a      	cmp	r2, r3
 800224e:	d901      	bls.n	8002254 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e06c      	b.n	800232e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	699a      	ldr	r2, [r3, #24]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	6a1b      	ldr	r3, [r3, #32]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	69fa      	ldr	r2, [r7, #28]
 8002266:	429a      	cmp	r2, r3
 8002268:	d902      	bls.n	8002270 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	68db      	ldr	r3, [r3, #12]
 800226e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	3303      	adds	r3, #3
 8002274:	089b      	lsrs	r3, r3, #2
 8002276:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002278:	e02b      	b.n	80022d2 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	699a      	ldr	r2, [r3, #24]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	6a1b      	ldr	r3, [r3, #32]
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	69fa      	ldr	r2, [r7, #28]
 800228c:	429a      	cmp	r2, r3
 800228e:	d902      	bls.n	8002296 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	3303      	adds	r3, #3
 800229a:	089b      	lsrs	r3, r3, #2
 800229c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	6919      	ldr	r1, [r3, #16]
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	b2da      	uxtb	r2, r3
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	9300      	str	r3, [sp, #0]
 80022b2:	4603      	mov	r3, r0
 80022b4:	6978      	ldr	r0, [r7, #20]
 80022b6:	f001 ff61 	bl	800417c <USB_WritePacket>

    ep->xfer_buff  += len;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	691a      	ldr	r2, [r3, #16]
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	441a      	add	r2, r3
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	6a1a      	ldr	r2, [r3, #32]
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	441a      	add	r2, r3
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	015a      	lsls	r2, r3, #5
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	4413      	add	r3, r2
 80022da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022de:	699b      	ldr	r3, [r3, #24]
 80022e0:	b29b      	uxth	r3, r3
 80022e2:	69ba      	ldr	r2, [r7, #24]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d809      	bhi.n	80022fc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	6a1a      	ldr	r2, [r3, #32]
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d203      	bcs.n	80022fc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	699b      	ldr	r3, [r3, #24]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d1be      	bne.n	800227a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	699a      	ldr	r2, [r3, #24]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	6a1b      	ldr	r3, [r3, #32]
 8002304:	429a      	cmp	r2, r3
 8002306:	d811      	bhi.n	800232c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	f003 030f 	and.w	r3, r3, #15
 800230e:	2201      	movs	r2, #1
 8002310:	fa02 f303 	lsl.w	r3, r2, r3
 8002314:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800231c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	43db      	mvns	r3, r3
 8002322:	6939      	ldr	r1, [r7, #16]
 8002324:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002328:	4013      	ands	r3, r2
 800232a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800232c:	2300      	movs	r3, #0
}
 800232e:	4618      	mov	r0, r3
 8002330:	3720      	adds	r7, #32
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
	...

08002338 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b088      	sub	sp, #32
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	333c      	adds	r3, #60	; 0x3c
 8002350:	3304      	adds	r3, #4
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	015a      	lsls	r2, r3, #5
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	4413      	add	r3, r2
 800235e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	691b      	ldr	r3, [r3, #16]
 800236a:	2b01      	cmp	r3, #1
 800236c:	d17b      	bne.n	8002466 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	f003 0308 	and.w	r3, r3, #8
 8002374:	2b00      	cmp	r3, #0
 8002376:	d015      	beq.n	80023a4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	4a61      	ldr	r2, [pc, #388]	; (8002500 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800237c:	4293      	cmp	r3, r2
 800237e:	f240 80b9 	bls.w	80024f4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002388:	2b00      	cmp	r3, #0
 800238a:	f000 80b3 	beq.w	80024f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	015a      	lsls	r2, r3, #5
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	4413      	add	r3, r2
 8002396:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800239a:	461a      	mov	r2, r3
 800239c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023a0:	6093      	str	r3, [r2, #8]
 80023a2:	e0a7      	b.n	80024f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	f003 0320 	and.w	r3, r3, #32
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d009      	beq.n	80023c2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	015a      	lsls	r2, r3, #5
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	4413      	add	r3, r2
 80023b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023ba:	461a      	mov	r2, r3
 80023bc:	2320      	movs	r3, #32
 80023be:	6093      	str	r3, [r2, #8]
 80023c0:	e098      	b.n	80024f4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	f040 8093 	bne.w	80024f4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	4a4b      	ldr	r2, [pc, #300]	; (8002500 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d90f      	bls.n	80023f6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d00a      	beq.n	80023f6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	015a      	lsls	r2, r3, #5
 80023e4:	69bb      	ldr	r3, [r7, #24]
 80023e6:	4413      	add	r3, r2
 80023e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023ec:	461a      	mov	r2, r3
 80023ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023f2:	6093      	str	r3, [r2, #8]
 80023f4:	e07e      	b.n	80024f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80023f6:	683a      	ldr	r2, [r7, #0]
 80023f8:	4613      	mov	r3, r2
 80023fa:	00db      	lsls	r3, r3, #3
 80023fc:	4413      	add	r3, r2
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	4413      	add	r3, r2
 8002408:	3304      	adds	r3, #4
 800240a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	69da      	ldr	r2, [r3, #28]
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	0159      	lsls	r1, r3, #5
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	440b      	add	r3, r1
 8002418:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800241c:	691b      	ldr	r3, [r3, #16]
 800241e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002422:	1ad2      	subs	r2, r2, r3
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d114      	bne.n	8002458 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	699b      	ldr	r3, [r3, #24]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d109      	bne.n	800244a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6818      	ldr	r0, [r3, #0]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002440:	461a      	mov	r2, r3
 8002442:	2101      	movs	r1, #1
 8002444:	f002 f930 	bl	80046a8 <USB_EP0_OutStart>
 8002448:	e006      	b.n	8002458 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	691a      	ldr	r2, [r3, #16]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	6a1b      	ldr	r3, [r3, #32]
 8002452:	441a      	add	r2, r3
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	b2db      	uxtb	r3, r3
 800245c:	4619      	mov	r1, r3
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f004 fb7c 	bl	8006b5c <HAL_PCD_DataOutStageCallback>
 8002464:	e046      	b.n	80024f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	4a26      	ldr	r2, [pc, #152]	; (8002504 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d124      	bne.n	80024b8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d00a      	beq.n	800248e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	015a      	lsls	r2, r3, #5
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	4413      	add	r3, r2
 8002480:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002484:	461a      	mov	r2, r3
 8002486:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800248a:	6093      	str	r3, [r2, #8]
 800248c:	e032      	b.n	80024f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	f003 0320 	and.w	r3, r3, #32
 8002494:	2b00      	cmp	r3, #0
 8002496:	d008      	beq.n	80024aa <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	015a      	lsls	r2, r3, #5
 800249c:	69bb      	ldr	r3, [r7, #24]
 800249e:	4413      	add	r3, r2
 80024a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024a4:	461a      	mov	r2, r3
 80024a6:	2320      	movs	r3, #32
 80024a8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	4619      	mov	r1, r3
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f004 fb53 	bl	8006b5c <HAL_PCD_DataOutStageCallback>
 80024b6:	e01d      	b.n	80024f4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d114      	bne.n	80024e8 <PCD_EP_OutXfrComplete_int+0x1b0>
 80024be:	6879      	ldr	r1, [r7, #4]
 80024c0:	683a      	ldr	r2, [r7, #0]
 80024c2:	4613      	mov	r3, r2
 80024c4:	00db      	lsls	r3, r3, #3
 80024c6:	4413      	add	r3, r2
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	440b      	add	r3, r1
 80024cc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d108      	bne.n	80024e8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6818      	ldr	r0, [r3, #0]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80024e0:	461a      	mov	r2, r3
 80024e2:	2100      	movs	r1, #0
 80024e4:	f002 f8e0 	bl	80046a8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	4619      	mov	r1, r3
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f004 fb34 	bl	8006b5c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80024f4:	2300      	movs	r3, #0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3720      	adds	r7, #32
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	4f54300a 	.word	0x4f54300a
 8002504:	4f54310a 	.word	0x4f54310a

08002508 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b086      	sub	sp, #24
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	333c      	adds	r3, #60	; 0x3c
 8002520:	3304      	adds	r3, #4
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	015a      	lsls	r2, r3, #5
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	4413      	add	r3, r2
 800252e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	4a15      	ldr	r2, [pc, #84]	; (8002590 <PCD_EP_OutSetupPacket_int+0x88>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d90e      	bls.n	800255c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002544:	2b00      	cmp	r3, #0
 8002546:	d009      	beq.n	800255c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	015a      	lsls	r2, r3, #5
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	4413      	add	r3, r2
 8002550:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002554:	461a      	mov	r2, r3
 8002556:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800255a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	f004 faeb 	bl	8006b38 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	4a0a      	ldr	r2, [pc, #40]	; (8002590 <PCD_EP_OutSetupPacket_int+0x88>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d90c      	bls.n	8002584 <PCD_EP_OutSetupPacket_int+0x7c>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	691b      	ldr	r3, [r3, #16]
 800256e:	2b01      	cmp	r3, #1
 8002570:	d108      	bne.n	8002584 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6818      	ldr	r0, [r3, #0]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800257c:	461a      	mov	r2, r3
 800257e:	2101      	movs	r1, #1
 8002580:	f002 f892 	bl	80046a8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3718      	adds	r7, #24
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	4f54300a 	.word	0x4f54300a

08002594 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002594:	b480      	push	{r7}
 8002596:	b085      	sub	sp, #20
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	460b      	mov	r3, r1
 800259e:	70fb      	strb	r3, [r7, #3]
 80025a0:	4613      	mov	r3, r2
 80025a2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025aa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80025ac:	78fb      	ldrb	r3, [r7, #3]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d107      	bne.n	80025c2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80025b2:	883b      	ldrh	r3, [r7, #0]
 80025b4:	0419      	lsls	r1, r3, #16
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	68ba      	ldr	r2, [r7, #8]
 80025bc:	430a      	orrs	r2, r1
 80025be:	629a      	str	r2, [r3, #40]	; 0x28
 80025c0:	e028      	b.n	8002614 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c8:	0c1b      	lsrs	r3, r3, #16
 80025ca:	68ba      	ldr	r2, [r7, #8]
 80025cc:	4413      	add	r3, r2
 80025ce:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80025d0:	2300      	movs	r3, #0
 80025d2:	73fb      	strb	r3, [r7, #15]
 80025d4:	e00d      	b.n	80025f2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	7bfb      	ldrb	r3, [r7, #15]
 80025dc:	3340      	adds	r3, #64	; 0x40
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	4413      	add	r3, r2
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	0c1b      	lsrs	r3, r3, #16
 80025e6:	68ba      	ldr	r2, [r7, #8]
 80025e8:	4413      	add	r3, r2
 80025ea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80025ec:	7bfb      	ldrb	r3, [r7, #15]
 80025ee:	3301      	adds	r3, #1
 80025f0:	73fb      	strb	r3, [r7, #15]
 80025f2:	7bfa      	ldrb	r2, [r7, #15]
 80025f4:	78fb      	ldrb	r3, [r7, #3]
 80025f6:	3b01      	subs	r3, #1
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d3ec      	bcc.n	80025d6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80025fc:	883b      	ldrh	r3, [r7, #0]
 80025fe:	0418      	lsls	r0, r3, #16
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6819      	ldr	r1, [r3, #0]
 8002604:	78fb      	ldrb	r3, [r7, #3]
 8002606:	3b01      	subs	r3, #1
 8002608:	68ba      	ldr	r2, [r7, #8]
 800260a:	4302      	orrs	r2, r0
 800260c:	3340      	adds	r3, #64	; 0x40
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	440b      	add	r3, r1
 8002612:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002614:	2300      	movs	r3, #0
}
 8002616:	4618      	mov	r0, r3
 8002618:	3714      	adds	r7, #20
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr

08002622 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002622:	b480      	push	{r7}
 8002624:	b083      	sub	sp, #12
 8002626:	af00      	add	r7, sp, #0
 8002628:	6078      	str	r0, [r7, #4]
 800262a:	460b      	mov	r3, r1
 800262c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	887a      	ldrh	r2, [r7, #2]
 8002634:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002636:	2300      	movs	r3, #0
}
 8002638:	4618      	mov	r0, r3
 800263a:	370c      	adds	r7, #12
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	460b      	mov	r3, r1
 800264e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002650:	bf00      	nop
 8002652:	370c      	adds	r7, #12
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr

0800265c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b086      	sub	sp, #24
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d101      	bne.n	800266e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e267      	b.n	8002b3e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0301 	and.w	r3, r3, #1
 8002676:	2b00      	cmp	r3, #0
 8002678:	d075      	beq.n	8002766 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800267a:	4b88      	ldr	r3, [pc, #544]	; (800289c <HAL_RCC_OscConfig+0x240>)
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f003 030c 	and.w	r3, r3, #12
 8002682:	2b04      	cmp	r3, #4
 8002684:	d00c      	beq.n	80026a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002686:	4b85      	ldr	r3, [pc, #532]	; (800289c <HAL_RCC_OscConfig+0x240>)
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800268e:	2b08      	cmp	r3, #8
 8002690:	d112      	bne.n	80026b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002692:	4b82      	ldr	r3, [pc, #520]	; (800289c <HAL_RCC_OscConfig+0x240>)
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800269a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800269e:	d10b      	bne.n	80026b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026a0:	4b7e      	ldr	r3, [pc, #504]	; (800289c <HAL_RCC_OscConfig+0x240>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d05b      	beq.n	8002764 <HAL_RCC_OscConfig+0x108>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d157      	bne.n	8002764 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e242      	b.n	8002b3e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026c0:	d106      	bne.n	80026d0 <HAL_RCC_OscConfig+0x74>
 80026c2:	4b76      	ldr	r3, [pc, #472]	; (800289c <HAL_RCC_OscConfig+0x240>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a75      	ldr	r2, [pc, #468]	; (800289c <HAL_RCC_OscConfig+0x240>)
 80026c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026cc:	6013      	str	r3, [r2, #0]
 80026ce:	e01d      	b.n	800270c <HAL_RCC_OscConfig+0xb0>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026d8:	d10c      	bne.n	80026f4 <HAL_RCC_OscConfig+0x98>
 80026da:	4b70      	ldr	r3, [pc, #448]	; (800289c <HAL_RCC_OscConfig+0x240>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a6f      	ldr	r2, [pc, #444]	; (800289c <HAL_RCC_OscConfig+0x240>)
 80026e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026e4:	6013      	str	r3, [r2, #0]
 80026e6:	4b6d      	ldr	r3, [pc, #436]	; (800289c <HAL_RCC_OscConfig+0x240>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a6c      	ldr	r2, [pc, #432]	; (800289c <HAL_RCC_OscConfig+0x240>)
 80026ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026f0:	6013      	str	r3, [r2, #0]
 80026f2:	e00b      	b.n	800270c <HAL_RCC_OscConfig+0xb0>
 80026f4:	4b69      	ldr	r3, [pc, #420]	; (800289c <HAL_RCC_OscConfig+0x240>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a68      	ldr	r2, [pc, #416]	; (800289c <HAL_RCC_OscConfig+0x240>)
 80026fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026fe:	6013      	str	r3, [r2, #0]
 8002700:	4b66      	ldr	r3, [pc, #408]	; (800289c <HAL_RCC_OscConfig+0x240>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a65      	ldr	r2, [pc, #404]	; (800289c <HAL_RCC_OscConfig+0x240>)
 8002706:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800270a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d013      	beq.n	800273c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002714:	f7fe f91a 	bl	800094c <HAL_GetTick>
 8002718:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800271a:	e008      	b.n	800272e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800271c:	f7fe f916 	bl	800094c <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	2b64      	cmp	r3, #100	; 0x64
 8002728:	d901      	bls.n	800272e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e207      	b.n	8002b3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800272e:	4b5b      	ldr	r3, [pc, #364]	; (800289c <HAL_RCC_OscConfig+0x240>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d0f0      	beq.n	800271c <HAL_RCC_OscConfig+0xc0>
 800273a:	e014      	b.n	8002766 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800273c:	f7fe f906 	bl	800094c <HAL_GetTick>
 8002740:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002742:	e008      	b.n	8002756 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002744:	f7fe f902 	bl	800094c <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	2b64      	cmp	r3, #100	; 0x64
 8002750:	d901      	bls.n	8002756 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e1f3      	b.n	8002b3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002756:	4b51      	ldr	r3, [pc, #324]	; (800289c <HAL_RCC_OscConfig+0x240>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d1f0      	bne.n	8002744 <HAL_RCC_OscConfig+0xe8>
 8002762:	e000      	b.n	8002766 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002764:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0302 	and.w	r3, r3, #2
 800276e:	2b00      	cmp	r3, #0
 8002770:	d063      	beq.n	800283a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002772:	4b4a      	ldr	r3, [pc, #296]	; (800289c <HAL_RCC_OscConfig+0x240>)
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	f003 030c 	and.w	r3, r3, #12
 800277a:	2b00      	cmp	r3, #0
 800277c:	d00b      	beq.n	8002796 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800277e:	4b47      	ldr	r3, [pc, #284]	; (800289c <HAL_RCC_OscConfig+0x240>)
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002786:	2b08      	cmp	r3, #8
 8002788:	d11c      	bne.n	80027c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800278a:	4b44      	ldr	r3, [pc, #272]	; (800289c <HAL_RCC_OscConfig+0x240>)
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d116      	bne.n	80027c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002796:	4b41      	ldr	r3, [pc, #260]	; (800289c <HAL_RCC_OscConfig+0x240>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0302 	and.w	r3, r3, #2
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d005      	beq.n	80027ae <HAL_RCC_OscConfig+0x152>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d001      	beq.n	80027ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e1c7      	b.n	8002b3e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027ae:	4b3b      	ldr	r3, [pc, #236]	; (800289c <HAL_RCC_OscConfig+0x240>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	00db      	lsls	r3, r3, #3
 80027bc:	4937      	ldr	r1, [pc, #220]	; (800289c <HAL_RCC_OscConfig+0x240>)
 80027be:	4313      	orrs	r3, r2
 80027c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027c2:	e03a      	b.n	800283a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d020      	beq.n	800280e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027cc:	4b34      	ldr	r3, [pc, #208]	; (80028a0 <HAL_RCC_OscConfig+0x244>)
 80027ce:	2201      	movs	r2, #1
 80027d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d2:	f7fe f8bb 	bl	800094c <HAL_GetTick>
 80027d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027d8:	e008      	b.n	80027ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027da:	f7fe f8b7 	bl	800094c <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d901      	bls.n	80027ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80027e8:	2303      	movs	r3, #3
 80027ea:	e1a8      	b.n	8002b3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027ec:	4b2b      	ldr	r3, [pc, #172]	; (800289c <HAL_RCC_OscConfig+0x240>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0302 	and.w	r3, r3, #2
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d0f0      	beq.n	80027da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027f8:	4b28      	ldr	r3, [pc, #160]	; (800289c <HAL_RCC_OscConfig+0x240>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	691b      	ldr	r3, [r3, #16]
 8002804:	00db      	lsls	r3, r3, #3
 8002806:	4925      	ldr	r1, [pc, #148]	; (800289c <HAL_RCC_OscConfig+0x240>)
 8002808:	4313      	orrs	r3, r2
 800280a:	600b      	str	r3, [r1, #0]
 800280c:	e015      	b.n	800283a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800280e:	4b24      	ldr	r3, [pc, #144]	; (80028a0 <HAL_RCC_OscConfig+0x244>)
 8002810:	2200      	movs	r2, #0
 8002812:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002814:	f7fe f89a 	bl	800094c <HAL_GetTick>
 8002818:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800281a:	e008      	b.n	800282e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800281c:	f7fe f896 	bl	800094c <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	2b02      	cmp	r3, #2
 8002828:	d901      	bls.n	800282e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e187      	b.n	8002b3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800282e:	4b1b      	ldr	r3, [pc, #108]	; (800289c <HAL_RCC_OscConfig+0x240>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0302 	and.w	r3, r3, #2
 8002836:	2b00      	cmp	r3, #0
 8002838:	d1f0      	bne.n	800281c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0308 	and.w	r3, r3, #8
 8002842:	2b00      	cmp	r3, #0
 8002844:	d036      	beq.n	80028b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	695b      	ldr	r3, [r3, #20]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d016      	beq.n	800287c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800284e:	4b15      	ldr	r3, [pc, #84]	; (80028a4 <HAL_RCC_OscConfig+0x248>)
 8002850:	2201      	movs	r2, #1
 8002852:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002854:	f7fe f87a 	bl	800094c <HAL_GetTick>
 8002858:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800285a:	e008      	b.n	800286e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800285c:	f7fe f876 	bl	800094c <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	2b02      	cmp	r3, #2
 8002868:	d901      	bls.n	800286e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e167      	b.n	8002b3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800286e:	4b0b      	ldr	r3, [pc, #44]	; (800289c <HAL_RCC_OscConfig+0x240>)
 8002870:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002872:	f003 0302 	and.w	r3, r3, #2
 8002876:	2b00      	cmp	r3, #0
 8002878:	d0f0      	beq.n	800285c <HAL_RCC_OscConfig+0x200>
 800287a:	e01b      	b.n	80028b4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800287c:	4b09      	ldr	r3, [pc, #36]	; (80028a4 <HAL_RCC_OscConfig+0x248>)
 800287e:	2200      	movs	r2, #0
 8002880:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002882:	f7fe f863 	bl	800094c <HAL_GetTick>
 8002886:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002888:	e00e      	b.n	80028a8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800288a:	f7fe f85f 	bl	800094c <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	2b02      	cmp	r3, #2
 8002896:	d907      	bls.n	80028a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	e150      	b.n	8002b3e <HAL_RCC_OscConfig+0x4e2>
 800289c:	40023800 	.word	0x40023800
 80028a0:	42470000 	.word	0x42470000
 80028a4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028a8:	4b88      	ldr	r3, [pc, #544]	; (8002acc <HAL_RCC_OscConfig+0x470>)
 80028aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028ac:	f003 0302 	and.w	r3, r3, #2
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d1ea      	bne.n	800288a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0304 	and.w	r3, r3, #4
 80028bc:	2b00      	cmp	r3, #0
 80028be:	f000 8097 	beq.w	80029f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028c2:	2300      	movs	r3, #0
 80028c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028c6:	4b81      	ldr	r3, [pc, #516]	; (8002acc <HAL_RCC_OscConfig+0x470>)
 80028c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d10f      	bne.n	80028f2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028d2:	2300      	movs	r3, #0
 80028d4:	60bb      	str	r3, [r7, #8]
 80028d6:	4b7d      	ldr	r3, [pc, #500]	; (8002acc <HAL_RCC_OscConfig+0x470>)
 80028d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028da:	4a7c      	ldr	r2, [pc, #496]	; (8002acc <HAL_RCC_OscConfig+0x470>)
 80028dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028e0:	6413      	str	r3, [r2, #64]	; 0x40
 80028e2:	4b7a      	ldr	r3, [pc, #488]	; (8002acc <HAL_RCC_OscConfig+0x470>)
 80028e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ea:	60bb      	str	r3, [r7, #8]
 80028ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028ee:	2301      	movs	r3, #1
 80028f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028f2:	4b77      	ldr	r3, [pc, #476]	; (8002ad0 <HAL_RCC_OscConfig+0x474>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d118      	bne.n	8002930 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028fe:	4b74      	ldr	r3, [pc, #464]	; (8002ad0 <HAL_RCC_OscConfig+0x474>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a73      	ldr	r2, [pc, #460]	; (8002ad0 <HAL_RCC_OscConfig+0x474>)
 8002904:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002908:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800290a:	f7fe f81f 	bl	800094c <HAL_GetTick>
 800290e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002910:	e008      	b.n	8002924 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002912:	f7fe f81b 	bl	800094c <HAL_GetTick>
 8002916:	4602      	mov	r2, r0
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	2b02      	cmp	r3, #2
 800291e:	d901      	bls.n	8002924 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002920:	2303      	movs	r3, #3
 8002922:	e10c      	b.n	8002b3e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002924:	4b6a      	ldr	r3, [pc, #424]	; (8002ad0 <HAL_RCC_OscConfig+0x474>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800292c:	2b00      	cmp	r3, #0
 800292e:	d0f0      	beq.n	8002912 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	2b01      	cmp	r3, #1
 8002936:	d106      	bne.n	8002946 <HAL_RCC_OscConfig+0x2ea>
 8002938:	4b64      	ldr	r3, [pc, #400]	; (8002acc <HAL_RCC_OscConfig+0x470>)
 800293a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800293c:	4a63      	ldr	r2, [pc, #396]	; (8002acc <HAL_RCC_OscConfig+0x470>)
 800293e:	f043 0301 	orr.w	r3, r3, #1
 8002942:	6713      	str	r3, [r2, #112]	; 0x70
 8002944:	e01c      	b.n	8002980 <HAL_RCC_OscConfig+0x324>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	2b05      	cmp	r3, #5
 800294c:	d10c      	bne.n	8002968 <HAL_RCC_OscConfig+0x30c>
 800294e:	4b5f      	ldr	r3, [pc, #380]	; (8002acc <HAL_RCC_OscConfig+0x470>)
 8002950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002952:	4a5e      	ldr	r2, [pc, #376]	; (8002acc <HAL_RCC_OscConfig+0x470>)
 8002954:	f043 0304 	orr.w	r3, r3, #4
 8002958:	6713      	str	r3, [r2, #112]	; 0x70
 800295a:	4b5c      	ldr	r3, [pc, #368]	; (8002acc <HAL_RCC_OscConfig+0x470>)
 800295c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800295e:	4a5b      	ldr	r2, [pc, #364]	; (8002acc <HAL_RCC_OscConfig+0x470>)
 8002960:	f043 0301 	orr.w	r3, r3, #1
 8002964:	6713      	str	r3, [r2, #112]	; 0x70
 8002966:	e00b      	b.n	8002980 <HAL_RCC_OscConfig+0x324>
 8002968:	4b58      	ldr	r3, [pc, #352]	; (8002acc <HAL_RCC_OscConfig+0x470>)
 800296a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800296c:	4a57      	ldr	r2, [pc, #348]	; (8002acc <HAL_RCC_OscConfig+0x470>)
 800296e:	f023 0301 	bic.w	r3, r3, #1
 8002972:	6713      	str	r3, [r2, #112]	; 0x70
 8002974:	4b55      	ldr	r3, [pc, #340]	; (8002acc <HAL_RCC_OscConfig+0x470>)
 8002976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002978:	4a54      	ldr	r2, [pc, #336]	; (8002acc <HAL_RCC_OscConfig+0x470>)
 800297a:	f023 0304 	bic.w	r3, r3, #4
 800297e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d015      	beq.n	80029b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002988:	f7fd ffe0 	bl	800094c <HAL_GetTick>
 800298c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800298e:	e00a      	b.n	80029a6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002990:	f7fd ffdc 	bl	800094c <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	f241 3288 	movw	r2, #5000	; 0x1388
 800299e:	4293      	cmp	r3, r2
 80029a0:	d901      	bls.n	80029a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e0cb      	b.n	8002b3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029a6:	4b49      	ldr	r3, [pc, #292]	; (8002acc <HAL_RCC_OscConfig+0x470>)
 80029a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029aa:	f003 0302 	and.w	r3, r3, #2
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d0ee      	beq.n	8002990 <HAL_RCC_OscConfig+0x334>
 80029b2:	e014      	b.n	80029de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029b4:	f7fd ffca 	bl	800094c <HAL_GetTick>
 80029b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029ba:	e00a      	b.n	80029d2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029bc:	f7fd ffc6 	bl	800094c <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d901      	bls.n	80029d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e0b5      	b.n	8002b3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029d2:	4b3e      	ldr	r3, [pc, #248]	; (8002acc <HAL_RCC_OscConfig+0x470>)
 80029d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d6:	f003 0302 	and.w	r3, r3, #2
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d1ee      	bne.n	80029bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029de:	7dfb      	ldrb	r3, [r7, #23]
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d105      	bne.n	80029f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029e4:	4b39      	ldr	r3, [pc, #228]	; (8002acc <HAL_RCC_OscConfig+0x470>)
 80029e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e8:	4a38      	ldr	r2, [pc, #224]	; (8002acc <HAL_RCC_OscConfig+0x470>)
 80029ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029ee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	699b      	ldr	r3, [r3, #24]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	f000 80a1 	beq.w	8002b3c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029fa:	4b34      	ldr	r3, [pc, #208]	; (8002acc <HAL_RCC_OscConfig+0x470>)
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	f003 030c 	and.w	r3, r3, #12
 8002a02:	2b08      	cmp	r3, #8
 8002a04:	d05c      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	699b      	ldr	r3, [r3, #24]
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d141      	bne.n	8002a92 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a0e:	4b31      	ldr	r3, [pc, #196]	; (8002ad4 <HAL_RCC_OscConfig+0x478>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a14:	f7fd ff9a 	bl	800094c <HAL_GetTick>
 8002a18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a1a:	e008      	b.n	8002a2e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a1c:	f7fd ff96 	bl	800094c <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d901      	bls.n	8002a2e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e087      	b.n	8002b3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a2e:	4b27      	ldr	r3, [pc, #156]	; (8002acc <HAL_RCC_OscConfig+0x470>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d1f0      	bne.n	8002a1c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	69da      	ldr	r2, [r3, #28]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6a1b      	ldr	r3, [r3, #32]
 8002a42:	431a      	orrs	r2, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a48:	019b      	lsls	r3, r3, #6
 8002a4a:	431a      	orrs	r2, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a50:	085b      	lsrs	r3, r3, #1
 8002a52:	3b01      	subs	r3, #1
 8002a54:	041b      	lsls	r3, r3, #16
 8002a56:	431a      	orrs	r2, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a5c:	061b      	lsls	r3, r3, #24
 8002a5e:	491b      	ldr	r1, [pc, #108]	; (8002acc <HAL_RCC_OscConfig+0x470>)
 8002a60:	4313      	orrs	r3, r2
 8002a62:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a64:	4b1b      	ldr	r3, [pc, #108]	; (8002ad4 <HAL_RCC_OscConfig+0x478>)
 8002a66:	2201      	movs	r2, #1
 8002a68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a6a:	f7fd ff6f 	bl	800094c <HAL_GetTick>
 8002a6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a70:	e008      	b.n	8002a84 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a72:	f7fd ff6b 	bl	800094c <HAL_GetTick>
 8002a76:	4602      	mov	r2, r0
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	d901      	bls.n	8002a84 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a80:	2303      	movs	r3, #3
 8002a82:	e05c      	b.n	8002b3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a84:	4b11      	ldr	r3, [pc, #68]	; (8002acc <HAL_RCC_OscConfig+0x470>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d0f0      	beq.n	8002a72 <HAL_RCC_OscConfig+0x416>
 8002a90:	e054      	b.n	8002b3c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a92:	4b10      	ldr	r3, [pc, #64]	; (8002ad4 <HAL_RCC_OscConfig+0x478>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a98:	f7fd ff58 	bl	800094c <HAL_GetTick>
 8002a9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a9e:	e008      	b.n	8002ab2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002aa0:	f7fd ff54 	bl	800094c <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d901      	bls.n	8002ab2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e045      	b.n	8002b3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ab2:	4b06      	ldr	r3, [pc, #24]	; (8002acc <HAL_RCC_OscConfig+0x470>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d1f0      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x444>
 8002abe:	e03d      	b.n	8002b3c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	699b      	ldr	r3, [r3, #24]
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d107      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e038      	b.n	8002b3e <HAL_RCC_OscConfig+0x4e2>
 8002acc:	40023800 	.word	0x40023800
 8002ad0:	40007000 	.word	0x40007000
 8002ad4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ad8:	4b1b      	ldr	r3, [pc, #108]	; (8002b48 <HAL_RCC_OscConfig+0x4ec>)
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	699b      	ldr	r3, [r3, #24]
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d028      	beq.n	8002b38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d121      	bne.n	8002b38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d11a      	bne.n	8002b38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b02:	68fa      	ldr	r2, [r7, #12]
 8002b04:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b08:	4013      	ands	r3, r2
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b0e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d111      	bne.n	8002b38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b1e:	085b      	lsrs	r3, r3, #1
 8002b20:	3b01      	subs	r3, #1
 8002b22:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d107      	bne.n	8002b38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b32:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d001      	beq.n	8002b3c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e000      	b.n	8002b3e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002b3c:	2300      	movs	r3, #0
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3718      	adds	r7, #24
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	40023800 	.word	0x40023800

08002b4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d101      	bne.n	8002b60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e0cc      	b.n	8002cfa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b60:	4b68      	ldr	r3, [pc, #416]	; (8002d04 <HAL_RCC_ClockConfig+0x1b8>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0307 	and.w	r3, r3, #7
 8002b68:	683a      	ldr	r2, [r7, #0]
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d90c      	bls.n	8002b88 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b6e:	4b65      	ldr	r3, [pc, #404]	; (8002d04 <HAL_RCC_ClockConfig+0x1b8>)
 8002b70:	683a      	ldr	r2, [r7, #0]
 8002b72:	b2d2      	uxtb	r2, r2
 8002b74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b76:	4b63      	ldr	r3, [pc, #396]	; (8002d04 <HAL_RCC_ClockConfig+0x1b8>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0307 	and.w	r3, r3, #7
 8002b7e:	683a      	ldr	r2, [r7, #0]
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d001      	beq.n	8002b88 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e0b8      	b.n	8002cfa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 0302 	and.w	r3, r3, #2
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d020      	beq.n	8002bd6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0304 	and.w	r3, r3, #4
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d005      	beq.n	8002bac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ba0:	4b59      	ldr	r3, [pc, #356]	; (8002d08 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	4a58      	ldr	r2, [pc, #352]	; (8002d08 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002baa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0308 	and.w	r3, r3, #8
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d005      	beq.n	8002bc4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bb8:	4b53      	ldr	r3, [pc, #332]	; (8002d08 <HAL_RCC_ClockConfig+0x1bc>)
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	4a52      	ldr	r2, [pc, #328]	; (8002d08 <HAL_RCC_ClockConfig+0x1bc>)
 8002bbe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002bc2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bc4:	4b50      	ldr	r3, [pc, #320]	; (8002d08 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	494d      	ldr	r1, [pc, #308]	; (8002d08 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0301 	and.w	r3, r3, #1
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d044      	beq.n	8002c6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d107      	bne.n	8002bfa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bea:	4b47      	ldr	r3, [pc, #284]	; (8002d08 <HAL_RCC_ClockConfig+0x1bc>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d119      	bne.n	8002c2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e07f      	b.n	8002cfa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d003      	beq.n	8002c0a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c06:	2b03      	cmp	r3, #3
 8002c08:	d107      	bne.n	8002c1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c0a:	4b3f      	ldr	r3, [pc, #252]	; (8002d08 <HAL_RCC_ClockConfig+0x1bc>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d109      	bne.n	8002c2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e06f      	b.n	8002cfa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c1a:	4b3b      	ldr	r3, [pc, #236]	; (8002d08 <HAL_RCC_ClockConfig+0x1bc>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0302 	and.w	r3, r3, #2
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d101      	bne.n	8002c2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e067      	b.n	8002cfa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c2a:	4b37      	ldr	r3, [pc, #220]	; (8002d08 <HAL_RCC_ClockConfig+0x1bc>)
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	f023 0203 	bic.w	r2, r3, #3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	4934      	ldr	r1, [pc, #208]	; (8002d08 <HAL_RCC_ClockConfig+0x1bc>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c3c:	f7fd fe86 	bl	800094c <HAL_GetTick>
 8002c40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c42:	e00a      	b.n	8002c5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c44:	f7fd fe82 	bl	800094c <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d901      	bls.n	8002c5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e04f      	b.n	8002cfa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c5a:	4b2b      	ldr	r3, [pc, #172]	; (8002d08 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	f003 020c 	and.w	r2, r3, #12
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d1eb      	bne.n	8002c44 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c6c:	4b25      	ldr	r3, [pc, #148]	; (8002d04 <HAL_RCC_ClockConfig+0x1b8>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0307 	and.w	r3, r3, #7
 8002c74:	683a      	ldr	r2, [r7, #0]
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d20c      	bcs.n	8002c94 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c7a:	4b22      	ldr	r3, [pc, #136]	; (8002d04 <HAL_RCC_ClockConfig+0x1b8>)
 8002c7c:	683a      	ldr	r2, [r7, #0]
 8002c7e:	b2d2      	uxtb	r2, r2
 8002c80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c82:	4b20      	ldr	r3, [pc, #128]	; (8002d04 <HAL_RCC_ClockConfig+0x1b8>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0307 	and.w	r3, r3, #7
 8002c8a:	683a      	ldr	r2, [r7, #0]
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d001      	beq.n	8002c94 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e032      	b.n	8002cfa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0304 	and.w	r3, r3, #4
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d008      	beq.n	8002cb2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ca0:	4b19      	ldr	r3, [pc, #100]	; (8002d08 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	4916      	ldr	r1, [pc, #88]	; (8002d08 <HAL_RCC_ClockConfig+0x1bc>)
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0308 	and.w	r3, r3, #8
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d009      	beq.n	8002cd2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cbe:	4b12      	ldr	r3, [pc, #72]	; (8002d08 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	691b      	ldr	r3, [r3, #16]
 8002cca:	00db      	lsls	r3, r3, #3
 8002ccc:	490e      	ldr	r1, [pc, #56]	; (8002d08 <HAL_RCC_ClockConfig+0x1bc>)
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002cd2:	f000 f82d 	bl	8002d30 <HAL_RCC_GetSysClockFreq>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	4b0b      	ldr	r3, [pc, #44]	; (8002d08 <HAL_RCC_ClockConfig+0x1bc>)
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	091b      	lsrs	r3, r3, #4
 8002cde:	f003 030f 	and.w	r3, r3, #15
 8002ce2:	490a      	ldr	r1, [pc, #40]	; (8002d0c <HAL_RCC_ClockConfig+0x1c0>)
 8002ce4:	5ccb      	ldrb	r3, [r1, r3]
 8002ce6:	fa22 f303 	lsr.w	r3, r2, r3
 8002cea:	4a09      	ldr	r2, [pc, #36]	; (8002d10 <HAL_RCC_ClockConfig+0x1c4>)
 8002cec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002cee:	4b09      	ldr	r3, [pc, #36]	; (8002d14 <HAL_RCC_ClockConfig+0x1c8>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7fd fde6 	bl	80008c4 <HAL_InitTick>

  return HAL_OK;
 8002cf8:	2300      	movs	r3, #0
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3710      	adds	r7, #16
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	40023c00 	.word	0x40023c00
 8002d08:	40023800 	.word	0x40023800
 8002d0c:	0800715c 	.word	0x0800715c
 8002d10:	20000000 	.word	0x20000000
 8002d14:	20000004 	.word	0x20000004

08002d18 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8002d1c:	4b03      	ldr	r3, [pc, #12]	; (8002d2c <HAL_RCC_EnableCSS+0x14>)
 8002d1e:	2201      	movs	r2, #1
 8002d20:	601a      	str	r2, [r3, #0]
}
 8002d22:	bf00      	nop
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr
 8002d2c:	4247004c 	.word	0x4247004c

08002d30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d34:	b090      	sub	sp, #64	; 0x40
 8002d36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	637b      	str	r3, [r7, #52]	; 0x34
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d40:	2300      	movs	r3, #0
 8002d42:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002d44:	2300      	movs	r3, #0
 8002d46:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d48:	4b59      	ldr	r3, [pc, #356]	; (8002eb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	f003 030c 	and.w	r3, r3, #12
 8002d50:	2b08      	cmp	r3, #8
 8002d52:	d00d      	beq.n	8002d70 <HAL_RCC_GetSysClockFreq+0x40>
 8002d54:	2b08      	cmp	r3, #8
 8002d56:	f200 80a1 	bhi.w	8002e9c <HAL_RCC_GetSysClockFreq+0x16c>
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d002      	beq.n	8002d64 <HAL_RCC_GetSysClockFreq+0x34>
 8002d5e:	2b04      	cmp	r3, #4
 8002d60:	d003      	beq.n	8002d6a <HAL_RCC_GetSysClockFreq+0x3a>
 8002d62:	e09b      	b.n	8002e9c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d64:	4b53      	ldr	r3, [pc, #332]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002d66:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002d68:	e09b      	b.n	8002ea2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d6a:	4b53      	ldr	r3, [pc, #332]	; (8002eb8 <HAL_RCC_GetSysClockFreq+0x188>)
 8002d6c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002d6e:	e098      	b.n	8002ea2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d70:	4b4f      	ldr	r3, [pc, #316]	; (8002eb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d78:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d7a:	4b4d      	ldr	r3, [pc, #308]	; (8002eb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d028      	beq.n	8002dd8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d86:	4b4a      	ldr	r3, [pc, #296]	; (8002eb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	099b      	lsrs	r3, r3, #6
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	623b      	str	r3, [r7, #32]
 8002d90:	627a      	str	r2, [r7, #36]	; 0x24
 8002d92:	6a3b      	ldr	r3, [r7, #32]
 8002d94:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002d98:	2100      	movs	r1, #0
 8002d9a:	4b47      	ldr	r3, [pc, #284]	; (8002eb8 <HAL_RCC_GetSysClockFreq+0x188>)
 8002d9c:	fb03 f201 	mul.w	r2, r3, r1
 8002da0:	2300      	movs	r3, #0
 8002da2:	fb00 f303 	mul.w	r3, r0, r3
 8002da6:	4413      	add	r3, r2
 8002da8:	4a43      	ldr	r2, [pc, #268]	; (8002eb8 <HAL_RCC_GetSysClockFreq+0x188>)
 8002daa:	fba0 1202 	umull	r1, r2, r0, r2
 8002dae:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002db0:	460a      	mov	r2, r1
 8002db2:	62ba      	str	r2, [r7, #40]	; 0x28
 8002db4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002db6:	4413      	add	r3, r2
 8002db8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	61bb      	str	r3, [r7, #24]
 8002dc0:	61fa      	str	r2, [r7, #28]
 8002dc2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002dc6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002dca:	f7fd fa05 	bl	80001d8 <__aeabi_uldivmod>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	460b      	mov	r3, r1
 8002dd2:	4613      	mov	r3, r2
 8002dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002dd6:	e053      	b.n	8002e80 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dd8:	4b35      	ldr	r3, [pc, #212]	; (8002eb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	099b      	lsrs	r3, r3, #6
 8002dde:	2200      	movs	r2, #0
 8002de0:	613b      	str	r3, [r7, #16]
 8002de2:	617a      	str	r2, [r7, #20]
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002dea:	f04f 0b00 	mov.w	fp, #0
 8002dee:	4652      	mov	r2, sl
 8002df0:	465b      	mov	r3, fp
 8002df2:	f04f 0000 	mov.w	r0, #0
 8002df6:	f04f 0100 	mov.w	r1, #0
 8002dfa:	0159      	lsls	r1, r3, #5
 8002dfc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e00:	0150      	lsls	r0, r2, #5
 8002e02:	4602      	mov	r2, r0
 8002e04:	460b      	mov	r3, r1
 8002e06:	ebb2 080a 	subs.w	r8, r2, sl
 8002e0a:	eb63 090b 	sbc.w	r9, r3, fp
 8002e0e:	f04f 0200 	mov.w	r2, #0
 8002e12:	f04f 0300 	mov.w	r3, #0
 8002e16:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002e1a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002e1e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002e22:	ebb2 0408 	subs.w	r4, r2, r8
 8002e26:	eb63 0509 	sbc.w	r5, r3, r9
 8002e2a:	f04f 0200 	mov.w	r2, #0
 8002e2e:	f04f 0300 	mov.w	r3, #0
 8002e32:	00eb      	lsls	r3, r5, #3
 8002e34:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e38:	00e2      	lsls	r2, r4, #3
 8002e3a:	4614      	mov	r4, r2
 8002e3c:	461d      	mov	r5, r3
 8002e3e:	eb14 030a 	adds.w	r3, r4, sl
 8002e42:	603b      	str	r3, [r7, #0]
 8002e44:	eb45 030b 	adc.w	r3, r5, fp
 8002e48:	607b      	str	r3, [r7, #4]
 8002e4a:	f04f 0200 	mov.w	r2, #0
 8002e4e:	f04f 0300 	mov.w	r3, #0
 8002e52:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e56:	4629      	mov	r1, r5
 8002e58:	028b      	lsls	r3, r1, #10
 8002e5a:	4621      	mov	r1, r4
 8002e5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e60:	4621      	mov	r1, r4
 8002e62:	028a      	lsls	r2, r1, #10
 8002e64:	4610      	mov	r0, r2
 8002e66:	4619      	mov	r1, r3
 8002e68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	60bb      	str	r3, [r7, #8]
 8002e6e:	60fa      	str	r2, [r7, #12]
 8002e70:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e74:	f7fd f9b0 	bl	80001d8 <__aeabi_uldivmod>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	460b      	mov	r3, r1
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e80:	4b0b      	ldr	r3, [pc, #44]	; (8002eb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	0c1b      	lsrs	r3, r3, #16
 8002e86:	f003 0303 	and.w	r3, r3, #3
 8002e8a:	3301      	adds	r3, #1
 8002e8c:	005b      	lsls	r3, r3, #1
 8002e8e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002e90:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e94:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e98:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002e9a:	e002      	b.n	8002ea2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e9c:	4b05      	ldr	r3, [pc, #20]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002e9e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002ea0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3740      	adds	r7, #64	; 0x40
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002eae:	bf00      	nop
 8002eb0:	40023800 	.word	0x40023800
 8002eb4:	00f42400 	.word	0x00f42400
 8002eb8:	017d7840 	.word	0x017d7840

08002ebc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ec0:	4b03      	ldr	r3, [pc, #12]	; (8002ed0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr
 8002ece:	bf00      	nop
 8002ed0:	20000000 	.word	0x20000000

08002ed4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ed8:	f7ff fff0 	bl	8002ebc <HAL_RCC_GetHCLKFreq>
 8002edc:	4602      	mov	r2, r0
 8002ede:	4b05      	ldr	r3, [pc, #20]	; (8002ef4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	0a9b      	lsrs	r3, r3, #10
 8002ee4:	f003 0307 	and.w	r3, r3, #7
 8002ee8:	4903      	ldr	r1, [pc, #12]	; (8002ef8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002eea:	5ccb      	ldrb	r3, [r1, r3]
 8002eec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	40023800 	.word	0x40023800
 8002ef8:	0800716c 	.word	0x0800716c

08002efc <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8002f00:	4b06      	ldr	r3, [pc, #24]	; (8002f1c <HAL_RCC_NMI_IRQHandler+0x20>)
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f08:	2b80      	cmp	r3, #128	; 0x80
 8002f0a:	d104      	bne.n	8002f16 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8002f0c:	f000 f80a 	bl	8002f24 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8002f10:	4b03      	ldr	r3, [pc, #12]	; (8002f20 <HAL_RCC_NMI_IRQHandler+0x24>)
 8002f12:	2280      	movs	r2, #128	; 0x80
 8002f14:	701a      	strb	r2, [r3, #0]
  }
}
 8002f16:	bf00      	nop
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	40023800 	.word	0x40023800
 8002f20:	4002380e 	.word	0x4002380e

08002f24 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8002f24:	b480      	push	{r7}
 8002f26:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8002f28:	bf00      	nop
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr

08002f32 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002f32:	b084      	sub	sp, #16
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	f107 001c 	add.w	r0, r7, #28
 8002f40:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d122      	bne.n	8002f90 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f4e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002f5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002f72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d105      	bne.n	8002f84 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f001 fbed 	bl	8004764 <USB_CoreReset>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	73fb      	strb	r3, [r7, #15]
 8002f8e:	e01a      	b.n	8002fc6 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f001 fbe1 	bl	8004764 <USB_CoreReset>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002fa6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d106      	bne.n	8002fba <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	639a      	str	r2, [r3, #56]	; 0x38
 8002fb8:	e005      	b.n	8002fc6 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fbe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d10b      	bne.n	8002fe4 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	f043 0206 	orr.w	r2, r3, #6
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	f043 0220 	orr.w	r2, r3, #32
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3710      	adds	r7, #16
 8002fea:	46bd      	mov	sp, r7
 8002fec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002ff0:	b004      	add	sp, #16
 8002ff2:	4770      	bx	lr

08002ff4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b087      	sub	sp, #28
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	60f8      	str	r0, [r7, #12]
 8002ffc:	60b9      	str	r1, [r7, #8]
 8002ffe:	4613      	mov	r3, r2
 8003000:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003002:	79fb      	ldrb	r3, [r7, #7]
 8003004:	2b02      	cmp	r3, #2
 8003006:	d165      	bne.n	80030d4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	4a41      	ldr	r2, [pc, #260]	; (8003110 <USB_SetTurnaroundTime+0x11c>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d906      	bls.n	800301e <USB_SetTurnaroundTime+0x2a>
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	4a40      	ldr	r2, [pc, #256]	; (8003114 <USB_SetTurnaroundTime+0x120>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d202      	bcs.n	800301e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003018:	230f      	movs	r3, #15
 800301a:	617b      	str	r3, [r7, #20]
 800301c:	e062      	b.n	80030e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	4a3c      	ldr	r2, [pc, #240]	; (8003114 <USB_SetTurnaroundTime+0x120>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d306      	bcc.n	8003034 <USB_SetTurnaroundTime+0x40>
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	4a3b      	ldr	r2, [pc, #236]	; (8003118 <USB_SetTurnaroundTime+0x124>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d202      	bcs.n	8003034 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800302e:	230e      	movs	r3, #14
 8003030:	617b      	str	r3, [r7, #20]
 8003032:	e057      	b.n	80030e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	4a38      	ldr	r2, [pc, #224]	; (8003118 <USB_SetTurnaroundTime+0x124>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d306      	bcc.n	800304a <USB_SetTurnaroundTime+0x56>
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	4a37      	ldr	r2, [pc, #220]	; (800311c <USB_SetTurnaroundTime+0x128>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d202      	bcs.n	800304a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003044:	230d      	movs	r3, #13
 8003046:	617b      	str	r3, [r7, #20]
 8003048:	e04c      	b.n	80030e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	4a33      	ldr	r2, [pc, #204]	; (800311c <USB_SetTurnaroundTime+0x128>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d306      	bcc.n	8003060 <USB_SetTurnaroundTime+0x6c>
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	4a32      	ldr	r2, [pc, #200]	; (8003120 <USB_SetTurnaroundTime+0x12c>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d802      	bhi.n	8003060 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800305a:	230c      	movs	r3, #12
 800305c:	617b      	str	r3, [r7, #20]
 800305e:	e041      	b.n	80030e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	4a2f      	ldr	r2, [pc, #188]	; (8003120 <USB_SetTurnaroundTime+0x12c>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d906      	bls.n	8003076 <USB_SetTurnaroundTime+0x82>
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	4a2e      	ldr	r2, [pc, #184]	; (8003124 <USB_SetTurnaroundTime+0x130>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d802      	bhi.n	8003076 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003070:	230b      	movs	r3, #11
 8003072:	617b      	str	r3, [r7, #20]
 8003074:	e036      	b.n	80030e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	4a2a      	ldr	r2, [pc, #168]	; (8003124 <USB_SetTurnaroundTime+0x130>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d906      	bls.n	800308c <USB_SetTurnaroundTime+0x98>
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	4a29      	ldr	r2, [pc, #164]	; (8003128 <USB_SetTurnaroundTime+0x134>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d802      	bhi.n	800308c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003086:	230a      	movs	r3, #10
 8003088:	617b      	str	r3, [r7, #20]
 800308a:	e02b      	b.n	80030e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	4a26      	ldr	r2, [pc, #152]	; (8003128 <USB_SetTurnaroundTime+0x134>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d906      	bls.n	80030a2 <USB_SetTurnaroundTime+0xae>
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	4a25      	ldr	r2, [pc, #148]	; (800312c <USB_SetTurnaroundTime+0x138>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d202      	bcs.n	80030a2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800309c:	2309      	movs	r3, #9
 800309e:	617b      	str	r3, [r7, #20]
 80030a0:	e020      	b.n	80030e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	4a21      	ldr	r2, [pc, #132]	; (800312c <USB_SetTurnaroundTime+0x138>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d306      	bcc.n	80030b8 <USB_SetTurnaroundTime+0xc4>
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	4a20      	ldr	r2, [pc, #128]	; (8003130 <USB_SetTurnaroundTime+0x13c>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d802      	bhi.n	80030b8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80030b2:	2308      	movs	r3, #8
 80030b4:	617b      	str	r3, [r7, #20]
 80030b6:	e015      	b.n	80030e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	4a1d      	ldr	r2, [pc, #116]	; (8003130 <USB_SetTurnaroundTime+0x13c>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d906      	bls.n	80030ce <USB_SetTurnaroundTime+0xda>
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	4a1c      	ldr	r2, [pc, #112]	; (8003134 <USB_SetTurnaroundTime+0x140>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d202      	bcs.n	80030ce <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80030c8:	2307      	movs	r3, #7
 80030ca:	617b      	str	r3, [r7, #20]
 80030cc:	e00a      	b.n	80030e4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80030ce:	2306      	movs	r3, #6
 80030d0:	617b      	str	r3, [r7, #20]
 80030d2:	e007      	b.n	80030e4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80030d4:	79fb      	ldrb	r3, [r7, #7]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d102      	bne.n	80030e0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80030da:	2309      	movs	r3, #9
 80030dc:	617b      	str	r3, [r7, #20]
 80030de:	e001      	b.n	80030e4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80030e0:	2309      	movs	r3, #9
 80030e2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	68da      	ldr	r2, [r3, #12]
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	029b      	lsls	r3, r3, #10
 80030f8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80030fc:	431a      	orrs	r2, r3
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003102:	2300      	movs	r3, #0
}
 8003104:	4618      	mov	r0, r3
 8003106:	371c      	adds	r7, #28
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr
 8003110:	00d8acbf 	.word	0x00d8acbf
 8003114:	00e4e1c0 	.word	0x00e4e1c0
 8003118:	00f42400 	.word	0x00f42400
 800311c:	01067380 	.word	0x01067380
 8003120:	011a499f 	.word	0x011a499f
 8003124:	01312cff 	.word	0x01312cff
 8003128:	014ca43f 	.word	0x014ca43f
 800312c:	016e3600 	.word	0x016e3600
 8003130:	01a6ab1f 	.word	0x01a6ab1f
 8003134:	01e84800 	.word	0x01e84800

08003138 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	f043 0201 	orr.w	r2, r3, #1
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800314c:	2300      	movs	r3, #0
}
 800314e:	4618      	mov	r0, r3
 8003150:	370c      	adds	r7, #12
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr

0800315a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800315a:	b480      	push	{r7}
 800315c:	b083      	sub	sp, #12
 800315e:	af00      	add	r7, sp, #0
 8003160:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	f023 0201 	bic.w	r2, r3, #1
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800316e:	2300      	movs	r3, #0
}
 8003170:	4618      	mov	r0, r3
 8003172:	370c      	adds	r7, #12
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr

0800317c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b084      	sub	sp, #16
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	460b      	mov	r3, r1
 8003186:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003188:	2300      	movs	r3, #0
 800318a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003198:	78fb      	ldrb	r3, [r7, #3]
 800319a:	2b01      	cmp	r3, #1
 800319c:	d115      	bne.n	80031ca <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	68db      	ldr	r3, [r3, #12]
 80031a2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80031aa:	2001      	movs	r0, #1
 80031ac:	f7fd fbda 	bl	8000964 <HAL_Delay>
      ms++;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	3301      	adds	r3, #1
 80031b4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f001 fa45 	bl	8004646 <USB_GetMode>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d01e      	beq.n	8003200 <USB_SetCurrentMode+0x84>
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2b31      	cmp	r3, #49	; 0x31
 80031c6:	d9f0      	bls.n	80031aa <USB_SetCurrentMode+0x2e>
 80031c8:	e01a      	b.n	8003200 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80031ca:	78fb      	ldrb	r3, [r7, #3]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d115      	bne.n	80031fc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80031dc:	2001      	movs	r0, #1
 80031de:	f7fd fbc1 	bl	8000964 <HAL_Delay>
      ms++;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	3301      	adds	r3, #1
 80031e6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f001 fa2c 	bl	8004646 <USB_GetMode>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d005      	beq.n	8003200 <USB_SetCurrentMode+0x84>
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2b31      	cmp	r3, #49	; 0x31
 80031f8:	d9f0      	bls.n	80031dc <USB_SetCurrentMode+0x60>
 80031fa:	e001      	b.n	8003200 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e005      	b.n	800320c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2b32      	cmp	r3, #50	; 0x32
 8003204:	d101      	bne.n	800320a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e000      	b.n	800320c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800320a:	2300      	movs	r3, #0
}
 800320c:	4618      	mov	r0, r3
 800320e:	3710      	adds	r7, #16
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}

08003214 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003214:	b084      	sub	sp, #16
 8003216:	b580      	push	{r7, lr}
 8003218:	b086      	sub	sp, #24
 800321a:	af00      	add	r7, sp, #0
 800321c:	6078      	str	r0, [r7, #4]
 800321e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003222:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003226:	2300      	movs	r3, #0
 8003228:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800322e:	2300      	movs	r3, #0
 8003230:	613b      	str	r3, [r7, #16]
 8003232:	e009      	b.n	8003248 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	3340      	adds	r3, #64	; 0x40
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	4413      	add	r3, r2
 800323e:	2200      	movs	r2, #0
 8003240:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	3301      	adds	r3, #1
 8003246:	613b      	str	r3, [r7, #16]
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	2b0e      	cmp	r3, #14
 800324c:	d9f2      	bls.n	8003234 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800324e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003250:	2b00      	cmp	r3, #0
 8003252:	d11c      	bne.n	800328e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	68fa      	ldr	r2, [r7, #12]
 800325e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003262:	f043 0302 	orr.w	r3, r3, #2
 8003266:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800326c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003278:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003284:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	639a      	str	r2, [r3, #56]	; 0x38
 800328c:	e00b      	b.n	80032a6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003292:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800329e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80032ac:	461a      	mov	r2, r3
 80032ae:	2300      	movs	r3, #0
 80032b0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032b8:	4619      	mov	r1, r3
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032c0:	461a      	mov	r2, r3
 80032c2:	680b      	ldr	r3, [r1, #0]
 80032c4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80032c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d10c      	bne.n	80032e6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80032cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d104      	bne.n	80032dc <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80032d2:	2100      	movs	r1, #0
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	f000 f965 	bl	80035a4 <USB_SetDevSpeed>
 80032da:	e008      	b.n	80032ee <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80032dc:	2101      	movs	r1, #1
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f000 f960 	bl	80035a4 <USB_SetDevSpeed>
 80032e4:	e003      	b.n	80032ee <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80032e6:	2103      	movs	r1, #3
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f000 f95b 	bl	80035a4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80032ee:	2110      	movs	r1, #16
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f000 f8f3 	bl	80034dc <USB_FlushTxFifo>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d001      	beq.n	8003300 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f000 f91f 	bl	8003544 <USB_FlushRxFifo>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d001      	beq.n	8003310 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003316:	461a      	mov	r2, r3
 8003318:	2300      	movs	r3, #0
 800331a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003322:	461a      	mov	r2, r3
 8003324:	2300      	movs	r3, #0
 8003326:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800332e:	461a      	mov	r2, r3
 8003330:	2300      	movs	r3, #0
 8003332:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003334:	2300      	movs	r3, #0
 8003336:	613b      	str	r3, [r7, #16]
 8003338:	e043      	b.n	80033c2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	015a      	lsls	r2, r3, #5
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	4413      	add	r3, r2
 8003342:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800334c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003350:	d118      	bne.n	8003384 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d10a      	bne.n	800336e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	015a      	lsls	r2, r3, #5
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	4413      	add	r3, r2
 8003360:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003364:	461a      	mov	r2, r3
 8003366:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800336a:	6013      	str	r3, [r2, #0]
 800336c:	e013      	b.n	8003396 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	015a      	lsls	r2, r3, #5
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	4413      	add	r3, r2
 8003376:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800337a:	461a      	mov	r2, r3
 800337c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003380:	6013      	str	r3, [r2, #0]
 8003382:	e008      	b.n	8003396 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	015a      	lsls	r2, r3, #5
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	4413      	add	r3, r2
 800338c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003390:	461a      	mov	r2, r3
 8003392:	2300      	movs	r3, #0
 8003394:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	015a      	lsls	r2, r3, #5
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	4413      	add	r3, r2
 800339e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033a2:	461a      	mov	r2, r3
 80033a4:	2300      	movs	r3, #0
 80033a6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	015a      	lsls	r2, r3, #5
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	4413      	add	r3, r2
 80033b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033b4:	461a      	mov	r2, r3
 80033b6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80033ba:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	3301      	adds	r3, #1
 80033c0:	613b      	str	r3, [r7, #16]
 80033c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c4:	693a      	ldr	r2, [r7, #16]
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d3b7      	bcc.n	800333a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80033ca:	2300      	movs	r3, #0
 80033cc:	613b      	str	r3, [r7, #16]
 80033ce:	e043      	b.n	8003458 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	015a      	lsls	r2, r3, #5
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	4413      	add	r3, r2
 80033d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80033e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80033e6:	d118      	bne.n	800341a <USB_DevInit+0x206>
    {
      if (i == 0U)
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d10a      	bne.n	8003404 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	015a      	lsls	r2, r3, #5
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	4413      	add	r3, r2
 80033f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033fa:	461a      	mov	r2, r3
 80033fc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003400:	6013      	str	r3, [r2, #0]
 8003402:	e013      	b.n	800342c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	015a      	lsls	r2, r3, #5
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	4413      	add	r3, r2
 800340c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003410:	461a      	mov	r2, r3
 8003412:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003416:	6013      	str	r3, [r2, #0]
 8003418:	e008      	b.n	800342c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	015a      	lsls	r2, r3, #5
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	4413      	add	r3, r2
 8003422:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003426:	461a      	mov	r2, r3
 8003428:	2300      	movs	r3, #0
 800342a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	015a      	lsls	r2, r3, #5
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	4413      	add	r3, r2
 8003434:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003438:	461a      	mov	r2, r3
 800343a:	2300      	movs	r3, #0
 800343c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	015a      	lsls	r2, r3, #5
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	4413      	add	r3, r2
 8003446:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800344a:	461a      	mov	r2, r3
 800344c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003450:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	3301      	adds	r3, #1
 8003456:	613b      	str	r3, [r7, #16]
 8003458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345a:	693a      	ldr	r2, [r7, #16]
 800345c:	429a      	cmp	r2, r3
 800345e:	d3b7      	bcc.n	80033d0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003466:	691b      	ldr	r3, [r3, #16]
 8003468:	68fa      	ldr	r2, [r7, #12]
 800346a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800346e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003472:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003480:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003484:	2b00      	cmp	r3, #0
 8003486:	d105      	bne.n	8003494 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	699b      	ldr	r3, [r3, #24]
 800348c:	f043 0210 	orr.w	r2, r3, #16
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	699a      	ldr	r2, [r3, #24]
 8003498:	4b0f      	ldr	r3, [pc, #60]	; (80034d8 <USB_DevInit+0x2c4>)
 800349a:	4313      	orrs	r3, r2
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80034a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d005      	beq.n	80034b2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	699b      	ldr	r3, [r3, #24]
 80034aa:	f043 0208 	orr.w	r2, r3, #8
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80034b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d107      	bne.n	80034c8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	699b      	ldr	r3, [r3, #24]
 80034bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80034c0:	f043 0304 	orr.w	r3, r3, #4
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80034c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3718      	adds	r7, #24
 80034ce:	46bd      	mov	sp, r7
 80034d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80034d4:	b004      	add	sp, #16
 80034d6:	4770      	bx	lr
 80034d8:	803c3800 	.word	0x803c3800

080034dc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80034dc:	b480      	push	{r7}
 80034de:	b085      	sub	sp, #20
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80034e6:	2300      	movs	r3, #0
 80034e8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	3301      	adds	r3, #1
 80034ee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	4a13      	ldr	r2, [pc, #76]	; (8003540 <USB_FlushTxFifo+0x64>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d901      	bls.n	80034fc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80034f8:	2303      	movs	r3, #3
 80034fa:	e01b      	b.n	8003534 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	691b      	ldr	r3, [r3, #16]
 8003500:	2b00      	cmp	r3, #0
 8003502:	daf2      	bge.n	80034ea <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003504:	2300      	movs	r3, #0
 8003506:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	019b      	lsls	r3, r3, #6
 800350c:	f043 0220 	orr.w	r2, r3, #32
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	3301      	adds	r3, #1
 8003518:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	4a08      	ldr	r2, [pc, #32]	; (8003540 <USB_FlushTxFifo+0x64>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d901      	bls.n	8003526 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e006      	b.n	8003534 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	691b      	ldr	r3, [r3, #16]
 800352a:	f003 0320 	and.w	r3, r3, #32
 800352e:	2b20      	cmp	r3, #32
 8003530:	d0f0      	beq.n	8003514 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003532:	2300      	movs	r3, #0
}
 8003534:	4618      	mov	r0, r3
 8003536:	3714      	adds	r7, #20
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr
 8003540:	00030d40 	.word	0x00030d40

08003544 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003544:	b480      	push	{r7}
 8003546:	b085      	sub	sp, #20
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800354c:	2300      	movs	r3, #0
 800354e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	3301      	adds	r3, #1
 8003554:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	4a11      	ldr	r2, [pc, #68]	; (80035a0 <USB_FlushRxFifo+0x5c>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d901      	bls.n	8003562 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	e018      	b.n	8003594 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	691b      	ldr	r3, [r3, #16]
 8003566:	2b00      	cmp	r3, #0
 8003568:	daf2      	bge.n	8003550 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800356a:	2300      	movs	r3, #0
 800356c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2210      	movs	r2, #16
 8003572:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	3301      	adds	r3, #1
 8003578:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	4a08      	ldr	r2, [pc, #32]	; (80035a0 <USB_FlushRxFifo+0x5c>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d901      	bls.n	8003586 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e006      	b.n	8003594 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	691b      	ldr	r3, [r3, #16]
 800358a:	f003 0310 	and.w	r3, r3, #16
 800358e:	2b10      	cmp	r3, #16
 8003590:	d0f0      	beq.n	8003574 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003592:	2300      	movs	r3, #0
}
 8003594:	4618      	mov	r0, r3
 8003596:	3714      	adds	r7, #20
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr
 80035a0:	00030d40 	.word	0x00030d40

080035a4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b085      	sub	sp, #20
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	460b      	mov	r3, r1
 80035ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	78fb      	ldrb	r3, [r7, #3]
 80035be:	68f9      	ldr	r1, [r7, #12]
 80035c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80035c4:	4313      	orrs	r3, r2
 80035c6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80035c8:	2300      	movs	r3, #0
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3714      	adds	r7, #20
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr

080035d6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80035d6:	b480      	push	{r7}
 80035d8:	b087      	sub	sp, #28
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	f003 0306 	and.w	r3, r3, #6
 80035ee:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d102      	bne.n	80035fc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80035f6:	2300      	movs	r3, #0
 80035f8:	75fb      	strb	r3, [r7, #23]
 80035fa:	e00a      	b.n	8003612 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d002      	beq.n	8003608 <USB_GetDevSpeed+0x32>
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2b06      	cmp	r3, #6
 8003606:	d102      	bne.n	800360e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003608:	2302      	movs	r3, #2
 800360a:	75fb      	strb	r3, [r7, #23]
 800360c:	e001      	b.n	8003612 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800360e:	230f      	movs	r3, #15
 8003610:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003612:	7dfb      	ldrb	r3, [r7, #23]
}
 8003614:	4618      	mov	r0, r3
 8003616:	371c      	adds	r7, #28
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr

08003620 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003620:	b480      	push	{r7}
 8003622:	b085      	sub	sp, #20
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	781b      	ldrb	r3, [r3, #0]
 8003632:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	785b      	ldrb	r3, [r3, #1]
 8003638:	2b01      	cmp	r3, #1
 800363a:	d13a      	bne.n	80036b2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003642:	69da      	ldr	r2, [r3, #28]
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	f003 030f 	and.w	r3, r3, #15
 800364c:	2101      	movs	r1, #1
 800364e:	fa01 f303 	lsl.w	r3, r1, r3
 8003652:	b29b      	uxth	r3, r3
 8003654:	68f9      	ldr	r1, [r7, #12]
 8003656:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800365a:	4313      	orrs	r3, r2
 800365c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	015a      	lsls	r2, r3, #5
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	4413      	add	r3, r2
 8003666:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003670:	2b00      	cmp	r3, #0
 8003672:	d155      	bne.n	8003720 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	015a      	lsls	r2, r3, #5
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	4413      	add	r3, r2
 800367c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	791b      	ldrb	r3, [r3, #4]
 800368e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003690:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	059b      	lsls	r3, r3, #22
 8003696:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003698:	4313      	orrs	r3, r2
 800369a:	68ba      	ldr	r2, [r7, #8]
 800369c:	0151      	lsls	r1, r2, #5
 800369e:	68fa      	ldr	r2, [r7, #12]
 80036a0:	440a      	add	r2, r1
 80036a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036ae:	6013      	str	r3, [r2, #0]
 80036b0:	e036      	b.n	8003720 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036b8:	69da      	ldr	r2, [r3, #28]
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	781b      	ldrb	r3, [r3, #0]
 80036be:	f003 030f 	and.w	r3, r3, #15
 80036c2:	2101      	movs	r1, #1
 80036c4:	fa01 f303 	lsl.w	r3, r1, r3
 80036c8:	041b      	lsls	r3, r3, #16
 80036ca:	68f9      	ldr	r1, [r7, #12]
 80036cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80036d0:	4313      	orrs	r3, r2
 80036d2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	015a      	lsls	r2, r3, #5
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	4413      	add	r3, r2
 80036dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d11a      	bne.n	8003720 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	015a      	lsls	r2, r3, #5
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	4413      	add	r3, r2
 80036f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	791b      	ldrb	r3, [r3, #4]
 8003704:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003706:	430b      	orrs	r3, r1
 8003708:	4313      	orrs	r3, r2
 800370a:	68ba      	ldr	r2, [r7, #8]
 800370c:	0151      	lsls	r1, r2, #5
 800370e:	68fa      	ldr	r2, [r7, #12]
 8003710:	440a      	add	r2, r1
 8003712:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003716:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800371a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800371e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003720:	2300      	movs	r3, #0
}
 8003722:	4618      	mov	r0, r3
 8003724:	3714      	adds	r7, #20
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr
	...

08003730 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003730:	b480      	push	{r7}
 8003732:	b085      	sub	sp, #20
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	781b      	ldrb	r3, [r3, #0]
 8003742:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	785b      	ldrb	r3, [r3, #1]
 8003748:	2b01      	cmp	r3, #1
 800374a:	d161      	bne.n	8003810 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	015a      	lsls	r2, r3, #5
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	4413      	add	r3, r2
 8003754:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800375e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003762:	d11f      	bne.n	80037a4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	015a      	lsls	r2, r3, #5
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	4413      	add	r3, r2
 800376c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	68ba      	ldr	r2, [r7, #8]
 8003774:	0151      	lsls	r1, r2, #5
 8003776:	68fa      	ldr	r2, [r7, #12]
 8003778:	440a      	add	r2, r1
 800377a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800377e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003782:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	015a      	lsls	r2, r3, #5
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	4413      	add	r3, r2
 800378c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	68ba      	ldr	r2, [r7, #8]
 8003794:	0151      	lsls	r1, r2, #5
 8003796:	68fa      	ldr	r2, [r7, #12]
 8003798:	440a      	add	r2, r1
 800379a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800379e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80037a2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	781b      	ldrb	r3, [r3, #0]
 80037b0:	f003 030f 	and.w	r3, r3, #15
 80037b4:	2101      	movs	r1, #1
 80037b6:	fa01 f303 	lsl.w	r3, r1, r3
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	43db      	mvns	r3, r3
 80037be:	68f9      	ldr	r1, [r7, #12]
 80037c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80037c4:	4013      	ands	r3, r2
 80037c6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037ce:	69da      	ldr	r2, [r3, #28]
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	f003 030f 	and.w	r3, r3, #15
 80037d8:	2101      	movs	r1, #1
 80037da:	fa01 f303 	lsl.w	r3, r1, r3
 80037de:	b29b      	uxth	r3, r3
 80037e0:	43db      	mvns	r3, r3
 80037e2:	68f9      	ldr	r1, [r7, #12]
 80037e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80037e8:	4013      	ands	r3, r2
 80037ea:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	015a      	lsls	r2, r3, #5
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	4413      	add	r3, r2
 80037f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	0159      	lsls	r1, r3, #5
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	440b      	add	r3, r1
 8003802:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003806:	4619      	mov	r1, r3
 8003808:	4b35      	ldr	r3, [pc, #212]	; (80038e0 <USB_DeactivateEndpoint+0x1b0>)
 800380a:	4013      	ands	r3, r2
 800380c:	600b      	str	r3, [r1, #0]
 800380e:	e060      	b.n	80038d2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	015a      	lsls	r2, r3, #5
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	4413      	add	r3, r2
 8003818:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003822:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003826:	d11f      	bne.n	8003868 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	015a      	lsls	r2, r3, #5
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	4413      	add	r3, r2
 8003830:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	68ba      	ldr	r2, [r7, #8]
 8003838:	0151      	lsls	r1, r2, #5
 800383a:	68fa      	ldr	r2, [r7, #12]
 800383c:	440a      	add	r2, r1
 800383e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003842:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003846:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	015a      	lsls	r2, r3, #5
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	4413      	add	r3, r2
 8003850:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	68ba      	ldr	r2, [r7, #8]
 8003858:	0151      	lsls	r1, r2, #5
 800385a:	68fa      	ldr	r2, [r7, #12]
 800385c:	440a      	add	r2, r1
 800385e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003862:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003866:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800386e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	781b      	ldrb	r3, [r3, #0]
 8003874:	f003 030f 	and.w	r3, r3, #15
 8003878:	2101      	movs	r1, #1
 800387a:	fa01 f303 	lsl.w	r3, r1, r3
 800387e:	041b      	lsls	r3, r3, #16
 8003880:	43db      	mvns	r3, r3
 8003882:	68f9      	ldr	r1, [r7, #12]
 8003884:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003888:	4013      	ands	r3, r2
 800388a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003892:	69da      	ldr	r2, [r3, #28]
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	781b      	ldrb	r3, [r3, #0]
 8003898:	f003 030f 	and.w	r3, r3, #15
 800389c:	2101      	movs	r1, #1
 800389e:	fa01 f303 	lsl.w	r3, r1, r3
 80038a2:	041b      	lsls	r3, r3, #16
 80038a4:	43db      	mvns	r3, r3
 80038a6:	68f9      	ldr	r1, [r7, #12]
 80038a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80038ac:	4013      	ands	r3, r2
 80038ae:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	015a      	lsls	r2, r3, #5
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	4413      	add	r3, r2
 80038b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	0159      	lsls	r1, r3, #5
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	440b      	add	r3, r1
 80038c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038ca:	4619      	mov	r1, r3
 80038cc:	4b05      	ldr	r3, [pc, #20]	; (80038e4 <USB_DeactivateEndpoint+0x1b4>)
 80038ce:	4013      	ands	r3, r2
 80038d0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80038d2:	2300      	movs	r3, #0
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3714      	adds	r7, #20
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr
 80038e0:	ec337800 	.word	0xec337800
 80038e4:	eff37800 	.word	0xeff37800

080038e8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b08a      	sub	sp, #40	; 0x28
 80038ec:	af02      	add	r7, sp, #8
 80038ee:	60f8      	str	r0, [r7, #12]
 80038f0:	60b9      	str	r1, [r7, #8]
 80038f2:	4613      	mov	r3, r2
 80038f4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	781b      	ldrb	r3, [r3, #0]
 80038fe:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	785b      	ldrb	r3, [r3, #1]
 8003904:	2b01      	cmp	r3, #1
 8003906:	f040 815c 	bne.w	8003bc2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	699b      	ldr	r3, [r3, #24]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d132      	bne.n	8003978 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003912:	69bb      	ldr	r3, [r7, #24]
 8003914:	015a      	lsls	r2, r3, #5
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	4413      	add	r3, r2
 800391a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800391e:	691b      	ldr	r3, [r3, #16]
 8003920:	69ba      	ldr	r2, [r7, #24]
 8003922:	0151      	lsls	r1, r2, #5
 8003924:	69fa      	ldr	r2, [r7, #28]
 8003926:	440a      	add	r2, r1
 8003928:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800392c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003930:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003934:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	015a      	lsls	r2, r3, #5
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	4413      	add	r3, r2
 800393e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003942:	691b      	ldr	r3, [r3, #16]
 8003944:	69ba      	ldr	r2, [r7, #24]
 8003946:	0151      	lsls	r1, r2, #5
 8003948:	69fa      	ldr	r2, [r7, #28]
 800394a:	440a      	add	r2, r1
 800394c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003950:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003954:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003956:	69bb      	ldr	r3, [r7, #24]
 8003958:	015a      	lsls	r2, r3, #5
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	4413      	add	r3, r2
 800395e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003962:	691b      	ldr	r3, [r3, #16]
 8003964:	69ba      	ldr	r2, [r7, #24]
 8003966:	0151      	lsls	r1, r2, #5
 8003968:	69fa      	ldr	r2, [r7, #28]
 800396a:	440a      	add	r2, r1
 800396c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003970:	0cdb      	lsrs	r3, r3, #19
 8003972:	04db      	lsls	r3, r3, #19
 8003974:	6113      	str	r3, [r2, #16]
 8003976:	e074      	b.n	8003a62 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	015a      	lsls	r2, r3, #5
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	4413      	add	r3, r2
 8003980:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003984:	691b      	ldr	r3, [r3, #16]
 8003986:	69ba      	ldr	r2, [r7, #24]
 8003988:	0151      	lsls	r1, r2, #5
 800398a:	69fa      	ldr	r2, [r7, #28]
 800398c:	440a      	add	r2, r1
 800398e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003992:	0cdb      	lsrs	r3, r3, #19
 8003994:	04db      	lsls	r3, r3, #19
 8003996:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003998:	69bb      	ldr	r3, [r7, #24]
 800399a:	015a      	lsls	r2, r3, #5
 800399c:	69fb      	ldr	r3, [r7, #28]
 800399e:	4413      	add	r3, r2
 80039a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039a4:	691b      	ldr	r3, [r3, #16]
 80039a6:	69ba      	ldr	r2, [r7, #24]
 80039a8:	0151      	lsls	r1, r2, #5
 80039aa:	69fa      	ldr	r2, [r7, #28]
 80039ac:	440a      	add	r2, r1
 80039ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039b2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80039b6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80039ba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80039bc:	69bb      	ldr	r3, [r7, #24]
 80039be:	015a      	lsls	r2, r3, #5
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	4413      	add	r3, r2
 80039c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039c8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	6999      	ldr	r1, [r3, #24]
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	440b      	add	r3, r1
 80039d4:	1e59      	subs	r1, r3, #1
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	68db      	ldr	r3, [r3, #12]
 80039da:	fbb1 f3f3 	udiv	r3, r1, r3
 80039de:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80039e0:	4b9d      	ldr	r3, [pc, #628]	; (8003c58 <USB_EPStartXfer+0x370>)
 80039e2:	400b      	ands	r3, r1
 80039e4:	69b9      	ldr	r1, [r7, #24]
 80039e6:	0148      	lsls	r0, r1, #5
 80039e8:	69f9      	ldr	r1, [r7, #28]
 80039ea:	4401      	add	r1, r0
 80039ec:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80039f0:	4313      	orrs	r3, r2
 80039f2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80039f4:	69bb      	ldr	r3, [r7, #24]
 80039f6:	015a      	lsls	r2, r3, #5
 80039f8:	69fb      	ldr	r3, [r7, #28]
 80039fa:	4413      	add	r3, r2
 80039fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a00:	691a      	ldr	r2, [r3, #16]
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	699b      	ldr	r3, [r3, #24]
 8003a06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a0a:	69b9      	ldr	r1, [r7, #24]
 8003a0c:	0148      	lsls	r0, r1, #5
 8003a0e:	69f9      	ldr	r1, [r7, #28]
 8003a10:	4401      	add	r1, r0
 8003a12:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003a16:	4313      	orrs	r3, r2
 8003a18:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	791b      	ldrb	r3, [r3, #4]
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d11f      	bne.n	8003a62 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003a22:	69bb      	ldr	r3, [r7, #24]
 8003a24:	015a      	lsls	r2, r3, #5
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	4413      	add	r3, r2
 8003a2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a2e:	691b      	ldr	r3, [r3, #16]
 8003a30:	69ba      	ldr	r2, [r7, #24]
 8003a32:	0151      	lsls	r1, r2, #5
 8003a34:	69fa      	ldr	r2, [r7, #28]
 8003a36:	440a      	add	r2, r1
 8003a38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a3c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003a40:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003a42:	69bb      	ldr	r3, [r7, #24]
 8003a44:	015a      	lsls	r2, r3, #5
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	4413      	add	r3, r2
 8003a4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a4e:	691b      	ldr	r3, [r3, #16]
 8003a50:	69ba      	ldr	r2, [r7, #24]
 8003a52:	0151      	lsls	r1, r2, #5
 8003a54:	69fa      	ldr	r2, [r7, #28]
 8003a56:	440a      	add	r2, r1
 8003a58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a5c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003a60:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003a62:	79fb      	ldrb	r3, [r7, #7]
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d14b      	bne.n	8003b00 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	695b      	ldr	r3, [r3, #20]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d009      	beq.n	8003a84 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	015a      	lsls	r2, r3, #5
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	4413      	add	r3, r2
 8003a78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	695b      	ldr	r3, [r3, #20]
 8003a82:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	791b      	ldrb	r3, [r3, #4]
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d128      	bne.n	8003ade <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003a8c:	69fb      	ldr	r3, [r7, #28]
 8003a8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d110      	bne.n	8003abe <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	015a      	lsls	r2, r3, #5
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	4413      	add	r3, r2
 8003aa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	69ba      	ldr	r2, [r7, #24]
 8003aac:	0151      	lsls	r1, r2, #5
 8003aae:	69fa      	ldr	r2, [r7, #28]
 8003ab0:	440a      	add	r2, r1
 8003ab2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ab6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003aba:	6013      	str	r3, [r2, #0]
 8003abc:	e00f      	b.n	8003ade <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003abe:	69bb      	ldr	r3, [r7, #24]
 8003ac0:	015a      	lsls	r2, r3, #5
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	4413      	add	r3, r2
 8003ac6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	69ba      	ldr	r2, [r7, #24]
 8003ace:	0151      	lsls	r1, r2, #5
 8003ad0:	69fa      	ldr	r2, [r7, #28]
 8003ad2:	440a      	add	r2, r1
 8003ad4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ad8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003adc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003ade:	69bb      	ldr	r3, [r7, #24]
 8003ae0:	015a      	lsls	r2, r3, #5
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	4413      	add	r3, r2
 8003ae6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	69ba      	ldr	r2, [r7, #24]
 8003aee:	0151      	lsls	r1, r2, #5
 8003af0:	69fa      	ldr	r2, [r7, #28]
 8003af2:	440a      	add	r2, r1
 8003af4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003af8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003afc:	6013      	str	r3, [r2, #0]
 8003afe:	e133      	b.n	8003d68 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003b00:	69bb      	ldr	r3, [r7, #24]
 8003b02:	015a      	lsls	r2, r3, #5
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	4413      	add	r3, r2
 8003b08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	69ba      	ldr	r2, [r7, #24]
 8003b10:	0151      	lsls	r1, r2, #5
 8003b12:	69fa      	ldr	r2, [r7, #28]
 8003b14:	440a      	add	r2, r1
 8003b16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b1a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003b1e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	791b      	ldrb	r3, [r3, #4]
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d015      	beq.n	8003b54 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	699b      	ldr	r3, [r3, #24]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	f000 811b 	beq.w	8003d68 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	781b      	ldrb	r3, [r3, #0]
 8003b3e:	f003 030f 	and.w	r3, r3, #15
 8003b42:	2101      	movs	r1, #1
 8003b44:	fa01 f303 	lsl.w	r3, r1, r3
 8003b48:	69f9      	ldr	r1, [r7, #28]
 8003b4a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	634b      	str	r3, [r1, #52]	; 0x34
 8003b52:	e109      	b.n	8003d68 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d110      	bne.n	8003b86 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003b64:	69bb      	ldr	r3, [r7, #24]
 8003b66:	015a      	lsls	r2, r3, #5
 8003b68:	69fb      	ldr	r3, [r7, #28]
 8003b6a:	4413      	add	r3, r2
 8003b6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	69ba      	ldr	r2, [r7, #24]
 8003b74:	0151      	lsls	r1, r2, #5
 8003b76:	69fa      	ldr	r2, [r7, #28]
 8003b78:	440a      	add	r2, r1
 8003b7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b7e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003b82:	6013      	str	r3, [r2, #0]
 8003b84:	e00f      	b.n	8003ba6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003b86:	69bb      	ldr	r3, [r7, #24]
 8003b88:	015a      	lsls	r2, r3, #5
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	4413      	add	r3, r2
 8003b8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	69ba      	ldr	r2, [r7, #24]
 8003b96:	0151      	lsls	r1, r2, #5
 8003b98:	69fa      	ldr	r2, [r7, #28]
 8003b9a:	440a      	add	r2, r1
 8003b9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ba0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ba4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	6919      	ldr	r1, [r3, #16]
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	781a      	ldrb	r2, [r3, #0]
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	699b      	ldr	r3, [r3, #24]
 8003bb2:	b298      	uxth	r0, r3
 8003bb4:	79fb      	ldrb	r3, [r7, #7]
 8003bb6:	9300      	str	r3, [sp, #0]
 8003bb8:	4603      	mov	r3, r0
 8003bba:	68f8      	ldr	r0, [r7, #12]
 8003bbc:	f000 fade 	bl	800417c <USB_WritePacket>
 8003bc0:	e0d2      	b.n	8003d68 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003bc2:	69bb      	ldr	r3, [r7, #24]
 8003bc4:	015a      	lsls	r2, r3, #5
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	4413      	add	r3, r2
 8003bca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bce:	691b      	ldr	r3, [r3, #16]
 8003bd0:	69ba      	ldr	r2, [r7, #24]
 8003bd2:	0151      	lsls	r1, r2, #5
 8003bd4:	69fa      	ldr	r2, [r7, #28]
 8003bd6:	440a      	add	r2, r1
 8003bd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003bdc:	0cdb      	lsrs	r3, r3, #19
 8003bde:	04db      	lsls	r3, r3, #19
 8003be0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003be2:	69bb      	ldr	r3, [r7, #24]
 8003be4:	015a      	lsls	r2, r3, #5
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	4413      	add	r3, r2
 8003bea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bee:	691b      	ldr	r3, [r3, #16]
 8003bf0:	69ba      	ldr	r2, [r7, #24]
 8003bf2:	0151      	lsls	r1, r2, #5
 8003bf4:	69fa      	ldr	r2, [r7, #28]
 8003bf6:	440a      	add	r2, r1
 8003bf8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003bfc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003c00:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003c04:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	699b      	ldr	r3, [r3, #24]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d126      	bne.n	8003c5c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003c0e:	69bb      	ldr	r3, [r7, #24]
 8003c10:	015a      	lsls	r2, r3, #5
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	4413      	add	r3, r2
 8003c16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c1a:	691a      	ldr	r2, [r3, #16]
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c24:	69b9      	ldr	r1, [r7, #24]
 8003c26:	0148      	lsls	r0, r1, #5
 8003c28:	69f9      	ldr	r1, [r7, #28]
 8003c2a:	4401      	add	r1, r0
 8003c2c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003c30:	4313      	orrs	r3, r2
 8003c32:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003c34:	69bb      	ldr	r3, [r7, #24]
 8003c36:	015a      	lsls	r2, r3, #5
 8003c38:	69fb      	ldr	r3, [r7, #28]
 8003c3a:	4413      	add	r3, r2
 8003c3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c40:	691b      	ldr	r3, [r3, #16]
 8003c42:	69ba      	ldr	r2, [r7, #24]
 8003c44:	0151      	lsls	r1, r2, #5
 8003c46:	69fa      	ldr	r2, [r7, #28]
 8003c48:	440a      	add	r2, r1
 8003c4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c4e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003c52:	6113      	str	r3, [r2, #16]
 8003c54:	e03a      	b.n	8003ccc <USB_EPStartXfer+0x3e4>
 8003c56:	bf00      	nop
 8003c58:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	699a      	ldr	r2, [r3, #24]
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	4413      	add	r3, r2
 8003c66:	1e5a      	subs	r2, r3, #1
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c70:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	8afa      	ldrh	r2, [r7, #22]
 8003c78:	fb03 f202 	mul.w	r2, r3, r2
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003c80:	69bb      	ldr	r3, [r7, #24]
 8003c82:	015a      	lsls	r2, r3, #5
 8003c84:	69fb      	ldr	r3, [r7, #28]
 8003c86:	4413      	add	r3, r2
 8003c88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c8c:	691a      	ldr	r2, [r3, #16]
 8003c8e:	8afb      	ldrh	r3, [r7, #22]
 8003c90:	04d9      	lsls	r1, r3, #19
 8003c92:	4b38      	ldr	r3, [pc, #224]	; (8003d74 <USB_EPStartXfer+0x48c>)
 8003c94:	400b      	ands	r3, r1
 8003c96:	69b9      	ldr	r1, [r7, #24]
 8003c98:	0148      	lsls	r0, r1, #5
 8003c9a:	69f9      	ldr	r1, [r7, #28]
 8003c9c:	4401      	add	r1, r0
 8003c9e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8003ca6:	69bb      	ldr	r3, [r7, #24]
 8003ca8:	015a      	lsls	r2, r3, #5
 8003caa:	69fb      	ldr	r3, [r7, #28]
 8003cac:	4413      	add	r3, r2
 8003cae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cb2:	691a      	ldr	r2, [r3, #16]
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	69db      	ldr	r3, [r3, #28]
 8003cb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cbc:	69b9      	ldr	r1, [r7, #24]
 8003cbe:	0148      	lsls	r0, r1, #5
 8003cc0:	69f9      	ldr	r1, [r7, #28]
 8003cc2:	4401      	add	r1, r0
 8003cc4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003ccc:	79fb      	ldrb	r3, [r7, #7]
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d10d      	bne.n	8003cee <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	691b      	ldr	r3, [r3, #16]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d009      	beq.n	8003cee <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	6919      	ldr	r1, [r3, #16]
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	015a      	lsls	r2, r3, #5
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	4413      	add	r3, r2
 8003ce6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cea:	460a      	mov	r2, r1
 8003cec:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	791b      	ldrb	r3, [r3, #4]
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d128      	bne.n	8003d48 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d110      	bne.n	8003d28 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003d06:	69bb      	ldr	r3, [r7, #24]
 8003d08:	015a      	lsls	r2, r3, #5
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	4413      	add	r3, r2
 8003d0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	69ba      	ldr	r2, [r7, #24]
 8003d16:	0151      	lsls	r1, r2, #5
 8003d18:	69fa      	ldr	r2, [r7, #28]
 8003d1a:	440a      	add	r2, r1
 8003d1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d20:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003d24:	6013      	str	r3, [r2, #0]
 8003d26:	e00f      	b.n	8003d48 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003d28:	69bb      	ldr	r3, [r7, #24]
 8003d2a:	015a      	lsls	r2, r3, #5
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	4413      	add	r3, r2
 8003d30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	69ba      	ldr	r2, [r7, #24]
 8003d38:	0151      	lsls	r1, r2, #5
 8003d3a:	69fa      	ldr	r2, [r7, #28]
 8003d3c:	440a      	add	r2, r1
 8003d3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d46:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003d48:	69bb      	ldr	r3, [r7, #24]
 8003d4a:	015a      	lsls	r2, r3, #5
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	4413      	add	r3, r2
 8003d50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	69ba      	ldr	r2, [r7, #24]
 8003d58:	0151      	lsls	r1, r2, #5
 8003d5a:	69fa      	ldr	r2, [r7, #28]
 8003d5c:	440a      	add	r2, r1
 8003d5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d62:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003d66:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003d68:	2300      	movs	r3, #0
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3720      	adds	r7, #32
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	1ff80000 	.word	0x1ff80000

08003d78 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b087      	sub	sp, #28
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	60f8      	str	r0, [r7, #12]
 8003d80:	60b9      	str	r1, [r7, #8]
 8003d82:	4613      	mov	r3, r2
 8003d84:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	781b      	ldrb	r3, [r3, #0]
 8003d8e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	785b      	ldrb	r3, [r3, #1]
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	f040 80ce 	bne.w	8003f36 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	699b      	ldr	r3, [r3, #24]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d132      	bne.n	8003e08 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	015a      	lsls	r2, r3, #5
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	4413      	add	r3, r2
 8003daa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dae:	691b      	ldr	r3, [r3, #16]
 8003db0:	693a      	ldr	r2, [r7, #16]
 8003db2:	0151      	lsls	r1, r2, #5
 8003db4:	697a      	ldr	r2, [r7, #20]
 8003db6:	440a      	add	r2, r1
 8003db8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003dbc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003dc0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003dc4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	015a      	lsls	r2, r3, #5
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	4413      	add	r3, r2
 8003dce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dd2:	691b      	ldr	r3, [r3, #16]
 8003dd4:	693a      	ldr	r2, [r7, #16]
 8003dd6:	0151      	lsls	r1, r2, #5
 8003dd8:	697a      	ldr	r2, [r7, #20]
 8003dda:	440a      	add	r2, r1
 8003ddc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003de0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003de4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	015a      	lsls	r2, r3, #5
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	4413      	add	r3, r2
 8003dee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003df2:	691b      	ldr	r3, [r3, #16]
 8003df4:	693a      	ldr	r2, [r7, #16]
 8003df6:	0151      	lsls	r1, r2, #5
 8003df8:	697a      	ldr	r2, [r7, #20]
 8003dfa:	440a      	add	r2, r1
 8003dfc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e00:	0cdb      	lsrs	r3, r3, #19
 8003e02:	04db      	lsls	r3, r3, #19
 8003e04:	6113      	str	r3, [r2, #16]
 8003e06:	e04e      	b.n	8003ea6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	015a      	lsls	r2, r3, #5
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	4413      	add	r3, r2
 8003e10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e14:	691b      	ldr	r3, [r3, #16]
 8003e16:	693a      	ldr	r2, [r7, #16]
 8003e18:	0151      	lsls	r1, r2, #5
 8003e1a:	697a      	ldr	r2, [r7, #20]
 8003e1c:	440a      	add	r2, r1
 8003e1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e22:	0cdb      	lsrs	r3, r3, #19
 8003e24:	04db      	lsls	r3, r3, #19
 8003e26:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	015a      	lsls	r2, r3, #5
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	4413      	add	r3, r2
 8003e30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e34:	691b      	ldr	r3, [r3, #16]
 8003e36:	693a      	ldr	r2, [r7, #16]
 8003e38:	0151      	lsls	r1, r2, #5
 8003e3a:	697a      	ldr	r2, [r7, #20]
 8003e3c:	440a      	add	r2, r1
 8003e3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e42:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003e46:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003e4a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	699a      	ldr	r2, [r3, #24]
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d903      	bls.n	8003e60 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	68da      	ldr	r2, [r3, #12]
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	015a      	lsls	r2, r3, #5
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	4413      	add	r3, r2
 8003e68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e6c:	691b      	ldr	r3, [r3, #16]
 8003e6e:	693a      	ldr	r2, [r7, #16]
 8003e70:	0151      	lsls	r1, r2, #5
 8003e72:	697a      	ldr	r2, [r7, #20]
 8003e74:	440a      	add	r2, r1
 8003e76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e7a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003e7e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	015a      	lsls	r2, r3, #5
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	4413      	add	r3, r2
 8003e88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e8c:	691a      	ldr	r2, [r3, #16]
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	699b      	ldr	r3, [r3, #24]
 8003e92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e96:	6939      	ldr	r1, [r7, #16]
 8003e98:	0148      	lsls	r0, r1, #5
 8003e9a:	6979      	ldr	r1, [r7, #20]
 8003e9c:	4401      	add	r1, r0
 8003e9e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003ea6:	79fb      	ldrb	r3, [r7, #7]
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d11e      	bne.n	8003eea <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	695b      	ldr	r3, [r3, #20]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d009      	beq.n	8003ec8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	015a      	lsls	r2, r3, #5
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	4413      	add	r3, r2
 8003ebc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	695b      	ldr	r3, [r3, #20]
 8003ec6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	015a      	lsls	r2, r3, #5
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	4413      	add	r3, r2
 8003ed0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	693a      	ldr	r2, [r7, #16]
 8003ed8:	0151      	lsls	r1, r2, #5
 8003eda:	697a      	ldr	r2, [r7, #20]
 8003edc:	440a      	add	r2, r1
 8003ede:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ee2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003ee6:	6013      	str	r3, [r2, #0]
 8003ee8:	e097      	b.n	800401a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	015a      	lsls	r2, r3, #5
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	4413      	add	r3, r2
 8003ef2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	693a      	ldr	r2, [r7, #16]
 8003efa:	0151      	lsls	r1, r2, #5
 8003efc:	697a      	ldr	r2, [r7, #20]
 8003efe:	440a      	add	r2, r1
 8003f00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f04:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003f08:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	699b      	ldr	r3, [r3, #24]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	f000 8083 	beq.w	800401a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	781b      	ldrb	r3, [r3, #0]
 8003f20:	f003 030f 	and.w	r3, r3, #15
 8003f24:	2101      	movs	r1, #1
 8003f26:	fa01 f303 	lsl.w	r3, r1, r3
 8003f2a:	6979      	ldr	r1, [r7, #20]
 8003f2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f30:	4313      	orrs	r3, r2
 8003f32:	634b      	str	r3, [r1, #52]	; 0x34
 8003f34:	e071      	b.n	800401a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	015a      	lsls	r2, r3, #5
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	4413      	add	r3, r2
 8003f3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f42:	691b      	ldr	r3, [r3, #16]
 8003f44:	693a      	ldr	r2, [r7, #16]
 8003f46:	0151      	lsls	r1, r2, #5
 8003f48:	697a      	ldr	r2, [r7, #20]
 8003f4a:	440a      	add	r2, r1
 8003f4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f50:	0cdb      	lsrs	r3, r3, #19
 8003f52:	04db      	lsls	r3, r3, #19
 8003f54:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	015a      	lsls	r2, r3, #5
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	4413      	add	r3, r2
 8003f5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f62:	691b      	ldr	r3, [r3, #16]
 8003f64:	693a      	ldr	r2, [r7, #16]
 8003f66:	0151      	lsls	r1, r2, #5
 8003f68:	697a      	ldr	r2, [r7, #20]
 8003f6a:	440a      	add	r2, r1
 8003f6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f70:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003f74:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003f78:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	699b      	ldr	r3, [r3, #24]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d003      	beq.n	8003f8a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	68da      	ldr	r2, [r3, #12]
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	68da      	ldr	r2, [r3, #12]
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	015a      	lsls	r2, r3, #5
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	4413      	add	r3, r2
 8003f9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f9e:	691b      	ldr	r3, [r3, #16]
 8003fa0:	693a      	ldr	r2, [r7, #16]
 8003fa2:	0151      	lsls	r1, r2, #5
 8003fa4:	697a      	ldr	r2, [r7, #20]
 8003fa6:	440a      	add	r2, r1
 8003fa8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003fb0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	015a      	lsls	r2, r3, #5
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	4413      	add	r3, r2
 8003fba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fbe:	691a      	ldr	r2, [r3, #16]
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	69db      	ldr	r3, [r3, #28]
 8003fc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fc8:	6939      	ldr	r1, [r7, #16]
 8003fca:	0148      	lsls	r0, r1, #5
 8003fcc:	6979      	ldr	r1, [r7, #20]
 8003fce:	4401      	add	r1, r0
 8003fd0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8003fd8:	79fb      	ldrb	r3, [r7, #7]
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d10d      	bne.n	8003ffa <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	691b      	ldr	r3, [r3, #16]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d009      	beq.n	8003ffa <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	6919      	ldr	r1, [r3, #16]
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	015a      	lsls	r2, r3, #5
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	4413      	add	r3, r2
 8003ff2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ff6:	460a      	mov	r2, r1
 8003ff8:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	015a      	lsls	r2, r3, #5
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	4413      	add	r3, r2
 8004002:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	693a      	ldr	r2, [r7, #16]
 800400a:	0151      	lsls	r1, r2, #5
 800400c:	697a      	ldr	r2, [r7, #20]
 800400e:	440a      	add	r2, r1
 8004010:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004014:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004018:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800401a:	2300      	movs	r3, #0
}
 800401c:	4618      	mov	r0, r3
 800401e:	371c      	adds	r7, #28
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr

08004028 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004028:	b480      	push	{r7}
 800402a:	b087      	sub	sp, #28
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004032:	2300      	movs	r3, #0
 8004034:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004036:	2300      	movs	r3, #0
 8004038:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	785b      	ldrb	r3, [r3, #1]
 8004042:	2b01      	cmp	r3, #1
 8004044:	d14a      	bne.n	80040dc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	781b      	ldrb	r3, [r3, #0]
 800404a:	015a      	lsls	r2, r3, #5
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	4413      	add	r3, r2
 8004050:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800405a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800405e:	f040 8086 	bne.w	800416e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	781b      	ldrb	r3, [r3, #0]
 8004066:	015a      	lsls	r2, r3, #5
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	4413      	add	r3, r2
 800406c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	683a      	ldr	r2, [r7, #0]
 8004074:	7812      	ldrb	r2, [r2, #0]
 8004076:	0151      	lsls	r1, r2, #5
 8004078:	693a      	ldr	r2, [r7, #16]
 800407a:	440a      	add	r2, r1
 800407c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004080:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004084:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	781b      	ldrb	r3, [r3, #0]
 800408a:	015a      	lsls	r2, r3, #5
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	4413      	add	r3, r2
 8004090:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	683a      	ldr	r2, [r7, #0]
 8004098:	7812      	ldrb	r2, [r2, #0]
 800409a:	0151      	lsls	r1, r2, #5
 800409c:	693a      	ldr	r2, [r7, #16]
 800409e:	440a      	add	r2, r1
 80040a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80040a8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	3301      	adds	r3, #1
 80040ae:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f242 7210 	movw	r2, #10000	; 0x2710
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d902      	bls.n	80040c0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	75fb      	strb	r3, [r7, #23]
          break;
 80040be:	e056      	b.n	800416e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	781b      	ldrb	r3, [r3, #0]
 80040c4:	015a      	lsls	r2, r3, #5
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	4413      	add	r3, r2
 80040ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80040d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80040d8:	d0e7      	beq.n	80040aa <USB_EPStopXfer+0x82>
 80040da:	e048      	b.n	800416e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	781b      	ldrb	r3, [r3, #0]
 80040e0:	015a      	lsls	r2, r3, #5
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	4413      	add	r3, r2
 80040e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80040f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80040f4:	d13b      	bne.n	800416e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	781b      	ldrb	r3, [r3, #0]
 80040fa:	015a      	lsls	r2, r3, #5
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	4413      	add	r3, r2
 8004100:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	683a      	ldr	r2, [r7, #0]
 8004108:	7812      	ldrb	r2, [r2, #0]
 800410a:	0151      	lsls	r1, r2, #5
 800410c:	693a      	ldr	r2, [r7, #16]
 800410e:	440a      	add	r2, r1
 8004110:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004114:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004118:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	781b      	ldrb	r3, [r3, #0]
 800411e:	015a      	lsls	r2, r3, #5
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	4413      	add	r3, r2
 8004124:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	683a      	ldr	r2, [r7, #0]
 800412c:	7812      	ldrb	r2, [r2, #0]
 800412e:	0151      	lsls	r1, r2, #5
 8004130:	693a      	ldr	r2, [r7, #16]
 8004132:	440a      	add	r2, r1
 8004134:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004138:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800413c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	3301      	adds	r3, #1
 8004142:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f242 7210 	movw	r2, #10000	; 0x2710
 800414a:	4293      	cmp	r3, r2
 800414c:	d902      	bls.n	8004154 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	75fb      	strb	r3, [r7, #23]
          break;
 8004152:	e00c      	b.n	800416e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	015a      	lsls	r2, r3, #5
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	4413      	add	r3, r2
 800415e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004168:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800416c:	d0e7      	beq.n	800413e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800416e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004170:	4618      	mov	r0, r3
 8004172:	371c      	adds	r7, #28
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr

0800417c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800417c:	b480      	push	{r7}
 800417e:	b089      	sub	sp, #36	; 0x24
 8004180:	af00      	add	r7, sp, #0
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	60b9      	str	r1, [r7, #8]
 8004186:	4611      	mov	r1, r2
 8004188:	461a      	mov	r2, r3
 800418a:	460b      	mov	r3, r1
 800418c:	71fb      	strb	r3, [r7, #7]
 800418e:	4613      	mov	r3, r2
 8004190:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800419a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d123      	bne.n	80041ea <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80041a2:	88bb      	ldrh	r3, [r7, #4]
 80041a4:	3303      	adds	r3, #3
 80041a6:	089b      	lsrs	r3, r3, #2
 80041a8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80041aa:	2300      	movs	r3, #0
 80041ac:	61bb      	str	r3, [r7, #24]
 80041ae:	e018      	b.n	80041e2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80041b0:	79fb      	ldrb	r3, [r7, #7]
 80041b2:	031a      	lsls	r2, r3, #12
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	4413      	add	r3, r2
 80041b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041bc:	461a      	mov	r2, r3
 80041be:	69fb      	ldr	r3, [r7, #28]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80041c4:	69fb      	ldr	r3, [r7, #28]
 80041c6:	3301      	adds	r3, #1
 80041c8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80041ca:	69fb      	ldr	r3, [r7, #28]
 80041cc:	3301      	adds	r3, #1
 80041ce:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80041d0:	69fb      	ldr	r3, [r7, #28]
 80041d2:	3301      	adds	r3, #1
 80041d4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80041d6:	69fb      	ldr	r3, [r7, #28]
 80041d8:	3301      	adds	r3, #1
 80041da:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80041dc:	69bb      	ldr	r3, [r7, #24]
 80041de:	3301      	adds	r3, #1
 80041e0:	61bb      	str	r3, [r7, #24]
 80041e2:	69ba      	ldr	r2, [r7, #24]
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d3e2      	bcc.n	80041b0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80041ea:	2300      	movs	r3, #0
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3724      	adds	r7, #36	; 0x24
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr

080041f8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b08b      	sub	sp, #44	; 0x2c
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	60f8      	str	r0, [r7, #12]
 8004200:	60b9      	str	r1, [r7, #8]
 8004202:	4613      	mov	r3, r2
 8004204:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800420e:	88fb      	ldrh	r3, [r7, #6]
 8004210:	089b      	lsrs	r3, r3, #2
 8004212:	b29b      	uxth	r3, r3
 8004214:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004216:	88fb      	ldrh	r3, [r7, #6]
 8004218:	f003 0303 	and.w	r3, r3, #3
 800421c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800421e:	2300      	movs	r3, #0
 8004220:	623b      	str	r3, [r7, #32]
 8004222:	e014      	b.n	800424e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004224:	69bb      	ldr	r3, [r7, #24]
 8004226:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800422e:	601a      	str	r2, [r3, #0]
    pDest++;
 8004230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004232:	3301      	adds	r3, #1
 8004234:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004238:	3301      	adds	r3, #1
 800423a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800423c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800423e:	3301      	adds	r3, #1
 8004240:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004244:	3301      	adds	r3, #1
 8004246:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004248:	6a3b      	ldr	r3, [r7, #32]
 800424a:	3301      	adds	r3, #1
 800424c:	623b      	str	r3, [r7, #32]
 800424e:	6a3a      	ldr	r2, [r7, #32]
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	429a      	cmp	r2, r3
 8004254:	d3e6      	bcc.n	8004224 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004256:	8bfb      	ldrh	r3, [r7, #30]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d01e      	beq.n	800429a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800425c:	2300      	movs	r3, #0
 800425e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004260:	69bb      	ldr	r3, [r7, #24]
 8004262:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004266:	461a      	mov	r2, r3
 8004268:	f107 0310 	add.w	r3, r7, #16
 800426c:	6812      	ldr	r2, [r2, #0]
 800426e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004270:	693a      	ldr	r2, [r7, #16]
 8004272:	6a3b      	ldr	r3, [r7, #32]
 8004274:	b2db      	uxtb	r3, r3
 8004276:	00db      	lsls	r3, r3, #3
 8004278:	fa22 f303 	lsr.w	r3, r2, r3
 800427c:	b2da      	uxtb	r2, r3
 800427e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004280:	701a      	strb	r2, [r3, #0]
      i++;
 8004282:	6a3b      	ldr	r3, [r7, #32]
 8004284:	3301      	adds	r3, #1
 8004286:	623b      	str	r3, [r7, #32]
      pDest++;
 8004288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428a:	3301      	adds	r3, #1
 800428c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800428e:	8bfb      	ldrh	r3, [r7, #30]
 8004290:	3b01      	subs	r3, #1
 8004292:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004294:	8bfb      	ldrh	r3, [r7, #30]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d1ea      	bne.n	8004270 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800429a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800429c:	4618      	mov	r0, r3
 800429e:	372c      	adds	r7, #44	; 0x2c
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr

080042a8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b085      	sub	sp, #20
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	785b      	ldrb	r3, [r3, #1]
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d12c      	bne.n	800431e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	015a      	lsls	r2, r3, #5
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	4413      	add	r3, r2
 80042cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	db12      	blt.n	80042fc <USB_EPSetStall+0x54>
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d00f      	beq.n	80042fc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	015a      	lsls	r2, r3, #5
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	4413      	add	r3, r2
 80042e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	68ba      	ldr	r2, [r7, #8]
 80042ec:	0151      	lsls	r1, r2, #5
 80042ee:	68fa      	ldr	r2, [r7, #12]
 80042f0:	440a      	add	r2, r1
 80042f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042f6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80042fa:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	015a      	lsls	r2, r3, #5
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	4413      	add	r3, r2
 8004304:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	68ba      	ldr	r2, [r7, #8]
 800430c:	0151      	lsls	r1, r2, #5
 800430e:	68fa      	ldr	r2, [r7, #12]
 8004310:	440a      	add	r2, r1
 8004312:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004316:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800431a:	6013      	str	r3, [r2, #0]
 800431c:	e02b      	b.n	8004376 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	015a      	lsls	r2, r3, #5
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	4413      	add	r3, r2
 8004326:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2b00      	cmp	r3, #0
 800432e:	db12      	blt.n	8004356 <USB_EPSetStall+0xae>
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d00f      	beq.n	8004356 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	015a      	lsls	r2, r3, #5
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	4413      	add	r3, r2
 800433e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	68ba      	ldr	r2, [r7, #8]
 8004346:	0151      	lsls	r1, r2, #5
 8004348:	68fa      	ldr	r2, [r7, #12]
 800434a:	440a      	add	r2, r1
 800434c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004350:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004354:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	015a      	lsls	r2, r3, #5
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	4413      	add	r3, r2
 800435e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	68ba      	ldr	r2, [r7, #8]
 8004366:	0151      	lsls	r1, r2, #5
 8004368:	68fa      	ldr	r2, [r7, #12]
 800436a:	440a      	add	r2, r1
 800436c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004370:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004374:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004376:	2300      	movs	r3, #0
}
 8004378:	4618      	mov	r0, r3
 800437a:	3714      	adds	r7, #20
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr

08004384 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004384:	b480      	push	{r7}
 8004386:	b085      	sub	sp, #20
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	781b      	ldrb	r3, [r3, #0]
 8004396:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	785b      	ldrb	r3, [r3, #1]
 800439c:	2b01      	cmp	r3, #1
 800439e:	d128      	bne.n	80043f2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	015a      	lsls	r2, r3, #5
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	4413      	add	r3, r2
 80043a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	68ba      	ldr	r2, [r7, #8]
 80043b0:	0151      	lsls	r1, r2, #5
 80043b2:	68fa      	ldr	r2, [r7, #12]
 80043b4:	440a      	add	r2, r1
 80043b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80043be:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	791b      	ldrb	r3, [r3, #4]
 80043c4:	2b03      	cmp	r3, #3
 80043c6:	d003      	beq.n	80043d0 <USB_EPClearStall+0x4c>
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	791b      	ldrb	r3, [r3, #4]
 80043cc:	2b02      	cmp	r3, #2
 80043ce:	d138      	bne.n	8004442 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	015a      	lsls	r2, r3, #5
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	4413      	add	r3, r2
 80043d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	68ba      	ldr	r2, [r7, #8]
 80043e0:	0151      	lsls	r1, r2, #5
 80043e2:	68fa      	ldr	r2, [r7, #12]
 80043e4:	440a      	add	r2, r1
 80043e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043ee:	6013      	str	r3, [r2, #0]
 80043f0:	e027      	b.n	8004442 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	015a      	lsls	r2, r3, #5
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	4413      	add	r3, r2
 80043fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	68ba      	ldr	r2, [r7, #8]
 8004402:	0151      	lsls	r1, r2, #5
 8004404:	68fa      	ldr	r2, [r7, #12]
 8004406:	440a      	add	r2, r1
 8004408:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800440c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004410:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	791b      	ldrb	r3, [r3, #4]
 8004416:	2b03      	cmp	r3, #3
 8004418:	d003      	beq.n	8004422 <USB_EPClearStall+0x9e>
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	791b      	ldrb	r3, [r3, #4]
 800441e:	2b02      	cmp	r3, #2
 8004420:	d10f      	bne.n	8004442 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	015a      	lsls	r2, r3, #5
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	4413      	add	r3, r2
 800442a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	68ba      	ldr	r2, [r7, #8]
 8004432:	0151      	lsls	r1, r2, #5
 8004434:	68fa      	ldr	r2, [r7, #12]
 8004436:	440a      	add	r2, r1
 8004438:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800443c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004440:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004442:	2300      	movs	r3, #0
}
 8004444:	4618      	mov	r0, r3
 8004446:	3714      	adds	r7, #20
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr

08004450 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004450:	b480      	push	{r7}
 8004452:	b085      	sub	sp, #20
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
 8004458:	460b      	mov	r3, r1
 800445a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	68fa      	ldr	r2, [r7, #12]
 800446a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800446e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004472:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	78fb      	ldrb	r3, [r7, #3]
 800447e:	011b      	lsls	r3, r3, #4
 8004480:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004484:	68f9      	ldr	r1, [r7, #12]
 8004486:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800448a:	4313      	orrs	r3, r2
 800448c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800448e:	2300      	movs	r3, #0
}
 8004490:	4618      	mov	r0, r3
 8004492:	3714      	adds	r7, #20
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr

0800449c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800449c:	b480      	push	{r7}
 800449e:	b085      	sub	sp, #20
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	68fa      	ldr	r2, [r7, #12]
 80044b2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80044b6:	f023 0303 	bic.w	r3, r3, #3
 80044ba:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	68fa      	ldr	r2, [r7, #12]
 80044c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044ca:	f023 0302 	bic.w	r3, r3, #2
 80044ce:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80044d0:	2300      	movs	r3, #0
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3714      	adds	r7, #20
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr

080044de <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80044de:	b480      	push	{r7}
 80044e0:	b085      	sub	sp, #20
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	68fa      	ldr	r2, [r7, #12]
 80044f4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80044f8:	f023 0303 	bic.w	r3, r3, #3
 80044fc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	68fa      	ldr	r2, [r7, #12]
 8004508:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800450c:	f043 0302 	orr.w	r3, r3, #2
 8004510:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004512:	2300      	movs	r3, #0
}
 8004514:	4618      	mov	r0, r3
 8004516:	3714      	adds	r7, #20
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr

08004520 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004520:	b480      	push	{r7}
 8004522:	b085      	sub	sp, #20
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	695b      	ldr	r3, [r3, #20]
 800452c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	699b      	ldr	r3, [r3, #24]
 8004532:	68fa      	ldr	r2, [r7, #12]
 8004534:	4013      	ands	r3, r2
 8004536:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004538:	68fb      	ldr	r3, [r7, #12]
}
 800453a:	4618      	mov	r0, r3
 800453c:	3714      	adds	r7, #20
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr

08004546 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004546:	b480      	push	{r7}
 8004548:	b085      	sub	sp, #20
 800454a:	af00      	add	r7, sp, #0
 800454c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004558:	699b      	ldr	r3, [r3, #24]
 800455a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004562:	69db      	ldr	r3, [r3, #28]
 8004564:	68ba      	ldr	r2, [r7, #8]
 8004566:	4013      	ands	r3, r2
 8004568:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	0c1b      	lsrs	r3, r3, #16
}
 800456e:	4618      	mov	r0, r3
 8004570:	3714      	adds	r7, #20
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr

0800457a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800457a:	b480      	push	{r7}
 800457c:	b085      	sub	sp, #20
 800457e:	af00      	add	r7, sp, #0
 8004580:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800458c:	699b      	ldr	r3, [r3, #24]
 800458e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004596:	69db      	ldr	r3, [r3, #28]
 8004598:	68ba      	ldr	r2, [r7, #8]
 800459a:	4013      	ands	r3, r2
 800459c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	b29b      	uxth	r3, r3
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3714      	adds	r7, #20
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr

080045ae <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80045ae:	b480      	push	{r7}
 80045b0:	b085      	sub	sp, #20
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	6078      	str	r0, [r7, #4]
 80045b6:	460b      	mov	r3, r1
 80045b8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80045be:	78fb      	ldrb	r3, [r7, #3]
 80045c0:	015a      	lsls	r2, r3, #5
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	4413      	add	r3, r2
 80045c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045d4:	695b      	ldr	r3, [r3, #20]
 80045d6:	68ba      	ldr	r2, [r7, #8]
 80045d8:	4013      	ands	r3, r2
 80045da:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80045dc:	68bb      	ldr	r3, [r7, #8]
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3714      	adds	r7, #20
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr

080045ea <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80045ea:	b480      	push	{r7}
 80045ec:	b087      	sub	sp, #28
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	6078      	str	r0, [r7, #4]
 80045f2:	460b      	mov	r3, r1
 80045f4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004600:	691b      	ldr	r3, [r3, #16]
 8004602:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800460a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800460c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800460e:	78fb      	ldrb	r3, [r7, #3]
 8004610:	f003 030f 	and.w	r3, r3, #15
 8004614:	68fa      	ldr	r2, [r7, #12]
 8004616:	fa22 f303 	lsr.w	r3, r2, r3
 800461a:	01db      	lsls	r3, r3, #7
 800461c:	b2db      	uxtb	r3, r3
 800461e:	693a      	ldr	r2, [r7, #16]
 8004620:	4313      	orrs	r3, r2
 8004622:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004624:	78fb      	ldrb	r3, [r7, #3]
 8004626:	015a      	lsls	r2, r3, #5
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	4413      	add	r3, r2
 800462c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	693a      	ldr	r2, [r7, #16]
 8004634:	4013      	ands	r3, r2
 8004636:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004638:	68bb      	ldr	r3, [r7, #8]
}
 800463a:	4618      	mov	r0, r3
 800463c:	371c      	adds	r7, #28
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr

08004646 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004646:	b480      	push	{r7}
 8004648:	b083      	sub	sp, #12
 800464a:	af00      	add	r7, sp, #0
 800464c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	695b      	ldr	r3, [r3, #20]
 8004652:	f003 0301 	and.w	r3, r3, #1
}
 8004656:	4618      	mov	r0, r3
 8004658:	370c      	adds	r7, #12
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr

08004662 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004662:	b480      	push	{r7}
 8004664:	b085      	sub	sp, #20
 8004666:	af00      	add	r7, sp, #0
 8004668:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	68fa      	ldr	r2, [r7, #12]
 8004678:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800467c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004680:	f023 0307 	bic.w	r3, r3, #7
 8004684:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	68fa      	ldr	r2, [r7, #12]
 8004690:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004694:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004698:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800469a:	2300      	movs	r3, #0
}
 800469c:	4618      	mov	r0, r3
 800469e:	3714      	adds	r7, #20
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr

080046a8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b087      	sub	sp, #28
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	60f8      	str	r0, [r7, #12]
 80046b0:	460b      	mov	r3, r1
 80046b2:	607a      	str	r2, [r7, #4]
 80046b4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	333c      	adds	r3, #60	; 0x3c
 80046be:	3304      	adds	r3, #4
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	4a26      	ldr	r2, [pc, #152]	; (8004760 <USB_EP0_OutStart+0xb8>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d90a      	bls.n	80046e2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80046d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046dc:	d101      	bne.n	80046e2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80046de:	2300      	movs	r3, #0
 80046e0:	e037      	b.n	8004752 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046e8:	461a      	mov	r2, r3
 80046ea:	2300      	movs	r3, #0
 80046ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046f4:	691b      	ldr	r3, [r3, #16]
 80046f6:	697a      	ldr	r2, [r7, #20]
 80046f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004700:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004708:	691b      	ldr	r3, [r3, #16]
 800470a:	697a      	ldr	r2, [r7, #20]
 800470c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004710:	f043 0318 	orr.w	r3, r3, #24
 8004714:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800471c:	691b      	ldr	r3, [r3, #16]
 800471e:	697a      	ldr	r2, [r7, #20]
 8004720:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004724:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004728:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800472a:	7afb      	ldrb	r3, [r7, #11]
 800472c:	2b01      	cmp	r3, #1
 800472e:	d10f      	bne.n	8004750 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004736:	461a      	mov	r2, r3
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	697a      	ldr	r2, [r7, #20]
 8004746:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800474a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800474e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004750:	2300      	movs	r3, #0
}
 8004752:	4618      	mov	r0, r3
 8004754:	371c      	adds	r7, #28
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr
 800475e:	bf00      	nop
 8004760:	4f54300a 	.word	0x4f54300a

08004764 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004764:	b480      	push	{r7}
 8004766:	b085      	sub	sp, #20
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800476c:	2300      	movs	r3, #0
 800476e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	3301      	adds	r3, #1
 8004774:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	4a13      	ldr	r2, [pc, #76]	; (80047c8 <USB_CoreReset+0x64>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d901      	bls.n	8004782 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800477e:	2303      	movs	r3, #3
 8004780:	e01b      	b.n	80047ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	691b      	ldr	r3, [r3, #16]
 8004786:	2b00      	cmp	r3, #0
 8004788:	daf2      	bge.n	8004770 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800478a:	2300      	movs	r3, #0
 800478c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	691b      	ldr	r3, [r3, #16]
 8004792:	f043 0201 	orr.w	r2, r3, #1
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	3301      	adds	r3, #1
 800479e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	4a09      	ldr	r2, [pc, #36]	; (80047c8 <USB_CoreReset+0x64>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d901      	bls.n	80047ac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80047a8:	2303      	movs	r3, #3
 80047aa:	e006      	b.n	80047ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	691b      	ldr	r3, [r3, #16]
 80047b0:	f003 0301 	and.w	r3, r3, #1
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d0f0      	beq.n	800479a <USB_CoreReset+0x36>

  return HAL_OK;
 80047b8:	2300      	movs	r3, #0
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3714      	adds	r7, #20
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr
 80047c6:	bf00      	nop
 80047c8:	00030d40 	.word	0x00030d40

080047cc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b084      	sub	sp, #16
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	460b      	mov	r3, r1
 80047d6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80047d8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80047dc:	f002 fc1e 	bl	800701c <USBD_static_malloc>
 80047e0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d109      	bne.n	80047fc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	32b0      	adds	r2, #176	; 0xb0
 80047f2:	2100      	movs	r1, #0
 80047f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80047f8:	2302      	movs	r3, #2
 80047fa:	e0d4      	b.n	80049a6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80047fc:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8004800:	2100      	movs	r1, #0
 8004802:	68f8      	ldr	r0, [r7, #12]
 8004804:	f002 fc72 	bl	80070ec <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	32b0      	adds	r2, #176	; 0xb0
 8004812:	68f9      	ldr	r1, [r7, #12]
 8004814:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	32b0      	adds	r2, #176	; 0xb0
 8004822:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	7c1b      	ldrb	r3, [r3, #16]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d138      	bne.n	80048a6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004834:	4b5e      	ldr	r3, [pc, #376]	; (80049b0 <USBD_CDC_Init+0x1e4>)
 8004836:	7819      	ldrb	r1, [r3, #0]
 8004838:	f44f 7300 	mov.w	r3, #512	; 0x200
 800483c:	2202      	movs	r2, #2
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f002 fac9 	bl	8006dd6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004844:	4b5a      	ldr	r3, [pc, #360]	; (80049b0 <USBD_CDC_Init+0x1e4>)
 8004846:	781b      	ldrb	r3, [r3, #0]
 8004848:	f003 020f 	and.w	r2, r3, #15
 800484c:	6879      	ldr	r1, [r7, #4]
 800484e:	4613      	mov	r3, r2
 8004850:	009b      	lsls	r3, r3, #2
 8004852:	4413      	add	r3, r2
 8004854:	009b      	lsls	r3, r3, #2
 8004856:	440b      	add	r3, r1
 8004858:	3324      	adds	r3, #36	; 0x24
 800485a:	2201      	movs	r2, #1
 800485c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800485e:	4b55      	ldr	r3, [pc, #340]	; (80049b4 <USBD_CDC_Init+0x1e8>)
 8004860:	7819      	ldrb	r1, [r3, #0]
 8004862:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004866:	2202      	movs	r2, #2
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f002 fab4 	bl	8006dd6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800486e:	4b51      	ldr	r3, [pc, #324]	; (80049b4 <USBD_CDC_Init+0x1e8>)
 8004870:	781b      	ldrb	r3, [r3, #0]
 8004872:	f003 020f 	and.w	r2, r3, #15
 8004876:	6879      	ldr	r1, [r7, #4]
 8004878:	4613      	mov	r3, r2
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	4413      	add	r3, r2
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	440b      	add	r3, r1
 8004882:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004886:	2201      	movs	r2, #1
 8004888:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800488a:	4b4b      	ldr	r3, [pc, #300]	; (80049b8 <USBD_CDC_Init+0x1ec>)
 800488c:	781b      	ldrb	r3, [r3, #0]
 800488e:	f003 020f 	and.w	r2, r3, #15
 8004892:	6879      	ldr	r1, [r7, #4]
 8004894:	4613      	mov	r3, r2
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	4413      	add	r3, r2
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	440b      	add	r3, r1
 800489e:	3326      	adds	r3, #38	; 0x26
 80048a0:	2210      	movs	r2, #16
 80048a2:	801a      	strh	r2, [r3, #0]
 80048a4:	e035      	b.n	8004912 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80048a6:	4b42      	ldr	r3, [pc, #264]	; (80049b0 <USBD_CDC_Init+0x1e4>)
 80048a8:	7819      	ldrb	r1, [r3, #0]
 80048aa:	2340      	movs	r3, #64	; 0x40
 80048ac:	2202      	movs	r2, #2
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f002 fa91 	bl	8006dd6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80048b4:	4b3e      	ldr	r3, [pc, #248]	; (80049b0 <USBD_CDC_Init+0x1e4>)
 80048b6:	781b      	ldrb	r3, [r3, #0]
 80048b8:	f003 020f 	and.w	r2, r3, #15
 80048bc:	6879      	ldr	r1, [r7, #4]
 80048be:	4613      	mov	r3, r2
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	4413      	add	r3, r2
 80048c4:	009b      	lsls	r3, r3, #2
 80048c6:	440b      	add	r3, r1
 80048c8:	3324      	adds	r3, #36	; 0x24
 80048ca:	2201      	movs	r2, #1
 80048cc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80048ce:	4b39      	ldr	r3, [pc, #228]	; (80049b4 <USBD_CDC_Init+0x1e8>)
 80048d0:	7819      	ldrb	r1, [r3, #0]
 80048d2:	2340      	movs	r3, #64	; 0x40
 80048d4:	2202      	movs	r2, #2
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f002 fa7d 	bl	8006dd6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80048dc:	4b35      	ldr	r3, [pc, #212]	; (80049b4 <USBD_CDC_Init+0x1e8>)
 80048de:	781b      	ldrb	r3, [r3, #0]
 80048e0:	f003 020f 	and.w	r2, r3, #15
 80048e4:	6879      	ldr	r1, [r7, #4]
 80048e6:	4613      	mov	r3, r2
 80048e8:	009b      	lsls	r3, r3, #2
 80048ea:	4413      	add	r3, r2
 80048ec:	009b      	lsls	r3, r3, #2
 80048ee:	440b      	add	r3, r1
 80048f0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80048f4:	2201      	movs	r2, #1
 80048f6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80048f8:	4b2f      	ldr	r3, [pc, #188]	; (80049b8 <USBD_CDC_Init+0x1ec>)
 80048fa:	781b      	ldrb	r3, [r3, #0]
 80048fc:	f003 020f 	and.w	r2, r3, #15
 8004900:	6879      	ldr	r1, [r7, #4]
 8004902:	4613      	mov	r3, r2
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	4413      	add	r3, r2
 8004908:	009b      	lsls	r3, r3, #2
 800490a:	440b      	add	r3, r1
 800490c:	3326      	adds	r3, #38	; 0x26
 800490e:	2210      	movs	r2, #16
 8004910:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004912:	4b29      	ldr	r3, [pc, #164]	; (80049b8 <USBD_CDC_Init+0x1ec>)
 8004914:	7819      	ldrb	r1, [r3, #0]
 8004916:	2308      	movs	r3, #8
 8004918:	2203      	movs	r2, #3
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f002 fa5b 	bl	8006dd6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8004920:	4b25      	ldr	r3, [pc, #148]	; (80049b8 <USBD_CDC_Init+0x1ec>)
 8004922:	781b      	ldrb	r3, [r3, #0]
 8004924:	f003 020f 	and.w	r2, r3, #15
 8004928:	6879      	ldr	r1, [r7, #4]
 800492a:	4613      	mov	r3, r2
 800492c:	009b      	lsls	r3, r3, #2
 800492e:	4413      	add	r3, r2
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	440b      	add	r3, r1
 8004934:	3324      	adds	r3, #36	; 0x24
 8004936:	2201      	movs	r2, #1
 8004938:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2200      	movs	r2, #0
 800493e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	33b0      	adds	r3, #176	; 0xb0
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	4413      	add	r3, r2
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2200      	movs	r2, #0
 800495a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2200      	movs	r2, #0
 8004962:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800496c:	2b00      	cmp	r3, #0
 800496e:	d101      	bne.n	8004974 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8004970:	2302      	movs	r3, #2
 8004972:	e018      	b.n	80049a6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	7c1b      	ldrb	r3, [r3, #16]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d10a      	bne.n	8004992 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800497c:	4b0d      	ldr	r3, [pc, #52]	; (80049b4 <USBD_CDC_Init+0x1e8>)
 800497e:	7819      	ldrb	r1, [r3, #0]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004986:	f44f 7300 	mov.w	r3, #512	; 0x200
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f002 fb12 	bl	8006fb4 <USBD_LL_PrepareReceive>
 8004990:	e008      	b.n	80049a4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004992:	4b08      	ldr	r3, [pc, #32]	; (80049b4 <USBD_CDC_Init+0x1e8>)
 8004994:	7819      	ldrb	r1, [r3, #0]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800499c:	2340      	movs	r3, #64	; 0x40
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f002 fb08 	bl	8006fb4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80049a4:	2300      	movs	r3, #0
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3710      	adds	r7, #16
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
 80049ae:	bf00      	nop
 80049b0:	20000093 	.word	0x20000093
 80049b4:	20000094 	.word	0x20000094
 80049b8:	20000095 	.word	0x20000095

080049bc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b082      	sub	sp, #8
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	460b      	mov	r3, r1
 80049c6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80049c8:	4b3a      	ldr	r3, [pc, #232]	; (8004ab4 <USBD_CDC_DeInit+0xf8>)
 80049ca:	781b      	ldrb	r3, [r3, #0]
 80049cc:	4619      	mov	r1, r3
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f002 fa27 	bl	8006e22 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80049d4:	4b37      	ldr	r3, [pc, #220]	; (8004ab4 <USBD_CDC_DeInit+0xf8>)
 80049d6:	781b      	ldrb	r3, [r3, #0]
 80049d8:	f003 020f 	and.w	r2, r3, #15
 80049dc:	6879      	ldr	r1, [r7, #4]
 80049de:	4613      	mov	r3, r2
 80049e0:	009b      	lsls	r3, r3, #2
 80049e2:	4413      	add	r3, r2
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	440b      	add	r3, r1
 80049e8:	3324      	adds	r3, #36	; 0x24
 80049ea:	2200      	movs	r2, #0
 80049ec:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80049ee:	4b32      	ldr	r3, [pc, #200]	; (8004ab8 <USBD_CDC_DeInit+0xfc>)
 80049f0:	781b      	ldrb	r3, [r3, #0]
 80049f2:	4619      	mov	r1, r3
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f002 fa14 	bl	8006e22 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80049fa:	4b2f      	ldr	r3, [pc, #188]	; (8004ab8 <USBD_CDC_DeInit+0xfc>)
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	f003 020f 	and.w	r2, r3, #15
 8004a02:	6879      	ldr	r1, [r7, #4]
 8004a04:	4613      	mov	r3, r2
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	4413      	add	r3, r2
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	440b      	add	r3, r1
 8004a0e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004a12:	2200      	movs	r2, #0
 8004a14:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8004a16:	4b29      	ldr	r3, [pc, #164]	; (8004abc <USBD_CDC_DeInit+0x100>)
 8004a18:	781b      	ldrb	r3, [r3, #0]
 8004a1a:	4619      	mov	r1, r3
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f002 fa00 	bl	8006e22 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8004a22:	4b26      	ldr	r3, [pc, #152]	; (8004abc <USBD_CDC_DeInit+0x100>)
 8004a24:	781b      	ldrb	r3, [r3, #0]
 8004a26:	f003 020f 	and.w	r2, r3, #15
 8004a2a:	6879      	ldr	r1, [r7, #4]
 8004a2c:	4613      	mov	r3, r2
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	4413      	add	r3, r2
 8004a32:	009b      	lsls	r3, r3, #2
 8004a34:	440b      	add	r3, r1
 8004a36:	3324      	adds	r3, #36	; 0x24
 8004a38:	2200      	movs	r2, #0
 8004a3a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8004a3c:	4b1f      	ldr	r3, [pc, #124]	; (8004abc <USBD_CDC_DeInit+0x100>)
 8004a3e:	781b      	ldrb	r3, [r3, #0]
 8004a40:	f003 020f 	and.w	r2, r3, #15
 8004a44:	6879      	ldr	r1, [r7, #4]
 8004a46:	4613      	mov	r3, r2
 8004a48:	009b      	lsls	r3, r3, #2
 8004a4a:	4413      	add	r3, r2
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	440b      	add	r3, r1
 8004a50:	3326      	adds	r3, #38	; 0x26
 8004a52:	2200      	movs	r2, #0
 8004a54:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	32b0      	adds	r2, #176	; 0xb0
 8004a60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d01f      	beq.n	8004aa8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	33b0      	adds	r3, #176	; 0xb0
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	4413      	add	r3, r2
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	32b0      	adds	r2, #176	; 0xb0
 8004a86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f002 fad4 	bl	8007038 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	32b0      	adds	r2, #176	; 0xb0
 8004a9a:	2100      	movs	r1, #0
 8004a9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004aa8:	2300      	movs	r3, #0
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3708      	adds	r7, #8
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}
 8004ab2:	bf00      	nop
 8004ab4:	20000093 	.word	0x20000093
 8004ab8:	20000094 	.word	0x20000094
 8004abc:	20000095 	.word	0x20000095

08004ac0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b086      	sub	sp, #24
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	32b0      	adds	r2, #176	; 0xb0
 8004ad4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ad8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8004ada:	2300      	movs	r3, #0
 8004adc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d101      	bne.n	8004af0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8004aec:	2303      	movs	r3, #3
 8004aee:	e0bf      	b.n	8004c70 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	781b      	ldrb	r3, [r3, #0]
 8004af4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d050      	beq.n	8004b9e <USBD_CDC_Setup+0xde>
 8004afc:	2b20      	cmp	r3, #32
 8004afe:	f040 80af 	bne.w	8004c60 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	88db      	ldrh	r3, [r3, #6]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d03a      	beq.n	8004b80 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	781b      	ldrb	r3, [r3, #0]
 8004b0e:	b25b      	sxtb	r3, r3
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	da1b      	bge.n	8004b4c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	33b0      	adds	r3, #176	; 0xb0
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	4413      	add	r3, r2
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	683a      	ldr	r2, [r7, #0]
 8004b28:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8004b2a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004b2c:	683a      	ldr	r2, [r7, #0]
 8004b2e:	88d2      	ldrh	r2, [r2, #6]
 8004b30:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	88db      	ldrh	r3, [r3, #6]
 8004b36:	2b07      	cmp	r3, #7
 8004b38:	bf28      	it	cs
 8004b3a:	2307      	movcs	r3, #7
 8004b3c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	89fa      	ldrh	r2, [r7, #14]
 8004b42:	4619      	mov	r1, r3
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	f001 fd43 	bl	80065d0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8004b4a:	e090      	b.n	8004c6e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	785a      	ldrb	r2, [r3, #1]
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	88db      	ldrh	r3, [r3, #6]
 8004b5a:	2b3f      	cmp	r3, #63	; 0x3f
 8004b5c:	d803      	bhi.n	8004b66 <USBD_CDC_Setup+0xa6>
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	88db      	ldrh	r3, [r3, #6]
 8004b62:	b2da      	uxtb	r2, r3
 8004b64:	e000      	b.n	8004b68 <USBD_CDC_Setup+0xa8>
 8004b66:	2240      	movs	r2, #64	; 0x40
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8004b6e:	6939      	ldr	r1, [r7, #16]
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8004b76:	461a      	mov	r2, r3
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f001 fd55 	bl	8006628 <USBD_CtlPrepareRx>
      break;
 8004b7e:	e076      	b.n	8004c6e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	33b0      	adds	r3, #176	; 0xb0
 8004b8a:	009b      	lsls	r3, r3, #2
 8004b8c:	4413      	add	r3, r2
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	683a      	ldr	r2, [r7, #0]
 8004b94:	7850      	ldrb	r0, [r2, #1]
 8004b96:	2200      	movs	r2, #0
 8004b98:	6839      	ldr	r1, [r7, #0]
 8004b9a:	4798      	blx	r3
      break;
 8004b9c:	e067      	b.n	8004c6e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	785b      	ldrb	r3, [r3, #1]
 8004ba2:	2b0b      	cmp	r3, #11
 8004ba4:	d851      	bhi.n	8004c4a <USBD_CDC_Setup+0x18a>
 8004ba6:	a201      	add	r2, pc, #4	; (adr r2, 8004bac <USBD_CDC_Setup+0xec>)
 8004ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bac:	08004bdd 	.word	0x08004bdd
 8004bb0:	08004c59 	.word	0x08004c59
 8004bb4:	08004c4b 	.word	0x08004c4b
 8004bb8:	08004c4b 	.word	0x08004c4b
 8004bbc:	08004c4b 	.word	0x08004c4b
 8004bc0:	08004c4b 	.word	0x08004c4b
 8004bc4:	08004c4b 	.word	0x08004c4b
 8004bc8:	08004c4b 	.word	0x08004c4b
 8004bcc:	08004c4b 	.word	0x08004c4b
 8004bd0:	08004c4b 	.word	0x08004c4b
 8004bd4:	08004c07 	.word	0x08004c07
 8004bd8:	08004c31 	.word	0x08004c31
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	2b03      	cmp	r3, #3
 8004be6:	d107      	bne.n	8004bf8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004be8:	f107 030a 	add.w	r3, r7, #10
 8004bec:	2202      	movs	r2, #2
 8004bee:	4619      	mov	r1, r3
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f001 fced 	bl	80065d0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004bf6:	e032      	b.n	8004c5e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8004bf8:	6839      	ldr	r1, [r7, #0]
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f001 fc77 	bl	80064ee <USBD_CtlError>
            ret = USBD_FAIL;
 8004c00:	2303      	movs	r3, #3
 8004c02:	75fb      	strb	r3, [r7, #23]
          break;
 8004c04:	e02b      	b.n	8004c5e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	2b03      	cmp	r3, #3
 8004c10:	d107      	bne.n	8004c22 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8004c12:	f107 030d 	add.w	r3, r7, #13
 8004c16:	2201      	movs	r2, #1
 8004c18:	4619      	mov	r1, r3
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f001 fcd8 	bl	80065d0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004c20:	e01d      	b.n	8004c5e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8004c22:	6839      	ldr	r1, [r7, #0]
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	f001 fc62 	bl	80064ee <USBD_CtlError>
            ret = USBD_FAIL;
 8004c2a:	2303      	movs	r3, #3
 8004c2c:	75fb      	strb	r3, [r7, #23]
          break;
 8004c2e:	e016      	b.n	8004c5e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	2b03      	cmp	r3, #3
 8004c3a:	d00f      	beq.n	8004c5c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8004c3c:	6839      	ldr	r1, [r7, #0]
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f001 fc55 	bl	80064ee <USBD_CtlError>
            ret = USBD_FAIL;
 8004c44:	2303      	movs	r3, #3
 8004c46:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8004c48:	e008      	b.n	8004c5c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8004c4a:	6839      	ldr	r1, [r7, #0]
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f001 fc4e 	bl	80064ee <USBD_CtlError>
          ret = USBD_FAIL;
 8004c52:	2303      	movs	r3, #3
 8004c54:	75fb      	strb	r3, [r7, #23]
          break;
 8004c56:	e002      	b.n	8004c5e <USBD_CDC_Setup+0x19e>
          break;
 8004c58:	bf00      	nop
 8004c5a:	e008      	b.n	8004c6e <USBD_CDC_Setup+0x1ae>
          break;
 8004c5c:	bf00      	nop
      }
      break;
 8004c5e:	e006      	b.n	8004c6e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8004c60:	6839      	ldr	r1, [r7, #0]
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f001 fc43 	bl	80064ee <USBD_CtlError>
      ret = USBD_FAIL;
 8004c68:	2303      	movs	r3, #3
 8004c6a:	75fb      	strb	r3, [r7, #23]
      break;
 8004c6c:	bf00      	nop
  }

  return (uint8_t)ret;
 8004c6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3718      	adds	r7, #24
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}

08004c78 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b084      	sub	sp, #16
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
 8004c80:	460b      	mov	r3, r1
 8004c82:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8004c8a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	32b0      	adds	r2, #176	; 0xb0
 8004c96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d101      	bne.n	8004ca2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8004c9e:	2303      	movs	r3, #3
 8004ca0:	e065      	b.n	8004d6e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	32b0      	adds	r2, #176	; 0xb0
 8004cac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cb0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8004cb2:	78fb      	ldrb	r3, [r7, #3]
 8004cb4:	f003 020f 	and.w	r2, r3, #15
 8004cb8:	6879      	ldr	r1, [r7, #4]
 8004cba:	4613      	mov	r3, r2
 8004cbc:	009b      	lsls	r3, r3, #2
 8004cbe:	4413      	add	r3, r2
 8004cc0:	009b      	lsls	r3, r3, #2
 8004cc2:	440b      	add	r3, r1
 8004cc4:	3318      	adds	r3, #24
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d02f      	beq.n	8004d2c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8004ccc:	78fb      	ldrb	r3, [r7, #3]
 8004cce:	f003 020f 	and.w	r2, r3, #15
 8004cd2:	6879      	ldr	r1, [r7, #4]
 8004cd4:	4613      	mov	r3, r2
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	4413      	add	r3, r2
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	440b      	add	r3, r1
 8004cde:	3318      	adds	r3, #24
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	78fb      	ldrb	r3, [r7, #3]
 8004ce4:	f003 010f 	and.w	r1, r3, #15
 8004ce8:	68f8      	ldr	r0, [r7, #12]
 8004cea:	460b      	mov	r3, r1
 8004cec:	00db      	lsls	r3, r3, #3
 8004cee:	440b      	add	r3, r1
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	4403      	add	r3, r0
 8004cf4:	3348      	adds	r3, #72	; 0x48
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	fbb2 f1f3 	udiv	r1, r2, r3
 8004cfc:	fb01 f303 	mul.w	r3, r1, r3
 8004d00:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d112      	bne.n	8004d2c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8004d06:	78fb      	ldrb	r3, [r7, #3]
 8004d08:	f003 020f 	and.w	r2, r3, #15
 8004d0c:	6879      	ldr	r1, [r7, #4]
 8004d0e:	4613      	mov	r3, r2
 8004d10:	009b      	lsls	r3, r3, #2
 8004d12:	4413      	add	r3, r2
 8004d14:	009b      	lsls	r3, r3, #2
 8004d16:	440b      	add	r3, r1
 8004d18:	3318      	adds	r3, #24
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004d1e:	78f9      	ldrb	r1, [r7, #3]
 8004d20:	2300      	movs	r3, #0
 8004d22:	2200      	movs	r2, #0
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	f002 f924 	bl	8006f72 <USBD_LL_Transmit>
 8004d2a:	e01f      	b.n	8004d6c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	33b0      	adds	r3, #176	; 0xb0
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	4413      	add	r3, r2
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	691b      	ldr	r3, [r3, #16]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d010      	beq.n	8004d6c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004d50:	687a      	ldr	r2, [r7, #4]
 8004d52:	33b0      	adds	r3, #176	; 0xb0
 8004d54:	009b      	lsls	r3, r3, #2
 8004d56:	4413      	add	r3, r2
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	691b      	ldr	r3, [r3, #16]
 8004d5c:	68ba      	ldr	r2, [r7, #8]
 8004d5e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8004d62:	68ba      	ldr	r2, [r7, #8]
 8004d64:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8004d68:	78fa      	ldrb	r2, [r7, #3]
 8004d6a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8004d6c:	2300      	movs	r3, #0
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3710      	adds	r7, #16
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}

08004d76 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004d76:	b580      	push	{r7, lr}
 8004d78:	b084      	sub	sp, #16
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	6078      	str	r0, [r7, #4]
 8004d7e:	460b      	mov	r3, r1
 8004d80:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	32b0      	adds	r2, #176	; 0xb0
 8004d8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d90:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	32b0      	adds	r2, #176	; 0xb0
 8004d9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d101      	bne.n	8004da8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8004da4:	2303      	movs	r3, #3
 8004da6:	e01a      	b.n	8004dde <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004da8:	78fb      	ldrb	r3, [r7, #3]
 8004daa:	4619      	mov	r1, r3
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f002 f922 	bl	8006ff6 <USBD_LL_GetRxDataSize>
 8004db2:	4602      	mov	r2, r0
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004dc0:	687a      	ldr	r2, [r7, #4]
 8004dc2:	33b0      	adds	r3, #176	; 0xb0
 8004dc4:	009b      	lsls	r3, r3, #2
 8004dc6:	4413      	add	r3, r2
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	68db      	ldr	r3, [r3, #12]
 8004dcc:	68fa      	ldr	r2, [r7, #12]
 8004dce:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8004dd2:	68fa      	ldr	r2, [r7, #12]
 8004dd4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8004dd8:	4611      	mov	r1, r2
 8004dda:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8004ddc:	2300      	movs	r3, #0
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3710      	adds	r7, #16
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}

08004de6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004de6:	b580      	push	{r7, lr}
 8004de8:	b084      	sub	sp, #16
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	32b0      	adds	r2, #176	; 0xb0
 8004df8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dfc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d101      	bne.n	8004e08 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004e04:	2303      	movs	r3, #3
 8004e06:	e025      	b.n	8004e54 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	33b0      	adds	r3, #176	; 0xb0
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	4413      	add	r3, r2
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d01a      	beq.n	8004e52 <USBD_CDC_EP0_RxReady+0x6c>
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004e22:	2bff      	cmp	r3, #255	; 0xff
 8004e24:	d015      	beq.n	8004e52 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004e2c:	687a      	ldr	r2, [r7, #4]
 8004e2e:	33b0      	adds	r3, #176	; 0xb0
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	4413      	add	r3, r2
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	68fa      	ldr	r2, [r7, #12]
 8004e3a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8004e3e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8004e40:	68fa      	ldr	r2, [r7, #12]
 8004e42:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8004e46:	b292      	uxth	r2, r2
 8004e48:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	22ff      	movs	r2, #255	; 0xff
 8004e4e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8004e52:	2300      	movs	r3, #0
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	3710      	adds	r7, #16
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}

08004e5c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b086      	sub	sp, #24
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004e64:	2182      	movs	r1, #130	; 0x82
 8004e66:	4818      	ldr	r0, [pc, #96]	; (8004ec8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004e68:	f000 fd09 	bl	800587e <USBD_GetEpDesc>
 8004e6c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004e6e:	2101      	movs	r1, #1
 8004e70:	4815      	ldr	r0, [pc, #84]	; (8004ec8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004e72:	f000 fd04 	bl	800587e <USBD_GetEpDesc>
 8004e76:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004e78:	2181      	movs	r1, #129	; 0x81
 8004e7a:	4813      	ldr	r0, [pc, #76]	; (8004ec8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004e7c:	f000 fcff 	bl	800587e <USBD_GetEpDesc>
 8004e80:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d002      	beq.n	8004e8e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	2210      	movs	r2, #16
 8004e8c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d006      	beq.n	8004ea2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	2200      	movs	r2, #0
 8004e98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e9c:	711a      	strb	r2, [r3, #4]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d006      	beq.n	8004eb6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004eb0:	711a      	strb	r2, [r3, #4]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2243      	movs	r2, #67	; 0x43
 8004eba:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004ebc:	4b02      	ldr	r3, [pc, #8]	; (8004ec8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3718      	adds	r7, #24
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	bf00      	nop
 8004ec8:	20000050 	.word	0x20000050

08004ecc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b086      	sub	sp, #24
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004ed4:	2182      	movs	r1, #130	; 0x82
 8004ed6:	4818      	ldr	r0, [pc, #96]	; (8004f38 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004ed8:	f000 fcd1 	bl	800587e <USBD_GetEpDesc>
 8004edc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004ede:	2101      	movs	r1, #1
 8004ee0:	4815      	ldr	r0, [pc, #84]	; (8004f38 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004ee2:	f000 fccc 	bl	800587e <USBD_GetEpDesc>
 8004ee6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004ee8:	2181      	movs	r1, #129	; 0x81
 8004eea:	4813      	ldr	r0, [pc, #76]	; (8004f38 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004eec:	f000 fcc7 	bl	800587e <USBD_GetEpDesc>
 8004ef0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d002      	beq.n	8004efe <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	2210      	movs	r2, #16
 8004efc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d006      	beq.n	8004f12 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	2200      	movs	r2, #0
 8004f08:	711a      	strb	r2, [r3, #4]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	f042 0202 	orr.w	r2, r2, #2
 8004f10:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d006      	beq.n	8004f26 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	711a      	strb	r2, [r3, #4]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f042 0202 	orr.w	r2, r2, #2
 8004f24:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2243      	movs	r2, #67	; 0x43
 8004f2a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004f2c:	4b02      	ldr	r3, [pc, #8]	; (8004f38 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3718      	adds	r7, #24
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	bf00      	nop
 8004f38:	20000050 	.word	0x20000050

08004f3c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b086      	sub	sp, #24
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004f44:	2182      	movs	r1, #130	; 0x82
 8004f46:	4818      	ldr	r0, [pc, #96]	; (8004fa8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004f48:	f000 fc99 	bl	800587e <USBD_GetEpDesc>
 8004f4c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004f4e:	2101      	movs	r1, #1
 8004f50:	4815      	ldr	r0, [pc, #84]	; (8004fa8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004f52:	f000 fc94 	bl	800587e <USBD_GetEpDesc>
 8004f56:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004f58:	2181      	movs	r1, #129	; 0x81
 8004f5a:	4813      	ldr	r0, [pc, #76]	; (8004fa8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004f5c:	f000 fc8f 	bl	800587e <USBD_GetEpDesc>
 8004f60:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d002      	beq.n	8004f6e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	2210      	movs	r2, #16
 8004f6c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d006      	beq.n	8004f82 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	2200      	movs	r2, #0
 8004f78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f7c:	711a      	strb	r2, [r3, #4]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d006      	beq.n	8004f96 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f90:	711a      	strb	r2, [r3, #4]
 8004f92:	2200      	movs	r2, #0
 8004f94:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2243      	movs	r2, #67	; 0x43
 8004f9a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004f9c:	4b02      	ldr	r3, [pc, #8]	; (8004fa8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3718      	adds	r7, #24
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}
 8004fa6:	bf00      	nop
 8004fa8:	20000050 	.word	0x20000050

08004fac <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b083      	sub	sp, #12
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	220a      	movs	r2, #10
 8004fb8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8004fba:	4b03      	ldr	r3, [pc, #12]	; (8004fc8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	370c      	adds	r7, #12
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr
 8004fc8:	2000000c 	.word	0x2000000c

08004fcc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b083      	sub	sp, #12
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d101      	bne.n	8004fe0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8004fdc:	2303      	movs	r3, #3
 8004fde:	e009      	b.n	8004ff4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004fe6:	687a      	ldr	r2, [r7, #4]
 8004fe8:	33b0      	adds	r3, #176	; 0xb0
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	4413      	add	r3, r2
 8004fee:	683a      	ldr	r2, [r7, #0]
 8004ff0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8004ff2:	2300      	movs	r3, #0
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	370c      	adds	r7, #12
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr

08005000 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005000:	b480      	push	{r7}
 8005002:	b087      	sub	sp, #28
 8005004:	af00      	add	r7, sp, #0
 8005006:	60f8      	str	r0, [r7, #12]
 8005008:	60b9      	str	r1, [r7, #8]
 800500a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	32b0      	adds	r2, #176	; 0xb0
 8005016:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800501a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d101      	bne.n	8005026 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005022:	2303      	movs	r3, #3
 8005024:	e008      	b.n	8005038 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	68ba      	ldr	r2, [r7, #8]
 800502a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005036:	2300      	movs	r3, #0
}
 8005038:	4618      	mov	r0, r3
 800503a:	371c      	adds	r7, #28
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr

08005044 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005044:	b480      	push	{r7}
 8005046:	b085      	sub	sp, #20
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
 800504c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	32b0      	adds	r2, #176	; 0xb0
 8005058:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800505c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d101      	bne.n	8005068 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005064:	2303      	movs	r3, #3
 8005066:	e004      	b.n	8005072 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	683a      	ldr	r2, [r7, #0]
 800506c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005070:	2300      	movs	r3, #0
}
 8005072:	4618      	mov	r0, r3
 8005074:	3714      	adds	r7, #20
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr
	...

08005080 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b084      	sub	sp, #16
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	32b0      	adds	r2, #176	; 0xb0
 8005092:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005096:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	32b0      	adds	r2, #176	; 0xb0
 80050a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d101      	bne.n	80050ae <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80050aa:	2303      	movs	r3, #3
 80050ac:	e018      	b.n	80050e0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	7c1b      	ldrb	r3, [r3, #16]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d10a      	bne.n	80050cc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80050b6:	4b0c      	ldr	r3, [pc, #48]	; (80050e8 <USBD_CDC_ReceivePacket+0x68>)
 80050b8:	7819      	ldrb	r1, [r3, #0]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80050c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f001 ff75 	bl	8006fb4 <USBD_LL_PrepareReceive>
 80050ca:	e008      	b.n	80050de <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80050cc:	4b06      	ldr	r3, [pc, #24]	; (80050e8 <USBD_CDC_ReceivePacket+0x68>)
 80050ce:	7819      	ldrb	r1, [r3, #0]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80050d6:	2340      	movs	r3, #64	; 0x40
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f001 ff6b 	bl	8006fb4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80050de:	2300      	movs	r3, #0
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3710      	adds	r7, #16
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}
 80050e8:	20000094 	.word	0x20000094

080050ec <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b086      	sub	sp, #24
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	60f8      	str	r0, [r7, #12]
 80050f4:	60b9      	str	r1, [r7, #8]
 80050f6:	4613      	mov	r3, r2
 80050f8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d101      	bne.n	8005104 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005100:	2303      	movs	r3, #3
 8005102:	e01f      	b.n	8005144 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2200      	movs	r2, #0
 8005108:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2200      	movs	r2, #0
 8005110:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2200      	movs	r2, #0
 8005118:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d003      	beq.n	800512a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	68ba      	ldr	r2, [r7, #8]
 8005126:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2201      	movs	r2, #1
 800512e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	79fa      	ldrb	r2, [r7, #7]
 8005136:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005138:	68f8      	ldr	r0, [r7, #12]
 800513a:	f001 fde5 	bl	8006d08 <USBD_LL_Init>
 800513e:	4603      	mov	r3, r0
 8005140:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005142:	7dfb      	ldrb	r3, [r7, #23]
}
 8005144:	4618      	mov	r0, r3
 8005146:	3718      	adds	r7, #24
 8005148:	46bd      	mov	sp, r7
 800514a:	bd80      	pop	{r7, pc}

0800514c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b084      	sub	sp, #16
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005156:	2300      	movs	r3, #0
 8005158:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d101      	bne.n	8005164 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005160:	2303      	movs	r3, #3
 8005162:	e025      	b.n	80051b0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	683a      	ldr	r2, [r7, #0]
 8005168:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	32ae      	adds	r2, #174	; 0xae
 8005176:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800517a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800517c:	2b00      	cmp	r3, #0
 800517e:	d00f      	beq.n	80051a0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	32ae      	adds	r2, #174	; 0xae
 800518a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800518e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005190:	f107 020e 	add.w	r2, r7, #14
 8005194:	4610      	mov	r0, r2
 8005196:	4798      	blx	r3
 8005198:	4602      	mov	r2, r0
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80051a6:	1c5a      	adds	r2, r3, #1
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80051ae:	2300      	movs	r3, #0
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3710      	adds	r7, #16
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}

080051b8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b082      	sub	sp, #8
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	f001 fded 	bl	8006da0 <USBD_LL_Start>
 80051c6:	4603      	mov	r3, r0
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	3708      	adds	r7, #8
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}

080051d0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b083      	sub	sp, #12
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80051d8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80051da:	4618      	mov	r0, r3
 80051dc:	370c      	adds	r7, #12
 80051de:	46bd      	mov	sp, r7
 80051e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e4:	4770      	bx	lr

080051e6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80051e6:	b580      	push	{r7, lr}
 80051e8:	b084      	sub	sp, #16
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	6078      	str	r0, [r7, #4]
 80051ee:	460b      	mov	r3, r1
 80051f0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80051f2:	2300      	movs	r3, #0
 80051f4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d009      	beq.n	8005214 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	78fa      	ldrb	r2, [r7, #3]
 800520a:	4611      	mov	r1, r2
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	4798      	blx	r3
 8005210:	4603      	mov	r3, r0
 8005212:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005214:	7bfb      	ldrb	r3, [r7, #15]
}
 8005216:	4618      	mov	r0, r3
 8005218:	3710      	adds	r7, #16
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}

0800521e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800521e:	b580      	push	{r7, lr}
 8005220:	b084      	sub	sp, #16
 8005222:	af00      	add	r7, sp, #0
 8005224:	6078      	str	r0, [r7, #4]
 8005226:	460b      	mov	r3, r1
 8005228:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800522a:	2300      	movs	r3, #0
 800522c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	78fa      	ldrb	r2, [r7, #3]
 8005238:	4611      	mov	r1, r2
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	4798      	blx	r3
 800523e:	4603      	mov	r3, r0
 8005240:	2b00      	cmp	r3, #0
 8005242:	d001      	beq.n	8005248 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005244:	2303      	movs	r3, #3
 8005246:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005248:	7bfb      	ldrb	r3, [r7, #15]
}
 800524a:	4618      	mov	r0, r3
 800524c:	3710      	adds	r7, #16
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}

08005252 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005252:	b580      	push	{r7, lr}
 8005254:	b084      	sub	sp, #16
 8005256:	af00      	add	r7, sp, #0
 8005258:	6078      	str	r0, [r7, #4]
 800525a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005262:	6839      	ldr	r1, [r7, #0]
 8005264:	4618      	mov	r0, r3
 8005266:	f001 f908 	bl	800647a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2201      	movs	r2, #1
 800526e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005278:	461a      	mov	r2, r3
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005286:	f003 031f 	and.w	r3, r3, #31
 800528a:	2b02      	cmp	r3, #2
 800528c:	d01a      	beq.n	80052c4 <USBD_LL_SetupStage+0x72>
 800528e:	2b02      	cmp	r3, #2
 8005290:	d822      	bhi.n	80052d8 <USBD_LL_SetupStage+0x86>
 8005292:	2b00      	cmp	r3, #0
 8005294:	d002      	beq.n	800529c <USBD_LL_SetupStage+0x4a>
 8005296:	2b01      	cmp	r3, #1
 8005298:	d00a      	beq.n	80052b0 <USBD_LL_SetupStage+0x5e>
 800529a:	e01d      	b.n	80052d8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80052a2:	4619      	mov	r1, r3
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f000 fb5f 	bl	8005968 <USBD_StdDevReq>
 80052aa:	4603      	mov	r3, r0
 80052ac:	73fb      	strb	r3, [r7, #15]
      break;
 80052ae:	e020      	b.n	80052f2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80052b6:	4619      	mov	r1, r3
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f000 fbc7 	bl	8005a4c <USBD_StdItfReq>
 80052be:	4603      	mov	r3, r0
 80052c0:	73fb      	strb	r3, [r7, #15]
      break;
 80052c2:	e016      	b.n	80052f2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80052ca:	4619      	mov	r1, r3
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f000 fc29 	bl	8005b24 <USBD_StdEPReq>
 80052d2:	4603      	mov	r3, r0
 80052d4:	73fb      	strb	r3, [r7, #15]
      break;
 80052d6:	e00c      	b.n	80052f2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80052de:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	4619      	mov	r1, r3
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f001 fdba 	bl	8006e60 <USBD_LL_StallEP>
 80052ec:	4603      	mov	r3, r0
 80052ee:	73fb      	strb	r3, [r7, #15]
      break;
 80052f0:	bf00      	nop
  }

  return ret;
 80052f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3710      	adds	r7, #16
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}

080052fc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b086      	sub	sp, #24
 8005300:	af00      	add	r7, sp, #0
 8005302:	60f8      	str	r0, [r7, #12]
 8005304:	460b      	mov	r3, r1
 8005306:	607a      	str	r2, [r7, #4]
 8005308:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800530a:	2300      	movs	r3, #0
 800530c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800530e:	7afb      	ldrb	r3, [r7, #11]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d16e      	bne.n	80053f2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800531a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005322:	2b03      	cmp	r3, #3
 8005324:	f040 8098 	bne.w	8005458 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	689a      	ldr	r2, [r3, #8]
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	68db      	ldr	r3, [r3, #12]
 8005330:	429a      	cmp	r2, r3
 8005332:	d913      	bls.n	800535c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	689a      	ldr	r2, [r3, #8]
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	68db      	ldr	r3, [r3, #12]
 800533c:	1ad2      	subs	r2, r2, r3
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	68da      	ldr	r2, [r3, #12]
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	4293      	cmp	r3, r2
 800534c:	bf28      	it	cs
 800534e:	4613      	movcs	r3, r2
 8005350:	461a      	mov	r2, r3
 8005352:	6879      	ldr	r1, [r7, #4]
 8005354:	68f8      	ldr	r0, [r7, #12]
 8005356:	f001 f984 	bl	8006662 <USBD_CtlContinueRx>
 800535a:	e07d      	b.n	8005458 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005362:	f003 031f 	and.w	r3, r3, #31
 8005366:	2b02      	cmp	r3, #2
 8005368:	d014      	beq.n	8005394 <USBD_LL_DataOutStage+0x98>
 800536a:	2b02      	cmp	r3, #2
 800536c:	d81d      	bhi.n	80053aa <USBD_LL_DataOutStage+0xae>
 800536e:	2b00      	cmp	r3, #0
 8005370:	d002      	beq.n	8005378 <USBD_LL_DataOutStage+0x7c>
 8005372:	2b01      	cmp	r3, #1
 8005374:	d003      	beq.n	800537e <USBD_LL_DataOutStage+0x82>
 8005376:	e018      	b.n	80053aa <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005378:	2300      	movs	r3, #0
 800537a:	75bb      	strb	r3, [r7, #22]
            break;
 800537c:	e018      	b.n	80053b0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005384:	b2db      	uxtb	r3, r3
 8005386:	4619      	mov	r1, r3
 8005388:	68f8      	ldr	r0, [r7, #12]
 800538a:	f000 fa5e 	bl	800584a <USBD_CoreFindIF>
 800538e:	4603      	mov	r3, r0
 8005390:	75bb      	strb	r3, [r7, #22]
            break;
 8005392:	e00d      	b.n	80053b0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800539a:	b2db      	uxtb	r3, r3
 800539c:	4619      	mov	r1, r3
 800539e:	68f8      	ldr	r0, [r7, #12]
 80053a0:	f000 fa60 	bl	8005864 <USBD_CoreFindEP>
 80053a4:	4603      	mov	r3, r0
 80053a6:	75bb      	strb	r3, [r7, #22]
            break;
 80053a8:	e002      	b.n	80053b0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80053aa:	2300      	movs	r3, #0
 80053ac:	75bb      	strb	r3, [r7, #22]
            break;
 80053ae:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80053b0:	7dbb      	ldrb	r3, [r7, #22]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d119      	bne.n	80053ea <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80053bc:	b2db      	uxtb	r3, r3
 80053be:	2b03      	cmp	r3, #3
 80053c0:	d113      	bne.n	80053ea <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80053c2:	7dba      	ldrb	r2, [r7, #22]
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	32ae      	adds	r2, #174	; 0xae
 80053c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053cc:	691b      	ldr	r3, [r3, #16]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d00b      	beq.n	80053ea <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80053d2:	7dba      	ldrb	r2, [r7, #22]
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80053da:	7dba      	ldrb	r2, [r7, #22]
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	32ae      	adds	r2, #174	; 0xae
 80053e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053e4:	691b      	ldr	r3, [r3, #16]
 80053e6:	68f8      	ldr	r0, [r7, #12]
 80053e8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80053ea:	68f8      	ldr	r0, [r7, #12]
 80053ec:	f001 f94a 	bl	8006684 <USBD_CtlSendStatus>
 80053f0:	e032      	b.n	8005458 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80053f2:	7afb      	ldrb	r3, [r7, #11]
 80053f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	4619      	mov	r1, r3
 80053fc:	68f8      	ldr	r0, [r7, #12]
 80053fe:	f000 fa31 	bl	8005864 <USBD_CoreFindEP>
 8005402:	4603      	mov	r3, r0
 8005404:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005406:	7dbb      	ldrb	r3, [r7, #22]
 8005408:	2bff      	cmp	r3, #255	; 0xff
 800540a:	d025      	beq.n	8005458 <USBD_LL_DataOutStage+0x15c>
 800540c:	7dbb      	ldrb	r3, [r7, #22]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d122      	bne.n	8005458 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005418:	b2db      	uxtb	r3, r3
 800541a:	2b03      	cmp	r3, #3
 800541c:	d117      	bne.n	800544e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800541e:	7dba      	ldrb	r2, [r7, #22]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	32ae      	adds	r2, #174	; 0xae
 8005424:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005428:	699b      	ldr	r3, [r3, #24]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d00f      	beq.n	800544e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800542e:	7dba      	ldrb	r2, [r7, #22]
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005436:	7dba      	ldrb	r2, [r7, #22]
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	32ae      	adds	r2, #174	; 0xae
 800543c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005440:	699b      	ldr	r3, [r3, #24]
 8005442:	7afa      	ldrb	r2, [r7, #11]
 8005444:	4611      	mov	r1, r2
 8005446:	68f8      	ldr	r0, [r7, #12]
 8005448:	4798      	blx	r3
 800544a:	4603      	mov	r3, r0
 800544c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800544e:	7dfb      	ldrb	r3, [r7, #23]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d001      	beq.n	8005458 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005454:	7dfb      	ldrb	r3, [r7, #23]
 8005456:	e000      	b.n	800545a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005458:	2300      	movs	r3, #0
}
 800545a:	4618      	mov	r0, r3
 800545c:	3718      	adds	r7, #24
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}

08005462 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005462:	b580      	push	{r7, lr}
 8005464:	b086      	sub	sp, #24
 8005466:	af00      	add	r7, sp, #0
 8005468:	60f8      	str	r0, [r7, #12]
 800546a:	460b      	mov	r3, r1
 800546c:	607a      	str	r2, [r7, #4]
 800546e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005470:	7afb      	ldrb	r3, [r7, #11]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d16f      	bne.n	8005556 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	3314      	adds	r3, #20
 800547a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005482:	2b02      	cmp	r3, #2
 8005484:	d15a      	bne.n	800553c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	689a      	ldr	r2, [r3, #8]
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	68db      	ldr	r3, [r3, #12]
 800548e:	429a      	cmp	r2, r3
 8005490:	d914      	bls.n	80054bc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	689a      	ldr	r2, [r3, #8]
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	68db      	ldr	r3, [r3, #12]
 800549a:	1ad2      	subs	r2, r2, r3
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	461a      	mov	r2, r3
 80054a6:	6879      	ldr	r1, [r7, #4]
 80054a8:	68f8      	ldr	r0, [r7, #12]
 80054aa:	f001 f8ac 	bl	8006606 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80054ae:	2300      	movs	r3, #0
 80054b0:	2200      	movs	r2, #0
 80054b2:	2100      	movs	r1, #0
 80054b4:	68f8      	ldr	r0, [r7, #12]
 80054b6:	f001 fd7d 	bl	8006fb4 <USBD_LL_PrepareReceive>
 80054ba:	e03f      	b.n	800553c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	68da      	ldr	r2, [r3, #12]
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d11c      	bne.n	8005502 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	685a      	ldr	r2, [r3, #4]
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d316      	bcc.n	8005502 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	685a      	ldr	r2, [r3, #4]
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80054de:	429a      	cmp	r2, r3
 80054e0:	d20f      	bcs.n	8005502 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80054e2:	2200      	movs	r2, #0
 80054e4:	2100      	movs	r1, #0
 80054e6:	68f8      	ldr	r0, [r7, #12]
 80054e8:	f001 f88d 	bl	8006606 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2200      	movs	r2, #0
 80054f0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80054f4:	2300      	movs	r3, #0
 80054f6:	2200      	movs	r2, #0
 80054f8:	2100      	movs	r1, #0
 80054fa:	68f8      	ldr	r0, [r7, #12]
 80054fc:	f001 fd5a 	bl	8006fb4 <USBD_LL_PrepareReceive>
 8005500:	e01c      	b.n	800553c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005508:	b2db      	uxtb	r3, r3
 800550a:	2b03      	cmp	r3, #3
 800550c:	d10f      	bne.n	800552e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005514:	68db      	ldr	r3, [r3, #12]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d009      	beq.n	800552e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2200      	movs	r2, #0
 800551e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005528:	68db      	ldr	r3, [r3, #12]
 800552a:	68f8      	ldr	r0, [r7, #12]
 800552c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800552e:	2180      	movs	r1, #128	; 0x80
 8005530:	68f8      	ldr	r0, [r7, #12]
 8005532:	f001 fc95 	bl	8006e60 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005536:	68f8      	ldr	r0, [r7, #12]
 8005538:	f001 f8b7 	bl	80066aa <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005542:	2b00      	cmp	r3, #0
 8005544:	d03a      	beq.n	80055bc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005546:	68f8      	ldr	r0, [r7, #12]
 8005548:	f7ff fe42 	bl	80051d0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2200      	movs	r2, #0
 8005550:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005554:	e032      	b.n	80055bc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005556:	7afb      	ldrb	r3, [r7, #11]
 8005558:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800555c:	b2db      	uxtb	r3, r3
 800555e:	4619      	mov	r1, r3
 8005560:	68f8      	ldr	r0, [r7, #12]
 8005562:	f000 f97f 	bl	8005864 <USBD_CoreFindEP>
 8005566:	4603      	mov	r3, r0
 8005568:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800556a:	7dfb      	ldrb	r3, [r7, #23]
 800556c:	2bff      	cmp	r3, #255	; 0xff
 800556e:	d025      	beq.n	80055bc <USBD_LL_DataInStage+0x15a>
 8005570:	7dfb      	ldrb	r3, [r7, #23]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d122      	bne.n	80055bc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800557c:	b2db      	uxtb	r3, r3
 800557e:	2b03      	cmp	r3, #3
 8005580:	d11c      	bne.n	80055bc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005582:	7dfa      	ldrb	r2, [r7, #23]
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	32ae      	adds	r2, #174	; 0xae
 8005588:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800558c:	695b      	ldr	r3, [r3, #20]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d014      	beq.n	80055bc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005592:	7dfa      	ldrb	r2, [r7, #23]
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800559a:	7dfa      	ldrb	r2, [r7, #23]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	32ae      	adds	r2, #174	; 0xae
 80055a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055a4:	695b      	ldr	r3, [r3, #20]
 80055a6:	7afa      	ldrb	r2, [r7, #11]
 80055a8:	4611      	mov	r1, r2
 80055aa:	68f8      	ldr	r0, [r7, #12]
 80055ac:	4798      	blx	r3
 80055ae:	4603      	mov	r3, r0
 80055b0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80055b2:	7dbb      	ldrb	r3, [r7, #22]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d001      	beq.n	80055bc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80055b8:	7dbb      	ldrb	r3, [r7, #22]
 80055ba:	e000      	b.n	80055be <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80055bc:	2300      	movs	r3, #0
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3718      	adds	r7, #24
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}

080055c6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80055c6:	b580      	push	{r7, lr}
 80055c8:	b084      	sub	sp, #16
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80055ce:	2300      	movs	r3, #0
 80055d0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2201      	movs	r2, #1
 80055d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2200      	movs	r2, #0
 80055de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2200      	movs	r2, #0
 80055e6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2200      	movs	r2, #0
 80055ec:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2200      	movs	r2, #0
 80055f4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d014      	beq.n	800562c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d00e      	beq.n	800562c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	687a      	ldr	r2, [r7, #4]
 8005618:	6852      	ldr	r2, [r2, #4]
 800561a:	b2d2      	uxtb	r2, r2
 800561c:	4611      	mov	r1, r2
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	4798      	blx	r3
 8005622:	4603      	mov	r3, r0
 8005624:	2b00      	cmp	r3, #0
 8005626:	d001      	beq.n	800562c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005628:	2303      	movs	r3, #3
 800562a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800562c:	2340      	movs	r3, #64	; 0x40
 800562e:	2200      	movs	r2, #0
 8005630:	2100      	movs	r1, #0
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f001 fbcf 	bl	8006dd6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2201      	movs	r2, #1
 800563c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2240      	movs	r2, #64	; 0x40
 8005644:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005648:	2340      	movs	r3, #64	; 0x40
 800564a:	2200      	movs	r2, #0
 800564c:	2180      	movs	r1, #128	; 0x80
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f001 fbc1 	bl	8006dd6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2201      	movs	r2, #1
 8005658:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2240      	movs	r2, #64	; 0x40
 800565e:	621a      	str	r2, [r3, #32]

  return ret;
 8005660:	7bfb      	ldrb	r3, [r7, #15]
}
 8005662:	4618      	mov	r0, r3
 8005664:	3710      	adds	r7, #16
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}

0800566a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800566a:	b480      	push	{r7}
 800566c:	b083      	sub	sp, #12
 800566e:	af00      	add	r7, sp, #0
 8005670:	6078      	str	r0, [r7, #4]
 8005672:	460b      	mov	r3, r1
 8005674:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	78fa      	ldrb	r2, [r7, #3]
 800567a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800567c:	2300      	movs	r3, #0
}
 800567e:	4618      	mov	r0, r3
 8005680:	370c      	adds	r7, #12
 8005682:	46bd      	mov	sp, r7
 8005684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005688:	4770      	bx	lr

0800568a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800568a:	b480      	push	{r7}
 800568c:	b083      	sub	sp, #12
 800568e:	af00      	add	r7, sp, #0
 8005690:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005698:	b2da      	uxtb	r2, r3
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2204      	movs	r2, #4
 80056a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80056a8:	2300      	movs	r3, #0
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	370c      	adds	r7, #12
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr

080056b6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80056b6:	b480      	push	{r7}
 80056b8:	b083      	sub	sp, #12
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056c4:	b2db      	uxtb	r3, r3
 80056c6:	2b04      	cmp	r3, #4
 80056c8:	d106      	bne.n	80056d8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80056d0:	b2da      	uxtb	r2, r3
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80056d8:	2300      	movs	r3, #0
}
 80056da:	4618      	mov	r0, r3
 80056dc:	370c      	adds	r7, #12
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr

080056e6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80056e6:	b580      	push	{r7, lr}
 80056e8:	b082      	sub	sp, #8
 80056ea:	af00      	add	r7, sp, #0
 80056ec:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056f4:	b2db      	uxtb	r3, r3
 80056f6:	2b03      	cmp	r3, #3
 80056f8:	d110      	bne.n	800571c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005700:	2b00      	cmp	r3, #0
 8005702:	d00b      	beq.n	800571c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800570a:	69db      	ldr	r3, [r3, #28]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d005      	beq.n	800571c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005716:	69db      	ldr	r3, [r3, #28]
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800571c:	2300      	movs	r3, #0
}
 800571e:	4618      	mov	r0, r3
 8005720:	3708      	adds	r7, #8
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}

08005726 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005726:	b580      	push	{r7, lr}
 8005728:	b082      	sub	sp, #8
 800572a:	af00      	add	r7, sp, #0
 800572c:	6078      	str	r0, [r7, #4]
 800572e:	460b      	mov	r3, r1
 8005730:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	32ae      	adds	r2, #174	; 0xae
 800573c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d101      	bne.n	8005748 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005744:	2303      	movs	r3, #3
 8005746:	e01c      	b.n	8005782 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800574e:	b2db      	uxtb	r3, r3
 8005750:	2b03      	cmp	r3, #3
 8005752:	d115      	bne.n	8005780 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	32ae      	adds	r2, #174	; 0xae
 800575e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005762:	6a1b      	ldr	r3, [r3, #32]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d00b      	beq.n	8005780 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	32ae      	adds	r2, #174	; 0xae
 8005772:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005776:	6a1b      	ldr	r3, [r3, #32]
 8005778:	78fa      	ldrb	r2, [r7, #3]
 800577a:	4611      	mov	r1, r2
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005780:	2300      	movs	r3, #0
}
 8005782:	4618      	mov	r0, r3
 8005784:	3708      	adds	r7, #8
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}

0800578a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800578a:	b580      	push	{r7, lr}
 800578c:	b082      	sub	sp, #8
 800578e:	af00      	add	r7, sp, #0
 8005790:	6078      	str	r0, [r7, #4]
 8005792:	460b      	mov	r3, r1
 8005794:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	32ae      	adds	r2, #174	; 0xae
 80057a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d101      	bne.n	80057ac <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80057a8:	2303      	movs	r3, #3
 80057aa:	e01c      	b.n	80057e6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80057b2:	b2db      	uxtb	r3, r3
 80057b4:	2b03      	cmp	r3, #3
 80057b6:	d115      	bne.n	80057e4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	32ae      	adds	r2, #174	; 0xae
 80057c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d00b      	beq.n	80057e4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	32ae      	adds	r2, #174	; 0xae
 80057d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057dc:	78fa      	ldrb	r2, [r7, #3]
 80057de:	4611      	mov	r1, r2
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80057e4:	2300      	movs	r3, #0
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3708      	adds	r7, #8
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}

080057ee <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80057ee:	b480      	push	{r7}
 80057f0:	b083      	sub	sp, #12
 80057f2:	af00      	add	r7, sp, #0
 80057f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80057f6:	2300      	movs	r3, #0
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	370c      	adds	r7, #12
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	4770      	bx	lr

08005804 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b084      	sub	sp, #16
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800580c:	2300      	movs	r3, #0
 800580e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2201      	movs	r2, #1
 8005814:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800581e:	2b00      	cmp	r3, #0
 8005820:	d00e      	beq.n	8005840 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	687a      	ldr	r2, [r7, #4]
 800582c:	6852      	ldr	r2, [r2, #4]
 800582e:	b2d2      	uxtb	r2, r2
 8005830:	4611      	mov	r1, r2
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	4798      	blx	r3
 8005836:	4603      	mov	r3, r0
 8005838:	2b00      	cmp	r3, #0
 800583a:	d001      	beq.n	8005840 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800583c:	2303      	movs	r3, #3
 800583e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005840:	7bfb      	ldrb	r3, [r7, #15]
}
 8005842:	4618      	mov	r0, r3
 8005844:	3710      	adds	r7, #16
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}

0800584a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800584a:	b480      	push	{r7}
 800584c:	b083      	sub	sp, #12
 800584e:	af00      	add	r7, sp, #0
 8005850:	6078      	str	r0, [r7, #4]
 8005852:	460b      	mov	r3, r1
 8005854:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005856:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005858:	4618      	mov	r0, r3
 800585a:	370c      	adds	r7, #12
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr

08005864 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005864:	b480      	push	{r7}
 8005866:	b083      	sub	sp, #12
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	460b      	mov	r3, r1
 800586e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005870:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005872:	4618      	mov	r0, r3
 8005874:	370c      	adds	r7, #12
 8005876:	46bd      	mov	sp, r7
 8005878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587c:	4770      	bx	lr

0800587e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800587e:	b580      	push	{r7, lr}
 8005880:	b086      	sub	sp, #24
 8005882:	af00      	add	r7, sp, #0
 8005884:	6078      	str	r0, [r7, #4]
 8005886:	460b      	mov	r3, r1
 8005888:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005892:	2300      	movs	r3, #0
 8005894:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	885b      	ldrh	r3, [r3, #2]
 800589a:	b29a      	uxth	r2, r3
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	781b      	ldrb	r3, [r3, #0]
 80058a0:	b29b      	uxth	r3, r3
 80058a2:	429a      	cmp	r2, r3
 80058a4:	d920      	bls.n	80058e8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	781b      	ldrb	r3, [r3, #0]
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80058ae:	e013      	b.n	80058d8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80058b0:	f107 030a 	add.w	r3, r7, #10
 80058b4:	4619      	mov	r1, r3
 80058b6:	6978      	ldr	r0, [r7, #20]
 80058b8:	f000 f81b 	bl	80058f2 <USBD_GetNextDesc>
 80058bc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	785b      	ldrb	r3, [r3, #1]
 80058c2:	2b05      	cmp	r3, #5
 80058c4:	d108      	bne.n	80058d8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	789b      	ldrb	r3, [r3, #2]
 80058ce:	78fa      	ldrb	r2, [r7, #3]
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d008      	beq.n	80058e6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80058d4:	2300      	movs	r3, #0
 80058d6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	885b      	ldrh	r3, [r3, #2]
 80058dc:	b29a      	uxth	r2, r3
 80058de:	897b      	ldrh	r3, [r7, #10]
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d8e5      	bhi.n	80058b0 <USBD_GetEpDesc+0x32>
 80058e4:	e000      	b.n	80058e8 <USBD_GetEpDesc+0x6a>
          break;
 80058e6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80058e8:	693b      	ldr	r3, [r7, #16]
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3718      	adds	r7, #24
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}

080058f2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80058f2:	b480      	push	{r7}
 80058f4:	b085      	sub	sp, #20
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	6078      	str	r0, [r7, #4]
 80058fa:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	881a      	ldrh	r2, [r3, #0]
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	781b      	ldrb	r3, [r3, #0]
 8005908:	b29b      	uxth	r3, r3
 800590a:	4413      	add	r3, r2
 800590c:	b29a      	uxth	r2, r3
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	781b      	ldrb	r3, [r3, #0]
 8005916:	461a      	mov	r2, r3
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	4413      	add	r3, r2
 800591c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800591e:	68fb      	ldr	r3, [r7, #12]
}
 8005920:	4618      	mov	r0, r3
 8005922:	3714      	adds	r7, #20
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr

0800592c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800592c:	b480      	push	{r7}
 800592e:	b087      	sub	sp, #28
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	781b      	ldrb	r3, [r3, #0]
 800593c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	3301      	adds	r3, #1
 8005942:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	781b      	ldrb	r3, [r3, #0]
 8005948:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800594a:	8a3b      	ldrh	r3, [r7, #16]
 800594c:	021b      	lsls	r3, r3, #8
 800594e:	b21a      	sxth	r2, r3
 8005950:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005954:	4313      	orrs	r3, r2
 8005956:	b21b      	sxth	r3, r3
 8005958:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800595a:	89fb      	ldrh	r3, [r7, #14]
}
 800595c:	4618      	mov	r0, r3
 800595e:	371c      	adds	r7, #28
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr

08005968 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b084      	sub	sp, #16
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
 8005970:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005972:	2300      	movs	r3, #0
 8005974:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	781b      	ldrb	r3, [r3, #0]
 800597a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800597e:	2b40      	cmp	r3, #64	; 0x40
 8005980:	d005      	beq.n	800598e <USBD_StdDevReq+0x26>
 8005982:	2b40      	cmp	r3, #64	; 0x40
 8005984:	d857      	bhi.n	8005a36 <USBD_StdDevReq+0xce>
 8005986:	2b00      	cmp	r3, #0
 8005988:	d00f      	beq.n	80059aa <USBD_StdDevReq+0x42>
 800598a:	2b20      	cmp	r3, #32
 800598c:	d153      	bne.n	8005a36 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	32ae      	adds	r2, #174	; 0xae
 8005998:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	6839      	ldr	r1, [r7, #0]
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	4798      	blx	r3
 80059a4:	4603      	mov	r3, r0
 80059a6:	73fb      	strb	r3, [r7, #15]
      break;
 80059a8:	e04a      	b.n	8005a40 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	785b      	ldrb	r3, [r3, #1]
 80059ae:	2b09      	cmp	r3, #9
 80059b0:	d83b      	bhi.n	8005a2a <USBD_StdDevReq+0xc2>
 80059b2:	a201      	add	r2, pc, #4	; (adr r2, 80059b8 <USBD_StdDevReq+0x50>)
 80059b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059b8:	08005a0d 	.word	0x08005a0d
 80059bc:	08005a21 	.word	0x08005a21
 80059c0:	08005a2b 	.word	0x08005a2b
 80059c4:	08005a17 	.word	0x08005a17
 80059c8:	08005a2b 	.word	0x08005a2b
 80059cc:	080059eb 	.word	0x080059eb
 80059d0:	080059e1 	.word	0x080059e1
 80059d4:	08005a2b 	.word	0x08005a2b
 80059d8:	08005a03 	.word	0x08005a03
 80059dc:	080059f5 	.word	0x080059f5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80059e0:	6839      	ldr	r1, [r7, #0]
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f000 fa3c 	bl	8005e60 <USBD_GetDescriptor>
          break;
 80059e8:	e024      	b.n	8005a34 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80059ea:	6839      	ldr	r1, [r7, #0]
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f000 fba1 	bl	8006134 <USBD_SetAddress>
          break;
 80059f2:	e01f      	b.n	8005a34 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80059f4:	6839      	ldr	r1, [r7, #0]
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f000 fbe0 	bl	80061bc <USBD_SetConfig>
 80059fc:	4603      	mov	r3, r0
 80059fe:	73fb      	strb	r3, [r7, #15]
          break;
 8005a00:	e018      	b.n	8005a34 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005a02:	6839      	ldr	r1, [r7, #0]
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f000 fc83 	bl	8006310 <USBD_GetConfig>
          break;
 8005a0a:	e013      	b.n	8005a34 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005a0c:	6839      	ldr	r1, [r7, #0]
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f000 fcb4 	bl	800637c <USBD_GetStatus>
          break;
 8005a14:	e00e      	b.n	8005a34 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005a16:	6839      	ldr	r1, [r7, #0]
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f000 fce3 	bl	80063e4 <USBD_SetFeature>
          break;
 8005a1e:	e009      	b.n	8005a34 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005a20:	6839      	ldr	r1, [r7, #0]
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f000 fd07 	bl	8006436 <USBD_ClrFeature>
          break;
 8005a28:	e004      	b.n	8005a34 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8005a2a:	6839      	ldr	r1, [r7, #0]
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f000 fd5e 	bl	80064ee <USBD_CtlError>
          break;
 8005a32:	bf00      	nop
      }
      break;
 8005a34:	e004      	b.n	8005a40 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8005a36:	6839      	ldr	r1, [r7, #0]
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f000 fd58 	bl	80064ee <USBD_CtlError>
      break;
 8005a3e:	bf00      	nop
  }

  return ret;
 8005a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3710      	adds	r7, #16
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}
 8005a4a:	bf00      	nop

08005a4c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b084      	sub	sp, #16
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
 8005a54:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005a56:	2300      	movs	r3, #0
 8005a58:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	781b      	ldrb	r3, [r3, #0]
 8005a5e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005a62:	2b40      	cmp	r3, #64	; 0x40
 8005a64:	d005      	beq.n	8005a72 <USBD_StdItfReq+0x26>
 8005a66:	2b40      	cmp	r3, #64	; 0x40
 8005a68:	d852      	bhi.n	8005b10 <USBD_StdItfReq+0xc4>
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d001      	beq.n	8005a72 <USBD_StdItfReq+0x26>
 8005a6e:	2b20      	cmp	r3, #32
 8005a70:	d14e      	bne.n	8005b10 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a78:	b2db      	uxtb	r3, r3
 8005a7a:	3b01      	subs	r3, #1
 8005a7c:	2b02      	cmp	r3, #2
 8005a7e:	d840      	bhi.n	8005b02 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	889b      	ldrh	r3, [r3, #4]
 8005a84:	b2db      	uxtb	r3, r3
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d836      	bhi.n	8005af8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	889b      	ldrh	r3, [r3, #4]
 8005a8e:	b2db      	uxtb	r3, r3
 8005a90:	4619      	mov	r1, r3
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f7ff fed9 	bl	800584a <USBD_CoreFindIF>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005a9c:	7bbb      	ldrb	r3, [r7, #14]
 8005a9e:	2bff      	cmp	r3, #255	; 0xff
 8005aa0:	d01d      	beq.n	8005ade <USBD_StdItfReq+0x92>
 8005aa2:	7bbb      	ldrb	r3, [r7, #14]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d11a      	bne.n	8005ade <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8005aa8:	7bba      	ldrb	r2, [r7, #14]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	32ae      	adds	r2, #174	; 0xae
 8005aae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d00f      	beq.n	8005ad8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8005ab8:	7bba      	ldrb	r2, [r7, #14]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005ac0:	7bba      	ldrb	r2, [r7, #14]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	32ae      	adds	r2, #174	; 0xae
 8005ac6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	6839      	ldr	r1, [r7, #0]
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	4798      	blx	r3
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005ad6:	e004      	b.n	8005ae2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8005ad8:	2303      	movs	r3, #3
 8005ada:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005adc:	e001      	b.n	8005ae2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8005ade:	2303      	movs	r3, #3
 8005ae0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	88db      	ldrh	r3, [r3, #6]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d110      	bne.n	8005b0c <USBD_StdItfReq+0xc0>
 8005aea:	7bfb      	ldrb	r3, [r7, #15]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d10d      	bne.n	8005b0c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f000 fdc7 	bl	8006684 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005af6:	e009      	b.n	8005b0c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8005af8:	6839      	ldr	r1, [r7, #0]
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f000 fcf7 	bl	80064ee <USBD_CtlError>
          break;
 8005b00:	e004      	b.n	8005b0c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8005b02:	6839      	ldr	r1, [r7, #0]
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f000 fcf2 	bl	80064ee <USBD_CtlError>
          break;
 8005b0a:	e000      	b.n	8005b0e <USBD_StdItfReq+0xc2>
          break;
 8005b0c:	bf00      	nop
      }
      break;
 8005b0e:	e004      	b.n	8005b1a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8005b10:	6839      	ldr	r1, [r7, #0]
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f000 fceb 	bl	80064ee <USBD_CtlError>
      break;
 8005b18:	bf00      	nop
  }

  return ret;
 8005b1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	3710      	adds	r7, #16
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}

08005b24 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b084      	sub	sp, #16
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
 8005b2c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	889b      	ldrh	r3, [r3, #4]
 8005b36:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	781b      	ldrb	r3, [r3, #0]
 8005b3c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005b40:	2b40      	cmp	r3, #64	; 0x40
 8005b42:	d007      	beq.n	8005b54 <USBD_StdEPReq+0x30>
 8005b44:	2b40      	cmp	r3, #64	; 0x40
 8005b46:	f200 817f 	bhi.w	8005e48 <USBD_StdEPReq+0x324>
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d02a      	beq.n	8005ba4 <USBD_StdEPReq+0x80>
 8005b4e:	2b20      	cmp	r3, #32
 8005b50:	f040 817a 	bne.w	8005e48 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8005b54:	7bbb      	ldrb	r3, [r7, #14]
 8005b56:	4619      	mov	r1, r3
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	f7ff fe83 	bl	8005864 <USBD_CoreFindEP>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005b62:	7b7b      	ldrb	r3, [r7, #13]
 8005b64:	2bff      	cmp	r3, #255	; 0xff
 8005b66:	f000 8174 	beq.w	8005e52 <USBD_StdEPReq+0x32e>
 8005b6a:	7b7b      	ldrb	r3, [r7, #13]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	f040 8170 	bne.w	8005e52 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8005b72:	7b7a      	ldrb	r2, [r7, #13]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8005b7a:	7b7a      	ldrb	r2, [r7, #13]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	32ae      	adds	r2, #174	; 0xae
 8005b80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	f000 8163 	beq.w	8005e52 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8005b8c:	7b7a      	ldrb	r2, [r7, #13]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	32ae      	adds	r2, #174	; 0xae
 8005b92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	6839      	ldr	r1, [r7, #0]
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	4798      	blx	r3
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005ba2:	e156      	b.n	8005e52 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	785b      	ldrb	r3, [r3, #1]
 8005ba8:	2b03      	cmp	r3, #3
 8005baa:	d008      	beq.n	8005bbe <USBD_StdEPReq+0x9a>
 8005bac:	2b03      	cmp	r3, #3
 8005bae:	f300 8145 	bgt.w	8005e3c <USBD_StdEPReq+0x318>
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	f000 809b 	beq.w	8005cee <USBD_StdEPReq+0x1ca>
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d03c      	beq.n	8005c36 <USBD_StdEPReq+0x112>
 8005bbc:	e13e      	b.n	8005e3c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	2b02      	cmp	r3, #2
 8005bc8:	d002      	beq.n	8005bd0 <USBD_StdEPReq+0xac>
 8005bca:	2b03      	cmp	r3, #3
 8005bcc:	d016      	beq.n	8005bfc <USBD_StdEPReq+0xd8>
 8005bce:	e02c      	b.n	8005c2a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005bd0:	7bbb      	ldrb	r3, [r7, #14]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d00d      	beq.n	8005bf2 <USBD_StdEPReq+0xce>
 8005bd6:	7bbb      	ldrb	r3, [r7, #14]
 8005bd8:	2b80      	cmp	r3, #128	; 0x80
 8005bda:	d00a      	beq.n	8005bf2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005bdc:	7bbb      	ldrb	r3, [r7, #14]
 8005bde:	4619      	mov	r1, r3
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	f001 f93d 	bl	8006e60 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005be6:	2180      	movs	r1, #128	; 0x80
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f001 f939 	bl	8006e60 <USBD_LL_StallEP>
 8005bee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005bf0:	e020      	b.n	8005c34 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8005bf2:	6839      	ldr	r1, [r7, #0]
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f000 fc7a 	bl	80064ee <USBD_CtlError>
              break;
 8005bfa:	e01b      	b.n	8005c34 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	885b      	ldrh	r3, [r3, #2]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d10e      	bne.n	8005c22 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005c04:	7bbb      	ldrb	r3, [r7, #14]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d00b      	beq.n	8005c22 <USBD_StdEPReq+0xfe>
 8005c0a:	7bbb      	ldrb	r3, [r7, #14]
 8005c0c:	2b80      	cmp	r3, #128	; 0x80
 8005c0e:	d008      	beq.n	8005c22 <USBD_StdEPReq+0xfe>
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	88db      	ldrh	r3, [r3, #6]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d104      	bne.n	8005c22 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005c18:	7bbb      	ldrb	r3, [r7, #14]
 8005c1a:	4619      	mov	r1, r3
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f001 f91f 	bl	8006e60 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f000 fd2e 	bl	8006684 <USBD_CtlSendStatus>

              break;
 8005c28:	e004      	b.n	8005c34 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8005c2a:	6839      	ldr	r1, [r7, #0]
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f000 fc5e 	bl	80064ee <USBD_CtlError>
              break;
 8005c32:	bf00      	nop
          }
          break;
 8005c34:	e107      	b.n	8005e46 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c3c:	b2db      	uxtb	r3, r3
 8005c3e:	2b02      	cmp	r3, #2
 8005c40:	d002      	beq.n	8005c48 <USBD_StdEPReq+0x124>
 8005c42:	2b03      	cmp	r3, #3
 8005c44:	d016      	beq.n	8005c74 <USBD_StdEPReq+0x150>
 8005c46:	e04b      	b.n	8005ce0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005c48:	7bbb      	ldrb	r3, [r7, #14]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d00d      	beq.n	8005c6a <USBD_StdEPReq+0x146>
 8005c4e:	7bbb      	ldrb	r3, [r7, #14]
 8005c50:	2b80      	cmp	r3, #128	; 0x80
 8005c52:	d00a      	beq.n	8005c6a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005c54:	7bbb      	ldrb	r3, [r7, #14]
 8005c56:	4619      	mov	r1, r3
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f001 f901 	bl	8006e60 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005c5e:	2180      	movs	r1, #128	; 0x80
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f001 f8fd 	bl	8006e60 <USBD_LL_StallEP>
 8005c66:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005c68:	e040      	b.n	8005cec <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8005c6a:	6839      	ldr	r1, [r7, #0]
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f000 fc3e 	bl	80064ee <USBD_CtlError>
              break;
 8005c72:	e03b      	b.n	8005cec <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	885b      	ldrh	r3, [r3, #2]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d136      	bne.n	8005cea <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005c7c:	7bbb      	ldrb	r3, [r7, #14]
 8005c7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d004      	beq.n	8005c90 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005c86:	7bbb      	ldrb	r3, [r7, #14]
 8005c88:	4619      	mov	r1, r3
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f001 f907 	bl	8006e9e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f000 fcf7 	bl	8006684 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8005c96:	7bbb      	ldrb	r3, [r7, #14]
 8005c98:	4619      	mov	r1, r3
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f7ff fde2 	bl	8005864 <USBD_CoreFindEP>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005ca4:	7b7b      	ldrb	r3, [r7, #13]
 8005ca6:	2bff      	cmp	r3, #255	; 0xff
 8005ca8:	d01f      	beq.n	8005cea <USBD_StdEPReq+0x1c6>
 8005caa:	7b7b      	ldrb	r3, [r7, #13]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d11c      	bne.n	8005cea <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8005cb0:	7b7a      	ldrb	r2, [r7, #13]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8005cb8:	7b7a      	ldrb	r2, [r7, #13]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	32ae      	adds	r2, #174	; 0xae
 8005cbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d010      	beq.n	8005cea <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005cc8:	7b7a      	ldrb	r2, [r7, #13]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	32ae      	adds	r2, #174	; 0xae
 8005cce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cd2:	689b      	ldr	r3, [r3, #8]
 8005cd4:	6839      	ldr	r1, [r7, #0]
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	4798      	blx	r3
 8005cda:	4603      	mov	r3, r0
 8005cdc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8005cde:	e004      	b.n	8005cea <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8005ce0:	6839      	ldr	r1, [r7, #0]
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f000 fc03 	bl	80064ee <USBD_CtlError>
              break;
 8005ce8:	e000      	b.n	8005cec <USBD_StdEPReq+0x1c8>
              break;
 8005cea:	bf00      	nop
          }
          break;
 8005cec:	e0ab      	b.n	8005e46 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	2b02      	cmp	r3, #2
 8005cf8:	d002      	beq.n	8005d00 <USBD_StdEPReq+0x1dc>
 8005cfa:	2b03      	cmp	r3, #3
 8005cfc:	d032      	beq.n	8005d64 <USBD_StdEPReq+0x240>
 8005cfe:	e097      	b.n	8005e30 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005d00:	7bbb      	ldrb	r3, [r7, #14]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d007      	beq.n	8005d16 <USBD_StdEPReq+0x1f2>
 8005d06:	7bbb      	ldrb	r3, [r7, #14]
 8005d08:	2b80      	cmp	r3, #128	; 0x80
 8005d0a:	d004      	beq.n	8005d16 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8005d0c:	6839      	ldr	r1, [r7, #0]
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f000 fbed 	bl	80064ee <USBD_CtlError>
                break;
 8005d14:	e091      	b.n	8005e3a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005d16:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	da0b      	bge.n	8005d36 <USBD_StdEPReq+0x212>
 8005d1e:	7bbb      	ldrb	r3, [r7, #14]
 8005d20:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005d24:	4613      	mov	r3, r2
 8005d26:	009b      	lsls	r3, r3, #2
 8005d28:	4413      	add	r3, r2
 8005d2a:	009b      	lsls	r3, r3, #2
 8005d2c:	3310      	adds	r3, #16
 8005d2e:	687a      	ldr	r2, [r7, #4]
 8005d30:	4413      	add	r3, r2
 8005d32:	3304      	adds	r3, #4
 8005d34:	e00b      	b.n	8005d4e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005d36:	7bbb      	ldrb	r3, [r7, #14]
 8005d38:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005d3c:	4613      	mov	r3, r2
 8005d3e:	009b      	lsls	r3, r3, #2
 8005d40:	4413      	add	r3, r2
 8005d42:	009b      	lsls	r3, r3, #2
 8005d44:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005d48:	687a      	ldr	r2, [r7, #4]
 8005d4a:	4413      	add	r3, r2
 8005d4c:	3304      	adds	r3, #4
 8005d4e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	2200      	movs	r2, #0
 8005d54:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	2202      	movs	r2, #2
 8005d5a:	4619      	mov	r1, r3
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	f000 fc37 	bl	80065d0 <USBD_CtlSendData>
              break;
 8005d62:	e06a      	b.n	8005e3a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005d64:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	da11      	bge.n	8005d90 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005d6c:	7bbb      	ldrb	r3, [r7, #14]
 8005d6e:	f003 020f 	and.w	r2, r3, #15
 8005d72:	6879      	ldr	r1, [r7, #4]
 8005d74:	4613      	mov	r3, r2
 8005d76:	009b      	lsls	r3, r3, #2
 8005d78:	4413      	add	r3, r2
 8005d7a:	009b      	lsls	r3, r3, #2
 8005d7c:	440b      	add	r3, r1
 8005d7e:	3324      	adds	r3, #36	; 0x24
 8005d80:	881b      	ldrh	r3, [r3, #0]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d117      	bne.n	8005db6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005d86:	6839      	ldr	r1, [r7, #0]
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f000 fbb0 	bl	80064ee <USBD_CtlError>
                  break;
 8005d8e:	e054      	b.n	8005e3a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005d90:	7bbb      	ldrb	r3, [r7, #14]
 8005d92:	f003 020f 	and.w	r2, r3, #15
 8005d96:	6879      	ldr	r1, [r7, #4]
 8005d98:	4613      	mov	r3, r2
 8005d9a:	009b      	lsls	r3, r3, #2
 8005d9c:	4413      	add	r3, r2
 8005d9e:	009b      	lsls	r3, r3, #2
 8005da0:	440b      	add	r3, r1
 8005da2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005da6:	881b      	ldrh	r3, [r3, #0]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d104      	bne.n	8005db6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005dac:	6839      	ldr	r1, [r7, #0]
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f000 fb9d 	bl	80064ee <USBD_CtlError>
                  break;
 8005db4:	e041      	b.n	8005e3a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005db6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	da0b      	bge.n	8005dd6 <USBD_StdEPReq+0x2b2>
 8005dbe:	7bbb      	ldrb	r3, [r7, #14]
 8005dc0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005dc4:	4613      	mov	r3, r2
 8005dc6:	009b      	lsls	r3, r3, #2
 8005dc8:	4413      	add	r3, r2
 8005dca:	009b      	lsls	r3, r3, #2
 8005dcc:	3310      	adds	r3, #16
 8005dce:	687a      	ldr	r2, [r7, #4]
 8005dd0:	4413      	add	r3, r2
 8005dd2:	3304      	adds	r3, #4
 8005dd4:	e00b      	b.n	8005dee <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005dd6:	7bbb      	ldrb	r3, [r7, #14]
 8005dd8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005ddc:	4613      	mov	r3, r2
 8005dde:	009b      	lsls	r3, r3, #2
 8005de0:	4413      	add	r3, r2
 8005de2:	009b      	lsls	r3, r3, #2
 8005de4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005de8:	687a      	ldr	r2, [r7, #4]
 8005dea:	4413      	add	r3, r2
 8005dec:	3304      	adds	r3, #4
 8005dee:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005df0:	7bbb      	ldrb	r3, [r7, #14]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d002      	beq.n	8005dfc <USBD_StdEPReq+0x2d8>
 8005df6:	7bbb      	ldrb	r3, [r7, #14]
 8005df8:	2b80      	cmp	r3, #128	; 0x80
 8005dfa:	d103      	bne.n	8005e04 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	601a      	str	r2, [r3, #0]
 8005e02:	e00e      	b.n	8005e22 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005e04:	7bbb      	ldrb	r3, [r7, #14]
 8005e06:	4619      	mov	r1, r3
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	f001 f867 	bl	8006edc <USBD_LL_IsStallEP>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d003      	beq.n	8005e1c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	2201      	movs	r2, #1
 8005e18:	601a      	str	r2, [r3, #0]
 8005e1a:	e002      	b.n	8005e22 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	2202      	movs	r2, #2
 8005e26:	4619      	mov	r1, r3
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f000 fbd1 	bl	80065d0 <USBD_CtlSendData>
              break;
 8005e2e:	e004      	b.n	8005e3a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8005e30:	6839      	ldr	r1, [r7, #0]
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f000 fb5b 	bl	80064ee <USBD_CtlError>
              break;
 8005e38:	bf00      	nop
          }
          break;
 8005e3a:	e004      	b.n	8005e46 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8005e3c:	6839      	ldr	r1, [r7, #0]
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f000 fb55 	bl	80064ee <USBD_CtlError>
          break;
 8005e44:	bf00      	nop
      }
      break;
 8005e46:	e005      	b.n	8005e54 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8005e48:	6839      	ldr	r1, [r7, #0]
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f000 fb4f 	bl	80064ee <USBD_CtlError>
      break;
 8005e50:	e000      	b.n	8005e54 <USBD_StdEPReq+0x330>
      break;
 8005e52:	bf00      	nop
  }

  return ret;
 8005e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3710      	adds	r7, #16
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}
	...

08005e60 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b084      	sub	sp, #16
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005e72:	2300      	movs	r3, #0
 8005e74:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	885b      	ldrh	r3, [r3, #2]
 8005e7a:	0a1b      	lsrs	r3, r3, #8
 8005e7c:	b29b      	uxth	r3, r3
 8005e7e:	3b01      	subs	r3, #1
 8005e80:	2b06      	cmp	r3, #6
 8005e82:	f200 8128 	bhi.w	80060d6 <USBD_GetDescriptor+0x276>
 8005e86:	a201      	add	r2, pc, #4	; (adr r2, 8005e8c <USBD_GetDescriptor+0x2c>)
 8005e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e8c:	08005ea9 	.word	0x08005ea9
 8005e90:	08005ec1 	.word	0x08005ec1
 8005e94:	08005f01 	.word	0x08005f01
 8005e98:	080060d7 	.word	0x080060d7
 8005e9c:	080060d7 	.word	0x080060d7
 8005ea0:	08006077 	.word	0x08006077
 8005ea4:	080060a3 	.word	0x080060a3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	687a      	ldr	r2, [r7, #4]
 8005eb2:	7c12      	ldrb	r2, [r2, #16]
 8005eb4:	f107 0108 	add.w	r1, r7, #8
 8005eb8:	4610      	mov	r0, r2
 8005eba:	4798      	blx	r3
 8005ebc:	60f8      	str	r0, [r7, #12]
      break;
 8005ebe:	e112      	b.n	80060e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	7c1b      	ldrb	r3, [r3, #16]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d10d      	bne.n	8005ee4 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ed0:	f107 0208 	add.w	r2, r7, #8
 8005ed4:	4610      	mov	r0, r2
 8005ed6:	4798      	blx	r3
 8005ed8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	3301      	adds	r3, #1
 8005ede:	2202      	movs	r2, #2
 8005ee0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005ee2:	e100      	b.n	80060e6 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eec:	f107 0208 	add.w	r2, r7, #8
 8005ef0:	4610      	mov	r0, r2
 8005ef2:	4798      	blx	r3
 8005ef4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	3301      	adds	r3, #1
 8005efa:	2202      	movs	r2, #2
 8005efc:	701a      	strb	r2, [r3, #0]
      break;
 8005efe:	e0f2      	b.n	80060e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	885b      	ldrh	r3, [r3, #2]
 8005f04:	b2db      	uxtb	r3, r3
 8005f06:	2b05      	cmp	r3, #5
 8005f08:	f200 80ac 	bhi.w	8006064 <USBD_GetDescriptor+0x204>
 8005f0c:	a201      	add	r2, pc, #4	; (adr r2, 8005f14 <USBD_GetDescriptor+0xb4>)
 8005f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f12:	bf00      	nop
 8005f14:	08005f2d 	.word	0x08005f2d
 8005f18:	08005f61 	.word	0x08005f61
 8005f1c:	08005f95 	.word	0x08005f95
 8005f20:	08005fc9 	.word	0x08005fc9
 8005f24:	08005ffd 	.word	0x08005ffd
 8005f28:	08006031 	.word	0x08006031
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d00b      	beq.n	8005f50 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	687a      	ldr	r2, [r7, #4]
 8005f42:	7c12      	ldrb	r2, [r2, #16]
 8005f44:	f107 0108 	add.w	r1, r7, #8
 8005f48:	4610      	mov	r0, r2
 8005f4a:	4798      	blx	r3
 8005f4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005f4e:	e091      	b.n	8006074 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005f50:	6839      	ldr	r1, [r7, #0]
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f000 facb 	bl	80064ee <USBD_CtlError>
            err++;
 8005f58:	7afb      	ldrb	r3, [r7, #11]
 8005f5a:	3301      	adds	r3, #1
 8005f5c:	72fb      	strb	r3, [r7, #11]
          break;
 8005f5e:	e089      	b.n	8006074 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d00b      	beq.n	8005f84 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f72:	689b      	ldr	r3, [r3, #8]
 8005f74:	687a      	ldr	r2, [r7, #4]
 8005f76:	7c12      	ldrb	r2, [r2, #16]
 8005f78:	f107 0108 	add.w	r1, r7, #8
 8005f7c:	4610      	mov	r0, r2
 8005f7e:	4798      	blx	r3
 8005f80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005f82:	e077      	b.n	8006074 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005f84:	6839      	ldr	r1, [r7, #0]
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f000 fab1 	bl	80064ee <USBD_CtlError>
            err++;
 8005f8c:	7afb      	ldrb	r3, [r7, #11]
 8005f8e:	3301      	adds	r3, #1
 8005f90:	72fb      	strb	r3, [r7, #11]
          break;
 8005f92:	e06f      	b.n	8006074 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f9a:	68db      	ldr	r3, [r3, #12]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d00b      	beq.n	8005fb8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005fa6:	68db      	ldr	r3, [r3, #12]
 8005fa8:	687a      	ldr	r2, [r7, #4]
 8005faa:	7c12      	ldrb	r2, [r2, #16]
 8005fac:	f107 0108 	add.w	r1, r7, #8
 8005fb0:	4610      	mov	r0, r2
 8005fb2:	4798      	blx	r3
 8005fb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005fb6:	e05d      	b.n	8006074 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005fb8:	6839      	ldr	r1, [r7, #0]
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f000 fa97 	bl	80064ee <USBD_CtlError>
            err++;
 8005fc0:	7afb      	ldrb	r3, [r7, #11]
 8005fc2:	3301      	adds	r3, #1
 8005fc4:	72fb      	strb	r3, [r7, #11]
          break;
 8005fc6:	e055      	b.n	8006074 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005fce:	691b      	ldr	r3, [r3, #16]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d00b      	beq.n	8005fec <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005fda:	691b      	ldr	r3, [r3, #16]
 8005fdc:	687a      	ldr	r2, [r7, #4]
 8005fde:	7c12      	ldrb	r2, [r2, #16]
 8005fe0:	f107 0108 	add.w	r1, r7, #8
 8005fe4:	4610      	mov	r0, r2
 8005fe6:	4798      	blx	r3
 8005fe8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005fea:	e043      	b.n	8006074 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005fec:	6839      	ldr	r1, [r7, #0]
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f000 fa7d 	bl	80064ee <USBD_CtlError>
            err++;
 8005ff4:	7afb      	ldrb	r3, [r7, #11]
 8005ff6:	3301      	adds	r3, #1
 8005ff8:	72fb      	strb	r3, [r7, #11]
          break;
 8005ffa:	e03b      	b.n	8006074 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006002:	695b      	ldr	r3, [r3, #20]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d00b      	beq.n	8006020 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800600e:	695b      	ldr	r3, [r3, #20]
 8006010:	687a      	ldr	r2, [r7, #4]
 8006012:	7c12      	ldrb	r2, [r2, #16]
 8006014:	f107 0108 	add.w	r1, r7, #8
 8006018:	4610      	mov	r0, r2
 800601a:	4798      	blx	r3
 800601c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800601e:	e029      	b.n	8006074 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006020:	6839      	ldr	r1, [r7, #0]
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f000 fa63 	bl	80064ee <USBD_CtlError>
            err++;
 8006028:	7afb      	ldrb	r3, [r7, #11]
 800602a:	3301      	adds	r3, #1
 800602c:	72fb      	strb	r3, [r7, #11]
          break;
 800602e:	e021      	b.n	8006074 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006036:	699b      	ldr	r3, [r3, #24]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d00b      	beq.n	8006054 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006042:	699b      	ldr	r3, [r3, #24]
 8006044:	687a      	ldr	r2, [r7, #4]
 8006046:	7c12      	ldrb	r2, [r2, #16]
 8006048:	f107 0108 	add.w	r1, r7, #8
 800604c:	4610      	mov	r0, r2
 800604e:	4798      	blx	r3
 8006050:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006052:	e00f      	b.n	8006074 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006054:	6839      	ldr	r1, [r7, #0]
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f000 fa49 	bl	80064ee <USBD_CtlError>
            err++;
 800605c:	7afb      	ldrb	r3, [r7, #11]
 800605e:	3301      	adds	r3, #1
 8006060:	72fb      	strb	r3, [r7, #11]
          break;
 8006062:	e007      	b.n	8006074 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006064:	6839      	ldr	r1, [r7, #0]
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f000 fa41 	bl	80064ee <USBD_CtlError>
          err++;
 800606c:	7afb      	ldrb	r3, [r7, #11]
 800606e:	3301      	adds	r3, #1
 8006070:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006072:	bf00      	nop
      }
      break;
 8006074:	e037      	b.n	80060e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	7c1b      	ldrb	r3, [r3, #16]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d109      	bne.n	8006092 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006086:	f107 0208 	add.w	r2, r7, #8
 800608a:	4610      	mov	r0, r2
 800608c:	4798      	blx	r3
 800608e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006090:	e029      	b.n	80060e6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006092:	6839      	ldr	r1, [r7, #0]
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f000 fa2a 	bl	80064ee <USBD_CtlError>
        err++;
 800609a:	7afb      	ldrb	r3, [r7, #11]
 800609c:	3301      	adds	r3, #1
 800609e:	72fb      	strb	r3, [r7, #11]
      break;
 80060a0:	e021      	b.n	80060e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	7c1b      	ldrb	r3, [r3, #16]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d10d      	bne.n	80060c6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060b2:	f107 0208 	add.w	r2, r7, #8
 80060b6:	4610      	mov	r0, r2
 80060b8:	4798      	blx	r3
 80060ba:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	3301      	adds	r3, #1
 80060c0:	2207      	movs	r2, #7
 80060c2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80060c4:	e00f      	b.n	80060e6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80060c6:	6839      	ldr	r1, [r7, #0]
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f000 fa10 	bl	80064ee <USBD_CtlError>
        err++;
 80060ce:	7afb      	ldrb	r3, [r7, #11]
 80060d0:	3301      	adds	r3, #1
 80060d2:	72fb      	strb	r3, [r7, #11]
      break;
 80060d4:	e007      	b.n	80060e6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80060d6:	6839      	ldr	r1, [r7, #0]
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f000 fa08 	bl	80064ee <USBD_CtlError>
      err++;
 80060de:	7afb      	ldrb	r3, [r7, #11]
 80060e0:	3301      	adds	r3, #1
 80060e2:	72fb      	strb	r3, [r7, #11]
      break;
 80060e4:	bf00      	nop
  }

  if (err != 0U)
 80060e6:	7afb      	ldrb	r3, [r7, #11]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d11e      	bne.n	800612a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	88db      	ldrh	r3, [r3, #6]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d016      	beq.n	8006122 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80060f4:	893b      	ldrh	r3, [r7, #8]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d00e      	beq.n	8006118 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	88da      	ldrh	r2, [r3, #6]
 80060fe:	893b      	ldrh	r3, [r7, #8]
 8006100:	4293      	cmp	r3, r2
 8006102:	bf28      	it	cs
 8006104:	4613      	movcs	r3, r2
 8006106:	b29b      	uxth	r3, r3
 8006108:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800610a:	893b      	ldrh	r3, [r7, #8]
 800610c:	461a      	mov	r2, r3
 800610e:	68f9      	ldr	r1, [r7, #12]
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f000 fa5d 	bl	80065d0 <USBD_CtlSendData>
 8006116:	e009      	b.n	800612c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006118:	6839      	ldr	r1, [r7, #0]
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f000 f9e7 	bl	80064ee <USBD_CtlError>
 8006120:	e004      	b.n	800612c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f000 faae 	bl	8006684 <USBD_CtlSendStatus>
 8006128:	e000      	b.n	800612c <USBD_GetDescriptor+0x2cc>
    return;
 800612a:	bf00      	nop
  }
}
 800612c:	3710      	adds	r7, #16
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}
 8006132:	bf00      	nop

08006134 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b084      	sub	sp, #16
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
 800613c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	889b      	ldrh	r3, [r3, #4]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d131      	bne.n	80061aa <USBD_SetAddress+0x76>
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	88db      	ldrh	r3, [r3, #6]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d12d      	bne.n	80061aa <USBD_SetAddress+0x76>
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	885b      	ldrh	r3, [r3, #2]
 8006152:	2b7f      	cmp	r3, #127	; 0x7f
 8006154:	d829      	bhi.n	80061aa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	885b      	ldrh	r3, [r3, #2]
 800615a:	b2db      	uxtb	r3, r3
 800615c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006160:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006168:	b2db      	uxtb	r3, r3
 800616a:	2b03      	cmp	r3, #3
 800616c:	d104      	bne.n	8006178 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800616e:	6839      	ldr	r1, [r7, #0]
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f000 f9bc 	bl	80064ee <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006176:	e01d      	b.n	80061b4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	7bfa      	ldrb	r2, [r7, #15]
 800617c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006180:	7bfb      	ldrb	r3, [r7, #15]
 8006182:	4619      	mov	r1, r3
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	f000 fed5 	bl	8006f34 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f000 fa7a 	bl	8006684 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006190:	7bfb      	ldrb	r3, [r7, #15]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d004      	beq.n	80061a0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2202      	movs	r2, #2
 800619a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800619e:	e009      	b.n	80061b4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2201      	movs	r2, #1
 80061a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061a8:	e004      	b.n	80061b4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80061aa:	6839      	ldr	r1, [r7, #0]
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f000 f99e 	bl	80064ee <USBD_CtlError>
  }
}
 80061b2:	bf00      	nop
 80061b4:	bf00      	nop
 80061b6:	3710      	adds	r7, #16
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}

080061bc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b084      	sub	sp, #16
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80061c6:	2300      	movs	r3, #0
 80061c8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	885b      	ldrh	r3, [r3, #2]
 80061ce:	b2da      	uxtb	r2, r3
 80061d0:	4b4e      	ldr	r3, [pc, #312]	; (800630c <USBD_SetConfig+0x150>)
 80061d2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80061d4:	4b4d      	ldr	r3, [pc, #308]	; (800630c <USBD_SetConfig+0x150>)
 80061d6:	781b      	ldrb	r3, [r3, #0]
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d905      	bls.n	80061e8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80061dc:	6839      	ldr	r1, [r7, #0]
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f000 f985 	bl	80064ee <USBD_CtlError>
    return USBD_FAIL;
 80061e4:	2303      	movs	r3, #3
 80061e6:	e08c      	b.n	8006302 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061ee:	b2db      	uxtb	r3, r3
 80061f0:	2b02      	cmp	r3, #2
 80061f2:	d002      	beq.n	80061fa <USBD_SetConfig+0x3e>
 80061f4:	2b03      	cmp	r3, #3
 80061f6:	d029      	beq.n	800624c <USBD_SetConfig+0x90>
 80061f8:	e075      	b.n	80062e6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80061fa:	4b44      	ldr	r3, [pc, #272]	; (800630c <USBD_SetConfig+0x150>)
 80061fc:	781b      	ldrb	r3, [r3, #0]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d020      	beq.n	8006244 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006202:	4b42      	ldr	r3, [pc, #264]	; (800630c <USBD_SetConfig+0x150>)
 8006204:	781b      	ldrb	r3, [r3, #0]
 8006206:	461a      	mov	r2, r3
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800620c:	4b3f      	ldr	r3, [pc, #252]	; (800630c <USBD_SetConfig+0x150>)
 800620e:	781b      	ldrb	r3, [r3, #0]
 8006210:	4619      	mov	r1, r3
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f7fe ffe7 	bl	80051e6 <USBD_SetClassConfig>
 8006218:	4603      	mov	r3, r0
 800621a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800621c:	7bfb      	ldrb	r3, [r7, #15]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d008      	beq.n	8006234 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006222:	6839      	ldr	r1, [r7, #0]
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f000 f962 	bl	80064ee <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2202      	movs	r2, #2
 800622e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006232:	e065      	b.n	8006300 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f000 fa25 	bl	8006684 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2203      	movs	r2, #3
 800623e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006242:	e05d      	b.n	8006300 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f000 fa1d 	bl	8006684 <USBD_CtlSendStatus>
      break;
 800624a:	e059      	b.n	8006300 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800624c:	4b2f      	ldr	r3, [pc, #188]	; (800630c <USBD_SetConfig+0x150>)
 800624e:	781b      	ldrb	r3, [r3, #0]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d112      	bne.n	800627a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2202      	movs	r2, #2
 8006258:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800625c:	4b2b      	ldr	r3, [pc, #172]	; (800630c <USBD_SetConfig+0x150>)
 800625e:	781b      	ldrb	r3, [r3, #0]
 8006260:	461a      	mov	r2, r3
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006266:	4b29      	ldr	r3, [pc, #164]	; (800630c <USBD_SetConfig+0x150>)
 8006268:	781b      	ldrb	r3, [r3, #0]
 800626a:	4619      	mov	r1, r3
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f7fe ffd6 	bl	800521e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f000 fa06 	bl	8006684 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006278:	e042      	b.n	8006300 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800627a:	4b24      	ldr	r3, [pc, #144]	; (800630c <USBD_SetConfig+0x150>)
 800627c:	781b      	ldrb	r3, [r3, #0]
 800627e:	461a      	mov	r2, r3
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	685b      	ldr	r3, [r3, #4]
 8006284:	429a      	cmp	r2, r3
 8006286:	d02a      	beq.n	80062de <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	b2db      	uxtb	r3, r3
 800628e:	4619      	mov	r1, r3
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f7fe ffc4 	bl	800521e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006296:	4b1d      	ldr	r3, [pc, #116]	; (800630c <USBD_SetConfig+0x150>)
 8006298:	781b      	ldrb	r3, [r3, #0]
 800629a:	461a      	mov	r2, r3
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80062a0:	4b1a      	ldr	r3, [pc, #104]	; (800630c <USBD_SetConfig+0x150>)
 80062a2:	781b      	ldrb	r3, [r3, #0]
 80062a4:	4619      	mov	r1, r3
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f7fe ff9d 	bl	80051e6 <USBD_SetClassConfig>
 80062ac:	4603      	mov	r3, r0
 80062ae:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80062b0:	7bfb      	ldrb	r3, [r7, #15]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d00f      	beq.n	80062d6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80062b6:	6839      	ldr	r1, [r7, #0]
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f000 f918 	bl	80064ee <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	b2db      	uxtb	r3, r3
 80062c4:	4619      	mov	r1, r3
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f7fe ffa9 	bl	800521e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2202      	movs	r2, #2
 80062d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80062d4:	e014      	b.n	8006300 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f000 f9d4 	bl	8006684 <USBD_CtlSendStatus>
      break;
 80062dc:	e010      	b.n	8006300 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f000 f9d0 	bl	8006684 <USBD_CtlSendStatus>
      break;
 80062e4:	e00c      	b.n	8006300 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80062e6:	6839      	ldr	r1, [r7, #0]
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	f000 f900 	bl	80064ee <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80062ee:	4b07      	ldr	r3, [pc, #28]	; (800630c <USBD_SetConfig+0x150>)
 80062f0:	781b      	ldrb	r3, [r3, #0]
 80062f2:	4619      	mov	r1, r3
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f7fe ff92 	bl	800521e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80062fa:	2303      	movs	r3, #3
 80062fc:	73fb      	strb	r3, [r7, #15]
      break;
 80062fe:	bf00      	nop
  }

  return ret;
 8006300:	7bfb      	ldrb	r3, [r7, #15]
}
 8006302:	4618      	mov	r0, r3
 8006304:	3710      	adds	r7, #16
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}
 800630a:	bf00      	nop
 800630c:	20000170 	.word	0x20000170

08006310 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b082      	sub	sp, #8
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	88db      	ldrh	r3, [r3, #6]
 800631e:	2b01      	cmp	r3, #1
 8006320:	d004      	beq.n	800632c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006322:	6839      	ldr	r1, [r7, #0]
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f000 f8e2 	bl	80064ee <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800632a:	e023      	b.n	8006374 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006332:	b2db      	uxtb	r3, r3
 8006334:	2b02      	cmp	r3, #2
 8006336:	dc02      	bgt.n	800633e <USBD_GetConfig+0x2e>
 8006338:	2b00      	cmp	r3, #0
 800633a:	dc03      	bgt.n	8006344 <USBD_GetConfig+0x34>
 800633c:	e015      	b.n	800636a <USBD_GetConfig+0x5a>
 800633e:	2b03      	cmp	r3, #3
 8006340:	d00b      	beq.n	800635a <USBD_GetConfig+0x4a>
 8006342:	e012      	b.n	800636a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2200      	movs	r2, #0
 8006348:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	3308      	adds	r3, #8
 800634e:	2201      	movs	r2, #1
 8006350:	4619      	mov	r1, r3
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f000 f93c 	bl	80065d0 <USBD_CtlSendData>
        break;
 8006358:	e00c      	b.n	8006374 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	3304      	adds	r3, #4
 800635e:	2201      	movs	r2, #1
 8006360:	4619      	mov	r1, r3
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f000 f934 	bl	80065d0 <USBD_CtlSendData>
        break;
 8006368:	e004      	b.n	8006374 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800636a:	6839      	ldr	r1, [r7, #0]
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f000 f8be 	bl	80064ee <USBD_CtlError>
        break;
 8006372:	bf00      	nop
}
 8006374:	bf00      	nop
 8006376:	3708      	adds	r7, #8
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}

0800637c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b082      	sub	sp, #8
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
 8006384:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800638c:	b2db      	uxtb	r3, r3
 800638e:	3b01      	subs	r3, #1
 8006390:	2b02      	cmp	r3, #2
 8006392:	d81e      	bhi.n	80063d2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	88db      	ldrh	r3, [r3, #6]
 8006398:	2b02      	cmp	r3, #2
 800639a:	d004      	beq.n	80063a6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800639c:	6839      	ldr	r1, [r7, #0]
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f000 f8a5 	bl	80064ee <USBD_CtlError>
        break;
 80063a4:	e01a      	b.n	80063dc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2201      	movs	r2, #1
 80063aa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d005      	beq.n	80063c2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	68db      	ldr	r3, [r3, #12]
 80063ba:	f043 0202 	orr.w	r2, r3, #2
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	330c      	adds	r3, #12
 80063c6:	2202      	movs	r2, #2
 80063c8:	4619      	mov	r1, r3
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f000 f900 	bl	80065d0 <USBD_CtlSendData>
      break;
 80063d0:	e004      	b.n	80063dc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80063d2:	6839      	ldr	r1, [r7, #0]
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f000 f88a 	bl	80064ee <USBD_CtlError>
      break;
 80063da:	bf00      	nop
  }
}
 80063dc:	bf00      	nop
 80063de:	3708      	adds	r7, #8
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}

080063e4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b082      	sub	sp, #8
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
 80063ec:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	885b      	ldrh	r3, [r3, #2]
 80063f2:	2b01      	cmp	r3, #1
 80063f4:	d107      	bne.n	8006406 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2201      	movs	r2, #1
 80063fa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f000 f940 	bl	8006684 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006404:	e013      	b.n	800642e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	885b      	ldrh	r3, [r3, #2]
 800640a:	2b02      	cmp	r3, #2
 800640c:	d10b      	bne.n	8006426 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	889b      	ldrh	r3, [r3, #4]
 8006412:	0a1b      	lsrs	r3, r3, #8
 8006414:	b29b      	uxth	r3, r3
 8006416:	b2da      	uxtb	r2, r3
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f000 f930 	bl	8006684 <USBD_CtlSendStatus>
}
 8006424:	e003      	b.n	800642e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006426:	6839      	ldr	r1, [r7, #0]
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f000 f860 	bl	80064ee <USBD_CtlError>
}
 800642e:	bf00      	nop
 8006430:	3708      	adds	r7, #8
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}

08006436 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006436:	b580      	push	{r7, lr}
 8006438:	b082      	sub	sp, #8
 800643a:	af00      	add	r7, sp, #0
 800643c:	6078      	str	r0, [r7, #4]
 800643e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006446:	b2db      	uxtb	r3, r3
 8006448:	3b01      	subs	r3, #1
 800644a:	2b02      	cmp	r3, #2
 800644c:	d80b      	bhi.n	8006466 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	885b      	ldrh	r3, [r3, #2]
 8006452:	2b01      	cmp	r3, #1
 8006454:	d10c      	bne.n	8006470 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2200      	movs	r2, #0
 800645a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f000 f910 	bl	8006684 <USBD_CtlSendStatus>
      }
      break;
 8006464:	e004      	b.n	8006470 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006466:	6839      	ldr	r1, [r7, #0]
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f000 f840 	bl	80064ee <USBD_CtlError>
      break;
 800646e:	e000      	b.n	8006472 <USBD_ClrFeature+0x3c>
      break;
 8006470:	bf00      	nop
  }
}
 8006472:	bf00      	nop
 8006474:	3708      	adds	r7, #8
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}

0800647a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800647a:	b580      	push	{r7, lr}
 800647c:	b084      	sub	sp, #16
 800647e:	af00      	add	r7, sp, #0
 8006480:	6078      	str	r0, [r7, #4]
 8006482:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	781a      	ldrb	r2, [r3, #0]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	3301      	adds	r3, #1
 8006494:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	781a      	ldrb	r2, [r3, #0]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	3301      	adds	r3, #1
 80064a2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80064a4:	68f8      	ldr	r0, [r7, #12]
 80064a6:	f7ff fa41 	bl	800592c <SWAPBYTE>
 80064aa:	4603      	mov	r3, r0
 80064ac:	461a      	mov	r2, r3
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	3301      	adds	r3, #1
 80064b6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	3301      	adds	r3, #1
 80064bc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80064be:	68f8      	ldr	r0, [r7, #12]
 80064c0:	f7ff fa34 	bl	800592c <SWAPBYTE>
 80064c4:	4603      	mov	r3, r0
 80064c6:	461a      	mov	r2, r3
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	3301      	adds	r3, #1
 80064d0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	3301      	adds	r3, #1
 80064d6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80064d8:	68f8      	ldr	r0, [r7, #12]
 80064da:	f7ff fa27 	bl	800592c <SWAPBYTE>
 80064de:	4603      	mov	r3, r0
 80064e0:	461a      	mov	r2, r3
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	80da      	strh	r2, [r3, #6]
}
 80064e6:	bf00      	nop
 80064e8:	3710      	adds	r7, #16
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}

080064ee <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80064ee:	b580      	push	{r7, lr}
 80064f0:	b082      	sub	sp, #8
 80064f2:	af00      	add	r7, sp, #0
 80064f4:	6078      	str	r0, [r7, #4]
 80064f6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80064f8:	2180      	movs	r1, #128	; 0x80
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f000 fcb0 	bl	8006e60 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006500:	2100      	movs	r1, #0
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f000 fcac 	bl	8006e60 <USBD_LL_StallEP>
}
 8006508:	bf00      	nop
 800650a:	3708      	adds	r7, #8
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}

08006510 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b086      	sub	sp, #24
 8006514:	af00      	add	r7, sp, #0
 8006516:	60f8      	str	r0, [r7, #12]
 8006518:	60b9      	str	r1, [r7, #8]
 800651a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800651c:	2300      	movs	r3, #0
 800651e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d036      	beq.n	8006594 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800652a:	6938      	ldr	r0, [r7, #16]
 800652c:	f000 f836 	bl	800659c <USBD_GetLen>
 8006530:	4603      	mov	r3, r0
 8006532:	3301      	adds	r3, #1
 8006534:	b29b      	uxth	r3, r3
 8006536:	005b      	lsls	r3, r3, #1
 8006538:	b29a      	uxth	r2, r3
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800653e:	7dfb      	ldrb	r3, [r7, #23]
 8006540:	68ba      	ldr	r2, [r7, #8]
 8006542:	4413      	add	r3, r2
 8006544:	687a      	ldr	r2, [r7, #4]
 8006546:	7812      	ldrb	r2, [r2, #0]
 8006548:	701a      	strb	r2, [r3, #0]
  idx++;
 800654a:	7dfb      	ldrb	r3, [r7, #23]
 800654c:	3301      	adds	r3, #1
 800654e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006550:	7dfb      	ldrb	r3, [r7, #23]
 8006552:	68ba      	ldr	r2, [r7, #8]
 8006554:	4413      	add	r3, r2
 8006556:	2203      	movs	r2, #3
 8006558:	701a      	strb	r2, [r3, #0]
  idx++;
 800655a:	7dfb      	ldrb	r3, [r7, #23]
 800655c:	3301      	adds	r3, #1
 800655e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006560:	e013      	b.n	800658a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006562:	7dfb      	ldrb	r3, [r7, #23]
 8006564:	68ba      	ldr	r2, [r7, #8]
 8006566:	4413      	add	r3, r2
 8006568:	693a      	ldr	r2, [r7, #16]
 800656a:	7812      	ldrb	r2, [r2, #0]
 800656c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	3301      	adds	r3, #1
 8006572:	613b      	str	r3, [r7, #16]
    idx++;
 8006574:	7dfb      	ldrb	r3, [r7, #23]
 8006576:	3301      	adds	r3, #1
 8006578:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800657a:	7dfb      	ldrb	r3, [r7, #23]
 800657c:	68ba      	ldr	r2, [r7, #8]
 800657e:	4413      	add	r3, r2
 8006580:	2200      	movs	r2, #0
 8006582:	701a      	strb	r2, [r3, #0]
    idx++;
 8006584:	7dfb      	ldrb	r3, [r7, #23]
 8006586:	3301      	adds	r3, #1
 8006588:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	781b      	ldrb	r3, [r3, #0]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d1e7      	bne.n	8006562 <USBD_GetString+0x52>
 8006592:	e000      	b.n	8006596 <USBD_GetString+0x86>
    return;
 8006594:	bf00      	nop
  }
}
 8006596:	3718      	adds	r7, #24
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}

0800659c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800659c:	b480      	push	{r7}
 800659e:	b085      	sub	sp, #20
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80065a4:	2300      	movs	r3, #0
 80065a6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80065ac:	e005      	b.n	80065ba <USBD_GetLen+0x1e>
  {
    len++;
 80065ae:	7bfb      	ldrb	r3, [r7, #15]
 80065b0:	3301      	adds	r3, #1
 80065b2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	3301      	adds	r3, #1
 80065b8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	781b      	ldrb	r3, [r3, #0]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d1f5      	bne.n	80065ae <USBD_GetLen+0x12>
  }

  return len;
 80065c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	3714      	adds	r7, #20
 80065c8:	46bd      	mov	sp, r7
 80065ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ce:	4770      	bx	lr

080065d0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b084      	sub	sp, #16
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	60f8      	str	r0, [r7, #12]
 80065d8:	60b9      	str	r1, [r7, #8]
 80065da:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2202      	movs	r2, #2
 80065e0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	687a      	ldr	r2, [r7, #4]
 80065e8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	687a      	ldr	r2, [r7, #4]
 80065ee:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	68ba      	ldr	r2, [r7, #8]
 80065f4:	2100      	movs	r1, #0
 80065f6:	68f8      	ldr	r0, [r7, #12]
 80065f8:	f000 fcbb 	bl	8006f72 <USBD_LL_Transmit>

  return USBD_OK;
 80065fc:	2300      	movs	r3, #0
}
 80065fe:	4618      	mov	r0, r3
 8006600:	3710      	adds	r7, #16
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}

08006606 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006606:	b580      	push	{r7, lr}
 8006608:	b084      	sub	sp, #16
 800660a:	af00      	add	r7, sp, #0
 800660c:	60f8      	str	r0, [r7, #12]
 800660e:	60b9      	str	r1, [r7, #8]
 8006610:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	68ba      	ldr	r2, [r7, #8]
 8006616:	2100      	movs	r1, #0
 8006618:	68f8      	ldr	r0, [r7, #12]
 800661a:	f000 fcaa 	bl	8006f72 <USBD_LL_Transmit>

  return USBD_OK;
 800661e:	2300      	movs	r3, #0
}
 8006620:	4618      	mov	r0, r3
 8006622:	3710      	adds	r7, #16
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}

08006628 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b084      	sub	sp, #16
 800662c:	af00      	add	r7, sp, #0
 800662e:	60f8      	str	r0, [r7, #12]
 8006630:	60b9      	str	r1, [r7, #8]
 8006632:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	2203      	movs	r2, #3
 8006638:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	687a      	ldr	r2, [r7, #4]
 8006640:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	687a      	ldr	r2, [r7, #4]
 8006648:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	68ba      	ldr	r2, [r7, #8]
 8006650:	2100      	movs	r1, #0
 8006652:	68f8      	ldr	r0, [r7, #12]
 8006654:	f000 fcae 	bl	8006fb4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006658:	2300      	movs	r3, #0
}
 800665a:	4618      	mov	r0, r3
 800665c:	3710      	adds	r7, #16
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}

08006662 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006662:	b580      	push	{r7, lr}
 8006664:	b084      	sub	sp, #16
 8006666:	af00      	add	r7, sp, #0
 8006668:	60f8      	str	r0, [r7, #12]
 800666a:	60b9      	str	r1, [r7, #8]
 800666c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	68ba      	ldr	r2, [r7, #8]
 8006672:	2100      	movs	r1, #0
 8006674:	68f8      	ldr	r0, [r7, #12]
 8006676:	f000 fc9d 	bl	8006fb4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800667a:	2300      	movs	r3, #0
}
 800667c:	4618      	mov	r0, r3
 800667e:	3710      	adds	r7, #16
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}

08006684 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b082      	sub	sp, #8
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2204      	movs	r2, #4
 8006690:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006694:	2300      	movs	r3, #0
 8006696:	2200      	movs	r2, #0
 8006698:	2100      	movs	r1, #0
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f000 fc69 	bl	8006f72 <USBD_LL_Transmit>

  return USBD_OK;
 80066a0:	2300      	movs	r3, #0
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3708      	adds	r7, #8
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}

080066aa <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80066aa:	b580      	push	{r7, lr}
 80066ac:	b082      	sub	sp, #8
 80066ae:	af00      	add	r7, sp, #0
 80066b0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2205      	movs	r2, #5
 80066b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80066ba:	2300      	movs	r3, #0
 80066bc:	2200      	movs	r2, #0
 80066be:	2100      	movs	r1, #0
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f000 fc77 	bl	8006fb4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80066c6:	2300      	movs	r3, #0
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3708      	adds	r7, #8
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}

080066d0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80066d4:	2200      	movs	r2, #0
 80066d6:	4912      	ldr	r1, [pc, #72]	; (8006720 <MX_USB_DEVICE_Init+0x50>)
 80066d8:	4812      	ldr	r0, [pc, #72]	; (8006724 <MX_USB_DEVICE_Init+0x54>)
 80066da:	f7fe fd07 	bl	80050ec <USBD_Init>
 80066de:	4603      	mov	r3, r0
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d001      	beq.n	80066e8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80066e4:	f7f9 ffe4 	bl	80006b0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80066e8:	490f      	ldr	r1, [pc, #60]	; (8006728 <MX_USB_DEVICE_Init+0x58>)
 80066ea:	480e      	ldr	r0, [pc, #56]	; (8006724 <MX_USB_DEVICE_Init+0x54>)
 80066ec:	f7fe fd2e 	bl	800514c <USBD_RegisterClass>
 80066f0:	4603      	mov	r3, r0
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d001      	beq.n	80066fa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80066f6:	f7f9 ffdb 	bl	80006b0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80066fa:	490c      	ldr	r1, [pc, #48]	; (800672c <MX_USB_DEVICE_Init+0x5c>)
 80066fc:	4809      	ldr	r0, [pc, #36]	; (8006724 <MX_USB_DEVICE_Init+0x54>)
 80066fe:	f7fe fc65 	bl	8004fcc <USBD_CDC_RegisterInterface>
 8006702:	4603      	mov	r3, r0
 8006704:	2b00      	cmp	r3, #0
 8006706:	d001      	beq.n	800670c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006708:	f7f9 ffd2 	bl	80006b0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800670c:	4805      	ldr	r0, [pc, #20]	; (8006724 <MX_USB_DEVICE_Init+0x54>)
 800670e:	f7fe fd53 	bl	80051b8 <USBD_Start>
 8006712:	4603      	mov	r3, r0
 8006714:	2b00      	cmp	r3, #0
 8006716:	d001      	beq.n	800671c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006718:	f7f9 ffca 	bl	80006b0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800671c:	bf00      	nop
 800671e:	bd80      	pop	{r7, pc}
 8006720:	200000ac 	.word	0x200000ac
 8006724:	20000174 	.word	0x20000174
 8006728:	20000018 	.word	0x20000018
 800672c:	20000098 	.word	0x20000098

08006730 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006734:	2200      	movs	r2, #0
 8006736:	4905      	ldr	r1, [pc, #20]	; (800674c <CDC_Init_FS+0x1c>)
 8006738:	4805      	ldr	r0, [pc, #20]	; (8006750 <CDC_Init_FS+0x20>)
 800673a:	f7fe fc61 	bl	8005000 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800673e:	4905      	ldr	r1, [pc, #20]	; (8006754 <CDC_Init_FS+0x24>)
 8006740:	4803      	ldr	r0, [pc, #12]	; (8006750 <CDC_Init_FS+0x20>)
 8006742:	f7fe fc7f 	bl	8005044 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006746:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006748:	4618      	mov	r0, r3
 800674a:	bd80      	pop	{r7, pc}
 800674c:	20000c50 	.word	0x20000c50
 8006750:	20000174 	.word	0x20000174
 8006754:	20000450 	.word	0x20000450

08006758 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006758:	b480      	push	{r7}
 800675a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800675c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800675e:	4618      	mov	r0, r3
 8006760:	46bd      	mov	sp, r7
 8006762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006766:	4770      	bx	lr

08006768 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006768:	b480      	push	{r7}
 800676a:	b083      	sub	sp, #12
 800676c:	af00      	add	r7, sp, #0
 800676e:	4603      	mov	r3, r0
 8006770:	6039      	str	r1, [r7, #0]
 8006772:	71fb      	strb	r3, [r7, #7]
 8006774:	4613      	mov	r3, r2
 8006776:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006778:	79fb      	ldrb	r3, [r7, #7]
 800677a:	2b23      	cmp	r3, #35	; 0x23
 800677c:	d84a      	bhi.n	8006814 <CDC_Control_FS+0xac>
 800677e:	a201      	add	r2, pc, #4	; (adr r2, 8006784 <CDC_Control_FS+0x1c>)
 8006780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006784:	08006815 	.word	0x08006815
 8006788:	08006815 	.word	0x08006815
 800678c:	08006815 	.word	0x08006815
 8006790:	08006815 	.word	0x08006815
 8006794:	08006815 	.word	0x08006815
 8006798:	08006815 	.word	0x08006815
 800679c:	08006815 	.word	0x08006815
 80067a0:	08006815 	.word	0x08006815
 80067a4:	08006815 	.word	0x08006815
 80067a8:	08006815 	.word	0x08006815
 80067ac:	08006815 	.word	0x08006815
 80067b0:	08006815 	.word	0x08006815
 80067b4:	08006815 	.word	0x08006815
 80067b8:	08006815 	.word	0x08006815
 80067bc:	08006815 	.word	0x08006815
 80067c0:	08006815 	.word	0x08006815
 80067c4:	08006815 	.word	0x08006815
 80067c8:	08006815 	.word	0x08006815
 80067cc:	08006815 	.word	0x08006815
 80067d0:	08006815 	.word	0x08006815
 80067d4:	08006815 	.word	0x08006815
 80067d8:	08006815 	.word	0x08006815
 80067dc:	08006815 	.word	0x08006815
 80067e0:	08006815 	.word	0x08006815
 80067e4:	08006815 	.word	0x08006815
 80067e8:	08006815 	.word	0x08006815
 80067ec:	08006815 	.word	0x08006815
 80067f0:	08006815 	.word	0x08006815
 80067f4:	08006815 	.word	0x08006815
 80067f8:	08006815 	.word	0x08006815
 80067fc:	08006815 	.word	0x08006815
 8006800:	08006815 	.word	0x08006815
 8006804:	08006815 	.word	0x08006815
 8006808:	08006815 	.word	0x08006815
 800680c:	08006815 	.word	0x08006815
 8006810:	08006815 	.word	0x08006815
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006814:	bf00      	nop
  }

  return (USBD_OK);
 8006816:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006818:	4618      	mov	r0, r3
 800681a:	370c      	adds	r7, #12
 800681c:	46bd      	mov	sp, r7
 800681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006822:	4770      	bx	lr

08006824 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b082      	sub	sp, #8
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
 800682c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800682e:	6879      	ldr	r1, [r7, #4]
 8006830:	4805      	ldr	r0, [pc, #20]	; (8006848 <CDC_Receive_FS+0x24>)
 8006832:	f7fe fc07 	bl	8005044 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006836:	4804      	ldr	r0, [pc, #16]	; (8006848 <CDC_Receive_FS+0x24>)
 8006838:	f7fe fc22 	bl	8005080 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800683c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800683e:	4618      	mov	r0, r3
 8006840:	3708      	adds	r7, #8
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}
 8006846:	bf00      	nop
 8006848:	20000174 	.word	0x20000174

0800684c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800684c:	b480      	push	{r7}
 800684e:	b087      	sub	sp, #28
 8006850:	af00      	add	r7, sp, #0
 8006852:	60f8      	str	r0, [r7, #12]
 8006854:	60b9      	str	r1, [r7, #8]
 8006856:	4613      	mov	r3, r2
 8006858:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800685a:	2300      	movs	r3, #0
 800685c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800685e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006862:	4618      	mov	r0, r3
 8006864:	371c      	adds	r7, #28
 8006866:	46bd      	mov	sp, r7
 8006868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686c:	4770      	bx	lr
	...

08006870 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006870:	b480      	push	{r7}
 8006872:	b083      	sub	sp, #12
 8006874:	af00      	add	r7, sp, #0
 8006876:	4603      	mov	r3, r0
 8006878:	6039      	str	r1, [r7, #0]
 800687a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	2212      	movs	r2, #18
 8006880:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006882:	4b03      	ldr	r3, [pc, #12]	; (8006890 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006884:	4618      	mov	r0, r3
 8006886:	370c      	adds	r7, #12
 8006888:	46bd      	mov	sp, r7
 800688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688e:	4770      	bx	lr
 8006890:	200000c8 	.word	0x200000c8

08006894 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006894:	b480      	push	{r7}
 8006896:	b083      	sub	sp, #12
 8006898:	af00      	add	r7, sp, #0
 800689a:	4603      	mov	r3, r0
 800689c:	6039      	str	r1, [r7, #0]
 800689e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	2204      	movs	r2, #4
 80068a4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80068a6:	4b03      	ldr	r3, [pc, #12]	; (80068b4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	370c      	adds	r7, #12
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr
 80068b4:	200000dc 	.word	0x200000dc

080068b8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b082      	sub	sp, #8
 80068bc:	af00      	add	r7, sp, #0
 80068be:	4603      	mov	r3, r0
 80068c0:	6039      	str	r1, [r7, #0]
 80068c2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80068c4:	79fb      	ldrb	r3, [r7, #7]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d105      	bne.n	80068d6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80068ca:	683a      	ldr	r2, [r7, #0]
 80068cc:	4907      	ldr	r1, [pc, #28]	; (80068ec <USBD_FS_ProductStrDescriptor+0x34>)
 80068ce:	4808      	ldr	r0, [pc, #32]	; (80068f0 <USBD_FS_ProductStrDescriptor+0x38>)
 80068d0:	f7ff fe1e 	bl	8006510 <USBD_GetString>
 80068d4:	e004      	b.n	80068e0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80068d6:	683a      	ldr	r2, [r7, #0]
 80068d8:	4904      	ldr	r1, [pc, #16]	; (80068ec <USBD_FS_ProductStrDescriptor+0x34>)
 80068da:	4805      	ldr	r0, [pc, #20]	; (80068f0 <USBD_FS_ProductStrDescriptor+0x38>)
 80068dc:	f7ff fe18 	bl	8006510 <USBD_GetString>
  }
  return USBD_StrDesc;
 80068e0:	4b02      	ldr	r3, [pc, #8]	; (80068ec <USBD_FS_ProductStrDescriptor+0x34>)
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3708      	adds	r7, #8
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}
 80068ea:	bf00      	nop
 80068ec:	20001450 	.word	0x20001450
 80068f0:	08007114 	.word	0x08007114

080068f4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b082      	sub	sp, #8
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	4603      	mov	r3, r0
 80068fc:	6039      	str	r1, [r7, #0]
 80068fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006900:	683a      	ldr	r2, [r7, #0]
 8006902:	4904      	ldr	r1, [pc, #16]	; (8006914 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006904:	4804      	ldr	r0, [pc, #16]	; (8006918 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006906:	f7ff fe03 	bl	8006510 <USBD_GetString>
  return USBD_StrDesc;
 800690a:	4b02      	ldr	r3, [pc, #8]	; (8006914 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800690c:	4618      	mov	r0, r3
 800690e:	3708      	adds	r7, #8
 8006910:	46bd      	mov	sp, r7
 8006912:	bd80      	pop	{r7, pc}
 8006914:	20001450 	.word	0x20001450
 8006918:	0800712c 	.word	0x0800712c

0800691c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b082      	sub	sp, #8
 8006920:	af00      	add	r7, sp, #0
 8006922:	4603      	mov	r3, r0
 8006924:	6039      	str	r1, [r7, #0]
 8006926:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	221a      	movs	r2, #26
 800692c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800692e:	f000 f843 	bl	80069b8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006932:	4b02      	ldr	r3, [pc, #8]	; (800693c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006934:	4618      	mov	r0, r3
 8006936:	3708      	adds	r7, #8
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}
 800693c:	200000e0 	.word	0x200000e0

08006940 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b082      	sub	sp, #8
 8006944:	af00      	add	r7, sp, #0
 8006946:	4603      	mov	r3, r0
 8006948:	6039      	str	r1, [r7, #0]
 800694a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800694c:	79fb      	ldrb	r3, [r7, #7]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d105      	bne.n	800695e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006952:	683a      	ldr	r2, [r7, #0]
 8006954:	4907      	ldr	r1, [pc, #28]	; (8006974 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006956:	4808      	ldr	r0, [pc, #32]	; (8006978 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006958:	f7ff fdda 	bl	8006510 <USBD_GetString>
 800695c:	e004      	b.n	8006968 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800695e:	683a      	ldr	r2, [r7, #0]
 8006960:	4904      	ldr	r1, [pc, #16]	; (8006974 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006962:	4805      	ldr	r0, [pc, #20]	; (8006978 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006964:	f7ff fdd4 	bl	8006510 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006968:	4b02      	ldr	r3, [pc, #8]	; (8006974 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800696a:	4618      	mov	r0, r3
 800696c:	3708      	adds	r7, #8
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}
 8006972:	bf00      	nop
 8006974:	20001450 	.word	0x20001450
 8006978:	08007140 	.word	0x08007140

0800697c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b082      	sub	sp, #8
 8006980:	af00      	add	r7, sp, #0
 8006982:	4603      	mov	r3, r0
 8006984:	6039      	str	r1, [r7, #0]
 8006986:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006988:	79fb      	ldrb	r3, [r7, #7]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d105      	bne.n	800699a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800698e:	683a      	ldr	r2, [r7, #0]
 8006990:	4907      	ldr	r1, [pc, #28]	; (80069b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006992:	4808      	ldr	r0, [pc, #32]	; (80069b4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006994:	f7ff fdbc 	bl	8006510 <USBD_GetString>
 8006998:	e004      	b.n	80069a4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800699a:	683a      	ldr	r2, [r7, #0]
 800699c:	4904      	ldr	r1, [pc, #16]	; (80069b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800699e:	4805      	ldr	r0, [pc, #20]	; (80069b4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80069a0:	f7ff fdb6 	bl	8006510 <USBD_GetString>
  }
  return USBD_StrDesc;
 80069a4:	4b02      	ldr	r3, [pc, #8]	; (80069b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3708      	adds	r7, #8
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}
 80069ae:	bf00      	nop
 80069b0:	20001450 	.word	0x20001450
 80069b4:	0800714c 	.word	0x0800714c

080069b8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b084      	sub	sp, #16
 80069bc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80069be:	4b0f      	ldr	r3, [pc, #60]	; (80069fc <Get_SerialNum+0x44>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80069c4:	4b0e      	ldr	r3, [pc, #56]	; (8006a00 <Get_SerialNum+0x48>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80069ca:	4b0e      	ldr	r3, [pc, #56]	; (8006a04 <Get_SerialNum+0x4c>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80069d0:	68fa      	ldr	r2, [r7, #12]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	4413      	add	r3, r2
 80069d6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d009      	beq.n	80069f2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80069de:	2208      	movs	r2, #8
 80069e0:	4909      	ldr	r1, [pc, #36]	; (8006a08 <Get_SerialNum+0x50>)
 80069e2:	68f8      	ldr	r0, [r7, #12]
 80069e4:	f000 f814 	bl	8006a10 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80069e8:	2204      	movs	r2, #4
 80069ea:	4908      	ldr	r1, [pc, #32]	; (8006a0c <Get_SerialNum+0x54>)
 80069ec:	68b8      	ldr	r0, [r7, #8]
 80069ee:	f000 f80f 	bl	8006a10 <IntToUnicode>
  }
}
 80069f2:	bf00      	nop
 80069f4:	3710      	adds	r7, #16
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}
 80069fa:	bf00      	nop
 80069fc:	1fff7a10 	.word	0x1fff7a10
 8006a00:	1fff7a14 	.word	0x1fff7a14
 8006a04:	1fff7a18 	.word	0x1fff7a18
 8006a08:	200000e2 	.word	0x200000e2
 8006a0c:	200000f2 	.word	0x200000f2

08006a10 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b087      	sub	sp, #28
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	60f8      	str	r0, [r7, #12]
 8006a18:	60b9      	str	r1, [r7, #8]
 8006a1a:	4613      	mov	r3, r2
 8006a1c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006a22:	2300      	movs	r3, #0
 8006a24:	75fb      	strb	r3, [r7, #23]
 8006a26:	e027      	b.n	8006a78 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	0f1b      	lsrs	r3, r3, #28
 8006a2c:	2b09      	cmp	r3, #9
 8006a2e:	d80b      	bhi.n	8006a48 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	0f1b      	lsrs	r3, r3, #28
 8006a34:	b2da      	uxtb	r2, r3
 8006a36:	7dfb      	ldrb	r3, [r7, #23]
 8006a38:	005b      	lsls	r3, r3, #1
 8006a3a:	4619      	mov	r1, r3
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	440b      	add	r3, r1
 8006a40:	3230      	adds	r2, #48	; 0x30
 8006a42:	b2d2      	uxtb	r2, r2
 8006a44:	701a      	strb	r2, [r3, #0]
 8006a46:	e00a      	b.n	8006a5e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	0f1b      	lsrs	r3, r3, #28
 8006a4c:	b2da      	uxtb	r2, r3
 8006a4e:	7dfb      	ldrb	r3, [r7, #23]
 8006a50:	005b      	lsls	r3, r3, #1
 8006a52:	4619      	mov	r1, r3
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	440b      	add	r3, r1
 8006a58:	3237      	adds	r2, #55	; 0x37
 8006a5a:	b2d2      	uxtb	r2, r2
 8006a5c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	011b      	lsls	r3, r3, #4
 8006a62:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006a64:	7dfb      	ldrb	r3, [r7, #23]
 8006a66:	005b      	lsls	r3, r3, #1
 8006a68:	3301      	adds	r3, #1
 8006a6a:	68ba      	ldr	r2, [r7, #8]
 8006a6c:	4413      	add	r3, r2
 8006a6e:	2200      	movs	r2, #0
 8006a70:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006a72:	7dfb      	ldrb	r3, [r7, #23]
 8006a74:	3301      	adds	r3, #1
 8006a76:	75fb      	strb	r3, [r7, #23]
 8006a78:	7dfa      	ldrb	r2, [r7, #23]
 8006a7a:	79fb      	ldrb	r3, [r7, #7]
 8006a7c:	429a      	cmp	r2, r3
 8006a7e:	d3d3      	bcc.n	8006a28 <IntToUnicode+0x18>
  }
}
 8006a80:	bf00      	nop
 8006a82:	bf00      	nop
 8006a84:	371c      	adds	r7, #28
 8006a86:	46bd      	mov	sp, r7
 8006a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8c:	4770      	bx	lr
	...

08006a90 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b08a      	sub	sp, #40	; 0x28
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a98:	f107 0314 	add.w	r3, r7, #20
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	601a      	str	r2, [r3, #0]
 8006aa0:	605a      	str	r2, [r3, #4]
 8006aa2:	609a      	str	r2, [r3, #8]
 8006aa4:	60da      	str	r2, [r3, #12]
 8006aa6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006ab0:	d13a      	bne.n	8006b28 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	613b      	str	r3, [r7, #16]
 8006ab6:	4b1e      	ldr	r3, [pc, #120]	; (8006b30 <HAL_PCD_MspInit+0xa0>)
 8006ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aba:	4a1d      	ldr	r2, [pc, #116]	; (8006b30 <HAL_PCD_MspInit+0xa0>)
 8006abc:	f043 0301 	orr.w	r3, r3, #1
 8006ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8006ac2:	4b1b      	ldr	r3, [pc, #108]	; (8006b30 <HAL_PCD_MspInit+0xa0>)
 8006ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ac6:	f003 0301 	and.w	r3, r3, #1
 8006aca:	613b      	str	r3, [r7, #16]
 8006acc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006ace:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006ad2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ad4:	2302      	movs	r3, #2
 8006ad6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006adc:	2303      	movs	r3, #3
 8006ade:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006ae0:	230a      	movs	r3, #10
 8006ae2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006ae4:	f107 0314 	add.w	r3, r7, #20
 8006ae8:	4619      	mov	r1, r3
 8006aea:	4812      	ldr	r0, [pc, #72]	; (8006b34 <HAL_PCD_MspInit+0xa4>)
 8006aec:	f7fa f870 	bl	8000bd0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006af0:	4b0f      	ldr	r3, [pc, #60]	; (8006b30 <HAL_PCD_MspInit+0xa0>)
 8006af2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006af4:	4a0e      	ldr	r2, [pc, #56]	; (8006b30 <HAL_PCD_MspInit+0xa0>)
 8006af6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006afa:	6353      	str	r3, [r2, #52]	; 0x34
 8006afc:	2300      	movs	r3, #0
 8006afe:	60fb      	str	r3, [r7, #12]
 8006b00:	4b0b      	ldr	r3, [pc, #44]	; (8006b30 <HAL_PCD_MspInit+0xa0>)
 8006b02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b04:	4a0a      	ldr	r2, [pc, #40]	; (8006b30 <HAL_PCD_MspInit+0xa0>)
 8006b06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006b0a:	6453      	str	r3, [r2, #68]	; 0x44
 8006b0c:	4b08      	ldr	r3, [pc, #32]	; (8006b30 <HAL_PCD_MspInit+0xa0>)
 8006b0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b14:	60fb      	str	r3, [r7, #12]
 8006b16:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006b18:	2200      	movs	r2, #0
 8006b1a:	2100      	movs	r1, #0
 8006b1c:	2043      	movs	r0, #67	; 0x43
 8006b1e:	f7fa f820 	bl	8000b62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006b22:	2043      	movs	r0, #67	; 0x43
 8006b24:	f7fa f839 	bl	8000b9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006b28:	bf00      	nop
 8006b2a:	3728      	adds	r7, #40	; 0x28
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}
 8006b30:	40023800 	.word	0x40023800
 8006b34:	40020000 	.word	0x40020000

08006b38 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b082      	sub	sp, #8
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006b4c:	4619      	mov	r1, r3
 8006b4e:	4610      	mov	r0, r2
 8006b50:	f7fe fb7f 	bl	8005252 <USBD_LL_SetupStage>
}
 8006b54:	bf00      	nop
 8006b56:	3708      	adds	r7, #8
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bd80      	pop	{r7, pc}

08006b5c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b082      	sub	sp, #8
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
 8006b64:	460b      	mov	r3, r1
 8006b66:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8006b6e:	78fa      	ldrb	r2, [r7, #3]
 8006b70:	6879      	ldr	r1, [r7, #4]
 8006b72:	4613      	mov	r3, r2
 8006b74:	00db      	lsls	r3, r3, #3
 8006b76:	4413      	add	r3, r2
 8006b78:	009b      	lsls	r3, r3, #2
 8006b7a:	440b      	add	r3, r1
 8006b7c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8006b80:	681a      	ldr	r2, [r3, #0]
 8006b82:	78fb      	ldrb	r3, [r7, #3]
 8006b84:	4619      	mov	r1, r3
 8006b86:	f7fe fbb9 	bl	80052fc <USBD_LL_DataOutStage>
}
 8006b8a:	bf00      	nop
 8006b8c:	3708      	adds	r7, #8
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}

08006b92 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b92:	b580      	push	{r7, lr}
 8006b94:	b082      	sub	sp, #8
 8006b96:	af00      	add	r7, sp, #0
 8006b98:	6078      	str	r0, [r7, #4]
 8006b9a:	460b      	mov	r3, r1
 8006b9c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8006ba4:	78fa      	ldrb	r2, [r7, #3]
 8006ba6:	6879      	ldr	r1, [r7, #4]
 8006ba8:	4613      	mov	r3, r2
 8006baa:	00db      	lsls	r3, r3, #3
 8006bac:	4413      	add	r3, r2
 8006bae:	009b      	lsls	r3, r3, #2
 8006bb0:	440b      	add	r3, r1
 8006bb2:	334c      	adds	r3, #76	; 0x4c
 8006bb4:	681a      	ldr	r2, [r3, #0]
 8006bb6:	78fb      	ldrb	r3, [r7, #3]
 8006bb8:	4619      	mov	r1, r3
 8006bba:	f7fe fc52 	bl	8005462 <USBD_LL_DataInStage>
}
 8006bbe:	bf00      	nop
 8006bc0:	3708      	adds	r7, #8
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}

08006bc6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006bc6:	b580      	push	{r7, lr}
 8006bc8:	b082      	sub	sp, #8
 8006bca:	af00      	add	r7, sp, #0
 8006bcc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	f7fe fd86 	bl	80056e6 <USBD_LL_SOF>
}
 8006bda:	bf00      	nop
 8006bdc:	3708      	adds	r7, #8
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}

08006be2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006be2:	b580      	push	{r7, lr}
 8006be4:	b084      	sub	sp, #16
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006bea:	2301      	movs	r3, #1
 8006bec:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	68db      	ldr	r3, [r3, #12]
 8006bf2:	2b02      	cmp	r3, #2
 8006bf4:	d001      	beq.n	8006bfa <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8006bf6:	f7f9 fd5b 	bl	80006b0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006c00:	7bfa      	ldrb	r2, [r7, #15]
 8006c02:	4611      	mov	r1, r2
 8006c04:	4618      	mov	r0, r3
 8006c06:	f7fe fd30 	bl	800566a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006c10:	4618      	mov	r0, r3
 8006c12:	f7fe fcd8 	bl	80055c6 <USBD_LL_Reset>
}
 8006c16:	bf00      	nop
 8006c18:	3710      	adds	r7, #16
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}
	...

08006c20 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b082      	sub	sp, #8
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f7fe fd2b 	bl	800568a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	687a      	ldr	r2, [r7, #4]
 8006c40:	6812      	ldr	r2, [r2, #0]
 8006c42:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006c46:	f043 0301 	orr.w	r3, r3, #1
 8006c4a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6a1b      	ldr	r3, [r3, #32]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d005      	beq.n	8006c60 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006c54:	4b04      	ldr	r3, [pc, #16]	; (8006c68 <HAL_PCD_SuspendCallback+0x48>)
 8006c56:	691b      	ldr	r3, [r3, #16]
 8006c58:	4a03      	ldr	r2, [pc, #12]	; (8006c68 <HAL_PCD_SuspendCallback+0x48>)
 8006c5a:	f043 0306 	orr.w	r3, r3, #6
 8006c5e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006c60:	bf00      	nop
 8006c62:	3708      	adds	r7, #8
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}
 8006c68:	e000ed00 	.word	0xe000ed00

08006c6c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b082      	sub	sp, #8
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f7fe fd1b 	bl	80056b6 <USBD_LL_Resume>
}
 8006c80:	bf00      	nop
 8006c82:	3708      	adds	r7, #8
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}

08006c88 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b082      	sub	sp, #8
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
 8006c90:	460b      	mov	r3, r1
 8006c92:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006c9a:	78fa      	ldrb	r2, [r7, #3]
 8006c9c:	4611      	mov	r1, r2
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f7fe fd73 	bl	800578a <USBD_LL_IsoOUTIncomplete>
}
 8006ca4:	bf00      	nop
 8006ca6:	3708      	adds	r7, #8
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bd80      	pop	{r7, pc}

08006cac <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b082      	sub	sp, #8
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
 8006cb4:	460b      	mov	r3, r1
 8006cb6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006cbe:	78fa      	ldrb	r2, [r7, #3]
 8006cc0:	4611      	mov	r1, r2
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f7fe fd2f 	bl	8005726 <USBD_LL_IsoINIncomplete>
}
 8006cc8:	bf00      	nop
 8006cca:	3708      	adds	r7, #8
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}

08006cd0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b082      	sub	sp, #8
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006cde:	4618      	mov	r0, r3
 8006ce0:	f7fe fd85 	bl	80057ee <USBD_LL_DevConnected>
}
 8006ce4:	bf00      	nop
 8006ce6:	3708      	adds	r7, #8
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}

08006cec <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b082      	sub	sp, #8
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f7fe fd82 	bl	8005804 <USBD_LL_DevDisconnected>
}
 8006d00:	bf00      	nop
 8006d02:	3708      	adds	r7, #8
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}

08006d08 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b082      	sub	sp, #8
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	781b      	ldrb	r3, [r3, #0]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d13c      	bne.n	8006d92 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006d18:	4a20      	ldr	r2, [pc, #128]	; (8006d9c <USBD_LL_Init+0x94>)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	4a1e      	ldr	r2, [pc, #120]	; (8006d9c <USBD_LL_Init+0x94>)
 8006d24:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006d28:	4b1c      	ldr	r3, [pc, #112]	; (8006d9c <USBD_LL_Init+0x94>)
 8006d2a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006d2e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006d30:	4b1a      	ldr	r3, [pc, #104]	; (8006d9c <USBD_LL_Init+0x94>)
 8006d32:	2204      	movs	r2, #4
 8006d34:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006d36:	4b19      	ldr	r3, [pc, #100]	; (8006d9c <USBD_LL_Init+0x94>)
 8006d38:	2202      	movs	r2, #2
 8006d3a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006d3c:	4b17      	ldr	r3, [pc, #92]	; (8006d9c <USBD_LL_Init+0x94>)
 8006d3e:	2200      	movs	r2, #0
 8006d40:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006d42:	4b16      	ldr	r3, [pc, #88]	; (8006d9c <USBD_LL_Init+0x94>)
 8006d44:	2202      	movs	r2, #2
 8006d46:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006d48:	4b14      	ldr	r3, [pc, #80]	; (8006d9c <USBD_LL_Init+0x94>)
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006d4e:	4b13      	ldr	r3, [pc, #76]	; (8006d9c <USBD_LL_Init+0x94>)
 8006d50:	2200      	movs	r2, #0
 8006d52:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006d54:	4b11      	ldr	r3, [pc, #68]	; (8006d9c <USBD_LL_Init+0x94>)
 8006d56:	2200      	movs	r2, #0
 8006d58:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006d5a:	4b10      	ldr	r3, [pc, #64]	; (8006d9c <USBD_LL_Init+0x94>)
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006d60:	4b0e      	ldr	r3, [pc, #56]	; (8006d9c <USBD_LL_Init+0x94>)
 8006d62:	2200      	movs	r2, #0
 8006d64:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006d66:	480d      	ldr	r0, [pc, #52]	; (8006d9c <USBD_LL_Init+0x94>)
 8006d68:	f7fa f9fa 	bl	8001160 <HAL_PCD_Init>
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d001      	beq.n	8006d76 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8006d72:	f7f9 fc9d 	bl	80006b0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006d76:	2180      	movs	r1, #128	; 0x80
 8006d78:	4808      	ldr	r0, [pc, #32]	; (8006d9c <USBD_LL_Init+0x94>)
 8006d7a:	f7fb fc52 	bl	8002622 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006d7e:	2240      	movs	r2, #64	; 0x40
 8006d80:	2100      	movs	r1, #0
 8006d82:	4806      	ldr	r0, [pc, #24]	; (8006d9c <USBD_LL_Init+0x94>)
 8006d84:	f7fb fc06 	bl	8002594 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006d88:	2280      	movs	r2, #128	; 0x80
 8006d8a:	2101      	movs	r1, #1
 8006d8c:	4803      	ldr	r0, [pc, #12]	; (8006d9c <USBD_LL_Init+0x94>)
 8006d8e:	f7fb fc01 	bl	8002594 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006d92:	2300      	movs	r3, #0
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	3708      	adds	r7, #8
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bd80      	pop	{r7, pc}
 8006d9c:	20001650 	.word	0x20001650

08006da0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b084      	sub	sp, #16
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006da8:	2300      	movs	r3, #0
 8006daa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006dac:	2300      	movs	r3, #0
 8006dae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006db6:	4618      	mov	r0, r3
 8006db8:	f7fa faef 	bl	800139a <HAL_PCD_Start>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006dc0:	7bfb      	ldrb	r3, [r7, #15]
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f000 f942 	bl	800704c <USBD_Get_USB_Status>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006dcc:	7bbb      	ldrb	r3, [r7, #14]
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	3710      	adds	r7, #16
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}

08006dd6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006dd6:	b580      	push	{r7, lr}
 8006dd8:	b084      	sub	sp, #16
 8006dda:	af00      	add	r7, sp, #0
 8006ddc:	6078      	str	r0, [r7, #4]
 8006dde:	4608      	mov	r0, r1
 8006de0:	4611      	mov	r1, r2
 8006de2:	461a      	mov	r2, r3
 8006de4:	4603      	mov	r3, r0
 8006de6:	70fb      	strb	r3, [r7, #3]
 8006de8:	460b      	mov	r3, r1
 8006dea:	70bb      	strb	r3, [r7, #2]
 8006dec:	4613      	mov	r3, r2
 8006dee:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006df0:	2300      	movs	r3, #0
 8006df2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006df4:	2300      	movs	r3, #0
 8006df6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8006dfe:	78bb      	ldrb	r3, [r7, #2]
 8006e00:	883a      	ldrh	r2, [r7, #0]
 8006e02:	78f9      	ldrb	r1, [r7, #3]
 8006e04:	f7fa ffc0 	bl	8001d88 <HAL_PCD_EP_Open>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006e0c:	7bfb      	ldrb	r3, [r7, #15]
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f000 f91c 	bl	800704c <USBD_Get_USB_Status>
 8006e14:	4603      	mov	r3, r0
 8006e16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006e18:	7bbb      	ldrb	r3, [r7, #14]
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3710      	adds	r7, #16
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}

08006e22 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006e22:	b580      	push	{r7, lr}
 8006e24:	b084      	sub	sp, #16
 8006e26:	af00      	add	r7, sp, #0
 8006e28:	6078      	str	r0, [r7, #4]
 8006e2a:	460b      	mov	r3, r1
 8006e2c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e32:	2300      	movs	r3, #0
 8006e34:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006e3c:	78fa      	ldrb	r2, [r7, #3]
 8006e3e:	4611      	mov	r1, r2
 8006e40:	4618      	mov	r0, r3
 8006e42:	f7fb f809 	bl	8001e58 <HAL_PCD_EP_Close>
 8006e46:	4603      	mov	r3, r0
 8006e48:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006e4a:	7bfb      	ldrb	r3, [r7, #15]
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	f000 f8fd 	bl	800704c <USBD_Get_USB_Status>
 8006e52:	4603      	mov	r3, r0
 8006e54:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006e56:	7bbb      	ldrb	r3, [r7, #14]
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	3710      	adds	r7, #16
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}

08006e60 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b084      	sub	sp, #16
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
 8006e68:	460b      	mov	r3, r1
 8006e6a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e70:	2300      	movs	r3, #0
 8006e72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006e7a:	78fa      	ldrb	r2, [r7, #3]
 8006e7c:	4611      	mov	r1, r2
 8006e7e:	4618      	mov	r0, r3
 8006e80:	f7fb f8e1 	bl	8002046 <HAL_PCD_EP_SetStall>
 8006e84:	4603      	mov	r3, r0
 8006e86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006e88:	7bfb      	ldrb	r3, [r7, #15]
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f000 f8de 	bl	800704c <USBD_Get_USB_Status>
 8006e90:	4603      	mov	r3, r0
 8006e92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006e94:	7bbb      	ldrb	r3, [r7, #14]
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	3710      	adds	r7, #16
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}

08006e9e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006e9e:	b580      	push	{r7, lr}
 8006ea0:	b084      	sub	sp, #16
 8006ea2:	af00      	add	r7, sp, #0
 8006ea4:	6078      	str	r0, [r7, #4]
 8006ea6:	460b      	mov	r3, r1
 8006ea8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006eb8:	78fa      	ldrb	r2, [r7, #3]
 8006eba:	4611      	mov	r1, r2
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	f7fb f926 	bl	800210e <HAL_PCD_EP_ClrStall>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006ec6:	7bfb      	ldrb	r3, [r7, #15]
 8006ec8:	4618      	mov	r0, r3
 8006eca:	f000 f8bf 	bl	800704c <USBD_Get_USB_Status>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006ed2:	7bbb      	ldrb	r3, [r7, #14]
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	3710      	adds	r7, #16
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd80      	pop	{r7, pc}

08006edc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b085      	sub	sp, #20
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
 8006ee4:	460b      	mov	r3, r1
 8006ee6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006eee:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006ef0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	da0b      	bge.n	8006f10 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006ef8:	78fb      	ldrb	r3, [r7, #3]
 8006efa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006efe:	68f9      	ldr	r1, [r7, #12]
 8006f00:	4613      	mov	r3, r2
 8006f02:	00db      	lsls	r3, r3, #3
 8006f04:	4413      	add	r3, r2
 8006f06:	009b      	lsls	r3, r3, #2
 8006f08:	440b      	add	r3, r1
 8006f0a:	333e      	adds	r3, #62	; 0x3e
 8006f0c:	781b      	ldrb	r3, [r3, #0]
 8006f0e:	e00b      	b.n	8006f28 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006f10:	78fb      	ldrb	r3, [r7, #3]
 8006f12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f16:	68f9      	ldr	r1, [r7, #12]
 8006f18:	4613      	mov	r3, r2
 8006f1a:	00db      	lsls	r3, r3, #3
 8006f1c:	4413      	add	r3, r2
 8006f1e:	009b      	lsls	r3, r3, #2
 8006f20:	440b      	add	r3, r1
 8006f22:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8006f26:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	3714      	adds	r7, #20
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f32:	4770      	bx	lr

08006f34 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b084      	sub	sp, #16
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
 8006f3c:	460b      	mov	r3, r1
 8006f3e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f40:	2300      	movs	r3, #0
 8006f42:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f44:	2300      	movs	r3, #0
 8006f46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006f4e:	78fa      	ldrb	r2, [r7, #3]
 8006f50:	4611      	mov	r1, r2
 8006f52:	4618      	mov	r0, r3
 8006f54:	f7fa fef3 	bl	8001d3e <HAL_PCD_SetAddress>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006f5c:	7bfb      	ldrb	r3, [r7, #15]
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f000 f874 	bl	800704c <USBD_Get_USB_Status>
 8006f64:	4603      	mov	r3, r0
 8006f66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006f68:	7bbb      	ldrb	r3, [r7, #14]
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3710      	adds	r7, #16
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}

08006f72 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006f72:	b580      	push	{r7, lr}
 8006f74:	b086      	sub	sp, #24
 8006f76:	af00      	add	r7, sp, #0
 8006f78:	60f8      	str	r0, [r7, #12]
 8006f7a:	607a      	str	r2, [r7, #4]
 8006f7c:	603b      	str	r3, [r7, #0]
 8006f7e:	460b      	mov	r3, r1
 8006f80:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f82:	2300      	movs	r3, #0
 8006f84:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f86:	2300      	movs	r3, #0
 8006f88:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8006f90:	7af9      	ldrb	r1, [r7, #11]
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	687a      	ldr	r2, [r7, #4]
 8006f96:	f7fb f80c 	bl	8001fb2 <HAL_PCD_EP_Transmit>
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006f9e:	7dfb      	ldrb	r3, [r7, #23]
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	f000 f853 	bl	800704c <USBD_Get_USB_Status>
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006faa:	7dbb      	ldrb	r3, [r7, #22]
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	3718      	adds	r7, #24
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	bd80      	pop	{r7, pc}

08006fb4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b086      	sub	sp, #24
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	60f8      	str	r0, [r7, #12]
 8006fbc:	607a      	str	r2, [r7, #4]
 8006fbe:	603b      	str	r3, [r7, #0]
 8006fc0:	460b      	mov	r3, r1
 8006fc2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8006fd2:	7af9      	ldrb	r1, [r7, #11]
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	687a      	ldr	r2, [r7, #4]
 8006fd8:	f7fa ff88 	bl	8001eec <HAL_PCD_EP_Receive>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006fe0:	7dfb      	ldrb	r3, [r7, #23]
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f000 f832 	bl	800704c <USBD_Get_USB_Status>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006fec:	7dbb      	ldrb	r3, [r7, #22]
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3718      	adds	r7, #24
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}

08006ff6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006ff6:	b580      	push	{r7, lr}
 8006ff8:	b082      	sub	sp, #8
 8006ffa:	af00      	add	r7, sp, #0
 8006ffc:	6078      	str	r0, [r7, #4]
 8006ffe:	460b      	mov	r3, r1
 8007000:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007008:	78fa      	ldrb	r2, [r7, #3]
 800700a:	4611      	mov	r1, r2
 800700c:	4618      	mov	r0, r3
 800700e:	f7fa ffb8 	bl	8001f82 <HAL_PCD_EP_GetRxCount>
 8007012:	4603      	mov	r3, r0
}
 8007014:	4618      	mov	r0, r3
 8007016:	3708      	adds	r7, #8
 8007018:	46bd      	mov	sp, r7
 800701a:	bd80      	pop	{r7, pc}

0800701c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800701c:	b480      	push	{r7}
 800701e:	b083      	sub	sp, #12
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007024:	4b03      	ldr	r3, [pc, #12]	; (8007034 <USBD_static_malloc+0x18>)
}
 8007026:	4618      	mov	r0, r3
 8007028:	370c      	adds	r7, #12
 800702a:	46bd      	mov	sp, r7
 800702c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007030:	4770      	bx	lr
 8007032:	bf00      	nop
 8007034:	20001b5c 	.word	0x20001b5c

08007038 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007038:	b480      	push	{r7}
 800703a:	b083      	sub	sp, #12
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]

}
 8007040:	bf00      	nop
 8007042:	370c      	adds	r7, #12
 8007044:	46bd      	mov	sp, r7
 8007046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704a:	4770      	bx	lr

0800704c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800704c:	b480      	push	{r7}
 800704e:	b085      	sub	sp, #20
 8007050:	af00      	add	r7, sp, #0
 8007052:	4603      	mov	r3, r0
 8007054:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007056:	2300      	movs	r3, #0
 8007058:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800705a:	79fb      	ldrb	r3, [r7, #7]
 800705c:	2b03      	cmp	r3, #3
 800705e:	d817      	bhi.n	8007090 <USBD_Get_USB_Status+0x44>
 8007060:	a201      	add	r2, pc, #4	; (adr r2, 8007068 <USBD_Get_USB_Status+0x1c>)
 8007062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007066:	bf00      	nop
 8007068:	08007079 	.word	0x08007079
 800706c:	0800707f 	.word	0x0800707f
 8007070:	08007085 	.word	0x08007085
 8007074:	0800708b 	.word	0x0800708b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007078:	2300      	movs	r3, #0
 800707a:	73fb      	strb	r3, [r7, #15]
    break;
 800707c:	e00b      	b.n	8007096 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800707e:	2303      	movs	r3, #3
 8007080:	73fb      	strb	r3, [r7, #15]
    break;
 8007082:	e008      	b.n	8007096 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007084:	2301      	movs	r3, #1
 8007086:	73fb      	strb	r3, [r7, #15]
    break;
 8007088:	e005      	b.n	8007096 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800708a:	2303      	movs	r3, #3
 800708c:	73fb      	strb	r3, [r7, #15]
    break;
 800708e:	e002      	b.n	8007096 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007090:	2303      	movs	r3, #3
 8007092:	73fb      	strb	r3, [r7, #15]
    break;
 8007094:	bf00      	nop
  }
  return usb_status;
 8007096:	7bfb      	ldrb	r3, [r7, #15]
}
 8007098:	4618      	mov	r0, r3
 800709a:	3714      	adds	r7, #20
 800709c:	46bd      	mov	sp, r7
 800709e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a2:	4770      	bx	lr

080070a4 <__libc_init_array>:
 80070a4:	b570      	push	{r4, r5, r6, lr}
 80070a6:	4d0d      	ldr	r5, [pc, #52]	; (80070dc <__libc_init_array+0x38>)
 80070a8:	4c0d      	ldr	r4, [pc, #52]	; (80070e0 <__libc_init_array+0x3c>)
 80070aa:	1b64      	subs	r4, r4, r5
 80070ac:	10a4      	asrs	r4, r4, #2
 80070ae:	2600      	movs	r6, #0
 80070b0:	42a6      	cmp	r6, r4
 80070b2:	d109      	bne.n	80070c8 <__libc_init_array+0x24>
 80070b4:	4d0b      	ldr	r5, [pc, #44]	; (80070e4 <__libc_init_array+0x40>)
 80070b6:	4c0c      	ldr	r4, [pc, #48]	; (80070e8 <__libc_init_array+0x44>)
 80070b8:	f000 f820 	bl	80070fc <_init>
 80070bc:	1b64      	subs	r4, r4, r5
 80070be:	10a4      	asrs	r4, r4, #2
 80070c0:	2600      	movs	r6, #0
 80070c2:	42a6      	cmp	r6, r4
 80070c4:	d105      	bne.n	80070d2 <__libc_init_array+0x2e>
 80070c6:	bd70      	pop	{r4, r5, r6, pc}
 80070c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80070cc:	4798      	blx	r3
 80070ce:	3601      	adds	r6, #1
 80070d0:	e7ee      	b.n	80070b0 <__libc_init_array+0xc>
 80070d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80070d6:	4798      	blx	r3
 80070d8:	3601      	adds	r6, #1
 80070da:	e7f2      	b.n	80070c2 <__libc_init_array+0x1e>
 80070dc:	0800717c 	.word	0x0800717c
 80070e0:	0800717c 	.word	0x0800717c
 80070e4:	0800717c 	.word	0x0800717c
 80070e8:	08007180 	.word	0x08007180

080070ec <memset>:
 80070ec:	4402      	add	r2, r0
 80070ee:	4603      	mov	r3, r0
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d100      	bne.n	80070f6 <memset+0xa>
 80070f4:	4770      	bx	lr
 80070f6:	f803 1b01 	strb.w	r1, [r3], #1
 80070fa:	e7f9      	b.n	80070f0 <memset+0x4>

080070fc <_init>:
 80070fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070fe:	bf00      	nop
 8007100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007102:	bc08      	pop	{r3}
 8007104:	469e      	mov	lr, r3
 8007106:	4770      	bx	lr

08007108 <_fini>:
 8007108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800710a:	bf00      	nop
 800710c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800710e:	bc08      	pop	{r3}
 8007110:	469e      	mov	lr, r3
 8007112:	4770      	bx	lr
